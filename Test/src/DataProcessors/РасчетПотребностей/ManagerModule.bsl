
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура производит расчет потребностей
// Вызывается в фоновом задании из формы обработки РасчетПотребностей.
//
// Параметры:
//  Параметры					 - Структура - Параметры используемые для расчета, обязательные ключи:
//										* Период - период расчет потребностей,
//										* СпособПополнения - ПеречислениеСсылка.СпособыПополненияЗапасов - способ пополнения, по которому будет отобрана номенклатура,
//										* Настройки - НастройкиКомпоновкиДанных - настройки КД, содержащие отборы для расчета потребностей
//  ВременноеХранилищеРезультата - Строка	 - Возвращаемый в родительский сеанс параметр. Содержит рассчитанное дерево потребностей.
//
Процедура ПолучитьДанные(Параметры, ВременноеХранилищеРезультата) Экспорт

	Перем ОшибкаРасчета;

	КлючЗамера = Новый Массив;
	КлючЗамера.Добавить("Обработка.РасчетПотребностей.ПолучитьДанные");
    КлючЗамера.Добавить(Параметры.Рассчитывать);

	Начало 	  = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если НачалоДня(Параметры.Период.ДатаНачала) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ДатаОстатков = ТекущаяДатаСеанса();
	Иначе
		ДатаОстатков = Параметры.Период.ДатаНачала;
	КонецЕсли;  
	УстановитьПараметр(Параметры.Настройки, "ДатаОстатки", ДатаОстатков);
	УстановитьПараметр(Параметры.Настройки, "ДатаНачала", Параметры.Период.ДатаНачала);
	УстановитьПараметр(Параметры.Настройки, "ДатаОкончания", Параметры.Период.ДатаОкончания);
	УстановитьПараметр(Параметры.Настройки, "Склад", Параметры.Склад);
	УстановитьПараметр(Параметры.Настройки, "ПланироватьПеремещения", ЗначениеЗаполнено(Параметры.Склад));
	СпособПополнения = Новый СписокЗначений;
	Если Параметры.СпособПополнения = СпособПополненияЗакупка() 
		ИЛИ Параметры.СпособПополнения = СпособПополненияЗакупкаПереработка() Тогда
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Закупка);
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Переработка);
	ИначеЕсли Параметры.СпособПополнения = СпособПополненияПроизводство() Тогда
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Производство);
	Иначе
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Закупка);
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Переработка);
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Производство);
	КонецЕсли;
	УстановитьПараметр(Параметры.Настройки, "СпособПополнения", СпособПополнения);
	ПараметрКомпоновки = Параметры.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Контрагент"));
	Если ЗначениеЗаполнено(ПараметрКомпоновки.Значение) Тогда
		ВидыЦенКонтрагентов = ПолучитьАктуальныеВидЦенКонтрагента(Параметры.Период.ДатаНачала, ПараметрКомпоновки.Значение);
		УстановитьПараметр(Параметры.Настройки, "ВидыЦенКонтрагентов", ВидыЦенКонтрагентов);
	Иначе
		УстановитьПараметр(Параметры.Настройки, "ВидыЦенКонтрагентов", Новый СписокЗначений);
	КонецЕсли;
	Компания = Константы.Компания.Получить();
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		УстановитьПараметр(Параметры.Настройки, "Организация", ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация"));
	ИначеЕсли ЗначениеЗаполнено(Компания) Тогда 
		УстановитьПараметр(Параметры.Настройки, "Организация", Компания);
	КонецЕсли;
	ПараметрКомпоновки = Параметры.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	Если ПараметрКомпоновки <> Неопределено И ПараметрКомпоновки.Использование Тогда
		Параметры.Вставить("Организация", ПараметрКомпоновки.Значение);
	КонецЕсли;

	РаботаССегментами.ВключитьОтборПоСегментуНоменклатурыВСКД(Параметры.Настройки);

	ДобавитьОтборПоСоставуЗаказов(Параметры);
	ОбновитьОтборПоСостояниям(Параметры);

	Если СтрНачинаетсяС(Параметры.Рассчитывать, РассчитыватьПоПродажам()) Тогда

		СхемаКомпоновкиДанных = Обработки.РасчетПотребностей.ПолучитьМакет("СхемаКомпоновкиДанныхПродажи");
		
		Если Параметры.Рассчитывать = РассчитыватьПоПродажам() Тогда
			ТаблицаПрогноза = ТаблицаПрогнозаПоДням(Параметры);
		ИначеЕсли Параметры.МетодПрогноза = МетодПрогнозаСредненедельныеПродажи() Тогда

			ТаблицаПрогноза = ТаблицаПрогнозаПоДнямНедели(Параметры);
			КлючЗамера.Добавить(Параметры.МетодПрогноза)

		Иначе

			ТаблицаПрогноза = ТаблицаПрогнозаРасширение(Параметры, ОшибкаРасчета);
			КлючЗамера.Добавить(Параметры.МетодПрогноза)
			
		КонецЕсли;
		
		ТаблицаПрогноза.Свернуть("Организация, Склад, Номенклатура, Характеристика, Дата", "Количество");
		УстановитьПараметр(Параметры.Настройки, "ТаблицаПрогноза", 				ТаблицаПрогноза);

		УстановитьПараметр(Параметры.Настройки, "УчитыватьСрокПоставки", 		Параметры.УчитыватьСрокПоставки);
		УстановитьПараметр(Параметры.Настройки, "МетодРасчетаСтраховогоЗапаса", Параметры.МетодРасчетаСтраховогоЗапаса);
		УстановитьПараметр(Параметры.Настройки, "СтраховойЗапас", 				Параметры.СтраховойЗапас);
		
	Иначе
		СхемаКомпоновкиДанных = Обработки.РасчетПотребностей.ПолучитьМакет("СхемаКомпоновкиДанных");
	КонецЕсли;
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Параметры.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	// расчет начала периода потребностей
	ОдинДень	  			= 86400;
	Периодичность 			= Параметры.Периодичность;
	ТекущаяДата   			= Параметры.Период.ДатаНачала;
	
	ВсегоДней 	  			= ВсегоДней(Параметры.Период.ДатаОкончания, ТекущаяДата);
    ДатаНачалаПоПериоду		= ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(ТекущаяДата, Периодичность);
	СмещениеДаты			= ВсегоДней(ТекущаяДата, ДатаНачалаПоПериоду) - 1;
    СоответствиеПериодов	= Новый Соответствие;

	Если Периодичность <> Перечисления.Периодичность.День Тогда
	
		Для СчетчикДней = 1 По ВсегоДней Цикл

			ДатаРасчета	 = НачалоДня(ТекущаяДата + (СчетчикДней - 1) * ОдинДень);
			День		 = ДатаРасчета - СмещениеДаты * ОдинДень;
			ДатаПрогноза = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(День, Периодичность) + СмещениеДаты * ОдинДень;
			
			СоответствиеПериодов.Вставить(ДатаРасчета, ДатаПрогноза);
			
		КонецЦикла;
		
		Для Каждого СтрокаРезультата Из ТаблицаРезультат Цикл

			ДатаНачалаПериода = СоответствиеПериодов.Получить(СтрокаРезультата.Период);
			
			Если ДатаНачалаПериода <> Неопределено Тогда
				СтрокаРезультата.Период = ДатаНачалаПериода;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	РассчитатьГрафикДвиженияЗапасов(ТаблицаРезультат);
	УчестьРазмещенныеЗаказы(ТаблицаРезультат, Параметры);
	
	ДеревоРезультат = СформироватьДерево(ТаблицаРезультат, Параметры);
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Дерево", 	 	 ДеревоРезультат);
	СтруктураРезультат.Вставить("Параметры", 	 Параметры);
	СтруктураРезультат.Вставить("ОшибкаРасчета", ОшибкаРасчета);

	ПоместитьВоВременноеХранилище(СтруктураРезультат, ВременноеХранилищеРезультата);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(СтрСоединить(КлючЗамера, "."), Начало);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ГруппировкиОбщее

Функция СформироватьДерево(ТаблицаДанных, Параметры)
	
	ТипКолонкиЧисло				= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));

	ИмяГруппировкиНоменклатура  = Новый Массив;
	ИмяГруппировкиНоменклатура.Добавить(ИмяГруппировкиНоменклатура());

	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		ИмяГруппировкиНоменклатура.Добавить(ИмяГруппировкиХарактеристика());
	КонецЕсли; 
	
	ИмяГруппировкиНоменклатура.Добавить(ИмяГруппировкиЕдиницаИзмерения());
	ИмяГруппировкиНоменклатура 	= СтрСоединить(ИмяГруппировкиНоменклатура, ",");
	
	Группировки				   	= Новый Массив;
	
	Если Параметры.Группировать = ГруппировкаНоменклатура() Тогда

		ДобавитьГруппировку(Группировки, ИмяГруппировкиНоменклатура)
		
	ИначеЕсли Параметры.Группировать = ГруппировкаНоменклатураДень() Тогда

		ДобавитьГруппировку(Группировки, ИмяГруппировкиНоменклатура);
		ДобавитьГруппировку(Группировки, ИмяГруппировкиПериод());
		
	ИначеЕсли Параметры.Группировать = ГруппировкаДеньНоменклатура() Тогда

		ДобавитьГруппировку(Группировки, ИмяГруппировкиПериод());
		ДобавитьГруппировку(Группировки, ИмяГруппировкиНоменклатура);
		
	ИначеЕсли Параметры.Группировать = ГруппировкаЗаказНоменклатура() Тогда      
		
		ДобавитьГруппировку(Группировки, ИмяГруппировкиЗаказ());
		ДобавитьГруппировку(Группировки, ИмяГруппировкиНоменклатура);
		
	КонецЕсли;
	
	Если Параметры.ПоЗаказам И НЕ Параметры.Группировать = ГруппировкаЗаказНоменклатура() Тогда
		ДобавитьГруппировку(Группировки, ИмяГруппировкиЗаказ());
	КонецЕсли; 
	
	Если Параметры.Группировать = ГруппировкаНоменклатура() Тогда
		ДобавитьГруппировку(Группировки, ИмяГруппировкиПериод());
	КонецЕсли; 
	
	ВыражениеПоляГруппировка   = Новый Массив;

	Для Каждого Группировка Из Группировки Цикл
		
		ВыражениеПоляГруппировка.Добавить(
			СтрШаблон("КОГДА Уровень() = %1 ТОГДА ""%2""", Группировки.Найти(Группировка), Группировка.Имя));
		
	КонецЦикла;
	
	ВычисляемыеПоля = Новый Структура(
		"ИмяГруппировки", 
		СтрШаблон("ВЫБОР %1 ИНАЧЕ """" КОНЕЦ", СтрСоединить(ВыражениеПоляГруппировка, " ")));
		
	СхемаКомпоновкиДанных 			  = СоздатьСхемуКомпоновкиДанных(ТаблицаДанных, Группировки, ВычисляемыеПоля);
	КомпоновщикНастроек   			  = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных)); 
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	НастройкиКомпоновщика			= КомпоновщикНастроек.ПолучитьНастройки();
	
	Если Параметры.ОбеспечениеЗаСчетОстатка Тогда
		УстановитьОтборКомпоновщика(НастройкиКомпоновщика, "Потребность", 0);
	КонецЕсли;
	
	ДобавитьЭлементыУпорядочивания(НастройкиКомпоновщика, Группировки);
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных 			  = КомпоновщикМакетаКомпоновкиДанных.Выполнить(
		СхемаКомпоновкиДанных, 
		НастройкиКомпоновщика,
		,
		, 
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), 
		Ложь);

	ПроцессорКомпоновки 			 = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных, Новый Структура("Данные", ТаблицаДанных));
	
	Дерево 							 = Новый ДеревоЗначений;
	ПроцессорВывода 				 = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Дерево);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Дерево.Колонки.Добавить("Представление", 		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Дерево.Колонки.Добавить("ПорядокЗаказа", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Дерево.Колонки.Добавить("ДатаЗаказа", 			Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Дерево.Колонки.Добавить("ЭтоПополнениеЗапасов", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("НевозможноОбеспечить", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Дерево.Колонки.Добавить("Сообщения");
	
	Если Параметры.Группировать <> ГруппировкаНоменклатура() Тогда
		СортироватьДеревоРекурсивно(Дерево, , , Истина);
	КонецЕсли;
	
	Если Параметры.Группировать = ГруппировкаНоменклатура() Тогда
		
		ПустаяДата			= Дата("00010101");
		ОдинДень			= 86400;
		ТекущийПериод 		= Параметры.Период.ДатаНачала;
		Периодичность		= Параметры.Периодичность; 
		
		ИменаКолонокПоДатам = Новый Соответствие;
        ИменаКолонокПоДатам.Вставить(ПустаяДата, ИмяКолонкиПериод(ПустаяДата));
		
		Пока НачалоДня(ТекущийПериод) <= НачалоДня(Параметры.Период.ДатаОкончания) Цикл
			
			ИмяКолонки 		= ИмяКолонкиПериод(ТекущийПериод);
			СледующийПериод = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(ТекущийПериод, Периодичность, 1);
			
			Дерево.Колонки.Добавить(ИмяКолонки, ТипКолонкиЧисло);
			
			Пока ТекущийПериод <= СледующийПериод Цикл
				
				ИменаКолонокПоДатам.Вставить(НачалоДня(ТекущийПериод), ИмяКолонки);
				ТекущийПериод = ТекущийПериод + ОдинДень;
				
			КонецЦикла;
			
			ТекущийПериод = СледующийПериод + ОдинДень;
			
		КонецЦикла;                     
		
		Дерево.Колонки.Добавить("Пополнение", ТипКолонкиЧисло);
		
		Если Параметры.ПоЗаказам Тогда
			ПеренестиПериодВКолонкиПоЗаказамРекурсивно(Дерево.Строки, ИменаКолонокПоДатам);
		Иначе
			ПеренестиПериодВКолонкиРекурсивно(Дерево.Строки, ИменаКолонокПоДатам);
		КонецЕсли;
		
		МассивКолонок 	= КолонкиПериодов(Дерево.Колонки, Истина);
		
		РассчитатьИтогиНоменклатураРекурсивно(Параметры, Дерево.Строки, МассивКолонок);
		
	ИначеЕсли Параметры.Группировать = ГруппировкаНоменклатураДень() Тогда 

		СуммироватьДетальныеЗаписиРекурсивно(Дерево.Строки);
		РассчитатьИтогиНоменклатураДеньРекурсивно(Дерево.Строки, Дерево.Колонки, Параметры);
		
	ИначеЕсли Параметры.Группировать = ГруппировкаДеньНоменклатура() Тогда 

		СуммироватьДетальныеЗаписиРекурсивно(Дерево.Строки);
		ОстаткиПотребность = Новый ТаблицаЗначений;
		ОстаткиПотребность.Колонки.Добавить("Заказ");
		ОстаткиПотребность.Колонки.Добавить("Номенклатура");
		ОстаткиПотребность.Колонки.Добавить("Характеристика");
		ОстаткиПотребность.Колонки.Добавить("Остаток", ТипКолонкиЧисло);
		Если Параметры.ПоЗаказам Тогда
			ЗаполнитьОстаткиПотребностиДеньНоменклатураРекурсивно(Дерево.Строки, ОстаткиПотребность);
			ОстаткиПотребность.Свернуть("Заказ, Номенклатура, Характеристика", "Остаток");
		КонецЕсли; 
		РассчитатьИтогиДеньНоменклатураРекурсивно(Дерево.Строки, Дерево.Колонки, Параметры, ОстаткиПотребность);
		
	ИначеЕсли Параметры.Группировать = ГруппировкаЗаказНоменклатура() Тогда 

		СуммироватьДетальныеЗаписиРекурсивно(Дерево.Строки);
		РассчитатьИтогиЗаказНоменклатураРекурсивно(Дерево.Строки, Дерево.Колонки, Параметры);
		
	КонецЕсли;
	
	Если Параметры.ТолькоДефицит Тогда
		УдалитьНоменклатуруБезДефицитаРекурсивно(Дерево.Строки);
	КонецЕсли;                    
	
	ЗаполнитьПараметрыПоступления(Дерево, Параметры);

	Возврат Дерево;
	
КонецФункции

Процедура СортироватьДеревоРекурсивно(Корень, ТаблицаЗаказа = Неопределено, КлючПоиска = Неопределено, ИспользоватьСтандартныйПорядок = Ложь)
	
	Если Корень.Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	ИмяГруппировки = Корень.Строки[0].ИмяГруппировки;
	Если ИмяГруппировки=ИмяГруппировкиНоменклатура() Тогда
		
		Если ТаблицаЗаказа <> Неопределено Тогда
			
			ВыборкаСтрок = ТаблицаЗаказа.Выбрать();

			Для Каждого Строка Из Корень.Строки Цикл
				
				ЗаполнитьЗначенияСвойств(КлючПоиска, Строка);
				
				ВыборкаСтрок.Сбросить();
				
				Если ВыборкаСтрок.НайтиСледующий(КлючПоиска) Тогда
					Строка.ПорядокЗаказа = ВыборкаСтрок.НомерСтроки;
				Иначе
					Строка.ПорядокЗаказа = 99999; // выводить в конце таблицы
				КонецЕсли;
				
			КонецЦикла;
			
			Корень.Строки.Сортировать("ПорядокЗаказа, Номенклатура, Характеристика");
			
		ИначеЕсли Не ИспользоватьСтандартныйПорядок Тогда
			Корень.Строки.Сортировать("Номенклатура, Характеристика");
		КонецЕсли;
		
	КонецЕсли;        
	
	Если ИмяГруппировки = ИмяГруппировкиЗаказ() ИЛИ ИмяГруппировки = ИмяГруппировкиЗаказРекомендации() Тогда
		
		МассивЗаказовПокупателей 	= Новый Массив;
		МассивЗаказовПоставщику 	= Новый Массив;
		МассивЗаказовНаПроизводство = Новый Массив;
		МассивЗаказовНаПеремещение  = Новый Массив;
		
		Для каждого Строка Из Корень.Строки Цикл
			
			Если НЕ ЗначениеЗаполнено(Строка.Заказ) Тогда
				
				Строка.ПорядокЗаказа = 0;
				
			ИначеЕсли ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				
				Строка.ПорядокЗаказа = 1;
				МассивЗаказовПоставщику.Добавить(Строка.Заказ);
				
			ИначеЕсли ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
				
				Строка.ПорядокЗаказа = 2;
				МассивЗаказовНаПроизводство.Добавить(Строка.Заказ);
				
			ИначеЕсли ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				
				Строка.ПорядокЗаказа = 3;
				МассивЗаказовПокупателей.Добавить(Строка.Заказ);
				
			ИначеЕсли ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
				
				Строка.ПорядокЗаказа = 4;
				МассивЗаказовНаПеремещение.Добавить(Строка.Заказ);
				
			Иначе
				Строка.ПорядокЗаказа = 5;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗначенияЗаказыПокупателей 	 = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗаказовПокупателей, 	"ДатаОтгрузки, Запасы, ОсновнойВариантКП");
		ЗначенияЗаказыПоставщику 	 = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗаказовПоставщику, 	"ДатаПоступления, Запасы");
		ЗначенияЗаказыНаПроизводство = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗаказовНаПроизводство, "Финиш, Запасы");
		ЗначенияЗаказыНаПеремещения  = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЗаказовНаПеремещение, 	"ДатаПеремещения, Запасы");
		
		Для каждого Строка Из Корень.Строки Цикл

			КлючПоиска   	  = Новый Структура("Номенклатура, Характеристика");

			Если ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказПоставщику") 
				И ЗначенияЗаказыПоставщику.Получить(Строка.Заказ) <> Неопределено Тогда
				
				Строка.ДатаЗаказа = ЗначенияЗаказыПоставщику.Получить(Строка.Заказ).ДатаПоступления;
				Запасы			  = ЗначенияЗаказыПоставщику.Получить(Строка.Заказ).Запасы;
				
			ИначеЕсли ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказНаПроизводство") 
				И ЗначенияЗаказыНаПроизводство.Получить(Строка.Заказ) <> Неопределено Тогда
				
				Строка.ДатаЗаказа = ЗначенияЗаказыНаПроизводство.Получить(Строка.Заказ).Финиш;
				Запасы			  = ЗначенияЗаказыНаПроизводство.Получить(Строка.Заказ).Запасы;
				
			ИначеЕсли ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") 
				И ЗначенияЗаказыПокупателей.Получить(Строка.Заказ) <> Неопределено Тогда
				
				Строка.ДатаЗаказа = ЗначенияЗаказыПокупателей.Получить(Строка.Заказ).ДатаОтгрузки;
				Запасы			  = ЗначенияЗаказыПокупателей.Получить(Строка.Заказ).Запасы;
				
				КлючПоиска.Вставить("НомерВариантаКП", ЗначенияЗаказыПокупателей.Получить(Строка.Заказ).ОсновнойВариантКП);
				
			ИначеЕсли ТипЗнч(Строка.Заказ)=Тип("ДокументСсылка.ЗаказНаПеремещение") 
				И ЗначенияЗаказыНаПеремещения.Получить(Строка.Заказ) <> Неопределено Тогда
				
				Строка.ДатаЗаказа = ЗначенияЗаказыНаПеремещения.Получить(Строка.Заказ).ДатаПеремещения;
				Запасы			  = ЗначенияЗаказыНаПеремещения.Получить(Строка.Заказ).Запасы;
				
				
			Иначе
				
				Строка.ДатаЗаказа = '0001-01-01';
				Запасы 			  = Неопределено;
			
			КонецЕсли;

			СортироватьДеревоРекурсивно(Строка, Запасы, КлючПоиска, ИспользоватьСтандартныйПорядок);
			
		КонецЦикла; 
		
		Корень.Строки.Сортировать("ПорядокЗаказа, ДатаЗаказа");
		
	Иначе

		Для каждого Строка Из Корень.Строки Цикл
			СортироватьДеревоРекурсивно(Строка,,,ИспользоватьСтандартныйПорядок);
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура РассчитатьГрафикДвиженияЗапасов(ТаблицаРезультатЗапроса)
	
	Если ТаблицаРезультатЗапроса.Колонки.Найти("Характеристика") = Неопределено Тогда
		ТаблицаРезультатЗапроса.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Если ТаблицаРезультатЗапроса.Колонки.Найти("ЗаказОстаток") = Неопределено Тогда
		ТаблицаРезультатЗапроса.Колонки.Добавить("ЗаказОстаток", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	КонецЕсли;
	
	Для каждого СтрокаРезультатЗапрос Из ТаблицаРезультатЗапроса Цикл
		
		Если СтрокаРезультатЗапрос.ЗаказОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоЗаказОстаток 			= СтрокаРезультатЗапрос.ЗаказОстаток;
		КоличествоОстатокПоступление 	= СтрокаРезультатЗапрос.ЗаказОстаток;
		КоличествоОстатокПотребность 	= СтрокаРезультатЗапрос.ЗаказОстаток;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", СтрокаРезультатЗапрос.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаРезультатЗапрос.Характеристика);
		СтруктураПоиска.Вставить("Заказ", СтрокаРезультатЗапрос.Заказ);
		
		РезультатЗаказы = ТаблицаРезультатЗапроса.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаЗаказы Из РезультатЗаказы Цикл
			
			// Поступление.
			Если СтрокаЗаказы.ТипДвижения = Перечисления.ТипыДвиженийЗапасов.Поступление Тогда
				
				КоличествоОстатокПоступление = КоличествоОстатокПоступление - СтрокаЗаказы.Поступление;
				
			КонецЕсли;
			
			Если СтрокаЗаказы.Поступление <> 0 Тогда
	
				Поступление = МИН(КоличествоЗаказОстаток, СтрокаЗаказы.Поступление);
				КоличествоЗаказОстаток = КоличествоЗаказОстаток - СтрокаЗаказы.Поступление;
				СтрокаЗаказы.Поступление = Поступление;
				
			КонецЕсли;
			
			// Потребность.
			Если СтрокаЗаказы.ТипДвижения = Перечисления.ТипыДвиженийЗапасов.Отгрузка Тогда
				
				КоличествоОстатокПотребность = КоличествоОстатокПотребность - СтрокаЗаказы.Потребность;
				
			КонецЕсли;
			
			Если СтрокаЗаказы.Потребность <> 0 Тогда
				
				Потребность = МИН(КоличествоЗаказОстаток, СтрокаЗаказы.Потребность);
				КоличествоЗаказОстаток = КоличествоЗаказОстаток - СтрокаЗаказы.Потребность;
				СтрокаЗаказы.Потребность = Потребность;
				
			КонецЕсли;
			
			СтрокаЗаказы.ЗаказОстаток = 0;
			
		КонецЦикла;
		
		Для каждого СтрокаЗаказы Из РезультатЗаказы Цикл
			
			Если СтрокаЗаказы.ТипДвижения = Перечисления.ТипыДвиженийЗапасов.Поступление Тогда
				
				Если КоличествоОстатокПоступление > 0 Тогда
					СтрокаЗаказы.Поступление = КоличествоОстатокПоступление;
					КоличествоОстатокПоступление = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаЗаказы.ТипДвижения = Перечисления.ТипыДвиженийЗапасов.Отгрузка Тогда
				
				Если КоличествоОстатокПотребность > 0 Тогда
					СтрокаЗаказы.Потребность = КоличествоОстатокПотребность;
					КоличествоОстатокПотребность = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИмяГруппировкиРекурсивно(Строки, Измерения, Уровень = 0, ЗаполнитьТолькоПоГруппировкам = Ложь)
	
	Если ЗаполнитьТолькоПоГруппировкам
		И Уровень>=Измерения.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяГруппировки = ?(Уровень>=Измерения.Количество(), "", Измерения[Уровень].Имя);
	Для каждого Строка Из Строки Цикл
		Строка.ИмяГруппировки = ИмяГруппировки;
		Если Строка.Строки.Количество()>0 Тогда
			ЗаполнитьИмяГруппировкиРекурсивно(Строка.Строки, Измерения, Уровень + 1);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Функция СтрокиДереваПоУровнюРекурсивно(Строки, Уровень, ТекущийУровень = 1)
	
	МассивСтрок = Новый Массив;
	Для каждого Строка Из Строки Цикл
		Если Уровень=ТекущийУровень Тогда
			МассивСтрок.Добавить(Строка);
		ИначеЕсли Уровень>ТекущийУровень Тогда
			МассивВложенныхСтрок = СтрокиДереваПоУровнюРекурсивно(Строка.Строки, Уровень, ТекущийУровень + 1);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, МассивВложенныхСтрок);
		КонецЕсли; 
	КонецЦикла;
	Возврат МассивСтрок;
	
КонецФункции

Функция СкопироватьСтрокуДереваРекурсивно(Строка, Приемник, СтрокаВставки = Неопределено)
	
	Если СтрокаВставки=Неопределено Тогда
		НоваяСтрока = Приемник.Добавить();
	Иначе
		Индекс = Приемник.Индекс(СтрокаВставки);
		Если Индекс<0 Тогда
			НоваяСтрока = Приемник.Добавить();
		Иначе
			НоваяСтрока = Приемник.Вставить(Индекс);
		КонецЕсли; 
	КонецЕсли; 
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	Для каждого ПодСтрока Из Строка.Строки Цикл
		СкопироватьСтрокуДереваРекурсивно(ПодСтрока, НоваяСтрока.Строки);
	КонецЦикла; 
	Возврат НоваяСтрока;
	
КонецФункции
 
Процедура СуммироватьДетальныеЗаписиРекурсивно(Строки)
	
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 	
	
	Если НЕ ПустаяСтрока(Строки[0].ИмяГруппировки) Тогда
		Для каждого Строка Из Строки Цикл
			СуммироватьДетальныеЗаписиРекурсивно(Строка.Строки)
		КонецЦикла; 
	Иначе
		СтруктураИтогов = Новый Структура;
		СтруктураИтогов.Вставить("НачальныйОстаток", 0);
		СтруктураИтогов.Вставить("Поступление", 0);
		СтруктураИтогов.Вставить("ПоступлениеПросрочено", 0);
		СтруктураИтогов.Вставить("Потребность", 0);
		СтруктураИтогов.Вставить("ПотребностьПросрочено", 0);
		Для каждого Строка Из Строки Цикл
			Для каждого КлючИЗначение Из СтруктураИтогов Цикл
				СтруктураИтогов[КлючИЗначение.Ключ] = СтруктураИтогов[КлючИЗначение.Ключ] + Строка[КлючИЗначение.Ключ];
			КонецЦикла;
			Если ЗначениеЗаполнено(Строка.МинимальныйЗапас) Тогда
				Строки.Родитель.МинимальныйЗапас = Строка.МинимальныйЗапас;
			КонецЕсли; 
			Если ЗначениеЗаполнено(Строка.МаксимальныйЗапас) Тогда
				Строки.Родитель.МаксимальныйЗапас = Строка.МаксимальныйЗапас;
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(Строки.Родитель, СтруктураИтогов);
		Строки.Очистить();
	КонецЕсли; 
	
КонецПроцедуры

Процедура УдалитьНоменклатуруБезДефицитаРекурсивно(Строки, НоменклатураСДефицитом = Неопределено)
	
	Если НоменклатураСДефицитом = Неопределено Тогда
		НоменклатураСДефицитом = НоменклатураСДефицитомРекурсивно(Строки);
	КонецЕсли; 
	
	МассивКУдалению = Новый Массив;
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки = ИмяГруппировкиНоменклатура() Тогда
			Если НЕ ЕстьВТаблице(НоменклатураСДефицитом, Строка.Номенклатура, Строка.Характеристика) Тогда
				МассивКУдалению.Добавить(Строка);
				Если Строка.Родитель <> Неопределено Тогда
					Строка.Родитель.Поступление = Строка.Родитель.Поступление - Строка.Поступление;
					Строка.Родитель.Потребность = Строка.Родитель.Потребность - Строка.Потребность;
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли Строка.Строки.Количество()>0 Тогда 
			УдалитьНоменклатуруБезДефицитаРекурсивно(Строка.Строки, НоменклатураСДефицитом);
			Если Строка.Строки.Количество()=0 Тогда
				МассивКУдалению.Добавить(Строка);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	Для каждого Строка Из МассивКУдалению Цикл
		Строки.Удалить(Строка);
	КонецЦикла; 
	
КонецПроцедуры

Функция НоменклатураСДефицитомРекурсивно(Строки)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки = ИмяГруппировкиНоменклатура() Тогда
			Если ЗначениеЗаполнено(Строка.Дефицит) 
				И Строка.Дефицит > 0
				И НЕ ЕстьВТаблице(Результат, Строка.Номенклатура, Строка.Характеристика) Тогда
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
		ИначеЕсли Строка.Строки.Количество() > 0 Тогда 
			ВложенныеЭлементы = НоменклатураСДефицитомРекурсивно(Строка.Строки);
			Для каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
				Если НЕ ЕстьВТаблице(Результат, ВложенныйЭлемент.Номенклатура, ВложенныйЭлемент.Характеристика) Тогда
					НоваяСтрока = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВложенныйЭлемент);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ЕстьВТаблице(Таблица, Номенклатура, Характеристика)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	СтруктураОтбора.Вставить("Характеристика", Характеристика);
	Возврат Таблица.НайтиСтроки(СтруктураОтбора).Количество() > 0;
	
КонецФункции

Процедура ЗаполнитьПредставлениеГруппировки(Параметры, Строка)
	
	Если НЕ ПустаяСтрока(Строка.Представление) Тогда
		Возврат;
	КонецЕсли; 
	
	Если Строка.ИмяГруппировки=ИмяГруппировкиПериод() Тогда
		
		Если ЗначениеЗаполнено(Строка.Период) Тогда
			
			Если Параметры.Периодичность <> Перечисления.Периодичность.День Тогда
				
				Периодичность		 = Параметры.Периодичность;
				ПериодНачало 		 = Строка.Период;
				ПериодОкончание 	 = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(ПериодНачало, Периодичность, 1);
				
				Строка.Представление = СформироватьПредставлениеПериодаВЗапасах(ПериодНачало, ПериодОкончание);
			
			Иначе
				Строка.Представление = СформироватьПредставлениеПериодаВЗапасах(Строка.Период, Строка.Период);
			КонецЕсли;
			
		Иначе                                                 
			
			Строка.Представление = НСтр("ru = 'Просрочено'");
		КонецЕсли;
		
	ИначеЕсли Строка.ИмяГруппировки=ИмяГруппировкиЗаказ() Тогда
		Если ЗначениеЗаполнено(Строка.Заказ) Тогда
			Строка.Представление = ПредставлениеЗаказа(Строка.Заказ);
		Иначе
			Строка.Представление = НСтр("ru = '<Не указан>'");
		КонецЕсли;
	КонецЕсли; 	
	
КонецПроцедуры

Функция СформироватьПредставлениеПериодаВЗапасах(ДатаНачала, ДатаОкончания) Экспорт

	Если НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания) Тогда

		Представление 		= Формат(ДатаОкончания, "ДФ=dd.MM.yy");

	Иначе
		
		Представление 		= СтрШаблон(
			НСтр("ru = '%1 - %2'"), 
			Формат(ДатаНачала, "ДФ=dd.MM.yy"), 
			Формат(ДатаОкончания, "ДФ=dd.MM.yy"));
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеЗаказа(Заказ)
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Возврат НСтр("ru = '<Не указан>'");
	КонецЕсли;
	
	Возврат Строка(Заказ); 
	
КонецФункции

Процедура СуммаКолонок(Строки, СтруктураИтогов, Рекурсивно = Ложь)
	
	Для каждого Строка Из Строки Цикл
		Для каждого КлючИЗначение Из СтруктураИтогов Цикл
			СтруктураИтогов[КлючИЗначение.Ключ] = СтруктураИтогов[КлючИЗначение.Ключ] + ?(ТипЗнч(Строка[КлючИЗначение.Ключ])<>Тип("Число"), 0, Строка[КлючИЗначение.Ключ]);
		КонецЦикла;
		Если Рекурсивно И Строка.Строки.Количество()>0 Тогда
			СуммаКолонок(Строка.Строки, СтруктураИтогов, Рекурсивно);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Функция ИтогиПоКолонкам(Строка, Структура)
	
	Результат = 0;
	Для каждого КлючИЗначение Из Структура Цикл
		Результат = Результат + Строка[КлючИЗначение.Ключ];
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ГруппировкаНоменклатура

Процедура ПеренестиПериодВКолонкиПоЗаказамРекурсивно(Строки, ИменаКолонокПоДатам, СтруктураСтрок = Неопределено, СтрокиВставки = Неопределено)
	
	МассивУдаленныхСтрок = Новый Массив;
	Для каждого СтрокаДерева Из Строки Цикл
		Если НЕ ПустаяСтрока(СтрокаДерева.Представление) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаДерева.Период <> Неопределено Тогда
			Если СтрокаДерева.Строки.Количество()>0 Тогда
				// Переход к детальным записям
				ПеренестиПериодВКолонкиПоЗаказамРекурсивно(СтрокаДерева.Строки, ИменаКолонокПоДатам, СтруктураСтрок, СтрокиВставки);
			Иначе
				
				ИмяКолонки = ИменаКолонокПоДатам.Получить(СтрокаДерева.Период);
				
				СтруктураСтрок.Рекомендовано[ИмяКолонки] 	= СтруктураСтрок.Рекомендовано[ИмяКолонки] + СтрокаДерева.Дефицит;
				СтруктураСтрок.НачальныйОстаток[ИмяКолонки] = СтруктураСтрок.НачальныйОстаток[ИмяКолонки] 
					+ СтрокаДерева.НачальныйОстаток;
					
				Если СтруктураСтрок.Свойство(ИмяГруппировкиМаксимальныйЗапас()) И ЗначениеЗаполнено(СтрокаДерева.МаксимальныйЗапас) Тогда
					СтруктураСтрок.МаксимальныйЗапас[ИмяКолонки] = СтрокаДерева.МаксимальныйЗапас;
				КонецЕсли; 
				Если СтруктураСтрок.Свойство(ИмяГруппировкиМинимальныйЗапас()) И ЗначениеЗаполнено(СтрокаДерева.МинимальныйЗапас) Тогда
					СтруктураСтрок.МинимальныйЗапас[ИмяКолонки] = СтрокаДерева.МинимальныйЗапас;
				КонецЕсли; 
				ДобавитьСтрокуЗаказа(СтрокаДерева, СтруктураСтрок, ИмяГруппировкиПоступление(), "Поступление", ИмяКолонки);
				ДобавитьСтрокуЗаказа(СтрокаДерева, СтруктураСтрок, ИмяГруппировкиПотребность(), "Потребность", ИмяКолонки);
				// Общие данные
				ДобавитьСтрокуЗаказа(СтрокаДерева, СтруктураСтрок, ИмяГруппировкиПоступление(), "ПоступлениеПросрочено", "ПоступлениеПросрочено");
				ДобавитьСтрокуЗаказа(СтрокаДерева, СтруктураСтрок, ИмяГруппировкиПотребность(), "ПотребностьПросрочено", "ПотребностьПросрочено");
				Если СтрокаДерева.НачальныйОстаток<>0 Тогда
					СтрокиВставки.Родитель.НачальныйОстаток = СтрокаДерева.НачальныйОстаток;
				КонецЕсли; 
			КонецЕсли; 
			МассивУдаленныхСтрок.Добавить(СтрокаДерева);
		ИначеЕсли СтрокаДерева.Заказ <> Неопределено 
			ИЛИ СтрокаДерева.ИмяГруппировки = "Заказ" Тогда
			Если СтрокиВставки=Неопределено Тогда
				СтрокиВставки = СтрокаДерева.Родитель.Строки;
			КонецЕсли;
			Если СтруктураСтрок=Неопределено Тогда
				СтруктураСтрок = Новый Структура;
			КонецЕсли; 
			Если СтруктураСтрок.Количество()=0 Тогда
				ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиНачальныйОстаток(), НСтр("ru = 'Начальный остаток'"));
				ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиПоступление(), НСтр("ru = 'Поступление'"));
				ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиПотребность(), НСтр("ru = 'Потребность'"));
				ИспользуетсяУправлениеЗапасами = ОпределитьИспользованиеУправленияЗапасамиРекурсивно(Строки);
				Если ИспользуетсяУправлениеЗапасами Тогда
					ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиМинимальныйЗапас(), НСтр("ru = 'Минимальный запас'"));
					ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиМаксимальныйЗапас(), НСтр("ru = 'Максимальный запас'"));
				КонецЕсли;
				ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиКонечныйОстаток(), НСтр("ru = 'Конечный остаток'"));
				ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиРекомендовано(), НСтр("ru = 'Рекомендации и заказ'"));
			КонецЕсли; 
			ПеренестиПериодВКолонкиПоЗаказамРекурсивно(СтрокаДерева.Строки, ИменаКолонокПоДатам, СтруктураСтрок, СтрокиВставки);
			МассивУдаленныхСтрок.Добавить(СтрокаДерева);
		Иначе
			ПеренестиПериодВКолонкиПоЗаказамРекурсивно(СтрокаДерева.Строки, ИменаКолонокПоДатам);
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрокаДерева Из МассивУдаленныхСтрок Цикл
		Строки.Удалить(СтрокаДерева);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПеренестиПериодВКолонкиРекурсивно(Строки, ИменаКолонокПоДатам, СтруктураСтрок = Неопределено, СтрокиВставки = Неопределено)
	
	МассивУдаленныхСтрок = Новый Массив;
	Для каждого СтрокаДерева Из Строки Цикл
		Если НЕ ПустаяСтрока(СтрокаДерева.Представление) Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаДерева.Период = Неопределено Тогда
			ПеренестиПериодВКолонкиРекурсивно(СтрокаДерева.Строки, ИменаКолонокПоДатам);
		Иначе
			Если СтрокиВставки = Неопределено Тогда
				СтрокиВставки = СтрокаДерева.Родитель.Строки;
			КонецЕсли;
			Если СтруктураСтрок = Неопределено Тогда
				СтруктураСтрок = Новый Структура;
			КонецЕсли; 
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				// Переход к детальным записям
				ПеренестиПериодВКолонкиРекурсивно(СтрокаДерева.Строки, ИменаКолонокПоДатам, СтруктураСтрок, СтрокиВставки);
			Иначе
				ИспользуетсяУправлениеЗапасами = Ложь;
				Для каждого СтрокаУправлениеЗапасами Из Строки Цикл
					ИспользуетсяУправлениеЗапасами = (СтрокаУправлениеЗапасами.МинимальныйЗапас <> 0 
						ИЛИ СтрокаУправлениеЗапасами.МаксимальныйЗапас <> 0);
					Если ИспользуетсяУправлениеЗапасами Тогда
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
				Если СтруктураСтрок.Количество() = 0 Тогда
					ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиНачальныйОстаток(), НСтр("ru = 'Начальный остаток'"));
					ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиПоступление(), НСтр("ru = 'Поступление'"));
					ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиПотребность(), НСтр("ru = 'Потребность'"));
					Если ИспользуетсяУправлениеЗапасами Тогда
						ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиМинимальныйЗапас(), НСтр("ru = 'Минимальный запас'"));
						ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиМаксимальныйЗапас(), НСтр("ru = 'Максимальный запас'"));
					КонецЕсли;
					ДобавитьСтрокуДерева(СтрокиВставки, СтруктураСтрок, ИмяГруппировкиКонечныйОстаток(), НСтр("ru = 'Конечный остаток'"));
				КонецЕсли; 
				ИмяКолонки = ИменаКолонокПоДатам.Получить(СтрокаДерева.Период);
				
				СтруктураСтрок.НачальныйОстаток[ИмяКолонки] = СтруктураСтрок.НачальныйОстаток[ИмяКолонки] 
					+ СтрокаДерева.НачальныйОстаток;
					
				Если СтруктураСтрок.Свойство(ИмяГруппировкиМаксимальныйЗапас()) И ЗначениеЗаполнено(СтрокаДерева.МаксимальныйЗапас) Тогда
					СтруктураСтрок.МаксимальныйЗапас[ИмяКолонки] = СтрокаДерева.МаксимальныйЗапас;
				КонецЕсли; 
				Если СтруктураСтрок.Свойство(ИмяГруппировкиМинимальныйЗапас()) И ЗначениеЗаполнено(СтрокаДерева.МинимальныйЗапас) Тогда
					СтруктураСтрок.МинимальныйЗапас[ИмяКолонки] = СтрокаДерева.МинимальныйЗапас;
				КонецЕсли;
				СтруктураСтрок.Поступление[ИмяКолонки] = СтруктураСтрок.Поступление[ИмяКолонки] + СтрокаДерева.Поступление;
				СтруктураСтрок.Потребность[ИмяКолонки] = СтруктураСтрок.Потребность[ИмяКолонки] + СтрокаДерева.Потребность;
				// Общие данные
				Если СтрокаДерева.ПоступлениеПросрочено <> 0 Тогда
					СтрокиВставки.Родитель.ПоступлениеПросрочено = СтрокаДерева.ПоступлениеПросрочено;
				КонецЕсли; 
				Если СтрокаДерева.ПотребностьПросрочено <> 0 Тогда
					СтрокиВставки.Родитель.ПотребностьПросрочено = СтрокаДерева.ПотребностьПросрочено;
				КонецЕсли; 
				Если СтрокаДерева.НачальныйОстаток <> 0 Тогда
					СтрокиВставки.Родитель.НачальныйОстаток = СтрокаДерева.НачальныйОстаток;
				КонецЕсли; 
			КонецЕсли; 
			МассивУдаленныхСтрок.Добавить(СтрокаДерева);
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрокаДерева Из МассивУдаленныхСтрок Цикл
		Строки.Удалить(СтрокаДерева);
	КонецЦикла; 
	
КонецПроцедуры

Функция РассчитатьИтогиНоменклатураРекурсивно(Параметры, Строки, МассивКолонок)
	
	СтруктураИтогов = Новый Структура;
	Для каждого ИмяКолонки Из МассивКолонок Цикл
		СтруктураИтогов.Вставить(ИмяКолонки, 0);
	КонецЦикла; 
	
	СтруктураСтрок = Новый Структура("НачальныйОстаток, Поступление, Потребность, МинимальныйЗапас, МаксимальныйЗапас, КонечныйОстаток, Рекомендовано");
	ЭтоРазворотПоДням = Ложь;
	Для каждого Строка Из Строки Цикл

		Если СтруктураСтрок.Свойство(Строка.ИмяГруппировки) Тогда
			СтруктураСтрок.Вставить(Строка.ИмяГруппировки, Строка);
			ЭтоРазворотПоДням = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Если ЭтоРазворотПоДням Тогда
		НачальныйОстаток = 0;
		ПоЗаказам = (СтруктураСтрок.Рекомендовано <> Неопределено);
		Для каждого ИмяКолонки Из МассивКолонок Цикл
			Если ЗначениеЗаполнено(СтруктураСтрок.НачальныйОстаток[ИмяКолонки]) Тогда
				НачальныйОстаток = СтруктураСтрок.НачальныйОстаток[ИмяКолонки];
				СтруктураСтрок.НачальныйОстаток.Дефицит = НачальныйОстаток;
			Иначе
				СтруктураСтрок.НачальныйОстаток[ИмяКолонки] = НачальныйОстаток;
			КонецЕсли;
			Если СтруктураСтрок.МинимальныйЗапас <> Неопределено И ЗначениеЗаполнено(СтруктураСтрок.МинимальныйЗапас[ИмяКолонки]) Тогда
				СтруктураСтрок.МинимальныйЗапас.Дефицит = СтруктураСтрок.МинимальныйЗапас[ИмяКолонки];
				СтруктураСтрок.МинимальныйЗапас[ИмяКолонки] = 0;
			КонецЕсли;
			Если СтруктураСтрок.МинимальныйЗапас <> Неопределено И ЗначениеЗаполнено(СтруктураСтрок.МаксимальныйЗапас[ИмяКолонки]) Тогда 
				СтруктураСтрок.МаксимальныйЗапас.Дефицит = СтруктураСтрок.МаксимальныйЗапас[ИмяКолонки];
				СтруктураСтрок.МаксимальныйЗапас[ИмяКолонки] = 0;
			КонецЕсли;
			СтруктураСтрок.КонечныйОстаток[ИмяКолонки] = СтруктураСтрок.КонечныйОстаток[ИмяКолонки] 
				+ СтруктураСтрок.НачальныйОстаток[ИмяКолонки] 
				+ СтруктураСтрок.Поступление[ИмяКолонки] 
				- СтруктураСтрок.Потребность[ИмяКолонки];
				
			Если СтруктураСтрок.КонечныйОстаток[ИмяКолонки] < 0 Тогда
				Если ПоЗаказам Тогда
					СтруктураСтрок.Рекомендовано[ИмяКолонки] = -СтруктураСтрок.КонечныйОстаток[ИмяКолонки];
				КонецЕсли; 
				СтруктураИтогов.Вставить(ИмяКолонки, -СтруктураСтрок.КонечныйОстаток[ИмяКолонки]); 
				СтруктураСтрок.КонечныйОстаток[ИмяКолонки] = 0;
			КонецЕсли;
			НачальныйОстаток = СтруктураСтрок.КонечныйОстаток[ИмяКолонки];
		КонецЦикла;
		СтруктураСтрок.Поступление.Дефицит = ИтогиПоКолонкам(СтруктураСтрок.Поступление, СтруктураИтогов);
		СтруктураСтрок.Потребность.Дефицит = ИтогиПоКолонкам(СтруктураСтрок.Потребность, СтруктураИтогов);
		СтруктураСтрок.КонечныйОстаток.Дефицит = НачальныйОстаток;
		Если ПоЗаказам Тогда
			РаспределитьРекомендацииПоЗаказам(СтруктураСтрок.НачальныйОстаток, СтруктураСтрок.Рекомендовано, СтруктураСтрок.Потребность, СтруктураСтрок.Поступление, МассивКолонок);
			// При распределении рекомендаций возможен перерасчет потребности за счет более поздних поступлений
			// Следует обновить итоги
			СтруктураСтрок.Рекомендовано.Дефицит = ИтогиПоКолонкам(СтруктураСтрок.Рекомендовано, СтруктураИтогов);
			Для каждого ИмяКолонки Из МассивКолонок Цикл
				СтруктураИтогов.Вставить(ИмяКолонки, СтруктураСтрок.Рекомендовано[ИмяКолонки]);
			КонецЦикла;
			ПересчитатьОстатки(СтруктураСтрок, МассивКолонок);
		КонецЕсли; 
		УчестьПоддержаниеОстаткаНоменклатура(Параметры, СтруктураСтрок, СтруктураИтогов);
	Иначе 
		Для каждого Строка Из Строки Цикл
			Если Строка.Строки.Количество() > 0 Тогда
				ИтогиВложенных = РассчитатьИтогиНоменклатураРекурсивно(Параметры, Строка.Строки, МассивКолонок);
				ЗаполнитьЗначенияСвойств(Строка, ИтогиВложенных);
				Строка.Дефицит = ИтогиПоКолонкам(Строка, ИтогиВложенных);
			Иначе
				ИтогиВложенных = Новый Структура;
				Для каждого КлючИЗначение Из СтруктураИтогов Цикл
					ИтогиВложенных.Вставить(КлючИЗначение.Ключ, Строка[КлючИЗначение.Ключ]);
				КонецЦикла; 
			КонецЕсли;
			Для каждого КлючИЗначение Из СтруктураИтогов Цикл
				СтруктураИтогов[КлючИЗначение.Ключ] = СтруктураИтогов[КлючИЗначение.Ключ] + ИтогиВложенных[КлючИЗначение.Ключ];
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураИтогов;
	
КонецФункции

Функция ОпределитьИспользованиеУправленияЗапасамиРекурсивно(Строки)
	
	Для каждого Строка Из Строки Цикл
		Если ЗначениеЗаполнено(Строка.МинимальныйЗапас) ИЛИ ЗначениеЗаполнено(Строка.МаксимальныйЗапас) Тогда
			Возврат Истина;
		КонецЕсли;
		Если ОпределитьИспользованиеУправленияЗапасамиРекурсивно(Строка.Строки) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Ложь;
	
КонецФункции

Процедура РаспределитьРекомендацииПоЗаказам(СтрокаНачальныйОстаток, СтрокаРекомендации, СтрокаПотребность, СтрокаПоступления, МассивКолонок)
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Заказ");
	ТаблицаОстатков.Колонки.Добавить("Остаток");
	Для каждого СтрокаПотребностьЗаказа Из СтрокаПотребность.Строки Цикл
		СтрокаПоступленияЗаказа = СтрокаПоступления.Строки.Найти(СтрокаПотребностьЗаказа.Заказ, "Заказ");
		Остаток = СтрокаПотребностьЗаказа.Дефицит - ?(СтрокаПоступленияЗаказа = Неопределено, 0, СтрокаПоступленияЗаказа.Дефицит);
		НоваяСтрока = ТаблицаОстатков.Добавить();
		НоваяСтрока.Заказ = СтрокаПотребностьЗаказа.Заказ;
		НоваяСтрока.Остаток = Остаток;
	КонецЦикла;
	
	НачальныйОстаток = Неопределено;
	Для каждого ИмяКолонки Из МассивКолонок Цикл
		ОбщиеПоступления = 0;
		Для каждого СтрокаПоступленияЗаказа Из СтрокаПоступления.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаПоступленияЗаказа.Заказ) И ТипЗнч(СтрокаПоступленияЗаказа.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Продолжить;
			КонецЕсли; 
			ОбщиеПоступления = ОбщиеПоступления + СтрокаПоступленияЗаказа[ИмяКолонки];
		КонецЦикла; 
		Распределить = СтрокаПотребность[ИмяКолонки] - ОбщиеПоступления;
		Пополнение = 0;
		Если Распределить < 0 Тогда
			Пополнение = -Распределить;
			Распределить = 0;
		КонецЕсли;
		Если НачальныйОстаток = Неопределено Тогда
			НачальныйОстаток = СтрокаНачальныйОстаток[ИмяКолонки];
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(Распределить) Тогда
			НачальныйОстаток = НачальныйОстаток + Пополнение;
			Продолжить;
		КонецЕсли;
		Распределено = 0;
		Для каждого СтрокаОстатков Из ТаблицаОстатков Цикл
			СтрокаРекомендацииЗаказа = СтрокаРекомендации.Строки.Найти(СтрокаОстатков.Заказ, "Заказ");
			Если СтрокаРекомендацииЗаказа = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПотребностьЗаказа = СтрокаПотребность.Строки.Найти(СтрокаОстатков.Заказ, "Заказ");
			РекомендацииЗаказа = Распределить;
			// Рекомендация не больше потребности на дату
			Если СтрокаПотребностьЗаказа[ИмяКолонки] < РекомендацииЗаказа Тогда
				РекомендацииЗаказа = СтрокаПотребностьЗаказа[ИмяКолонки];
				Если РекомендацииЗаказа < 0 Тогда
					РекомендацииЗаказа = 0;
				КонецЕсли; 
			КонецЕсли;
			// Рекомендация не больше остатков потребности по заказу
			Если РекомендацииЗаказа > СтрокаОстатков.Остаток Тогда
				РекомендацииЗаказа = СтрокаОстатков.Остаток;
				СтрокаОстатков.Остаток = 0;
			ИначеЕсли РекомендацииЗаказа > 0 Тогда 
				СтрокаОстатков.Остаток = СтрокаОстатков.Остаток - РекомендацииЗаказа;
			КонецЕсли;
			Распределить = Распределить - РекомендацииЗаказа;
			// Учитываем начальный остаток
			Если НачальныйОстаток > 0 Тогда
				ЗаСчетОстатка = Мин(НачальныйОстаток, РекомендацииЗаказа);
				РекомендацииЗаказа = РекомендацииЗаказа - ЗаСчетОстатка;
				НачальныйОстаток = НачальныйОстаток - ЗаСчетОстатка;
			КонецЕсли; 
			СтрокаРекомендацииЗаказа[ИмяКолонки] = РекомендацииЗаказа;
			СтрокаРекомендацииЗаказа.Дефицит = СтрокаРекомендацииЗаказа.Дефицит + СтрокаРекомендацииЗаказа[ИмяКолонки];
			Распределено = Распределено + РекомендацииЗаказа;
 			Если Распределить <= 0 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		СтрокаРекомендации[ИмяКолонки] = Распределено;
		НачальныйОстаток = СтрокаНачальныйОстаток[ИмяКолонки] - СтрокаПотребность[ИмяКолонки] + СтрокаПоступления[ИмяКолонки] + СтрокаРекомендации[ИмяКолонки];
		Если НачальныйОстаток < 0 Тогда
			// Поступление позже даты потребности
			СтрокаНоменклатура = СтрокаРекомендации.Родитель;
			Дата = ДатаПоИмениКолонки(ИмяКолонки);
			Если ЗначениеЗаполнено(Дата) Тогда
				ТекстСообщения = НСтр("ru = 'Для заказов с дефицитом на %1 запланированы поступления с более поздними датами. Рекомендуется внести изменения в план, иначе заказы не удастся выполнить в срок.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(Дата, "ДЛФ=D"));
				ДобавитьСообщение(СтрокаНоменклатура, ТекстСообщения, Истина);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПересчитатьОстатки(СтруктураСтрок, МассивКолонок)
		
	НачальныйОстаток = СтруктураСтрок.НачальныйОстаток.Дефицит;
	Для каждого ИмяКолонки Из МассивКолонок Цикл
		СтруктураСтрок.НачальныйОстаток[ИмяКолонки] = НачальныйОстаток;
		СтруктураСтрок.КонечныйОстаток[ИмяКолонки] = СтруктураСтрок.НачальныйОстаток[ИмяКолонки] + 
			СтруктураСтрок.Поступление[ИмяКолонки] - 
			СтруктураСтрок.Потребность[ИмяКолонки] + 
			СтруктураСтрок.Рекомендовано[ИмяКолонки];
		НачальныйОстаток = СтруктураСтрок.КонечныйОстаток[ИмяКолонки];
	КонецЦикла;
	СтруктураСтрок.КонечныйОстаток.Дефицит = НачальныйОстаток;
	
КонецПроцедуры

Функция КолонкиПериодов(Колонки, ДобавитьПополнение = Ложь)
		
	МассивКолонок = Новый Массив;
	Для каждого Колонка Из Колонки Цикл
		Если Колонка.Имя = "Период" Тогда
			Продолжить;
		КонецЕсли; 
		Если Колонка.Имя = "Просрочено" ИЛИ Найти(Колонка.Имя, "Период") > 0 Тогда
			МассивКолонок.Добавить(Колонка.Имя);
		ИначеЕсли ДобавитьПополнение И Колонка.Имя = "Пополнение" Тогда
			МассивКолонок.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	Возврат МассивКолонок;
	
КонецФункции
 
Процедура УчестьПоддержаниеОстаткаНоменклатура(Параметры, СтруктураСтрок, СтруктураИтогов)
	
	Если СтруктураСтрок.МинимальныйЗапас <> Неопределено И СтруктураСтрок.МаксимальныйЗапас <> Неопределено Тогда
		СтруктураСтрок.МинимальныйЗапас.Пополнение = СтруктураСтрок.МинимальныйЗапас.Дефицит;
		СтруктураСтрок.МаксимальныйЗапас.Пополнение = СтруктураСтрок.МаксимальныйЗапас.Дефицит;
		МинимальныйЗапас = СтруктураСтрок.МинимальныйЗапас.Дефицит;
		МаксимальныйЗапас = СтруктураСтрок.МаксимальныйЗапас.Дефицит;     
		
		Если Параметры.ОбеспечениеЗаСчетОстатка Тогда
			МаксимальныйЗапас = МаксимальныйЗапас + МАКС(СтруктураСтрок.НачальныйОстаток.Дефицит, 0);
		КонецЕсли;
		
	Иначе
		МинимальныйЗапас = 0;
		МаксимальныйЗапас = 0;
	КонецЕсли; 
	Если СтруктураСтрок.КонечныйОстаток.Дефицит <= МинимальныйЗапас Тогда
		ПоЗаказам = (СтруктураСтрок.Рекомендовано <> Неопределено);
		Пополнение = МаксимальныйЗапас - СтруктураСтрок.КонечныйОстаток.Дефицит;
		Если ПоЗаказам Тогда
			СтруктураСтрок.Рекомендовано.Дефицит = СтруктураСтрок.Рекомендовано.Дефицит + Пополнение;
		КонецЕсли; 
		СтруктураСтрок.КонечныйОстаток.Дефицит = МаксимальныйЗапас;
		СтруктураСтрок.КонечныйОстаток.Пополнение = МаксимальныйЗапас;
		СтруктураИтогов.Вставить("Пополнение", Пополнение);
		Если ПоЗаказам Тогда
			СтрокаПустойЗаказ = СтруктураСтрок.Рекомендовано.Строки.Найти(Неопределено, "Заказ");
			Если СтрокаПустойЗаказ=Неопределено Тогда
				СтрокаПустойЗаказ = СтруктураСтрок.Рекомендовано.Строки.Добавить();
				СтрокаПустойЗаказ.ИмяГруппировки = ИмяГруппировкиЗаказРекомендации();
				СтрокаПустойЗаказ.Заказ = Неопределено;
				СтрокаПустойЗаказ.Представление = ПредставлениеЗаказа(СтрокаПустойЗаказ.Заказ);
				СтрокаПустойЗаказ.Дефицит	   		= 0;
				СтрокаПустойЗаказ.Пополнение		= 0;
			КонецЕсли;

			СтрокаПустойЗаказ.Дефицит				= СтрокаПустойЗаказ.Дефицит + Пополнение;
			СтрокаПустойЗаказ.Пополнение			= СтрокаПустойЗаказ.Пополнение + Пополнение;
			СтруктураСтрок.Рекомендовано.Пополнение	= СтруктураСтрок.Рекомендовано.Пополнение + Пополнение;
			
		КонецЕсли; 
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти 

#Область ГруппировкаНоменклатураДень

Функция РассчитатьИтогиНоменклатураДеньРекурсивно(Строки, Колонки, Параметры, Остатки = Неопределено, ОстаткиПотребность = Неопределено)
	
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	Если Остатки = Неопределено Тогда
		Остатки = Новый ТаблицаЗначений;
		Остатки.Колонки.Добавить("Номенклатура");
		Остатки.Колонки.Добавить("Характеристика");
		Остатки.Колонки.Добавить("МинимальныйЗапас", ТипЧисло);
		Остатки.Колонки.Добавить("МаксимальныйЗапас", ТипЧисло);
	КонецЕсли;
	Если ОстаткиПотребность = Неопределено Тогда
		ОстаткиПотребность = Новый ТаблицаЗначений;
		ОстаткиПотребность.Колонки.Добавить("Заказ");
		ОстаткиПотребность.Колонки.Добавить("Остаток", ТипЧисло);
	КонецЕсли;
	
	СтруктураИтогов = Новый Структура("Потребность, Поступление, Дефицит", 0, 0, 0);
	
	НачальныйОстаток 	= 0;
	КонечныйОстаток 	= 0;
	ОбновитьРодителя 	= Ложь;
	СтрокаПустойЗаказ 	= Неопределено;
	ПерваяСтрока		= Истина;
	
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки = ИмяГруппировкиЗаказ() И НЕ ЗначениеЗаполнено(Строка.Заказ) Тогда
			СтрокаПустойЗаказ = Строка;
		КонецЕсли; 
		Если КонечныйОстаток <> 0 Тогда
			Строка.НачальныйОстаток = КонечныйОстаток;
		КонецЕсли;
		Если Строка.ИмяГруппировки = ИмяГруппировкиНоменклатура() Тогда
			ОстаткиПотребность.Очистить();
			ОпределитьОстаткиПотребностиНоменклатураДеньРекурсивно(Строка.Строки, ОстаткиПотребность);
			ОстаткиПотребность.Свернуть("Заказ", "Остаток");
		КонецЕсли;
		Если Строка.Строки.Количество() > 0 Тогда
			ИтогиВложенных = РассчитатьИтогиНоменклатураДеньРекурсивно(Строка.Строки, Колонки, Параметры, Остатки, ОстаткиПотребность);
			ЗаполнитьЗначенияСвойств(Строка, ИтогиВложенных);
		КонецЕсли;
		ЭтоГруппировкаСДанными = (Строка.ИмяГруппировки = ИмяГруппировкиПериод() 
			ИЛИ Строка.ИмяГруппировки = ИмяГруппировкиЗаказ() 
			ИЛИ Строка.ИмяГруппировки = ИмяГруппировкиНоменклатура());
		Если Строка.Родитель <> Неопределено И ЭтоГруппировкаСДанными Тогда
			Если ПерваяСтрока Тогда
				Если Строка.Родитель <> Неопределено 
					И ЗначениеЗаполнено(Строка.Родитель.НачальныйОстаток) 
					И НЕ ЗначениеЗаполнено(НачальныйОстаток) Тогда
					НачальныйОстаток = Строка.Родитель.НачальныйОстаток;
					Строка.НачальныйОстаток = НачальныйОстаток;
				ИначеЕсли ЗначениеЗаполнено(Строка.НачальныйОстаток) И НЕ ЗначениеЗаполнено(НачальныйОстаток) Тогда
					НачальныйОстаток = Строка.НачальныйОстаток;
				КонецЕсли;
			КонецЕсли;
			ПересчитатьСтрокуНоменклатураДень(Строка, Остатки, ОстаткиПотребность);
			Если Строка.ИмяГруппировки <> ИмяГруппировкиНоменклатура() Тогда
				КонечныйОстаток = Строка.КонечныйОстаток;
			КонецЕсли; 
			ОбновитьРодителя = (Строка.ИмяГруппировки<>ИмяГруппировкиНоменклатура());
		КонецЕсли; 
		ЗаполнитьПредставлениеГруппировки(Параметры, Строка);
		ПерваяСтрока = Ложь;
	КонецЦикла;
	Если ОбновитьРодителя И Строки.Родитель <> Неопределено Тогда
		Строки.Родитель.НачальныйОстаток = НачальныйОстаток;
		Строки.Родитель.КонечныйОстаток = КонечныйОстаток;
	КонецЕсли;
	УчестьПоддержаниеОстаткаНоменклатураДень(Параметры, Строки, Остатки, КонечныйОстаток);
	СуммаКолонок(Строки, СтруктураИтогов);
	
	Возврат СтруктураИтогов;
	
КонецФункции

Процедура ПересчитатьСтрокуНоменклатураДень(Строка, Остатки, ОстаткиПотребность)
		
	Если ЗначениеЗаполнено(Строка.МинимальныйЗапас) Тогда
		ОбновитьОстаток(Остатки, Строка, Строка.МинимальныйЗапас, "МинимальныйЗапас");
		Строка.МинимальныйЗапас = 0;
	КонецЕсли;
	Если ЗначениеЗаполнено(Строка.МаксимальныйЗапас) Тогда
		ОбновитьОстаток(Остатки, Строка, Строка.МаксимальныйЗапас, "МаксимальныйЗапас");
		Строка.МаксимальныйЗапас = 0;
	КонецЕсли;
	Строка.КонечныйОстаток = Строка.НачальныйОстаток + Строка.Поступление - Строка.Потребность + Строка.Дефицит;
	Если Строка.Строки.Количество() = 0 Тогда
		Если Строка.КонечныйОстаток < 0 И Строка.Потребность > 0 Тогда
			Строка.Дефицит = - Строка.КонечныйОстаток;
			Строка.КонечныйОстаток = 0;
		Иначе
			Строка.Дефицит = 0;
		КонецЕсли;
		Если ОстаткиПотребность.Количество() = 0 ИЛИ Строка.Дефицит = 0 ИЛИ Строка.ИмяГруппировки <> ИмяГруппировкиЗаказ() Тогда
			Возврат;
		КонецЕсли; 
		СтрокаПотребность = ОстаткиПотребность.Найти(Строка.Заказ, "Заказ");
		Если СтрокаПотребность = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		Если Строка.Дефицит > СтрокаПотребность.Остаток Тогда
			// Найдено поступление по тому же заказу позже даты потребности
			СтрокаНоменклатура = Строка.Родитель.Родитель;
			Дата = Строка.Период;
			Если ЗначениеЗаполнено(Дата) Тогда
				ТекстСообщения = НСтр("ru = 'Для заказов с дефицитом на %1 запланированы поступления с более поздними датами. Рекомендуется внести изменения в план, иначе заказы не удастся выполнить в срок.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(Дата, "ДЛФ=D"));
				ДобавитьСообщение(СтрокаНоменклатура, ТекстСообщения, Истина);
			КонецЕсли;
			ФактическаяПотребность = Мин(СтрокаПотребность.Остаток, Строка.Потребность);
			Если Строка.Потребность > СтрокаПотребность.Остаток Тогда
				СтрокаПотребность.Остаток = 0;
			ИначеЕсли Строка.Потребность > 0 Тогда 
				СтрокаПотребность.Остаток = СтрокаПотребность.Остаток - Строка.Потребность;
			КонецЕсли;
			СУчетомОстатков = ФактическаяПотребность - ?(Строка.НачальныйОстаток > 0, Строка.НачальныйОстаток, 0);
			Если СУчетомОстатков < 0 Тогда
				СУчетомОстатков = 0;
			КонецЕсли; 
			Строка.Дефицит = СУчетомОстатков;
			Строка.КонечныйОстаток = Строка.НачальныйОстаток + Строка.Поступление - Строка.Потребность + Строка.Дефицит;
		Иначе
			СтрокаПотребность.Остаток = СтрокаПотребность.Остаток - Строка.Дефицит;
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

Процедура ОпределитьОстаткиПотребностиНоменклатураДеньРекурсивно(Строки, ОстаткиПотребность)
	
	Для каждого Строка Из Строки Цикл
		Если Строка.Строки.Количество() > 0 Тогда
			ОпределитьОстаткиПотребностиНоменклатураДеньРекурсивно(Строка.Строки, ОстаткиПотребность);
		КонецЕсли; 
		Если Строка.ИмяГруппировки <> ИмяГруппировкиЗаказ() Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Потребность = 0 И Строка.Поступление = 0 Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаПотребность = ОстаткиПотребность.Добавить();
		СтрокаПотребность.Заказ = Строка.Заказ;
		СтрокаПотребность.Остаток = СтрокаПотребность.Остаток + Строка.Потребность - Строка.Поступление;
	КонецЦикла; 	
	
КонецПроцедуры

Процедура УчестьПоддержаниеОстаткаНоменклатураДень(Параметры, Строки, Остатки, КонечныйОстаток)
		
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	Если Строки[0].ИмяГруппировки<>ИмяГруппировкиПериод() Тогда
		Возврат;
	КонецЕсли;
	
	МинимальныйЗапас = ОстатокИзТаблицы(Остатки, Строки.Родитель.Номенклатура, Строки.Родитель.Характеристика, "МинимальныйЗапас");
	МаксимальныйЗапас = ОстатокИзТаблицы(Остатки, Строки.Родитель.Номенклатура, Строки.Родитель.Характеристика, "МаксимальныйЗапас");
	
	СтрокаПериод = Строки[Строки.Количество() - 1];
	Если МинимальныйЗапас <= 0 И СтрокаПериод.НачальныйОстаток >= 0 Тогда
		Возврат;
	КонецЕсли; 
	Если НЕ СтрокаПериод.ЭтоПополнениеЗапасов Тогда
		СтрокаПериод = Строки.Добавить();
		СтрокаПериод.ЭтоПополнениеЗапасов = Истина;
		СтрокаПериод.Представление = НСтр("ru = 'Пополнение запасов'");
		СтрокаПериод.ИмяГруппировки = ИмяГруппировкиПериод();
		СтрокаПериод.Поступление = 0;
		СтрокаПериод.Потребность = 0;
		СтрокаПериод.НачальныйОстаток = КонечныйОстаток;
	КонецЕсли; 
	СтрокаПериод.МинимальныйЗапас = МинимальныйЗапас;
	СтрокаПериод.МаксимальныйЗапас = МаксимальныйЗапас;
	СтрокаПериод.КонечныйОстаток = СтрокаПериод.НачальныйОстаток + СтрокаПериод.Поступление - СтрокаПериод.Потребность;
	Если СтрокаПериод.КонечныйОстаток <= СтрокаПериод.МинимальныйЗапас + СтрокаПериод.Поступление Тогда

		МаксимальныйЗапас = СтрокаПериод.МаксимальныйЗапас;
			
		Если Параметры.ОбеспечениеЗаСчетОстатка	Тогда
			МаксимальныйЗапас = МаксимальныйЗапас + СтрокаПериод.НачальныйОстаток;
		КонецЕсли;
		
		СтрокаПериод.Дефицит = МаксимальныйЗапас - СтрокаПериод.КонечныйОстаток;
		СтрокаПериод.КонечныйОстаток = МаксимальныйЗапас;
		
	КонецЕсли; 
	Если СтрокаПериод.Строки.Количество()>0 Тогда
		// По заказам
		СтрокаПустойЗаказ = СтрокаПериод.Строки.Найти(Неопределено, "Заказ");
		Если СтрокаПустойЗаказ=Неопределено Тогда
			СтрокаПустойЗаказ = СтрокаПериод.Строки.Добавить();
			СтрокаПустойЗаказ.ИмяГруппировки = ИмяГруппировкиЗаказ();
			СтрокаПустойЗаказ.Заказ = Неопределено;
			СтрокаПустойЗаказ.Представление = ПредставлениеЗаказа(СтрокаПустойЗаказ.Заказ);
			СтрокаПустойЗаказ.Поступление = 0;
			СтрокаПустойЗаказ.Потребность = 0;
			СтрокаПустойЗаказ.Дефицит = 0;
			СтрокаПустойЗаказ.НачальныйОстаток = КонечныйОстаток;
		КонецЕсли;
		СтрокаПустойЗаказ.МинимальныйЗапас = МинимальныйЗапас;
		СтрокаПустойЗаказ.МаксимальныйЗапас = МаксимальныйЗапас;
		СтрокаПустойЗаказ.КонечныйОстаток = СтрокаПустойЗаказ.НачальныйОстаток + СтрокаПустойЗаказ.Поступление - СтрокаПустойЗаказ.Потребность;
		Если СтрокаПустойЗаказ.КонечныйОстаток <= СтрокаПустойЗаказ.МинимальныйЗапас + СтрокаПустойЗаказ.Поступление Тогда
			СтрокаПустойЗаказ.Дефицит = СтрокаПустойЗаказ.МаксимальныйЗапас - СтрокаПустойЗаказ.КонечныйОстаток;
			СтрокаПустойЗаказ.КонечныйОстаток = СтрокаПустойЗаказ.МаксимальныйЗапас;
			СтрокаПериод.КонечныйОстаток = СтрокаПустойЗаказ.КонечныйОстаток;
		КонецЕсли;
		СтруктураИтогов = Новый Структура("Потребность, Поступление, Дефицит", 0, 0, 0);
		СуммаКолонок(СтрокаПериод.Строки, СтруктураИтогов);
		ЗаполнитьЗначенияСвойств(СтрокаПериод, СтруктураИтогов);
	КонецЕсли;
	Строки.Родитель.КонечныйОстаток = СтрокаПериод.КонечныйОстаток;
	
КонецПроцедуры
 
#КонецОбласти 

#Область ГруппировкаДеньНоменклатура

Процедура ЗаполнитьОстаткиПотребностиДеньНоменклатураРекурсивно(Строки, ОстаткиПотребность)
	
	Для каждого Строка Из Строки Цикл
		Если Строка.Строки.Количество() > 0 Тогда
			ЗаполнитьОстаткиПотребностиДеньНоменклатураРекурсивно(Строка.Строки, ОстаткиПотребность);
		КонецЕсли; 
		Если Строка.ИмяГруппировки <> ИмяГруппировкиЗаказ() Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Потребность = 0 И Строка.Поступление = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаПотребность = ОстаткиПотребность.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПотребность, Строка);
		СтрокаПотребность.Остаток = СтрокаПотребность.Остаток + Строка.Потребность - Строка.Поступление;
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьИтогиДеньНоменклатураРекурсивно(Строки, Колонки, Параметры, ОстаткиПотребность, Остатки = Неопределено)
	
	Если Остатки=Неопределено Тогда
		ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
		Остатки = Новый ТаблицаЗначений;
		Остатки.Колонки.Добавить("Номенклатура");
		Остатки.Колонки.Добавить("Характеристика");
		Остатки.Колонки.Добавить("ЕдиницаИзмерения");
		Остатки.Колонки.Добавить("Остаток", ТипЧисло);
		Остатки.Колонки.Добавить("МинимальныйЗапас", ТипЧисло);
		Остатки.Колонки.Добавить("МаксимальныйЗапас", ТипЧисло);
	КонецЕсли;
	
	СтруктураИтогов = Новый Структура("Потребность, Поступление, Дефицит", 0, 0, 0);
	
	НачальныйОстаток = 0;
	КонечныйОстаток = 0;
	ОбновитьРодителя = Ложь;
	ПерваяСтрока = Истина;
	СтрокаПустойЗаказ = Неопределено;
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки = ИмяГруппировкиЗаказ() И НЕ ЗначениеЗаполнено(Строка.Заказ) Тогда
			СтрокаПустойЗаказ = Строка;
		КонецЕсли; 
		Если КонечныйОстаток <> 0 Тогда
			Строка.НачальныйОстаток = КонечныйОстаток;
		ИначеЕсли Остатки <> Неопределено И ПерваяСтрока И НЕ ЗначениеЗаполнено(Строка.НачальныйОстаток) Тогда 
			Строка.НачальныйОстаток = ОстатокИзТаблицы(Остатки, Строка.Номенклатура, Строка.Характеристика);
		КонецЕсли; 
		Если Строка.Строки.Количество() > 0 Тогда
			ИтогиВложенных = РассчитатьИтогиДеньНоменклатураРекурсивно(Строка.Строки, Колонки, Параметры, ОстаткиПотребность, Остатки);
			ЗаполнитьЗначенияСвойств(Строка, ИтогиВложенных);
		КонецЕсли;
		ЭтоГруппировкаСДанными = (Строка.ИмяГруппировки=ИмяГруппировкиПериод() 
			ИЛИ Строка.ИмяГруппировки = ИмяГруппировкиЗаказ() 
			ИЛИ Строка.ИмяГруппировки = ИмяГруппировкиНоменклатура());
		Если Строка.Родитель <> Неопределено И ЭтоГруппировкаСДанными Тогда
			Если ПерваяСтрока Тогда			
				Если Строки.Родитель <> Неопределено И ЗначениеЗаполнено(Строки.Родитель.НачальныйОстаток) И НЕ ЗначениеЗаполнено(НачальныйОстаток) Тогда
					НачальныйОстаток = Строки.Родитель.НачальныйОстаток;
					Строка.НачальныйОстаток = НачальныйОстаток;
				ИначеЕсли ЗначениеЗаполнено(Строка.НачальныйОстаток) И НЕ ЗначениеЗаполнено(НачальныйОстаток) Тогда
					НачальныйОстаток = Строка.НачальныйОстаток;
				КонецЕсли;
			КонецЕсли;
			ПересчитатьСтрокуДеньНоменклатура(Строка, ОстаткиПотребность, Остатки);
			Если Строка.ИмяГруппировки <> ИмяГруппировкиНоменклатура() Тогда
				КонечныйОстаток = Строка.КонечныйОстаток;
			КонецЕсли; 
			ОбновитьРодителя = (Строка.ИмяГруппировки <> ИмяГруппировкиНоменклатура());
		КонецЕсли; 
		Для каждого КлючИЗначение Из СтруктураИтогов Цикл
			СтруктураИтогов[КлючИЗначение.Ключ] = СтруктураИтогов[КлючИЗначение.Ключ] + Строка[КлючИЗначение.Ключ];
		КонецЦикла;
		ЗаполнитьПредставлениеГруппировки(Параметры, Строка);
		ПерваяСтрока = Ложь;
	КонецЦикла;
	УчестьПоддержаниеОстаткаДеньНоменклатура(Параметры, Строки, Остатки);
	Если ОбновитьРодителя И Строки.Родитель <> Неопределено Тогда
		Строки.Родитель.НачальныйОстаток 	= НачальныйОстаток;
		Строки.Родитель.КонечныйОстаток 	= КонечныйОстаток;
	КонецЕсли; 
	
	Возврат СтруктураИтогов;
	
КонецФункции

Процедура ПересчитатьСтрокуДеньНоменклатура(Строка, ОстаткиПотребность, Остатки)
	
	Если ЗначениеЗаполнено(Строка.МинимальныйЗапас) Тогда
		ОбновитьОстаток(Остатки, Строка, Строка.МинимальныйЗапас, "МинимальныйЗапас");
		Строка.МинимальныйЗапас = 0;
	КонецЕсли;
	Если ЗначениеЗаполнено(Строка.МаксимальныйЗапас) Тогда
		ОбновитьОстаток(Остатки, Строка, Строка.МаксимальныйЗапас, "МаксимальныйЗапас");
		Строка.МаксимальныйЗапас = 0;
	КонецЕсли;
	Строка.КонечныйОстаток = Строка.НачальныйОстаток + Строка.Поступление - Строка.Потребность + Строка.Дефицит;
	Если Строка.Строки.Количество() = 0 Тогда
		Если Строка.КонечныйОстаток < 0 Тогда
			Строка.Дефицит = -Строка.КонечныйОстаток;
			Строка.КонечныйОстаток = 0;
		Иначе
			Строка.Дефицит = 0;
		КонецЕсли;
		Если Строка.ИмяГруппировки = ИмяГруппировкиЗаказ() Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Заказ", Строка.Заказ);
			СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураОтбора.Вставить("Характеристика", Строка.Характеристика);
			НайденныеСтроки = ОстаткиПотребность.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаПотребность = НайденныеСтроки[0];
				ОстатокПотребность = СтрокаПотребность.Остаток;
			Иначе
				СтрокаПотребность = Неопределено;
				ОстатокПотребность = 0;
			КонецЕсли;
			Если Строка.Дефицит > ОстатокПотребность И Строка.Дефицит > 0 Тогда
				// Найдено поступление по тому же заказу позже даты потребности
				СтрокаНоменклатура = Строка.Родитель;
				Дата = Строка.Период;
				Если ЗначениеЗаполнено(Дата) Тогда
					ТекстСообщения = НСтр("ru = 'Для заказов с дефицитом на %1 запланированы поступления с более поздними датами. Рекомендуется внести изменения в план, иначе заказы не удастся выполнить в срок.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(Дата, "ДЛФ=D"));
					ДобавитьСообщение(СтрокаНоменклатура, ТекстСообщения, Истина);
				КонецЕсли;
				ФактическаяПотребность = Мин(ОстатокПотребность, Строка.Потребность);
				Если СтрокаПотребность <> Неопределено И Строка.Потребность > ОстатокПотребность Тогда
					СтрокаПотребность.Остаток = 0;
				ИначеЕсли СтрокаПотребность <> Неопределено И Строка.Потребность > 0 Тогда 
					СтрокаПотребность.Остаток = СтрокаПотребность.Остаток - Строка.Потребность;
				КонецЕсли;
				СУчетомОстатков = ФактическаяПотребность - ?(Строка.НачальныйОстаток > 0, Строка.НачальныйОстаток, 0);
				Если СУчетомОстатков < 0 Тогда
					СУчетомОстатков = 0;
				КонецЕсли; 
				Строка.Дефицит = СУчетомОстатков;
				Строка.КонечныйОстаток = Строка.НачальныйОстаток + Строка.Поступление - Строка.Потребность + Строка.Дефицит;
			ИначеЕсли СтрокаПотребность <> Неопределено Тогда 
				СтрокаПотребность.Остаток = СтрокаПотребность.Остаток - Строка.Дефицит;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	ОбновитьОстаток(Остатки, Строка, Строка.КонечныйОстаток, "Остаток");
	
КонецПроцедуры

Процедура УчестьПоддержаниеОстаткаДеньНоменклатура(Параметры, Строки, Остатки)
		
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	Если Строки[0].ИмяГруппировки<>ИмяГруппировкиПериод() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПериод = Строки.Добавить();
	СтрокаПериод.ЭтоПополнениеЗапасов = Истина;
	СтрокаПериод.Представление = НСтр("ru = 'Пополнение запасов'");
	СтрокаПериод.ИмяГруппировки = ИмяГруппировкиПериод();
	СтрокаПериод.Поступление = 0;
	СтрокаПериод.Потребность = 0;
	
	Для каждого СтрокаОстатка Из Остатки Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаОстатка.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", СтрокаОстатка.Характеристика);
		СтрокиНоменклатуры = СтрокаПериод.Строки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиНоменклатуры.Количество()=0 Тогда
			НоваяСтрока = СтрокаПериод.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
			НоваяСтрока.ИмяГруппировки = ИмяГруппировкиНоменклатура();
			НоваяСтрока.Поступление = 0;
			НоваяСтрока.Потребность = 0;
			НоваяСтрока.НачальныйОстаток = СтрокаОстатка.Остаток;
		Иначе
			НоваяСтрока = СтрокиНоменклатуры[0];
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка, "МинимальныйЗапас, МаксимальныйЗапас");
		НоваяСтрока.КонечныйОстаток = НоваяСтрока.НачальныйОстаток + НоваяСтрока.Поступление - НоваяСтрока.Потребность;
		Если НоваяСтрока.КонечныйОстаток <= СтрокаОстатка.МинимальныйЗапас + НоваяСтрока.Поступление Тогда   

			МаксимальныйЗапас = СтрокаОстатка.МаксимальныйЗапас;
			
			Если Параметры.ОбеспечениеЗаСчетОстатка	Тогда
				МаксимальныйЗапас = МаксимальныйЗапас + НоваяСтрока.НачальныйОстаток;
			КонецЕсли;
			
			НоваяСтрока.Дефицит = МаксимальныйЗапас - НоваяСтрока.КонечныйОстаток;
			НоваяСтрока.КонечныйОстаток = МаксимальныйЗапас;
			
		КонецЕсли; 
	КонецЦикла;
	
	Если СтрокаПериод.Строки.Количество()=0 Тогда
		Строки.Удалить(СтрокаПериод);
	Иначе
		СтруктураИтогов = Новый Структура("Потребность, Поступление, Дефицит", 0, 0, 0);
		СуммаКолонок(СтрокаПериод.Строки, СтруктураИтогов);
		ЗаполнитьЗначенияСвойств(СтрокаПериод, СтруктураИтогов);
	КонецЕсли; 
		
КонецПроцедуры

#КонецОбласти

#Область ГруппировкаЗаказНоменклатура

Функция РассчитатьИтогиЗаказНоменклатураРекурсивно(Строки, Колонки, Параметры, Остатки = Неопределено)
	
	ТипЧислоКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	Если Остатки = Неопределено Тогда
		Остатки = Новый ТаблицаЗначений;
		Остатки.Колонки.Добавить("Номенклатура");
		Остатки.Колонки.Добавить("Характеристика");
		Остатки.Колонки.Добавить("ЕдиницаИзмерения");
		Остатки.Колонки.Добавить("Остаток", ТипЧислоКоличество);
		Остатки.Колонки.Добавить("МинимальныйЗапас", ТипЧислоКоличество);
		Остатки.Колонки.Добавить("МаксимальныйЗапас", ТипЧислоКоличество);
	КонецЕсли;
	
	СтруктураИтогов = Новый Структура("Потребность, Поступление, Дефицит", 0, 0, 0);
	
	ОбновитьРодителя = Ложь;
	ПерваяСтрока = Истина;
	СтрокаПустойЗаказ = Неопределено;
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки = ИмяГруппировкиЗаказ() И НЕ ЗначениеЗаполнено(Строка.Заказ) Тогда
			СтрокаПустойЗаказ = Строка;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(Строка.НачальныйОстаток) Тогда 
			Строка.НачальныйОстаток = ОстатокИзТаблицы(Остатки, Строка.Номенклатура, Строка.Характеристика);
		КонецЕсли; 
		Если Строка.Строки.Количество()>0 Тогда
			ИтогиВложенных = РассчитатьИтогиЗаказНоменклатураРекурсивно(Строка.Строки, Колонки, Параметры, Остатки);
			ЗаполнитьЗначенияСвойств(Строка, ИтогиВложенных);
		КонецЕсли; 
		ЭтоГруппировкаСДанными = (Строка.ИмяГруппировки = ИмяГруппировкиПериод() 
			ИЛИ Строка.ИмяГруппировки = ИмяГруппировкиЗаказ() 
			ИЛИ Строка.ИмяГруппировки = ИмяГруппировкиНоменклатура());
		Если Строка.Родитель<>Неопределено И ЭтоГруппировкаСДанными Тогда
			ПересчитатьСтрокуЗаказНоменклатура(Строка, Остатки);	
		КонецЕсли; 
		Для каждого КлючИЗначение Из СтруктураИтогов Цикл
			СтруктураИтогов[КлючИЗначение.Ключ] = СтруктураИтогов[КлючИЗначение.Ключ] + Строка[КлючИЗначение.Ключ];
		КонецЦикла;
		ЗаполнитьПредставлениеГруппировки(Параметры, Строка);
		ПерваяСтрока = Ложь;
	КонецЦикла;
	УчестьПоддержаниеОстаткаЗаказНоменклатура(Параметры, Строки, Остатки);
	
	Возврат СтруктураИтогов;
	
КонецФункции

Процедура ПересчитатьСтрокуЗаказНоменклатура(Строка, Остатки)
	
	Если ЗначениеЗаполнено(Строка.МинимальныйЗапас) Тогда
		ОбновитьОстаток(Остатки, Строка, Строка.МинимальныйЗапас, "МинимальныйЗапас");
		Строка.МинимальныйЗапас = 0;
	КонецЕсли;
	Если ЗначениеЗаполнено(Строка.МаксимальныйЗапас) Тогда
		ОбновитьОстаток(Остатки, Строка, Строка.МаксимальныйЗапас, "МаксимальныйЗапас");
		Строка.МаксимальныйЗапас = 0;
	КонецЕсли;
	Строка.КонечныйОстаток = Строка.НачальныйОстаток + Строка.Поступление - Строка.Потребность;
	Если Строка.КонечныйОстаток<0 Тогда
		Строка.Дефицит = -Строка.КонечныйОстаток;
		Строка.КонечныйОстаток = 0;
	Иначе
		Строка.Дефицит = 0;
	КонецЕсли;
	ОбновитьОстаток(Остатки, Строка, Строка.КонечныйОстаток, "Остаток");
	
КонецПроцедуры

Процедура УчестьПоддержаниеОстаткаЗаказНоменклатура(Параметры, Строки, Остатки)
	
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	Если Строки[0].ИмяГруппировки<>ИмяГруппировкиЗаказ() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПустойЗаказ = Строки.Добавить();
	СтрокаПустойЗаказ.ЭтоПополнениеЗапасов = Истина;
	СтрокаПустойЗаказ.ИмяГруппировки = ИмяГруппировкиЗаказ();
	СтрокаПустойЗаказ.Заказ = Неопределено;
	СтрокаПустойЗаказ.Представление = НСтр("ru = 'Пополнение запасов'");
	
	Для каждого СтрокаОстатка Из Остатки Цикл
		Если СтрокаОстатка.МинимальныйЗапас<=0 Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаОстатка.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", СтрокаОстатка.Характеристика);
		СтрокиНоменклатуры = СтрокаПустойЗаказ.Строки.НайтиСтроки(СтруктураОтбора);
		Если СтрокиНоменклатуры.Количество()=0 Тогда
			НоваяСтрока = СтрокаПустойЗаказ.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
			НоваяСтрока.ИмяГруппировки = ИмяГруппировкиНоменклатура();
			НоваяСтрока.Поступление = 0;
			НоваяСтрока.Потребность = 0;
		Иначе
			НоваяСтрока = СтрокиНоменклатуры[0];
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка, "МинимальныйЗапас, МаксимальныйЗапас");
		НоваяСтрока.НачальныйОстаток = СтрокаОстатка.Остаток;
		НоваяСтрока.КонечныйОстаток = НоваяСтрока.НачальныйОстаток + НоваяСтрока.Поступление - НоваяСтрока.Потребность;
		Если НоваяСтрока.КонечныйОстаток <= СтрокаОстатка.МинимальныйЗапас + НоваяСтрока.Поступление Тогда

			МаксимальныйЗапас = СтрокаОстатка.МаксимальныйЗапас;
			
			Если Параметры.ОбеспечениеЗаСчетОстатка	Тогда
				МаксимальныйЗапас = МаксимальныйЗапас + НоваяСтрока.НачальныйОстаток;
			КонецЕсли;
			
			НоваяСтрока.Дефицит = МаксимальныйЗапас - НоваяСтрока.КонечныйОстаток;
			НоваяСтрока.КонечныйОстаток = МаксимальныйЗапас;     
			
		КонецЕсли; 
	КонецЦикла;
	
	Если СтрокаПустойЗаказ.Строки.Количество()=0 Тогда
		Строки.Удалить(СтрокаПустойЗаказ);
	Иначе
		СтруктураИтогов = Новый Структура("Потребность, Поступление, Дефицит", 0, 0, 0);
		СуммаКолонок(СтрокаПустойЗаказ.Строки, СтруктураИтогов);
		ЗаполнитьЗначенияСвойств(СтрокаПустойЗаказ, СтруктураИтогов);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ПараметрыПоступления

Процедура ЗаполнитьПараметрыПоступления(Дерево, Параметры)
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ЗаполнитьНоменклатуруРекурсивно(Дерево.Строки, ТаблицаНоменклатуры);
	
	ОсновноеПодразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение();
	ОсновнойСклад = Справочники.СтруктурныеЕдиницы.ОсновнойСклад();
	
	Запрос = Новый Запрос;       
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ДатаЦен", Параметры.Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОсновноеПодразделение", ОсновноеПодразделение);
	Запрос.УстановитьПараметр("ОсновнойСклад", ОсновнойСклад);
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Если ЗначениеЗаполнено(Параметры.Склад) Тогда
		ИсточникПеремещения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Склад, "ИсточникПеремещения");
	Иначе
		ИсточникПеремещения = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	КонецЕсли;                                                                   
	Запрос.УстановитьПараметр("ИсточникПеремещения", ИсточникПеремещения);
	ПоказыватьЗакупку = Ложь;
	ПоказыватьПереработку = Ложь;
	ПоказыватьПроизводство = Ложь;
	ПоказыватьПеремещения = Ложь;
	Если Параметры.СпособПополнения = СпособПополненияПроизводство() Тогда
		ПоказыватьПроизводство = Истина;
	ИначеЕсли Параметры.СпособПополнения = СпособПополненияЗакупка() Тогда
		ПоказыватьЗакупку = Истина;
	ИначеЕсли Параметры.СпособПополнения = СпособПополненияЗакупкаПереработка() Тогда
		ПоказыватьЗакупку = Истина;
		ПоказыватьПереработку = Истина;
	ИначеЕсли Параметры.СпособПополнения = СпособПополненияПеремещение() Тогда
		ПоказыватьПеремещения = Истина;
	ИначеЕсли Параметры.СпособПополнения = СпособПополненияВсе() Тогда
		ПоказыватьПеремещения = ЗначениеЗаполнено(Параметры.Склад);
		ПоказыватьЗакупку = Истина;
		ПоказыватьПереработку = ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья");
		ПоказыватьПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство");
	КонецЕсли; 
	Запрос.УстановитьПараметр("ПоказыватьЗакупку", ПоказыватьЗакупку);
	Запрос.УстановитьПараметр("ПоказыватьПереработку", ПоказыватьПереработку);
	Запрос.УстановитьПараметр("ПоказыватьПроизводство", ПоказыватьПроизводство);
	Запрос.УстановитьПараметр("ПоказыватьПеремещения", ПоказыватьПеремещения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыКонтрагентов.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыКонтрагентов.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыКонтрагентов.ВидЦенКонтрагента.Владелец КАК Контрагент,
	|	ЦеныНоменклатурыКонтрагентов.ВидЦенКонтрагента КАК ВидЦен,
	|	ЦеныНоменклатурыКонтрагентов.Цена КАК Цена,
	|	ЦеныНоменклатурыКонтрагентов.ВидЦенКонтрагента.ВалютаЦены КАК Валюта,
	|	ЦеныНоменклатурыКонтрагентов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатурыКонтрагентов.Актуальность КАК Актуальность,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыКонтрагентов.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|				И ВЫРАЗИТЬ(ЦеныНоменклатурыКонтрагентов.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент <> 0
	|			ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыКонтрагентов.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоэффициентЦены,
	|	ЦеныНоменклатурыКонтрагентов.Период КАК Период
	|ПОМЕСТИТЬ ЦеныНоменклатурыКонтрагентов
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|			&ДатаЦен,
	|			(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					ТаблицаНоменклатуры.Номенклатура,
	|					ТаблицаНоменклатуры.Характеристика
	|				ИЗ
	|					ТаблицаНоменклатуры)) КАК ЦеныНоменклатурыКонтрагентов
	|ГДЕ
	|	(&ПоказыватьПереработку
	|			ИЛИ &ПоказыватьЗакупку)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
	|	НоменклатураПоставщиков.СрокПополнения КАК СрокПополнения,
	|	НоменклатураПоставщиков.Ссылка КАК Ссылка,
	|	НоменклатураПоставщиков.Остаток КАК Остаток,
	|	НоменклатураПоставщиков.Владелец КАК Владелец
	|ПОМЕСТИТЬ ОстаткиНоменклатурыПоставщиков
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|		ПО ТаблицаНоменклатуры.Номенклатура = НоменклатураПоставщиков.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = НоменклатураПоставщиков.Характеристика
	|ГДЕ
	|	(&ПоказыватьПереработку
	|			ИЛИ &ПоказыватьЗакупку)
	|	И НоменклатураПоставщиков.Остаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеОстатки.Склад КАК Склад,
	|	ДоступныеОстатки.Номенклатура КАК Номенклатура,
	|	ДоступныеОстатки.Характеристика КАК Характеристика,
	|	СУММА(ДоступныеОстатки.Доступно) КАК Доступно
	|ПОМЕСТИТЬ ЗапасыДоступно
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК Склад,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.КоличествоОстаток КАК Доступно
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				{(&ДатаОстатки)},
	|				&ПоказыватьПеремещения
	|					И Организация = &Организация
	|					И СтруктурнаяЕдиница <> &Склад
	|					И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ТаблицаНоменклатуры.Номенклатура,
	|							ТаблицаНоменклатуры.Характеристика
	|						ИЗ
	|							ТаблицаНоменклатуры)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПокупателейОстатки.Склад,
	|		ЗаказыПокупателейОстатки.Номенклатура,
	|		ЗаказыПокупателейОстатки.Характеристика,
	|		-ЗаказыПокупателейОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				{(&ДатаОстатки)},
	|				&ПоказыватьПеремещения
	|					И Организация = &Организация
	|					И НЕ Склад В (&Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ТаблицаНоменклатуры.Номенклатура,
	|							ТаблицаНоменклатуры.Характеристика
	|						ИЗ
	|							ТаблицаНоменклатуры)) КАК ЗаказыПокупателейОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыПоставщикамОстатки.Склад,
	|		ЗаказыПоставщикамОстатки.Номенклатура,
	|		ЗаказыПоставщикамОстатки.Характеристика,
	|		ЗаказыПоставщикамОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				{(&ДатаОстатки)},
	|				&ПоказыватьПеремещения
	|					И Организация = &Организация
	|					И НЕ Склад В (&Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ТаблицаНоменклатуры.Номенклатура,
	|							ТаблицаНоменклатуры.Характеристика
	|						ИЗ
	|							ТаблицаНоменклатуры)) КАК ЗаказыПоставщикамОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыНаПроизводствоОстатки.Склад,
	|		ЗаказыНаПроизводствоОстатки.Номенклатура,
	|		ЗаказыНаПроизводствоОстатки.Характеристика,
	|		ЗаказыНаПроизводствоОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПроизводство.Остатки(
	|				{(&ДатаОстатки)},
	|				&ПоказыватьПеремещения
	|					И Организация = &Организация
	|					И НЕ Склад В (&Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ТаблицаНоменклатуры.Номенклатура,
	|							ТаблицаНоменклатуры.Характеристика
	|						ИЗ
	|							ТаблицаНоменклатуры)) КАК ЗаказыНаПроизводствоОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПотребностьВЗапасахОстатки.Склад,
	|		ПотребностьВЗапасахОстатки.Номенклатура,
	|		ПотребностьВЗапасахОстатки.Характеристика,
	|		ВЫБОР
	|			КОГДА ПотребностьВЗапасахОстатки.ТипДвижения = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка)
	|				ТОГДА -ПотребностьВЗапасахОстатки.КоличествоОстаток
	|			ИНАЧЕ ПотребностьВЗапасахОстатки.КоличествоОстаток
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ПотребностьВЗапасах.Остатки(
	|				{(&ДатаОстатки)},
	|				&ПоказыватьПеремещения
	|					И Организация = &Организация
	|					И НЕ Склад В (&Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ТаблицаНоменклатуры.Номенклатура,
	|							ТаблицаНоменклатуры.Характеристика
	|						ИЗ
	|							ТаблицаНоменклатуры)) КАК ПотребностьВЗапасахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыНаПеремещениеОстатки.Склад,
	|		ЗаказыНаПеремещениеОстатки.Номенклатура,
	|		ЗаказыНаПеремещениеОстатки.Характеристика,
	|		ВЫБОР
	|			КОГДА ЗаказыНаПеремещениеОстатки.ТипДвижения = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка)
	|				ТОГДА -ЗаказыНаПеремещениеОстатки.КоличествоОстаток
	|			ИНАЧЕ ЗаказыНаПеремещениеОстатки.КоличествоОстаток
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПеремещение.Остатки(
	|				{(&ДатаОстатки)},
	|				&ПоказыватьПеремещения
	|					И Организация = &Организация
	|					И НЕ Склад В (&Склад, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ТаблицаНоменклатуры.Номенклатура,
	|							ТаблицаНоменклатуры.Характеристика
	|						ИЗ
	|							ТаблицаНоменклатуры)) КАК ЗаказыНаПеремещениеОстатки) КАК ДоступныеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступныеОстатки.Склад,
	|	ДоступныеОстатки.Номенклатура,
	|	ДоступныеОстатки.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Переработка)
	|				И &ПоказыватьПереработку
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Переработка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Закупка)
	|	КОНЕЦ КАК СпособПополнения,
	|	ТаблицаНоменклатуры.Номенклатура.СрокПополнения КАК СрокПополнения,
	|	ЗапасыИВидыЦен.Контрагент КАК Источник,
	|	ЗапасыИВидыЦен.ВидЦен КАК ВидЦен,
	|	ЕСТЬNULL(ОсновныеДоговорыКонтрагента.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	0 КАК Лимит,
	|	ВЫБОР
	|		КОГДА ЗапасыИВидыЦен.Контрагент = ТаблицаНоменклатуры.Номенклатура.Поставщик
	|				И ТаблицаНоменклатуры.Номенклатура.СпособПополнения В (ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Переработка), ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Закупка))
	|			ТОГДА 1
	|		КОГДА ЕСТЬNULL(ОсновныеДоговорыКонтрагента.Договор.ВидЦенКонтрагента, ЗНАЧЕНИЕ(Справочник.ВидыЦенКонтрагентов.ПустаяСсылка)) = ЗапасыИВидыЦен.ВидЦен
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Порядок,
	|	ЗапасыИВидыЦен.Период КАК ПорядокДоп
	|ПОМЕСТИТЬ НоменклатураИсточники
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныНоменклатурыКонтрагентов КАК ЗапасыИВидыЦен
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЗапасыИВидыЦен.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ЗапасыИВидыЦен.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Организация = &Организация)
	|			И (ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СПоставщиком))
	|			И (ЗапасыИВидыЦен.Контрагент = ОсновныеДоговорыКонтрагента.Контрагент)
	|ГДЕ
	|	(&ПоказыватьПереработку
	|			ИЛИ &ПоказыватьЗакупку)
	|	И ЗапасыИВидыЦен.Актуальность
	|	И ЗапасыИВидыЦен.Цена <> 0
	|	И НЕ ЗапасыИВидыЦен.ВидЦен.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Переработка)
	|				И &ПоказыватьПереработку
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Переработка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Закупка)
	|	КОНЕЦ,
	|	ОстаткиНоменклатурыПоставщиков.СрокПополнения,
	|	ОстаткиНоменклатурыПоставщиков.Ссылка,
	|	ЕСТЬNULL(ОсновныеДоговорыКонтрагента.Договор.ВидЦенКонтрагента, ЗНАЧЕНИЕ(Справочник.ВидыЦенКонтрагентов.ПустаяСсылка)),
	|	ЕСТЬNULL(ОсновныеДоговорыКонтрагента.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)),
	|	ОстаткиНоменклатурыПоставщиков.Остаток,
	|	ВЫБОР
	|		КОГДА ОстаткиНоменклатурыПоставщиков.Владелец = ТаблицаНоменклатуры.Номенклатура.Поставщик
	|				И ТаблицаНоменклатуры.Номенклатура.СпособПополнения В (ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Переработка), ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Закупка))
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ДАТАВРЕМЯ(3000, 1, 1)
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиНоменклатурыПоставщиков КАК ОстаткиНоменклатурыПоставщиков
	|		ПО ТаблицаНоменклатуры.Номенклатура = ОстаткиНоменклатурыПоставщиков.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ОстаткиНоменклатурыПоставщиков.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Организация = &Организация)
	|			И (ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СПоставщиком))
	|			И (ОстаткиНоменклатурыПоставщиков.Владелец = ОсновныеДоговорыКонтрагента.Контрагент)
	|ГДЕ
	|	(&ПоказыватьПереработку
	|			ИЛИ &ПоказыватьЗакупку)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство),
	|	ТаблицаНоменклатуры.Номенклатура.СрокПополнения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.Изготовитель <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|			ТОГДА ТаблицаНоменклатуры.Номенклатура.Изготовитель
	|		КОГДА НЕ ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Значение
	|				И ФункциональнаяОпцияУчетПоНесколькимСкладам.Значение
	|			ТОГДА &ОсновнойСклад
	|		ИНАЧЕ &ОсновноеПодразделение
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦенКонтрагентов.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
	|	0,
	|	4,
	|	ДАТАВРЕМЯ(1, 1, 1)
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры,
	|	Константа.ФункциональнаяОпцияУчетПоНесколькимПодразделениям КАК ФункциональнаяОпцияУчетПоНесколькимПодразделениям,
	|	Константа.ФункциональнаяОпцияУчетПоНесколькимСкладам КАК ФункциональнаяОпцияУчетПоНесколькимСкладам
	|ГДЕ
	|	&ПоказыватьПроизводство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Переработка)
	|				И &ПоказыватьПереработку
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Переработка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Закупка)
	|	КОНЕЦ,
	|	ТаблицаНоменклатуры.Номенклатура.СрокПополнения,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦенКонтрагентов.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
	|	0,
	|	5,
	|	ДАТАВРЕМЯ(1, 1, 1)
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	(&ПоказыватьПереработку
	|			ИЛИ &ПоказыватьЗакупку)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Переработка)
	|				И &ПоказыватьПереработку
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Переработка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Закупка)
	|	КОНЕЦ,
	|	ТаблицаНоменклатуры.Номенклатура.СрокПополнения,
	|	ТаблицаНоменклатуры.Номенклатура.Поставщик,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦенКонтрагентов.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
	|	0,
	|	1,
	|	ДАТАВРЕМЯ(1, 1, 1)
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыКонтрагентов КАК ЗапасыИВидыЦен
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЗапасыИВидыЦен.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ЗапасыИВидыЦен.Характеристика
	|			И (ЗапасыИВидыЦен.Актуальность)
	|			И (ЗапасыИВидыЦен.Цена <> 0)
	|			И (НЕ ЗапасыИВидыЦен.ВидЦен.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Организация = &Организация)
	|			И (ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СПоставщиком))
	|			И (ЗапасыИВидыЦен.Контрагент = ОсновныеДоговорыКонтрагента.Контрагент)
	|ГДЕ
	|	(&ПоказыватьПереработку
	|			ИЛИ &ПоказыватьЗакупку)
	|	И ЗапасыИВидыЦен.Контрагент ЕСТЬ NULL
	|	И ТаблицаНоменклатуры.Номенклатура.Поставщик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Перемещение),
	|	0,
	|	ЕСТЬNULL(ЗапасыДоступно.Склад, &ИсточникПеремещения),
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦенКонтрагентов.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
	|	ЕСТЬNULL(ЗапасыДоступно.Доступно, 0),
	|	0,
	|	ВЫБОР
	|		КОГДА &ИсточникПеремещения <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И ЕСТЬNULL(ЗапасыДоступно.Склад, &ИсточникПеремещения) = &ИсточникПеремещения
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 2)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапасыДоступно КАК ЗапасыДоступно
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЗапасыДоступно.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ЗапасыДоступно.Характеристика
	|ГДЕ
	|	&ПоказыватьПеремещения
	|	И (ЕСТЬNULL(ЗапасыДоступно.Доступно, 0) > 0
	|			ИЛИ &ИсточникПеремещения <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ЕдиницыИзмерения.Ссылка) КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВременнаяТаблицаЕдиницыИзмерения
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЕдиницыИзмерения.Владелец
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураИсточники.Номенклатура КАК Номенклатура,
	|	НоменклатураИсточники.Характеристика КАК Характеристика,
	|	НоменклатураИсточники.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НоменклатураИсточники.СпособПополнения КАК СпособПополнения,
	|	НоменклатураИсточники.СрокПополнения КАК СрокПополнения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникХарактеристики.Артикул, """") <> """"
	|			ТОГДА ЕСТЬNULL(СправочникХарактеристики.Артикул, """")
	|		ИНАЧЕ СправочникНоменклатура.Артикул
	|	КОНЕЦ КАК Артикул,
	|	СправочникНоменклатура.Весовой КАК Весовой,
	|	НоменклатураИсточники.Источник КАК Источник,
	|	НоменклатураИсточники.Договор КАК Договор,
	|	НоменклатураИсточники.Лимит КАК Лимит,
	|	НоменклатураИсточники.ВидЦен КАК ВидЦен,
	|	ЕСТЬNULL(ЦеныНоменклатурыКонтрагентов.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА НоменклатураИсточники.ЕдиницаИзмерения = ЦеныНоменклатурыКонтрагентов.ЕдиницаИзмерения
	|					ТОГДА ЦеныНоменклатурыКонтрагентов.Цена
	|				ИНАЧЕ ЦеныНоменклатурыКонтрагентов.Цена / ЦеныНоменклатурыКонтрагентов.КоэффициентЦены * ВЫБОР
	|						КОГДА НоменклатураИсточники.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|								И ВЫРАЗИТЬ(НоменклатураИсточники.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент <> 0
	|							ТОГДА ВЫРАЗИТЬ(НоменклатураИсточники.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			КОНЕЦ КАК ЧИСЛО(15, 2)), 0) КАК Цена,
	|	ВЫБОР
	|		КОГДА ПроверкаНаличияЕдиницИзмерения.ЕдиницаИзмерения ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НесколькоЕдиницИзмерения
	|ИЗ
	|	НоменклатураИсточники КАК НоменклатураИсточники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыКонтрагентов КАК ЦеныНоменклатурыКонтрагентов
	|		ПО НоменклатураИсточники.ВидЦен = ЦеныНоменклатурыКонтрагентов.ВидЦен
	|			И НоменклатураИсточники.Номенклатура = ЦеныНоменклатурыКонтрагентов.Номенклатура
	|			И НоменклатураИсточники.Характеристика = ЦеныНоменклатурыКонтрагентов.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаЕдиницыИзмерения КАК ПроверкаНаличияЕдиницИзмерения
	|		ПО НоменклатураИсточники.Номенклатура = ПроверкаНаличияЕдиницИзмерения.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО НоменклатураИсточники.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СправочникХарактеристики
	|		ПО НоменклатураИсточники.Характеристика = СправочникХарактеристики.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	НоменклатураИсточники.Порядок УБЫВ,
	|	НоменклатураИсточники.ПорядокДоп";
	// Сортировка в обратном порядке
	ТаблицаПараметров = Запрос.Выполнить().Выгрузить();
	ТаблицаПараметров.Индексы.Добавить("Номенклатура, Характеристика");
	
	Дерево.Колонки.Добавить("СпособПополнения");
	Дерево.Колонки.Добавить("Источник");
	Дерево.Колонки.Добавить("Договор");
	Дерево.Колонки.Добавить("Лимит");
	Дерево.Колонки.Добавить("Весовой");
	Дерево.Колонки.Добавить("ВидЦен");
	Дерево.Колонки.Добавить("Валюта");
	Дерево.Колонки.Добавить("Цена");
	Дерево.Колонки.Добавить("ДатаПоступления");
	Дерево.Колонки.Добавить("НесколькоЕдиницИзмерения");
	Дерево.Колонки.Добавить("СрокПополнения");
	Дерево.Колонки.Добавить("Артикул");
	
	Параметры.Вставить("УчетЦенКонтрагентов", ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов"));
	Параметры.Вставить("УчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	Параметры.Вставить("ВалютаУчета", Константы.ВалютаУчета.Получить());
	ЗаполнитьПараметрыНоменклатурыРекурсивно(Дерево.Строки, ТаблицаПараметров, Параметры);

КонецПроцедуры

Процедура ЗаполнитьНоменклатуруРекурсивно(Строки, ТаблицаНоменклатуры)
	
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки=ИмяГруппировкиНоменклатура() Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураОтбора.Вставить("Характеристика", Строка.Характеристика);
			НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество()=0 Тогда
				НоваяСтрока = ТаблицаНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
		ИначеЕсли Строка.Строки.Количество()>0 Тогда 
			ЗаполнитьНоменклатуруРекурсивно(Строка.Строки, ТаблицаНоменклатуры);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОпределитьВозможностьОбеспечения(Строка, Параметры)
	
	ГраничнаяДатаПоступления = НачалоДня(Параметры.Период.ДатаНачала) + Строка.СрокПополнения * 86400;
	НевозможноОбеспечить 	 = 0;
	Периодичность  			 = Параметры.Периодичность;
	
	Если Параметры.Группировать = ГруппировкаНоменклатура() Тогда
		
		НевозможноОбеспечить = Строка.Просрочено;
		ТекущаяДата 		 = НачалоДня(Параметры.Период.ДатаНачала);
			
		Пока ТекущаяДата < ГраничнаяДатаПоступления И ТекущаяДата <= Параметры.Период.ДатаОкончания Цикл
			
			ИмяКолонки 			 = ИмяКолонкиПериод(ТекущаяДата);
			СледующаяДата   	 = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(
				ТекущаяДата, 
				Параметры.Периодичность, 
				1);

			ТекущаяДатаОкончаниеПериода = ?(Периодичность = Перечисления.Периодичность.День, 
				ТекущаяДата, 
				ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(ТекущаяДата, Периодичность, 1));
				
			Если ТекущаяДатаОкончаниеПериода < ГраничнаяДатаПоступления Тогда
				НевозможноОбеспечить = НевозможноОбеспечить + Строка[ИмяКолонки];
			КонецЕсли;
			
			ТекущаяДата 		 = СледующаяДата + 86400;
			
		КонецЦикла;
		
	ИначеЕсли Параметры.Группировать = ГруппировкаНоменклатураДень() Тогда

		Для каждого СтрокаПериод Из Строка.Строки Цикл
			Если СтрокаПериод.ИмяГруппировки <> ИмяГруппировкиПериод() Тогда
				Продолжить;
			КонецЕсли; 
			Если СтрокаПериод.ЭтоПополнениеЗапасов Тогда
				Продолжить;
			КонецЕсли;
			Период = ?(ЗначениеЗаполнено(СтрокаПериод.Период), СтрокаПериод.Период, '0001-01-01');
			Если Период >= ГраничнаяДатаПоступления Тогда
				Прервать;
			КонецЕсли; 

			ПериодОкончаниеПериода = ?(Не ЗначениеЗаполнено(Период) ИЛИ Периодичность = Перечисления.Периодичность.День, 
				Период, 
				ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(Период, Периодичность, 1));
				
			Если ПериодОкончаниеПериода < ГраничнаяДатаПоступления Тогда	
				НевозможноОбеспечить = НевозможноОбеспечить + СтрокаПериод.Дефицит;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Параметры.Группировать = ГруппировкаЗаказНоменклатура() Тогда

		СтрокаРодитель = Строка.Родитель;
		
		Если НЕ СтрокаРодитель.ЭтоПополнениеЗапасов Тогда

			Период 				  = ?(ЗначениеЗаполнено(СтрокаРодитель.ДатаЗаказа), СтрокаРодитель.ДатаЗаказа, '0001-01-01');
			ПериодОкончаниеПериода = ?(ЗначениеЗаполнено(Период), 
				Период, 
				ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(Параметры.Период.ДатаНачала, Периодичность, 1));
			
			Если Период < ГраничнаяДатаПоступления Тогда
				НевозможноОбеспечить = НевозможноОбеспечить + Строка.Дефицит;
			КонецЕсли; 
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Группировать = ГруппировкаДеньНоменклатура() Тогда
		
		СтрокаРодитель = Строка.Родитель;
		
		Если НЕ СтрокаРодитель.ЭтоПополнениеЗапасов Тогда
			
			Период = ?(ЗначениеЗаполнено(СтрокаРодитель.Период), СтрокаРодитель.Период, '0001-01-01');
			
			Если Период < ГраничнаяДатаПоступления Тогда

				ПериодОкончаниеПериода = ?(Не ЗначениеЗаполнено(Период) ИЛИ Периодичность = Перечисления.Периодичность.День, 
					Период, 
					ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(Период, Параметры.Периодичность, 1));
				
				Если ПериодОкончаниеПериода < ГраничнаяДатаПоступления Тогда	
					НевозможноОбеспечить = НевозможноОбеспечить + Строка.Дефицит;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;        
	
	Строка.НевозможноОбеспечить = НевозможноОбеспечить;
	
	Если НевозможноОбеспечить > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удастся выполнить обеспечение в срок. Рекомендуется привести даты выполнения заказов в 
              |соответствие с возможностями обеспечения. В противном случае потребность не будет закрыта, потому 
              |что плановая дата поставки / производства будет позже даты, когда запаса недостаточно.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, Символы.ПС, "");
		
		ДобавитьСообщение(Строка, ТекстСообщения, Ложь);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыНоменклатурыРекурсивно(Строки, ТаблицаПараметров, Параметры)
	
	ПараметрыРодителяЗаполнены = Ложь;
	Для каждого Строка Из Строки Цикл
		Если Строка.ИмяГруппировки = ИмяГруппировкиИсточник() Тогда

			Если ЗначениеЗаполнено(Строка.СрокПополнения) Тогда
				Строка.ДатаПоступления =  НачалоДня(Параметры.Период.ДатаНачала) + Строка.СрокПополнения * 86400;
			КонецЕсли;
			
		ИначеЕсли Строка.ИмяГруппировки = ИмяГруппировкиНоменклатура() Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", Строка.Номенклатура);
			Если Строка.Характеристика <> Неопределено Тогда
				СтруктураОтбора.Вставить("Характеристика", Строка.Характеристика);
			КонецЕсли; 
			НайденныеСтроки = ТаблицаПараметров.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда

				// Заказывается в первый раз
				СтруктураРеквизитов = Новый Структура();
                СтруктураРеквизитов.Вставить("СпособПополнения", 			"СпособПополнения");
                СтруктураРеквизитов.Вставить("Поставщик", 		 			"Поставщик");
                СтруктураРеквизитов.Вставить("Изготовитель", 	 			"Изготовитель");
                СтруктураРеквизитов.Вставить("ПоставщикПредставление", 		"Поставщик.Наименование");
                СтруктураРеквизитов.Вставить("ИзготовительПредставление", 	"Изготовитель.Наименование");
				
				РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Номенклатура, СтруктураРеквизитов);
				
				НоваяСтрока = ?(Строка.Строки.Количество() = 0, Строка.Строки.Добавить(), Строка.Строки.Вставить(0));
				НоваяСтрока.ИмяГруппировки 	 = ИмяГруппировкиИсточник();
				НоваяСтрока.СпособПополнения = РеквизитыНоменклатуры.СпособПополнения;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СпособПополнения) Тогда
					
					Если Параметры.СпособПополнения = СпособПополненияПроизводство() Тогда
						НоваяСтрока.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Производство;
						НоваяСтрока.Источник = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
						НоваяСтрока.Представление = НСтр("ru = '<Изготовитель не указан>'");
					Иначе
						НоваяСтрока.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
						НоваяСтрока.Источник = Справочники.Контрагенты.ПустаяСсылка();
						НоваяСтрока.Представление = НСтр("ru = '<Новый поставщик>'");
					КонецЕсли; 
					
				ИначеЕсли НоваяСтрока.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Производство Тогда

					НоваяСтрока.Источник 	  = РеквизитыНоменклатуры.Изготовитель;
					НоваяСтрока.Представление = РеквизитыНоменклатуры.ИзготовительПредставление;
					
				Иначе
					
					НоваяСтрока.Источник 	  = РеквизитыНоменклатуры.Поставщик;
					НоваяСтрока.Представление = РеквизитыНоменклатуры.ПоставщикПредставление;
					
				КонецЕсли;
				Строка.СрокПополнения = 0;
				Строка.НесколькоЕдиницИзмерения = Ложь;
				Если НЕ Параметры.УчетВалютныхОпераций ИЛИ НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
					НоваяСтрока.Валюта = Параметры.ВалютаУчета;
				КонецЕсли; 
			Иначе
				Для каждого СтрокаИсточника Из НайденныеСтроки Цикл
					НоваяСтрока = ?(Строка.Строки.Количество() = 0, Строка.Строки.Добавить(), Строка.Строки.Вставить(0));
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника, "СпособПополнения, Источник, Договор, Лимит, ВидЦен, Валюта, Цена, НесколькоЕдиницИзмерения");
					НоваяСтрока.ИмяГруппировки = ИмяГруппировкиИсточник();
					НоваяСтрока.Дефицит = Строка.Дефицит; 
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.Источник) Тогда
						НоваяСтрока.Представление 	= НСтр("ru = '<Новый поставщик>'");
					ИначеЕсли ТипЗнч(НоваяСтрока.Источник) = Тип("СправочникСсылка.НоменклатураПоставщиков") Тогда

						НоваяСтрока.Источник	  	= НоваяСтрока.Источник.Владелец;
						НоваяСтрока.Представление 	= СтрШаблон(НСтр("ru = '%1 (остатки поставщика)'"), НоваяСтрока.Источник);
						НоваяСтрока.СрокПополнения  = СтрокаИсточника.СрокПополнения;
						
						НоваяСтрока.Дефицит 		= ?(ЗначениеЗаполнено(НоваяСтрока.Дефицит), 
							МИН(СтрокаИсточника.Лимит, НоваяСтрока.Дефицит),
							СтрокаИсточника.Лимит);
							
					КонецЕсли;         
						
					Если НЕ Параметры.УчетВалютныхОпераций ИЛИ НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
						НоваяСтрока.Валюта = Параметры.ВалютаУчета;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(Строка.СрокПополнения) Тогда
						Строка.СрокПополнения = СтрокаИсточника.СрокПополнения;
					КонецЕсли; 
					
					Если Строка.НесколькоЕдиницИзмерения = Неопределено Тогда
						Строка.НесколькоЕдиницИзмерения = СтрокаИсточника.НесколькоЕдиницИзмерения;
					КонецЕсли; 
					
					Строка.Артикул 		= СтрокаИсточника.Артикул;
					Строка.Весовой 		= СтрокаИсточника.Весовой;
					
				КонецЦикла; 
			КонецЕсли;
			Если НЕ ПараметрыРодителяЗаполнены Тогда
				Если Строки.Родитель <> Неопределено И Строки.Родитель.ИмяГруппировки = ИмяГруппировкиПериод() Тогда
					Если НЕ ЗначениеЗаполнено(Строки.Родитель.Период) Тогда
						Строка.ДатаПоступления =  НачалоДня(Параметры.Период.ДатаНачала) + Строка.СрокПополнения * 86400;
					Иначе
						Строка.ДатаПоступления =  Макс(НачалоДня(Параметры.Период.ДатаНачала) + Строка.СрокПополнения * 86400, Строки.Родитель.Период);
					КонецЕсли;
					ПараметрыРодителяЗаполнены = Истина;
				ИначеЕсли Строки.Родитель <> Неопределено И Строки.Родитель.ИмяГруппировки = ИмяГруппировкиЗаказ() Тогда
					Строка.ДатаПоступления = НачалоДня(Параметры.Период.ДатаНачала) + Строка.СрокПополнения * 86400;
					ПараметрыРодителяЗаполнены = Истина;
				ИначеЕсли Параметры.Группировать = ГруппировкаНоменклатура() Тогда 
					Строка.ДатаПоступления = НСтр("ru = '<Авто>'");
					ПараметрыРодителяЗаполнены = Истина;
				КонецЕсли;
			КонецЕсли; 
			ОпределитьВозможностьОбеспечения(Строка, Параметры);
		ИначеЕсли Строка.ИмяГруппировки = ИмяГруппировкиПериод() Тогда
			Если Строки.Родитель <> Неопределено И Строки.Родитель.ИмяГруппировки = ИмяГруппировкиНоменклатура() Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура", Строки.Родитель.Номенклатура);
				Если Строка.Характеристика <> Неопределено Тогда
					СтруктураОтбора.Вставить("Характеристика", Строки.Родитель.Характеристика);
				КонецЕсли; 
				НайденныеСтроки = ТаблицаПараметров.НайтиСтроки(СтруктураОтбора);
				ВсегоСтрок		= НайденныеСтроки.Количество();
				СрокПополнения = ?(ВсегоСтрок = 0, 0, НайденныеСтроки[ВсегоСтрок-1].СрокПополнения);
				Если НЕ ЗначениеЗаполнено(Строка.Период) Тогда
					Строка.ДатаПоступления = НачалоДня(Параметры.Период.ДатаНачала) + СрокПополнения * 86400;
				Иначе
					Строка.ДатаПоступления =  Макс(НачалоДня(Параметры.Период.ДатаНачала) + СрокПополнения * 86400, Строка.Период);
				КонецЕсли;
				Строка.Весовой = Строки.Родитель.Весовой;
			КонецЕсли;
		ИначеЕсли Строки.Родитель <> Неопределено И Строки.Родитель.Весовой = Истина Тогда
			Строка.Весовой = Строки.Родитель.Весовой;
		КонецЕсли;
		Если Строка.Строки.Количество() > 0 Тогда
			ЗаполнитьПараметрыНоменклатурыРекурсивно(Строка.Строки, ТаблицаПараметров, Параметры);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область Прочее

Процедура ДобавитьОтборПоСоставуЗаказов(Параметры)

	#Область Прочее
	ТекстаЗапросаЗаказыПоПодразделению = 
	"ВЫБРАТЬ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК Заказ
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатки, ЗаказПокупателя.СтруктурнаяЕдиницаПродажи В (&СтруктурныеЕдиницы)) КАК ЗаказыПокупателейОстатки
	|";
	#КонецОбласти 

	ДатаОстатки			= Параметры.Период.ДатаНачала;
	ДатаОстатки			= ?(НачалоДня(ДатаОстатки) = НачалоДня(ТекущаяДатаСеанса()), ТекущаяДатаСеанса(), ДатаОстатки);
	
	МассивЗаказов 		= Новый Массив;
	МассивПодразделений = Новый Массив;
	
	ЗаполнитьЭлементыОтбора(Параметры, "Подразделение", МассивПодразделений, Тип("СправочникСсылка.СтруктурныеЕдиницы"));
	
	Если МассивПодразделений.Количество() > 0 Тогда  
		
		МассивПодразделений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПодразделений);
		
		Запрос = Новый Запрос(ТекстаЗапросаЗаказыПоПодразделению);
		Запрос.УстановитьПараметр("СтруктурныеЕдиницы", МассивПодразделений);
		Запрос.УстановитьПараметр("ДатаОстатки", 		ДатаОстатки);

		МассивЗаказов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ");
		
	КонецЕсли; 
	
	ЗаполнитьЭлементыОтбора(Параметры, "ЗаказПокупателя", 	  МассивЗаказов);
	ЗаполнитьЭлементыОтбора(Параметры, "ЗаказНаПроизводство", МассивЗаказов);
	ЗаполнитьЭлементыОтбора(Параметры, "ЗаказНаПеремещение",  МассивЗаказов);
	
	ИспользуетсяОтборПоСоставуЗаказов = МассивЗаказов.Количество() > 0;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		Параметры.Настройки, 
		"ИспользуетсяОтборПоСоставуЗаказов", 
		Истина, 
		ИспользуетсяОтборПоСоставуЗаказов);
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		Параметры.Настройки, 
		"Заказы", 
		МассивЗаказов, 
		ИспользуетсяОтборПоСоставуЗаказов);
	
КонецПроцедуры

Процедура ЗаполнитьЭлементыОтбора(Параметры, ИмяОтбора, МассивЗаказов, ТипОтбора = Неопределено)

	ТипОтбора 	    = ?(ТипОтбора = Неопределено, Тип("ДокументСсылка." + ИмяОтбора), ТипОтбора);
	НайденныеОтборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Параметры.Настройки.Отбор, ИмяОтбора);

	Для каждого ЭлементОтбора Из НайденныеОтборы Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) =	 ТипОтбора Тогда

			Если ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
				МассивЗаказов.Добавить(ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение)=Тип("СписокЗначений") Тогда
			
			Для каждого ЭлементСписка Из ЭлементОтбора.ПравоеЗначение Цикл
				
				Если ТипЗнч(ЭлементСписка.Значение) = ТипОтбора
					И ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
					МассивЗаказов.Добавить(ЭлементСписка.Значение);
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьОтборПоСостояниям(Параметры)
		
	НайденныеОтборыСостояние = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Параметры.Настройки.Отбор, "СостояниеЗаказа");
	Для каждого ЭлементОтбора Из НайденныеОтборыСостояние Цикл
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
			ЭлементОтбора.ПравоеЗначение.Добавить(Справочники.СостоянияЗаказовПокупателей.ПустаяСсылка());
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.СостоянияЗаказовПокупателей")
			ИЛИ ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.СостоянияЗаказНарядов") Тогда
			СписокСостояний = Новый СписокЗначений;
			СписокСостояний.Добавить(ЭлементОтбора.ПравоеЗначение);
			СписокСостояний.Добавить(Справочники.СостоянияЗаказовПокупателей.ПустаяСсылка());
			ЭлементОтбора.ПравоеЗначение = СписокСостояний;
		КонецЕсли; 
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЦикла;
	
КонецПроцедуры

Процедура УчестьРазмещенныеЗаказы(ТаблицаРезультат, Параметры)
	
	Для каждого Строка Из ТаблицаРезультат Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Заказ) Тогда
			Строка.Заказ = Неопределено;
		КонецЕсли; 
	КонецЦикла; 
	ТаблицаРезультат.Индексы.Добавить("Номенклатура, Характеристика, Заказ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРезультат", ТаблицаРезультат);
	Запрос.УстановитьПараметр("КонецПериода", Параметры.Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Источник.Номенклатура КАК Номенклатура,
	|	Источник.Характеристика КАК Характеристика,
	|	Источник.Заказ КАК ИсточникОбеспечения
	|ПОМЕСТИТЬ ТаблицаИзмерений
	|ИЗ
	|	&ТаблицаРезультат КАК Источник
	|ГДЕ
	|	Источник.Поступление > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзмерений.Номенклатура КАК Номенклатура,
	|	ТаблицаИзмерений.Характеристика КАК Характеристика,
	|	ТаблицаИзмерений.ИсточникОбеспечения КАК ИсточникОбеспечения
	|ПОМЕСТИТЬ ТаблицаИзмеренийСвернуто
	|ИЗ
	|	ТаблицаИзмерений КАК ТаблицаИзмерений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзмерений.ИсточникОбеспечения,
	|	ТаблицаИзмерений.Характеристика,
	|	ТаблицаИзмерений.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазмещениеЗаказовОстатки.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|	РазмещениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|	РазмещениеЗаказовОстатки.Характеристика КАК Характеристика,
	|	РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	РазмещениеЗаказовОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказов.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И (ИсточникОбеспечения, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ТаблицаИзмеренийСвернуто.ИсточникОбеспечения,
	|						ТаблицаИзмеренийСвернуто.Номенклатура,
	|						ТаблицаИзмеренийСвернуто.Характеристика
	|					ИЗ
	|						ТаблицаИзмеренийСвернуто)) КАК РазмещениеЗаказовОстатки
	|ГДЕ
	|	РазмещениеЗаказовОстатки.КоличествоОстаток > 0";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураОтбора.Вставить("Заказ", Выборка.ИсточникОбеспечения);
		ОстатокРаспределения = Выборка.Количество;
		Строки = ТаблицаРезультат.НайтиСтроки(СтруктураОтбора);
		Для каждого Строка Из Строки Цикл
			Если Строка.Поступление <= 0 Тогда
				Продолжить;
			КонецЕсли; 
			Распределить = Мин(ОстатокРаспределения, Строка.Поступление);
			Если Строка.Поступление = Распределить Тогда
				Строка.Заказ = Выборка.ЗаказПокупателя;
				Если Параметры.Свойство("ОтборЗаказов") И Параметры.ОтборЗаказов.Найти(Выборка.ЗаказПокупателя) = Неопределено Тогда
					ТаблицаРезультат.Удалить(Строка);
				КонецЕсли; 
			Иначе
				Строка.Поступление = Строка.Поступление - Распределить;
				Если Параметры.Свойство("ОтборЗаказов") И Параметры.ОтборЗаказов.Найти(Выборка.ЗаказПокупателя) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				НоваяСтрока = ТаблицаРезультат.Вставить(ТаблицаРезультат.Индекс(Строка));
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Поступление = Распределить;
				НоваяСтрока.Заказ = Выборка.ЗаказПокупателя;
			КонецЕсли;
			ОстатокРаспределения = ОстатокРаспределения - Распределить;
			Если ОстатокРаспределения <= 0 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьПараметр(Настройки, ИмяФильтра, Знач Значение)
	
	ПараметрКомпоновки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяФильтра));
	Если ПараметрКомпоновки=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ПараметрКомпоновки.Значение = Значение;
	ПараметрКомпоновки.Использование = Истина;
	
КонецПроцедуры

Процедура ОбновитьОстаток(Остатки, СтрокаДерева, Значение, ИмяКолонки)
		
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", СтрокаДерева.Номенклатура);
	СтруктураОтбора.Вставить("Характеристика", СтрокаДерева.Характеристика);
	Строки = Остатки.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		НоваяСтрока = Остатки.Добавить();
		НоваяСтрока.Номенклатура = СтрокаДерева.Номенклатура;
		НоваяСтрока.Характеристика = СтрокаДерева.Характеристика;
		Если Остатки.Колонки.Найти("ЕдиницаИзмерения")<>Неопределено Тогда
			НоваяСтрока.ЕдиницаИзмерения = СтрокаДерева.ЕдиницаИзмерения;
		КонецЕсли; 
	Иначе
		НоваяСтрока = Строки[0];
	КонецЕсли;
	Если Значение<>Неопределено Тогда
		НоваяСтрока[ИмяКолонки] = Значение;
	КонецЕсли; 
	
КонецПроцедуры

Функция ОстатокИзТаблицы(Остатки, Номенклатура, Характеристика, ИмяКолонки = "Остаток")
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	СтруктураОтбора.Вставить("Характеристика", Характеристика);
	Строки = Остатки.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат 0;
	Иначе
		Возврат Строки[0][ИмяКолонки];
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьАктуальныеВидЦенКонтрагента(ДатаНачала, Контрагент)
	
	СписокВидовЦен = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента КАК ВидЦенКонтрагента
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ДатаНачала, ВидЦенКонтрагента.Владелец = &Контрагент) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Актуальность";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВидовЦен.Добавить(Выборка.ВидЦенКонтрагента);
	КонецЦикла;
	
	Возврат СписокВидовЦен;
	
КонецФункции

Функция ИмяКолонкиПериод(Дата)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат "Просрочено";
	КонецЕсли; 
	Возврат "Период" + Формат(Дата, "ДФ=yyyyMMdd");
	
КонецФункции

Функция ДатаПоИмениКолонки(ИмяКолонки)
	
	Если Найти(ИмяКолонки, "Период") = 0 ИЛИ ИмяКолонки = "Период" Тогда
		Возврат '0001-01-01';
	КонецЕсли;
	
	ПериодТекст = СтрЗаменить(ИмяКолонки, "Период", "");
	Возврат Дата(Число(Лев(ПериодТекст, 4)), Число(Сред(ПериодТекст, 5, 2)), Число(Прав(ПериодТекст, 2)));
	
КонецФункции

Процедура ДобавитьСообщение(СтрокаДерева, ТекстСообщения, БезДублей)
	
	Если ТипЗнч(СтрокаДерева.Сообщения) = Тип("ФиксированныйМассив") Тогда
		МассивСообщений = Новый Массив(СтрокаДерева.Сообщения);
	Иначе
		МассивСообщений = Новый Массив;
	КонецЕсли;
	Если БезДублей И МассивСообщений.Найти(ТекстСообщения) <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	МассивСообщений.Добавить(ТекстСообщения);
	СтрокаДерева.Сообщения = Новый ФиксированныйМассив(МассивСообщений);
	
КонецПроцедуры
 
Процедура ДобавитьСтрокуДерева(Строки, СтруктураСтрок, Имя, Представление)
	
	НоваяСтрока = Строки.Добавить();
	НоваяСтрока.Представление = Представление;
	НоваяСтрока.ИмяГруппировки = Имя;

	НоваяСтрока.Просрочено	   			= 0;
	НоваяСтрока.Поступление 			= 0;
	НоваяСтрока.Потребность				= 0;
	НоваяСтрока.ПоступлениеПросрочено	= 0;
	НоваяСтрока.ПотребностьПросрочено	= 0;
	НоваяСтрока.Дефицит					= 0;
	НоваяСтрока.ЗаказОстаток			= 0;
	НоваяСтрока.КонечныйОстаток			= 0;
	НоваяСтрока.МаксимальныйЗапас		= 0;
	НоваяСтрока.МинимальныйЗапас		= 0;
	НоваяСтрока.НачальныйОстаток		= 0;
	НоваяСтрока.НевозможноОбеспечить	= 0;

	СтруктураСтрок.Вставить(Имя, НоваяСтрока);
	
КонецПроцедуры

Процедура ДобавитьСтрокуЗаказа(СтрокаДерева, СтруктураСтрок, ИмяЭлементаСтруктуры, ИмяИсточник, ИмяПриемник)
	
	Если СтрокаДерева[ИмяИсточник]<>0 Тогда
		СтрокаРекомендации = СтруктураСтрок.Рекомендовано.Строки.Найти(СтрокаДерева.Заказ, "Заказ");
		Если СтрокаРекомендации=Неопределено Тогда
			
			СтрокаРекомендации = СтруктураСтрок.Рекомендовано.Строки.Добавить();
			СтрокаРекомендации.Заказ = СтрокаДерева.Заказ;
			СтрокаРекомендации.Представление = ПредставлениеЗаказа(СтрокаДерева.Заказ);
			СтрокаРекомендации.ИмяГруппировки = ИмяГруппировкиЗаказРекомендации();
			
			СтрокаРекомендации.Поступление 				= 0;
			СтрокаРекомендации.Потребность				= 0;
			СтрокаРекомендации.ПоступлениеПросрочено	= 0;
			СтрокаРекомендации.ПотребностьПросрочено	= 0;;
			СтрокаРекомендации.Просрочено 				= 0;
			СтрокаРекомендации.Дефицит 					= 0;
			
		КонецЕсли; 
		СтрокаЗаказа = СтруктураСтрок[ИмяЭлементаСтруктуры].Строки.Найти(СтрокаДерева.Заказ, "Заказ");
		Если СтрокаЗаказа=Неопределено Тогда

			СтрокаЗаказа = СтруктураСтрок[ИмяЭлементаСтруктуры].Строки.Добавить();
			СтрокаЗаказа.Заказ = СтрокаДерева.Заказ;
			СтрокаЗаказа.Представление = ПредставлениеЗаказа(СтрокаДерева.Заказ);
			СтрокаЗаказа.ИмяГруппировки = ИмяГруппировкиЗаказ();
			
			СтрокаЗаказа.Поступление 			= 0;
			СтрокаЗаказа.Потребность			= 0;
			СтрокаЗаказа.ПоступлениеПросрочено	= 0;
			СтрокаЗаказа.ПотребностьПросрочено	= 0;;
			СтрокаЗаказа.Просрочено 			= 0;
			СтрокаЗаказа.Дефицит 				= 0;
			
		КонецЕсли; 
		
		СтрокаЗаказа[ИмяПриемник]			= СтрокаЗаказа[ИмяПриемник] + СтрокаДерева[ИмяИсточник];
		СтрокаЗаказа.Родитель[ИмяПриемник]	= СтрокаЗаказа.Родитель[ИмяПриемник] + СтрокаДерева[ИмяИсточник];
		СтрокаЗаказа.Дефицит				= СтрокаЗаказа.Дефицит + СтрокаДерева[ИмяИсточник];
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область РасчетПоПродажам

Функция ОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти)

	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти));

КонецФункции

Функция ОписаниеТиповДаты(ЧастьДаты = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ЧастьДаты) Тогда
		ЧастьДаты = ЧастиДаты.Дата;
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастьДаты);
	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);
	
КонецФункции

Процедура РассчитатьКоэффициентТренда(Показатели)
	
	Если Показатели.СчетчикДней <> 0 Тогда
		ЗнаменательТренда = Показатели.СуммаКвадратовДней
							- Показатели.СуммаДней * Показатели.СуммаДней / Показатели.СчетчикДней;
		Если ЗнаменательТренда <> 0 Тогда
			ЧислительТренда = Показатели.СуммаПроизведений - Показатели.СуммаДней * Показатели.СуммаПродаж 
				/ Показатели.СчетчикДней;
			Показатели.КоэффициентТренда = ЧислительТренда / ЗнаменательТренда;
		КонецЕсли;
		
		Показатели.Приращение = Окр(Показатели.СуммаПродаж / Показатели.СчетчикДней - Показатели.КоэффициентТренда 
			* Показатели.СуммаДней / Показатели.СчетчикДней, 3);
	КонецЕсли;
		
КонецПроцедуры

Функция ТаблицаПрогнозаРасширение(Параметры, ОшибкаРасчета)

	ТаблицаПрогноза 	= Новый ТаблицаЗначений;
	ТаблицаПрогноза.Колонки.Добавить("Организация", 	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПрогноза.Колонки.Добавить("Склад", 			Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаПрогноза.Колонки.Добавить("Номенклатура",   	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПрогноза.Колонки.Добавить("Характеристика",  Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПрогноза.Колонки.Добавить("Дата", 			ОписаниеТиповДаты());
	ТаблицаПрогноза.Колонки.Добавить("Количество", 		ОписаниеТиповЧисла(17, 3));
	
	ПараметрыПодключаемойПроцедуры = Новый Массив;
	ПараметрыПодключаемойПроцедуры.Добавить(Параметры);
	ПараметрыПодключаемойПроцедуры.Добавить(ТаблицаПрогноза);
	
	ИмяПроцедуры = СтрШаблон("ПодключаемыеПроцедуры.ТаблицаПрогноза_%1", Параметры.МетодПрогноза);

	Попытка
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяПроцедуры, ПараметрыПодключаемойПроцедуры);
	Исключение
		
		ОшибкаРасчета 				 = СтрШаблон(
			НСтр("ru = 'Процедура расчета прогноза продаж %1 не найдена или выполнена с ошибкой. Проверьте подключено ли расширение.'"), 
			ИмяПроцедуры);
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибкиЖР 				 = СтрШаблон(НСтр("ru = '%1 Подробности: %2'"), ОшибкаРасчета, ПодробноеПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='ПолучитьТаблицуПрогнозаРасширение'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.ПодключаемыеПроцедуры,,
			ТекстОшибкиЖР);
		
	КонецПопытки;
	
	Возврат ТаблицаПрогноза;	
	
КонецФункции

Функция ТаблицаПрогнозаПоДнямНедели(Параметры)
	
	ТаблицаДанныхТренда = Новый ТаблицаЗначений;
	ТаблицаДанныхТренда.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанныхТренда.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаДанныхТренда.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанныхТренда.Колонки.Добавить("Характеристика",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ОписаниеЧислаТренда = ОписаниеТиповЧисла(25, 10);
	ТаблицаДанныхТренда.Колонки.Добавить("КоэффициентТренда", ОписаниеЧислаТренда);
	ОписаниеЧислаКоличество = ОписаниеТиповЧисла(17, 3);
	ТаблицаДанныхТренда.Колонки.Добавить("Приращение", ОписаниеЧислаКоличество);
	
	ТаблицаПродажПоДнямБезТренда = Новый ТаблицаЗначений;
	ТаблицаПродажПоДнямБезТренда.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПродажПоДнямБезТренда.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаПродажПоДнямБезТренда.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПродажПоДнямБезТренда.Колонки.Добавить("Характеристика",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ОписаниеДаты = ОписаниеТиповДаты();
	ТаблицаПродажПоДнямБезТренда.Колонки.Добавить("День", ОписаниеДаты);
	ТаблицаПродажПоДнямБезТренда.Колонки.Добавить("Количество", ОписаниеЧислаКоличество);
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("СчетчикДней", 0);
	Показатели.Вставить("СуммаПроизведений", 0);
	Показатели.Вставить("СуммаДней", 0);
	Показатели.Вставить("СуммаПродаж", 0);
	Показатели.Вставить("СуммаКвадратовДней", 0);
	
	Показатели.Вставить("КоэффициентТренда", 0);
	Показатели.Вставить("Приращение", 0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Параметры.ПериодПродаж.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Параметры.ПериодПродаж.ДатаОкончания));
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Запрос.УстановитьПараметр("ПланироватьПеремещения", ЗначениеЗаполнено(Параметры.Склад));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПродажиОбороты.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &ПланироватьПеремещения
	|			ТОГДА ПродажиОбороты.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ПродажиОбороты.Номенклатура КАК Номенклатура,
	|	ПродажиОбороты.Характеристика КАК Характеристика,
	|	ПродажиОбороты.Период КАК День,
	|	ПродажиОбороты.КоличествоОборот КАК Количество
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			День,
	|			Склад = &Склад
	|				ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК ПродажиОбороты
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Организация,
	|	Склад,
	|	Номенклатура,
	|	Характеристика,
	|	День ПЕРИОДАМИ(ДЕНЬ, &ДатаНачала, &ДатаОкончания)";
	
	Результат = Запрос.Выполнить();
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаСклад = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСклад.Следующий() Цикл
			ВыборкаНоменклатура = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаНоменклатура.Следующий() Цикл
				ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
				Пока ВыборкаХарактеристики.Следующий() Цикл
					ВыборкаДни = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "День", "ВСЕ");
					Пока ВыборкаДни.Следующий() Цикл
						Количество = ?(ВыборкаДни.Количество = Null, 0, ВыборкаДни.Количество);
						Показатели.СчетчикДней = Показатели.СчетчикДней + 1;
						Показатели.СуммаПроизведений = Показатели.СуммаПроизведений + Показатели.СчетчикДней * Количество;
						Показатели.СуммаДней = Показатели.СуммаДней + Показатели.СчетчикДней;
						Показатели.СуммаПродаж = Показатели.СуммаПродаж + Количество;
						Показатели.СуммаКвадратовДней = Показатели.СуммаКвадратовДней + Показатели.СчетчикДней * Показатели.СчетчикДней;
					КонецЦикла;
					
					РассчитатьКоэффициентТренда(Показатели);
					
					НоваяСтрока = ТаблицаДанныхТренда.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаХарактеристики);
					НоваяСтрока.КоэффициентТренда = Показатели.КоэффициентТренда;
					НоваяСтрока.Приращение = Показатели.Приращение;
				
					Показатели.СчетчикДней = 0;
					
					// И повторный цикл для расчета средних за вычетом тренда.
					
					ВыборкаДни.Сбросить();
					Пока ВыборкаДни.Следующий() Цикл
						Количество = ?(ВыборкаДни.Количество = Null, 0, ВыборкаДни.Количество);
						Показатели.СчетчикДней = Показатели.СчетчикДней + 1;
						НоваяСтрока = ТаблицаПродажПоДнямБезТренда.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДни);
						НоваяСтрока.Количество = Количество - Окр(Показатели.КоэффициентТренда * Показатели.СчетчикДней 
							+ Показатели.Приращение);
					КонецЦикла;
					
					Показатели.СчетчикДней = 0;
					Показатели.СуммаПроизведений = 0;
					Показатели.СуммаДней = 0;
					Показатели.СуммаПродаж = 0;
					Показатели.СуммаКвадратовДней = 0;
					Показатели.КоэффициентТренда = 0;
					Показатели.Приращение = 0;
					
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПродажПоДнямБезТренда", ТаблицаПродажПоДнямБезТренда);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Организация КАК Организация,
	|	Товары.Склад КАК Склад,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.День КАК Дата,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаПродажПоДнямБезТренда КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Организация КАК Организация,
	|	Товары.Склад КАК Склад,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	ДЕНЬНЕДЕЛИ(Товары.Дата) КАК ДеньНедели,
	|	СРЕДНЕЕ(Товары.Количество) КАК Количество
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Организация,
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ДЕНЬНЕДЕЛИ(Товары.Дата)";
	
	ТаблицаСреднихПоДнямНедели = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПрогноза = Новый ТаблицаЗначений;
	ТаблицаПрогноза.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПрогноза.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаПрогноза.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПрогноза.Колонки.Добавить("Характеристика",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ОписаниеДаты = ОписаниеТиповДаты();
	ТаблицаПрогноза.Колонки.Добавить("Дата", ОписаниеДаты);
	
	ОписаниеЧислаКоличество = ОписаниеТиповЧисла(17, 3);
	ТаблицаПрогноза.Колонки.Добавить("Количество", ОписаниеЧислаКоличество);
	
	ОтборТренда = Новый Структура;
	ОтборТренда.Вставить("Организация", Неопределено);
	ОтборТренда.Вставить("Склад", Неопределено);
	ОтборТренда.Вставить("Номенклатура", Неопределено);
	ОтборТренда.Вставить("Характеристика", Неопределено);
	
	ОтборСреднихПродаж = Новый Структура;
	ОтборСреднихПродаж.Вставить("Организация", Неопределено);
	ОтборСреднихПродаж.Вставить("Склад", Неопределено);
	ОтборСреднихПродаж.Вставить("Номенклатура", Неопределено);
	ОтборСреднихПродаж.Вставить("Характеристика", Неопределено);
	ОтборСреднихПродаж.Вставить("ДеньНедели", Неопределено);
	
	КоличествоДнейПериода = ВсегоДней(Параметры.ПериодПродаж) - 1;
	
	Если НачалоДня(Параметры.Период.ДатаНачала) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ТекущаяДата = КонецДня(Параметры.Период.ДатаНачала) + 1;
		ВсегоДней 	= ВсегоДней(Параметры.Период) - 1;
	Иначе
		ТекущаяДата = Параметры.Период.ДатаНачала;
		ВсегоДней 	= ВсегоДней(Параметры.Период);
	КонецЕсли;
	
	ВыборкаОрганизация.Сбросить();
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаСклад = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСклад.Следующий() Цикл
			ВыборкаНоменклатура = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаНоменклатура.Следующий() Цикл
				ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
				Пока ВыборкаХарактеристики.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОтборТренда, ВыборкаХарактеристики);
					СтрокиТренда = ТаблицаДанныхТренда.НайтиСтроки(ОтборТренда);
					Если СтрокиТренда.Количество() > 0 Тогда
						СтрокаТренда = СтрокиТренда[0];
					Иначе
						СтрокаТренда = Неопределено;
					КонецЕсли;
					Для СчетчикДней = 1 По ВсегоДней Цикл
						ОчереднаяДатаПродаж = НачалоДня(ТекущаяДата + (СчетчикДней - 1) * 86400);
						НоваяСтрока = ТаблицаПрогноза.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаХарактеристики, , "Количество");
						НоваяСтрока.Дата = ОчереднаяДатаПродаж;
						
						ЗаполнитьЗначенияСвойств(ОтборСреднихПродаж, ВыборкаХарактеристики);
						ОтборСреднихПродаж.ДеньНедели = ДеньНедели(ОчереднаяДатаПродаж);
						СтрокиСреднихПродаж = ТаблицаСреднихПоДнямНедели.НайтиСтроки(ОтборСреднихПродаж);
						Если СтрокиСреднихПродаж.Количество() > 0 Тогда 
							СтрокаСреднейПродажи = СтрокиСреднихПродаж[0];
							Если СтрокаТренда = Неопределено Тогда
								НоваяСтрока.Количество = СтрокаСреднейПродажи.Количество;
							Иначе
								НоваяСтрока.Количество = СтрокаСреднейПродажи.Количество + ((КоличествоДнейПериода + СчетчикДней) 
									* СтрокаТренда.КоэффициентТренда + СтрокаТренда.Приращение); 
							КонецЕсли;
							Если НоваяСтрока.Количество < 0 Тогда
								НоваяСтрока.Количество = 0;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПрогноза;
	
КонецФункции

Процедура ДобавитьВременныеТаблицыГрафиковРаботы(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиРаботыСтруктурныхЕдиницСрезПоследних.СтруктурнаяЕдиница КАК Склад,
	|	ГрафикиРаботыСтруктурныхЕдиницСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	|	&ДатаНачала КАК Период
	|ПОМЕСТИТЬ ГрафикиРаботыСтруктурныхЕдиниц
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыСтруктурныхЕдиниц.СрезПоследних(&ДатаНачала, СтруктурнаяЕдиница = &Склад) КАК ГрафикиРаботыСтруктурныхЕдиницСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ГрафикиРаботыСтруктурныхЕдиниц.СтруктурнаяЕдиница,
	|	ГрафикиРаботыСтруктурныхЕдиниц.ГрафикРаботы,
	|	ГрафикиРаботыСтруктурныхЕдиниц.Период
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыСтруктурныхЕдиниц КАК ГрафикиРаботыСтруктурныхЕдиниц
	|ГДЕ
	|	ГрафикиРаботыСтруктурныхЕдиниц.СтруктурнаяЕдиница = &Склад
	|	И ГрафикиРаботыСтруктурныхЕдиниц.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ГрафикРаботы,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) КАК День,
	|	ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия КАК Склад,
	|	ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ОтклоненияОтГрафиковРаботыРесурсов.ЧасыРаботы ЕСТЬ NULL
	|				ТОГДА ВЫБОР
	|						КОГДА ОтклоненияОтГрафиковРаботыРесурсов.ЧасыРаботы > 0
	|								И НЕ ОтклоненияОтГрафиковРаботыРесурсов.НеРабочийДень
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА ГрафикиРаботы.ЧасыРаботы > 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РабочихДней
	|ПОМЕСТИТЬ ГрафикиРаботы
	|ИЗ
	|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО (ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия = &Склад)
	|			И ГрафикиРаботы.Год = ОтклоненияОтГрафиковРаботыРесурсов.Год
	|			И (НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) = НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала, ДЕНЬ))
	|ГДЕ
	|	ГрафикиРаботы.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия,
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ),
	|	ГрафикиРаботы.ГрафикРаботы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	День,
	|	ГрафикРаботы,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботыСтруктурныхЕдиниц.Склад КАК Склад,
	|	ГрафикиРаботы.День КАК День,
	|	ГрафикиРаботы.РабочихДней КАК РабочихДней
	|ПОМЕСТИТЬ РабочиеДни
	|ИЗ
	|	ГрафикиРаботыСтруктурныхЕдиниц КАК ГрафикиРаботыСтруктурныхЕдиниц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГрафикиРаботы КАК ГрафикиРаботы
	|		ПО ГрафикиРаботыСтруктурныхЕдиниц.Период <= ГрафикиРаботы.День
	|			И ГрафикиРаботыСтруктурныхЕдиниц.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы
	|			И (ВЫБОР
	|				КОГДА ГрафикиРаботы.Склад ЕСТЬ NULL
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ГрафикиРаботыСтруктурныхЕдиниц.Склад = ГрафикиРаботы.Склад
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиРаботыСтруктурныхЕдиниц КАК ГрафикиРаботыСтруктурныхЕдиницДубли
	|		ПО (ГрафикиРаботы.День >= ГрафикиРаботыСтруктурныхЕдиницДубли.Период)
	|			И (ГрафикиРаботыСтруктурныхЕдиницДубли.Склад = ГрафикиРаботыСтруктурныхЕдиниц.Склад)
	|			И (ГрафикиРаботыСтруктурныхЕдиницДубли.Период > ГрафикиРаботыСтруктурныхЕдиниц.Период)
	|ГДЕ
	|	ГрафикиРаботыСтруктурныхЕдиницДубли.Период ЕСТЬ NULL";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДобавитьВременныеТаблицыПродажиПоОстаткамТоваров(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	&Организация КАК Организация,
	|	&Склад КАК Склад,
	|	НАЧАЛОПЕРИОДА(ЗапасыОстатки.Период, ДЕНЬ) КАК Дата,
	|	ЗапасыОстатки.КоличествоКонечныйОстаток > 0 КАК ЕстьКонечныйОстаток,
	|	ЗапасыОстатки.КоличествоНачальныйОстаток > 0
	|		И ЗапасыОстатки.КоличествоКонечныйОстаток > 0 КАК ЕстьОстатки
	|ПОМЕСТИТЬ ПризнакиНаличияОстатковПоДатам
	|ИЗ
	|	РегистрНакопления.Запасы.ОстаткиИОбороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			ДЕНЬ,
	|			ДвиженияИГраницыПериода,
	|			СтруктурнаяЕдиница = &Склад
	|				И Организация = &Организация
	|				И ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Запасы.Номенклатура КАК Номенклатура,
	|						Запасы.Характеристика КАК Характеристика
	|					ИЗ
	|						Продажи КАК Запасы)) КАК ЗапасыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.Склад КАК Склад,
	|	ЗапасыОстатки.Дата КАК Дата,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗапасыОстатки.ЕстьКонечныйОстаток
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЕстьКонечныйОстаток,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗапасыОстатки.ЕстьОстатки
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЕстьОстатки,
	|	МИНИМУМ(ЕСТЬNULL(ЗапасыОстаткиСледующий.Дата, &ДатаОкончания)) КАК ДатаСледующий
	|ПОМЕСТИТЬ ОстаткиПериодами
	|ИЗ
	|	ПризнакиНаличияОстатковПоДатам КАК ЗапасыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПризнакиНаличияОстатковПоДатам КАК ЗапасыОстаткиСледующий
	|		ПО (ЗапасыОстаткиСледующий.Номенклатура = ЗапасыОстатки.Номенклатура)
	|			И (ЗапасыОстаткиСледующий.Характеристика = ЗапасыОстатки.Характеристика)
	|			И (ЗапасыОстаткиСледующий.Дата > ЗапасыОстатки.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.Склад,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Дата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дата,
	|	ДатаСледующий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПериодами.Организация КАК Организация,
	|	ОстаткиПериодами.Склад КАК Склад,
	|	ОстаткиПериодами.Номенклатура КАК Номенклатура,
	|	ОстаткиПериодами.Характеристика КАК Характеристика,
	|	СУММА(ВЫБОР
	|			КОГДА ОстаткиПериодами.Дата = ДниУчета.День
	|				ТОГДА ОстаткиПериодами.ЕстьОстатки
	|			ИНАЧЕ ОстаткиПериодами.ЕстьКонечныйОстаток
	|		КОНЕЦ) КАК КоличествоДней
	|ПОМЕСТИТЬ КоличествоДнейНаПродажеСУчетомОстатков
	|ИЗ
	|	ДниУчета КАК ДниУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиПериодами КАК ОстаткиПериодами
	|		ПО (ДниУчета.Склад = &Склад)
	|			И ДниУчета.День >= ОстаткиПериодами.Дата
	|			И ДниУчета.День < ОстаткиПериодами.ДатаСледующий
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПериодами.Склад,
	|	ОстаткиПериодами.Характеристика,
	|	ОстаткиПериодами.Номенклатура,
	|	ОстаткиПериодами.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продажи.Номенклатура КАК Номенклатура,
	|	Продажи.Характеристика КАК Характеристика,
	|	&Организация КАК Организация,
	|	&Склад КАК Склад,
	|	Продажи.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ПризнакиНаличияОстатковПоДатам.ЕстьОстатки = ИСТИНА
	|			ТОГДА Продажи.КоличествоОборот
	|	КОНЕЦ КАК КоличествоОборот
	|ПОМЕСТИТЬ ПродажиСУчетомОстатка
	|ИЗ
	|	Продажи КАК Продажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПризнакиНаличияОстатковПоДатам КАК ПризнакиНаличияОстатковПоДатам
	|		ПО Продажи.Период = ПризнакиНаличияОстатковПоДатам.Дата
	|			И Продажи.Номенклатура = ПризнакиНаличияОстатковПоДатам.Номенклатура
	|			И Продажи.Характеристика = ПризнакиНаличияОстатковПоДатам.Характеристика";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДобавитьВременныеТаблицыПродажиПоДням(Запрос, Настройки, ПериодПродаж) 
	
	// получение запроса продажи по дням
	СхемаКомпоновкиДанных 	= Обработки.РасчетПотребностей.ПолучитьМакет("СхемаКомпоновкиДанныхПродажиПоДням");
	КомпоновщикНастроек 	= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных)); 
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);

	НастройкиКомпоновщика	= КомпоновщикНастроек.ПолучитьНастройки();
	НастройкиКомпоновщика.Порядок.Элементы.Очистить();

	НастройкиКомпоновщика.Структура.Очистить();

	ДетальныеЗаписи = НастройкиКомпоновщика.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Для каждого ВыборПоля Из СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Выбор.Элементы Цикл
		ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных")).Поле = ВыборПоля.Поле;
	КонецЦикла;
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных 			  = КомпоновщикМакетаКомпоновкиДанных.Выполнить(
		СхемаКомпоновкиДанных, 
		НастройкиКомпоновщика,
		,
		,
		, Ложь);
	
	СхемаЗапроса 		= Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(МакетКомпоновкиДанных.НаборыДанных[0].Запрос);
	
	ОсновнойЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ОсновнойЗапрос.ТаблицаДляПомещения = "Продажи";
	
	ОсновнойЗапрос.Индекс.Добавить("Номенклатура");
	ОсновнойЗапрос.Индекс.Добавить("Характеристика");
	ОсновнойЗапрос.Индекс.Добавить("Период");
	
	КоличествоКолонок = ОсновнойЗапрос.Колонки.Количество();
	Для ОбратныйИндекс = 1 По КоличествоКолонок Цикл
		ПроверяемоеПоле = ОсновнойЗапрос.Колонки[КоличествоКолонок - ОбратныйИндекс];
		Если СтрЗаканчиваетсяНа(ПроверяемоеПоле.Псевдоним, "Представление") Тогда 
			ОсновнойЗапрос.Колонки.Удалить(КоличествоКолонок - ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Для каждого ЗначениеПараметра Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(ЗначениеПараметра.Имя, ЗначениеПараметра.Значение);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДатаНачала", 			НачалоДня(ПериодПродаж.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", 			КонецДня(ПериодПродаж.ДатаОкончания));

	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТаблицаПрогнозаПоДням(Параметры)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("Склад", 					Параметры.Склад);
	Запрос.УстановитьПараметр("ПланироватьПеремещения", ЗначениеЗаполнено(Параметры.Склад));
	
	ДобавитьВременныеТаблицыПродажиПоДням(Запрос, Параметры.Настройки, Параметры.ПериодПродаж);
	
	ОдинДень	  				= 86400;
	ГрафикРаботыЗадан 			= Ложь;
	ПланированиеСУчетомОстатков = ЗначениеЗаполнено(Параметры.Склад);
	
	Если ЗначениеЗаполнено(Параметры.Склад) Тогда

		ДобавитьВременныеТаблицыГрафиковРаботы(Запрос);
		КоличествоТаблиц  			= Запрос.МенеджерВременныхТаблиц.Таблицы.Количество();
		РезультатВременнойТаблицы 	= Запрос.МенеджерВременныхТаблиц.Таблицы[КоличествоТаблиц - 1].ПолучитьДанные();
		ГрафикРаботыЗадан 			= Не РезультатВременнойТаблицы.Пустой();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(РабочиеДни.День, ДЕНЬ) КАК День,
		|	РабочиеДни.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА РабочиеДни.РабочихДней > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Учитывать
		|ПОМЕСТИТЬ ДниУчета
		|ИЗ
		|	&РабочиеДни КАК РабочиеДни
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДниУчета.Склад КАК Склад,
		|	КОЛИЧЕСТВО(ВЫБОР
		|			КОГДА ДниУчета.Учитывать
		|				ТОГДА ДниУчета.День
		|		КОНЕЦ) КАК КоличествоДней
		|ПОМЕСТИТЬ КоличествоДнейНаПродаже
		|ИЗ
		|	ДниУчета КАК ДниУчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ДниУчета.Склад";
		
		Если Не ГрафикРаботыЗадан Тогда
			
			РабочиеДни = РезультатВременнойТаблицы.Выгрузить();
			
			Для СчетчикДней = 1 По ВсегоДней(Параметры.ПериодПродаж) Цикл    
				
				РабочийДень = РабочиеДни.Добавить();
				РабочийДень.День		= Параметры.ПериодПродаж.ДатаНачала + ОдинДень * (СчетчикДней - 1);
				РабочийДень.Склад		= Параметры.Склад;
				РабочийДень.РабочихДней = 1;
				
            КонецЦикла;
			
			Запрос.УстановитьПараметр("РабочиеДни", РабочиеДни);
			
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РабочиеДни", "РабочиеДни");
		КонецЕсли;
		
	Иначе
		
		// Не задан график работы, используется расчет по данным продаж и остатков
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПродажиОбороты.Период КАК День,
		|	ПродажиОбороты.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА ПродажиОбороты.КоличествоОборот <> 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Учитывать
		|ПОМЕСТИТЬ ДниУчета
		|ИЗ
		|	Продажи КАК ПродажиОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДниУчета.Склад КАК Склад,
		|	КОЛИЧЕСТВО(ВЫБОР
		|			КОГДА ДниУчета.Учитывать
		|				ТОГДА ДниУчета.День
		|		КОНЕЦ) КАК КоличествоДней
		|ПОМЕСТИТЬ КоличествоДнейНаПродаже
		|ИЗ
		|	ДниУчета КАК ДниУчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ДниУчета.Склад";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Если Не ПланированиеСУчетомОстатков Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПродажиОбороты.Организация КАК Организация,
		|	ПродажиОбороты.Склад КАК Склад,
		|	ПродажиОбороты.Номенклатура КАК Номенклатура,
		|	ПродажиОбороты.Характеристика КАК Характеристика,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(КоличествоДнейНаПродаже.КоличествоДней, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ ПродажиОбороты.КоличествоОборот / ЕСТЬNULL(КоличествоДнейНаПродаже.КоличествоДней, 0)
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	0 КАК КоличествоПоОстатку
		|ИЗ
		|	Продажи КАК ПродажиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоДнейНаПродаже КАК КоличествоДнейНаПродаже
		|		ПО ПродажиОбороты.Склад = КоличествоДнейНаПродаже.Склад
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(КоличествоПоОстатку)
		|ПО
		|	Организация,
		|	Склад,
		|	Номенклатура,
		|	Характеристика";
		
	Иначе
		
		ДобавитьВременныеТаблицыПродажиПоОстаткамТоваров(Запрос);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПродажиОбороты.Организация КАК Организация,
		|	ПродажиОбороты.Склад КАК Склад,
		|	ПродажиОбороты.Номенклатура КАК Номенклатура,
		|	ПродажиОбороты.Характеристика КАК Характеристика,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(КоличествоДнейНаПродаже.КоличествоДней, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ ПродажиОбороты.КоличествоОборот / ЕСТЬNULL(КоличествоДнейНаПродаже.КоличествоДней, 0)
		|		КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Количество,
		|	0 КАК КоличествоПоОстатку
		|ИЗ
		|	Продажи КАК ПродажиОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоДнейНаПродаже КАК КоличествоДнейНаПродаже
		|		ПО ПродажиОбороты.Склад = КоличествоДнейНаПродаже.Склад
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПродажиСУчетомОстатка.Организация,
		|	ПродажиСУчетомОстатка.Склад,
		|	ПродажиСУчетомОстатка.Номенклатура,
		|	ПродажиСУчетомОстатка.Характеристика,
		|	0,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(КоличествоДнейНаПродаже.КоличествоДней, 0) = 0
		|				ТОГДА 0
		|			ИНАЧЕ ПродажиСУчетомОстатка.КоличествоОборот / ЕСТЬNULL(КоличествоДнейНаПродаже.КоличествоДней, 0)
		|		КОНЕЦ КАК ЧИСЛО(15, 3))
		|ИЗ
		|	ПродажиСУчетомОстатка КАК ПродажиСУчетомОстатка
		|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоДнейНаПродажеСУчетомОстатков КАК КоличествоДнейНаПродаже
		|		ПО ПродажиСУчетомОстатка.Организация = КоличествоДнейНаПродаже.Организация
		|			И ПродажиСУчетомОстатка.Склад = КоличествоДнейНаПродаже.Склад
		|			И ПродажиСУчетомОстатка.Номенклатура = КоличествоДнейНаПродаже.Номенклатура
		|			И ПродажиСУчетомОстатка.Характеристика = КоличествоДнейНаПродаже.Характеристика
		|ИТОГИ
		|	СУММА(Количество),
		|	СУММА(КоличествоПоОстатку)
		|ПО
		|	Организация,
		|	Склад,
		|	Номенклатура,
		|	Характеристика";
		
	КонецЕсли;	
		
	ТаблицаПрогноза 	= Новый ТаблицаЗначений;
	ТаблицаПрогноза.Колонки.Добавить("Организация", 	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПрогноза.Колонки.Добавить("Склад", 			Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТаблицаПрогноза.Колонки.Добавить("Номенклатура",   	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПрогноза.Колонки.Добавить("Характеристика",  Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПрогноза.Колонки.Добавить("Дата", 			ОписаниеТиповДаты());
	ТаблицаПрогноза.Колонки.Добавить("Количество", 		ОписаниеТиповЧисла(17, 3));
	
	МассивДатПрогноза 		= Новый Массив;
	КоличествоДнейВПериоде 	= Новый Соответствие;
	
	ТекущаяДата   			= Параметры.Период.ДатаНачала;
	ВсегоДней 	  			= ВсегоДней(Параметры.Период.ДатаОкончания, ТекущаяДата);
	Периодичность 			= Параметры.Периодичность;
    ДатаНачалаПоПериоду		= ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(ТекущаяДата, Периодичность);
	СмещениеДаты			= ВсегоДней(ТекущаяДата, ДатаНачалаПоПериоду) - 1;
	
	Если ГрафикРаботыЗадан Тогда

		ЗапросДатыПрогноза = Новый Запрос;
		ЗапросДатыПрогноза.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросДатыПрогноза.УстановитьПараметр("ДатаНачала", 			ТекущаяДата);
		ЗапросДатыПрогноза.УстановитьПараметр("ДатаОкончания", 			КонецДня(Параметры.Период.ДатаОкончания));
		ЗапросДатыПрогноза.УстановитьПараметр("Склад", 					Параметры.Склад);
		ЗапросДатыПрогноза.УстановитьПараметр("ПланироватьПеремещения", ЗначениеЗаполнено(Параметры.Склад));

		ДобавитьВременныеТаблицыГрафиковРаботы(ЗапросДатыПрогноза);

		ЗапросДатыПрогноза.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеДни.День КАК День
		|ИЗ
		|	РабочиеДни КАК РабочиеДни
		|ГДЕ
		|	РабочиеДни.РабочихДней > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	День";

		ВыборкаДатПрогноза = ЗапросДатыПрогноза.Выполнить().Выбрать();
		ТекущаяДатаСеанса  = ТекущаяДатаСеанса();
		
		Пока ВыборкаДатПрогноза.Следующий() Цикл

			День		 = ВыборкаДатПрогноза.День - СмещениеДаты * ОдинДень;
			ДатаПрогноза = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(День, Периодичность) + СмещениеДаты * ОдинДень;
			
			Если КоличествоДнейВПериоде.Получить(ДатаПрогноза) = Неопределено Тогда
				МассивДатПрогноза.Добавить(ДатаПрогноза);
				КоличествоДнейВПериоде.Вставить(ДатаПрогноза, 1);
			Иначе
				ДнейВПериоде = КоличествоДнейВПериоде.Получить(ДатаПрогноза);
				КоличествоДнейВПериоде.Вставить(ДатаПрогноза, ДнейВПериоде + 1);
			КонецЕсли;
			
		КонецЦикла;

		ЗапросДатыПрогноза.МенеджерВременныхТаблиц.Закрыть();
		
	Иначе		
		
		Для СчетчикДней = 1 По ВсегоДней Цикл

			День		 = НачалоДня(ТекущаяДата + (СчетчикДней - 1) * ОдинДень) - СмещениеДаты * ОдинДень;
			ДатаПрогноза = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(День, Периодичность) + СмещениеДаты * ОдинДень;
			
			Если КоличествоДнейВПериоде.Получить(ДатаПрогноза) = Неопределено Тогда
				МассивДатПрогноза.Добавить(ДатаПрогноза);
				КоличествоДнейВПериоде.Вставить(ДатаПрогноза, 1);
			Иначе
				ДнейВПериоде = КоличествоДнейВПериоде.Получить(ДатаПрогноза);
				КоличествоДнейВПериоде.Вставить(ДатаПрогноза, ДнейВПериоде + 1);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаОрганизация = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаСклад = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСклад.Следующий() Цикл
			ВыборкаНоменклатура = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаНоменклатура.Следующий() Цикл
				ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
				Пока ВыборкаХарактеристики.Следующий() Цикл
					Для Каждого ОчереднаяДатаПродаж Из МассивДатПрогноза Цикл
						
						НоваяСтрока = ТаблицаПрогноза.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаХарактеристики);
						
						НоваяСтрока.Дата 		= ОчереднаяДатаПродаж;
						НоваяСтрока.Количество 	= МАКС(ВыборкаХарактеристики.Количество, ВыборкаХарактеристики.КоличествоПоОстатку, 0);
						НоваяСтрока.Количество 	= НоваяСтрока.Количество * КоличествоДнейВПериоде.Получить(ОчереднаяДатаПродаж);
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();

	Возврат ТаблицаПрогноза;
	
КонецФункции

#КонецОбласти

#Область ФиксированныеСтроки

Функция РассчитыватьПоПродажам()
	
	Возврат "ПоПродажам";	
	
КонецФункции 

Функция МетодПрогнозаСредненедельныеПродажи()
	
	Возврат "СредненедельныеПродажи";	
	
КонецФункции 

Функция СпособПополненияЗакупкаПереработка()
	
	Возврат "ЗакупкаПереработка";	
	
КонецФункции 

Функция СпособПополненияЗакупка()
	
	Возврат "Закупка";	
	
КонецФункции 

Функция СпособПополненияПроизводство()
	
	Возврат "Производство";	
	
КонецФункции 

Функция СпособПополненияПеремещение()
	
	Возврат "Перемещение";	
	
КонецФункции 

Функция СпособПополненияВсе()
	
	Возврат "Все";	
	
КонецФункции 

Функция ГруппировкаНоменклатура()
	
	Возврат "Номенклатура";	
	
КонецФункции 

Функция ГруппировкаНоменклатураДень()
	
	Возврат "НоменклатураДень";	
	
КонецФункции 

Функция ГруппировкаДеньНоменклатура()
	
	Возврат "ДеньНоменклатура";	
	
КонецФункции 

Функция ГруппировкаЗаказНоменклатура()
	
	Возврат "ЗаказНоменклатура";	
	
КонецФункции 

Функция ИмяГруппировкиНоменклатура()
	
	Возврат "Номенклатура";	
	
КонецФункции 

Функция ИмяГруппировкиЗаказ()
	
	Возврат "Заказ";	
	
КонецФункции 

Функция ИмяГруппировкиЗаказРекомендации()
	
	Возврат "ЗаказРекомендации";	
	
КонецФункции 

Функция ИмяГруппировкиПериод()
	
	Возврат "Период";	
	
КонецФункции 

Функция ИмяГруппировкиХарактеристика()
	
	Возврат "Характеристика";	
	
КонецФункции 

Функция ИмяГруппировкиЕдиницаИзмерения()
	
	Возврат "ЕдиницаИзмерения";	
	
КонецФункции 

Функция ИмяГруппировкиНачальныйОстаток()
	
	Возврат "НачальныйОстаток";	
	
КонецФункции 

Функция ИмяГруппировкиКонечныйОстаток()
	
	Возврат "КонечныйОстаток";	
	
КонецФункции 

Функция ИмяГруппировкиПоступление()
	
	Возврат "Поступление";	
	
КонецФункции 

Функция ИмяГруппировкиПотребность()
	
	Возврат "Потребность";	
	
КонецФункции 

Функция ИмяГруппировкиМинимальныйЗапас()
	
	Возврат "МинимальныйЗапас";	
	
КонецФункции 

Функция ИмяГруппировкиМаксимальныйЗапас()
	
	Возврат "МаксимальныйЗапас";	
	
КонецФункции 

Функция ИмяГруппировкиРекомендовано()
	
	Возврат "Рекомендовано";	
	
КонецФункции 

Функция ИмяГруппировкиИсточник()
	
	Возврат "Источник";	
	
КонецФункции 

Функция ВсегоДней(Период, ТекущаяДата = Неопределено)
	
	Если ТипЗнч(Период) = Тип("СтандартныйПериод") Тогда
		
		ДатаНачала 		= Период.ДатаНачала;
		ДатаОкончания	= Период.ДатаОкончания;
		
	Иначе

		ДатаНачала 		= ТекущаяДата;
		ДатаОкончания	= Период;
		
	КонецЕсли;
	
	ВсегоДней = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / 86400;
	
	Возврат ?(ВсегоДней > 0, ВсегоДней + 1, - ВсегоДней + 1);
	
КонецФункции

Функция СоздатьСхемуКомпоновкиДанных(ТаблицаДанных, Группировки, ВычисляемыеПоля)

	СтруктураРесурсов					= Новый Структура;
	
	СхемаКомпоновкиДанных				= Новый СхемаКомпоновкиДанных;
    КоллекцияКолонок 					= Новый ТаблицаЗначений;
    КоллекцияКолонок.Колонки.Добавить("Имя");
    КоллекцияКолонок.Колонки.Добавить("ТипЗначения");
    КоллекцияКолонок.Колонки.Добавить("Заголовок");
    
    ИсточникДанных 					  	= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
    ИсточникДанных.Имя 				  	= "ИсточникДанных";
    ИсточникДанных.ТипИсточникаДанных 	= "Local";
    
    НаборДанных 						= СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных 			= "ИсточникДанных";
	НаборДанных.Имя 					= "НаборДанных";
	НаборДанных.ИмяОбъекта 				= "Данные";    
        
	Для каждого КолонкаДанных Из ТаблицаДанных.Колонки Цикл
		
        Колонка    						= КоллекцияКолонок.Добавить();
        Колонка.Имя    					= КолонкаДанных.Имя;
        Колонка.Заголовок    			= КолонкаДанных.Заголовок;
        Колонка.ТипЗначения 			= КолонкаДанных.ТипЗначения;
		
		Если КолонкаДанных.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			СтруктураРесурсов.Вставить(Колонка.Имя, "Сумма");
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого ВычисляемоеПоле Из ВычисляемыеПоля Цикл
	
		ПолеВыражения = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
    	ПолеВыражения.ПутьКДанным 	= ВычисляемоеПоле.Ключ;
    	ПолеВыражения.Заголовок		= ВычисляемоеПоле.Ключ;
    	ПолеВыражения.Выражение		= ВычисляемоеПоле.Значение;	
		
        Колонка    						= КоллекцияКолонок.Добавить();
        Колонка.Имя    					= ВычисляемоеПоле.Ключ;
        Колонка.Заголовок    			= ВычисляемоеПоле.Ключ;
        Колонка.ТипЗначения 			= Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
		
		СтруктураРесурсов.Вставить(ВычисляемоеПоле.Ключ, ВычисляемоеПоле.Ключ)
		
	КонецЦикла;
	
    НастройкиПоУмолчанию 				= СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
    
	Для Каждого КлючЗначение Из СтруктураРесурсов Цикл

		Если КоллекцияКолонок.Найти(КлючЗначение.Ключ, "Имя") = Неопределено Тогда
			Продолжить;
		КонецЕсли;	

		Если КлючЗначение.Значение = "Сумма" Тогда
                    
			ПолеРесурса             = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			ПолеРесурса.ПутьКДанным = КлючЗначение.Ключ;
			ПолеРесурса.Выражение   = КлючЗначение.Значение + "(" + КлючЗначение.Ключ + ")";                    
			
			Для Каждого СтруктураГруппировки Из Группировки Цикл
				
				Если СтруктураГруппировки.Имя = "Номенклатура" Тогда
					
					Для Каждого ИмяГруппировкиНоменклатуры Из СтрРазделить(СтруктураГруппировки.ПоляГруппировки, ",") Цикл
						ПолеРесурса.Группировки.Добавить(ИмяГруппировкиНоменклатуры);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли КлючЗначение.Значение = "Среднее"
			ИЛИ КлючЗначение.Значение = "Максимум"
			ИЛИ КлючЗначение.Значение = "Минимум"
			ИЛИ КлючЗначение.Значение = "Количество" Тогда
                    
			ПолеРесурса             = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			ПолеРесурса.ПутьКДанным = КлючЗначение.Ключ;
			ПолеРесурса.Выражение   = КлючЗначение.Значение + "(" + КлючЗначение.Ключ + ")";                    
                    
		ИначеЕсли КлючЗначение.Значение = "КоличествоРазличные" Тогда                      
                    
			ПолеРесурса             = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			ПолеРесурса.ПутьКДанным = КлючЗначение.Ключ;
			ПолеРесурса.Выражение   = "Количество(Различные " + КлючЗначение.Ключ + ")";
                    
		ИначеЕсли СтрНайти(КлючЗначение.Значение, КлючЗначение.Ключ) > 0 Тогда                      
                    
			ПолеРесурса             = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
			ПолеРесурса.ПутьКДанным = КлючЗначение.Ключ;
			ПолеРесурса.Выражение   = КлючЗначение.Значение;
                    
		КонецЕсли;    
			
	КонецЦикла;                                         

    Для каждого НоваяКолонка Из КоллекцияКолонок Цикл

		ПолеНабора 				= НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
        ПолеНабора.Заголовок 	= СокрЛП(НоваяКолонка.Заголовок);
        ПолеНабора.Поле 		= СокрЛП(НоваяКолонка.Имя);
        ПолеНабора.ПутьКДанным 	= СокрЛП(НоваяКолонка.Имя);
        
        МассивТипов 			= ОбщегоНазначения.СкопироватьРекурсивно(НоваяКолонка.ТипЗначения.Типы());

		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивТипов, Тип("Неопределено"));
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивТипов, Тип("NULL"));
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивТипов, Неопределено);
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивТипов, Null);
		
        ПолеНабора.ТипЗначения = Новый ОписаниеТипов(
			МассивТипов,
			НоваяКолонка.ТипЗначения.КвалификаторыЧисла,
			НоваяКолонка.ТипЗначения.КвалификаторыСтроки,
			НоваяКолонка.ТипЗначения.КвалификаторыДаты);

    КонецЦикла;

	ТипВыбранноеПоле = Тип("ВыбранноеПолеКомпоновкиДанных");
	
	Для Каждого Колонка Из КоллекцияКолонок Цикл
			
		ВыбранноеПолеКомпоновкиДанных 				= НастройкиПоУмолчанию.Выбор.Элементы.Добавить(ТипВыбранноеПоле);
		ВыбранноеПолеКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(СокрЛП(Колонка.Имя));
		ВыбранноеПолеКомпоновкиДанных.Использование = Истина;
			
	КонецЦикла; 
		
	ДобавитьЭлементыГруппировок(НастройкиПоУмолчанию, Группировки);

	ПараметрВывода = НастройкиПоУмолчанию.ПараметрыВывода.Элементы.Найти("ГоризонтальноеРасположениеОбщихИтогов");
	ПараметрВывода.Значение 		= РасположениеИтоговКомпоновкиДанных.Нет;
	ПараметрВывода.Использование    = Истина;
	
	ПараметрВывода = НастройкиПоУмолчанию.ПараметрыВывода.Элементы.Найти("ВертикальноеРасположениеОбщихИтогов");
	ПараметрВывода.Значение 		= РасположениеИтоговКомпоновкиДанных.Нет;
	ПараметрВывода.Использование    = Истина;
	
    Возврат СхемаКомпоновкиДанных;
	
КонецФункции

Процедура УстановитьОтборКомпоновщика(НастройкиКомпоновки, Поле, Значение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(Поле);
	ЭлементОтбора.ВидСравнения 		= ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.ПравоеЗначение 	= Значение;
	ЭлементОтбора.Использование 	= Истина;
	
КонецПроцедуры 

Процедура ДобавитьЭлементыГруппировок(НастройкиКомпоновщика, Группировки, Уровень = 0)

   	Группировка = НастройкиКомпоновщика.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.Использование 			= Истина;

	АвтоПоле 							= Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
   	АвтоПоле.Использование 				= Истина;
	
	Если Группировки <> Неопределено 
		И Группировки.Количество() > Уровень Тогда
	
		ПодчиненнаяГруппировка   = Группировки[Уровень];
		ПоляГруппировки 		= СтрРазделить(ПодчиненнаяГруппировка.ПоляГруппировки, ",");
		
		Для Каждого ПолеГруппировки Из ПоляГруппировки Цикл
			
			ЭлементГруппировки				 	= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ЭлементГруппировки.Поле 		 	= Новый ПолеКомпоновкиДанных(ПолеГруппировки);
			ЭлементГруппировки.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.Элементы;
			
		КонецЦикла;
		
		ДобавитьЭлементыГруппировок(Группировка, Группировки, Уровень + 1);
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ДобавитьЭлементыУпорядочивания(НастройкиКомпоновки, Группировки, Уровень = 0, ТипУпорядочивания = "Возр")
	
	ПодчиненнаяГруппировка  = Группировки[Уровень];
	ПоляГруппировки 	   = СтрРазделить(ПодчиненнаяГруппировка.ПоляГруппировки, ",");
		
	Для Каждого ПолеГруппировки Из ПоляГруппировки Цикл
			
		Если ПолеГруппировки = ИмяГруппировкиПериод() Тогда
			Поле = ПолеГруппировки;
		ИначеЕсли ПолеГруппировки = ИмяГруппировкиЗаказ() Тогда
			Поле = ПолеГруппировки + ".Дата";
		Иначе
			Поле = ПолеГруппировки + ".Наименование";
		КонецЕсли; 
			
		ЭлементПорядка 					 = НастройкиКомпоновки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле 			 = Новый ПолеКомпоновкиДанных(Поле);
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных[ТипУпорядочивания];
		ЭлементПорядка.Использование 	 = Истина;
			
	КонецЦикла;
		
	Если Группировки.Количество() > Уровень + 1 Тогда
		ДобавитьЭлементыУпорядочивания(НастройкиКомпоновки, Группировки, Уровень + 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьГруппировку(Группировки, ПоляГруппировки)
	
	Имя = СтрРазделить(ПоляГруппировки, ",");
	Имя = Имя[0];
	
	Группировки.Добавить(Новый Структура("Имя, ПоляГруппировки", Имя, ПоляГруппировки));
	
КонецПроцедуры
	
#КонецОбласти 

#КонецОбласти 

#КонецЕсли 