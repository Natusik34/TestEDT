#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокАвтоСкидок.Параметры.УстановитьЗначениеПараметра("БонуснаяПрограмма", Объект.Ссылка);
	АвтоматическиеОкругления.Параметры.УстановитьЗначениеПараметра("БонуснаяПрограмма", Объект.Ссылка);
	
	ЕстьДействующиеПравилаНачисления = РаботаСБонусами.ЕстьДействующиеПравилаНачисления(Объект.Ссылка);
	ЕстьДействующиеПравилаОкругления = РаботаСБонусами.ЕстьДействующиеПравилаОкругления(Объект.Ссылка);
	
	ВариантОграниченияПоНоменклатуре = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоНоменклатуре;
	ВариантОграниченияПоКатегориям = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоКатегориям;
	ВариантОграниченияПоЦеновымГруппам = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоЦеновымГруппам;
	ВариантОграниченияПоСегментамНоменклатуры = Перечисления.ВариантыОграниченийСкидокПоНоменклатуре.ПоСегменту;
	
	ИспользуютсяСегментыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры");	
	Если Не ЗначениеЗаполнено(Объект.Назначение) Тогда
		Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияАвтоматическихСкидок.Везде");
	КонецЕсли;
	
	ВалютаУчета = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	Если Объект.КурсБонусов = 0 Тогда 
		Объект.КурсБонусов = 1;
	КонецЕсли;
	ПредставлениеВалютыКурса = ПолучитьПредставлениеВалютыКурса(Объект.КурсБонусов, ВалютаУчета);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидимостьюИДоступностью();
	
	СформироватьПодсказку_1();
	СформироватьПодсказку_2();
	СформироватьПодсказку_3();
	СформироватьПодсказку_4();
	СформироватьПодсказку_5();
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовШапкиФормы

&НаКлиенте
Процедура УправлениеВидимостьюИДоступностью()
	
	Элементы.ГруппаОтсрочка.Доступность = Объект.ОтсрочкаНачисления;
	Элементы.ГруппаСписание.Доступность = Объект.СписаниеНеиспользованных;
	
	НачислятьНаДР = Объект.НачислятьБонусыНаДеньРождения;
	//Элементы.КоличествоБонусовНаДеньРождения.Доступность		= НачислятьНаДР;
	//Элементы.ДекорацияБаллов.Доступность						= НачислятьНаДР;
	Элементы.ГруппаДниРожденияПараметрыНачисления.Доступность	= НачислятьНаДР;
	
	Элементы.ДнейПередДнемРождения.Доступность	= Объект.НачислятьПередДнемРождения;
	Элементы.ДекорацияДнейДо.Доступность		= Объект.НачислятьПередДнемРождения;
	Элементы.ДнейПослеДняРождения.Доступность	= Объект.СписыватьПослеДняРождения;
	Элементы.ДекорацияДнейПосле.Доступность		= Объект.СписыватьПослеДняРождения;
	
	Элементы.СписокАвтоСкидок.Видимость = ЕстьДействующиеПравилаНачисления;
	Элементы.ГруппаЗаглушка.Видимость = Не ЕстьДействующиеПравилаНачисления;
	
	Элементы.СписокОкруглений.Видимость = ЕстьДействующиеПравилаОкругления;
	Элементы.ГруппаЗаглушкаОкругления.Видимость = Не ЕстьДействующиеПравилаОкругления;
	
	ПодсказкаВозврата = НСтр("ru = 'При возврате товаров, оплаченных бонусами, потраченные баллы будут начислены снова%1'");
	ПодсказкаВозврата = СтрШаблон(ПодсказкаВозврата, ?(Объект.СписаниеНеиспользованных, НСтр("ru = ' (будет рассчитана новая дата списания)'"), ""));
	Элементы.ГруппаВозврат.Подсказка = ПодсказкаВозврата;
	
	Элементы.ГруппаНастройкиОграничений.Видимость = Объект.ЕстьУточненияОграниченийОплаты;
	
	Если Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуре Тогда
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.Заголовок = НСтр("ru = 'Номенклатура'");
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		
		Элементы.ДекорацияПодсказкаУточнения.Заголовок = НСтр("ru = 'Заполните уточнения, если требуется, чтобы у определенных товаров или групп товаров значение скидки отличалось от основного значения. Если список не заполнен, то для всех позиций номенклатуры используется основное значение скидки.'");
		
		Элементы.НоменклатураГруппыЦеновыеГруппыХарактеристика.Видимость = Истина;
		Элементы.НоменклатураГруппыЦеновыеГруппыДобавитьГруппу.Видимость = Истина;
	ИначеЕсли Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоКатегориям Тогда
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.Заголовок = НСтр("ru = 'Категория номенклатуры'");
		
		Элементы.ДекорацияПодсказкаУточнения.Заголовок = НСтр(
			"ru = 'Заполните уточнения, если требуется, чтобы у товаров определенных категорий значение скидки отличалось от основного значения. Если список не заполнен, то для всех категорий используется основное значение скидки.'");
		
		Элементы.НоменклатураГруппыЦеновыеГруппыХарактеристика.Видимость = Ложь;
		Элементы.НоменклатураГруппыЦеновыеГруппыДобавитьГруппу.Видимость = Истина;
	ИначеЕсли Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоЦеновымГруппам Тогда
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.Заголовок = НСтр("ru = 'Ценовая группа'");
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы");
		
		Элементы.ДекорацияПодсказкаУточнения.Заголовок = НСтр("ru = 'Заполните уточнения, если требуется, чтобы у товаров определенных ценовых групп значение скидки отличалось от основного значения. Если список не заполнен, то для всех ценовых групп используется основное значение скидки.'");
		
		Элементы.НоменклатураГруппыЦеновыеГруппыХарактеристика.Видимость = Ложь;
		Элементы.НоменклатураГруппыЦеновыеГруппыДобавитьГруппу.Видимость = Ложь;
	ИначеЕсли Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоСегментамНоменклатуры Тогда
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.Заголовок = НСтр("ru = 'Сегмент номенклатуры'");
		Элементы.НоменклатураГруппыЦеновыеГруппыЗначениеУточнения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");	
		Элементы.ДекорацияПодсказкаУточнения.Заголовок =  НСтр("ru = 'Заполните уточнения, если требуется, чтобы у товаров определенных сегментов значение скидки отличалось от основного значения. Если список не заполнен, то для всех сегментов используется основное значение скидки.'");
		Элементы.НоменклатураГруппыЦеновыеГруппыХарактеристика.Видимость = Ложь;
		Элементы.НоменклатураГруппыЦеновыеГруппыДобавитьГруппу.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ИспользуютсяСегментыНоменклатуры Тогда
		СписокВыбораОграниченийПоНоменклатуре = Элементы.ВариантОграниченияПоНоменклатуре.СписокВыбора;
		ВариантПереключателя = 
			СписокВыбораОграниченийПоНоменклатуре.НайтиПоЗначению(ВариантОграниченияПоСегментамНоменклатуры);
		Если ВариантПереключателя <> Неопределено Тогда
			СписокВыбораОграниченийПоНоменклатуре.Удалить(ВариантПереключателя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсрочкаНачисленияПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура СписаниеНеиспользованныхПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура НачислятьПередДнемРожденияПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура СписыватьПослеДняРожденияПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьСкидкиПриРасчетеПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступностью();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры // КомментарийПриИзменении()

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	РаботаСФормойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительно, Объект.Комментарий);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ВариантОграниченияПоНоменклатуре.
//
&НаКлиенте
Процедура ВариантОграниченияПоНоменклатуреПриИзменении(Элемент)
	
	Если Объект.УточненияМаксимальнойОплаты.Количество() > 0 Тогда
		Описание = Новый ОписаниеОповещения("ВариантОграниченияПоНоменклатуреПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Описание, НСтр("ru = 'Таблица уточнений будет очищена. Продолжить?'"), 
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Изменение варианта уточнения'"));
	Иначе
		ВариантОграниченияПоНоменклатуреДоИзменения = Объект.ВариантОграниченияПоНоменклатуре;
		УправлениеВидимостьюИДоступностью();
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

// Процедура - обработчик события ПриИзменении элемента ВариантОграниченияПоНоменклатуре (завершение после ответа на вопрос об удалении строк в ТЧ).
//
&НаКлиенте
Процедура ВариантОграниченияПоНоменклатуреПриИзмененииЗавершение(РезультатОтвета, ДополнительныеПараметры) Экспорт

	Если РезультатОтвета <> КодВозвратаДиалога.Да Тогда
		Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуреДоИзменения;
		Возврат;
	КонецЕсли;
	
	ВариантОграниченияПоНоменклатуреДоИзменения = Объект.ВариантОграниченияПоНоменклатуре;
	УправлениеВидимостьюИДоступностью();
	Объект.УточненияМаксимальнойОплаты.Очистить();
	
КонецПроцедуры

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиКНастройке(Команда)
	
	ДополнительныеПараметры = Новый Структура("ИмяФормы", "ФормаДействующихПравилНачисления");
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписьИПереходКНастройкам", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Перед переходом объект будет записан. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ПерейтиКНастройкеПродолжение("", ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПерейтиКНастройкеОкруглений(Команда)
	
	ДополнительныеПараметры = Новый Структура("ИмяФормы", "ФормаДействующихПравилОкругления");
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписьИПереходКНастройкам", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Перед переходом объект будет записан. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ПерейтиКНастройкеПродолжение("", ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьИПереходКНастройкам(Результат, ДополнительныеПараметры = "") Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Записать() Тогда
			ПерейтиКНастройкеПродолжение("", ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройкеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерейтиКНастройкеЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("Ключ", Объект.Ссылка);
	
	ФормаПоУмолчанию = Неопределено;
	Если Не ТипЗнч(ДополнительныеПараметры) = Тип("Структура") ИЛИ Не ДополнительныеПараметры.Свойство("ИмяФормы", ФормаПоУмолчанию) Тогда
		ФормаПоУмолчанию = "ФормаДействующихПравилНачисления";
	КонецЕсли;
	ИмяОткрываемойФормы = "Справочник.БонусныеПрограммы.Форма." + ФормаПоУмолчанию; 
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройкеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НовоеЗначение = РаботаСБонусами.ЕстьДействующиеПравилаНачисления(Объект.Ссылка);
	Если Не ЕстьДействующиеПравилаНачисления = НовоеЗначение Тогда
		ЕстьДействующиеПравилаНачисления = НовоеЗначение;
		УправлениеВидимостьюИДоступностью();
		СписокАвтоСкидок.Параметры.УстановитьЗначениеПараметра("БонуснаяПрограмма", Объект.Ссылка);
		АвтоматическиеОкругления.Параметры.УстановитьЗначениеПараметра("БонуснаяПрограмма", Объект.Ссылка);
	КонецЕсли;
	НовоеЗначение = РаботаСБонусами.ЕстьДействующиеПравилаОкругления(Объект.Ссылка);
	Если Не ЕстьДействующиеПравилаОкругления = НовоеЗначение Тогда
		ЕстьДействующиеПравилаОкругления = НовоеЗначение;
		УправлениеВидимостьюИДоступностью();
		АвтоматическиеОкругления.Параметры.УстановитьЗначениеПараметра("БонуснаяПрограмма", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НачислятьБонусыНаДеньРожденияПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодсказку_1()
	
	Подсказка_1 = Новый ФорматированнаяСтрока(НСтр("ru = '1. Настройте параметры бонусной программы на закладке ""Настройки"";'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодсказку_2()
	
	Подсказка_2 = Новый ФорматированнаяСтрока(НСтр("ru = '2. Создайте правила начисления бонусов на закладке ""Правила начисления"";'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодсказку_3()
	
	Часть1 = Новый ФорматированнаяСтрока(НСтр("ru = '3. Чтобы не начислять дробное количество бонусов, настройте ""Округления"";'"));
	
	Подсказка_3 = Новый ФорматированнаяСтрока(Часть1);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодсказку_4()
	
	Часть1 = Новый ФорматированнаяСтрока(НСтр("ru = '4. Укажите бонусную программу в карточке '"));
	Часть2 = Новый ФорматированнаяСтрока(НСтр("ru = 'вида дисконтных карт;'"),,,, ПолучитьНавигационнуюСсылку(ПолучитьФорму("Справочник.ВидыДисконтныхКарт.ФормаСписка")));
	
	Подсказка_4 = Новый ФорматированнаяСтрока(Часть1, Часть2);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодсказку_5()
	
	Часть1 = Новый ФорматированнаяСтрока(НСтр("ru = '5. Настройте оповещения о начислениях и списаниях с помощью '"));
	Часть2 = Новый ФорматированнаяСтрока(НСтр("ru = 'ассистента УНФ;'"),,,, "Ссылка");
	
	Подсказка_5 = Новый ФорматированнаяСтрока(Часть1, Часть2);
	
КонецПроцедуры

&НаКлиенте
Процедура Подсказка5ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Обработка.АссистентУправления.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьУточненияОграниченийОплатыПриИзменении(Элемент)
	УправлениеВидимостьюИДоступностью();
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДобавитьГруппуНоменклатурыКатегорийЗавершение", ЭтотОбъект);
	Если Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуре Тогда
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбораГруппы",, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	ИначеЕсли Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоКатегориям Тогда
		ПараметрыОткрытия = Новый Структура("");
		ОткрытьФорму("Справочник.КатегорииНоменклатуры.ФормаВыбораГруппы", ПараметрыОткрытия, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуНоменклатурыКатегорийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		НоваяСтрока = Объект.УточненияМаксимальнойОплаты.Добавить();
		НоваяСтрока.ЗначениеУточнения = РезультатЗакрытия;
		Элементы.НоменклатураГруппыЦеновыеГруппы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Если Объект.ВариантОграниченияПоНоменклатуре = ВариантОграниченияПоНоменклатуре Тогда
			НоваяСтрока.ЭтоГруппа = УправлениеНебольшойФирмойВызовСервера.ЗначениеРеквизитаОбъекта(РезультатЗакрытия, "ЭтоГруппа");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеВалютыКурса(Курс, Валюта)
	ПредставлениеВалютыКурса = Строка(Валюта);
	ПараметрыПрописиМассив = СтрРазделить(Валюта.ПараметрыПрописи, ",", Истина);
	Если ПараметрыПрописиМассив.Количество() = 9 Тогда
		ПараметрыПрописиМассив[8] = 0;
		МассивОписанийДляСклонения = Новый Массив;
		МассивОписанийДляСклонения.Добавить(ПараметрыПрописиМассив[0]); 
		МассивОписанийДляСклонения.Добавить(ПараметрыПрописиМассив[4]); 
		МассивОписанийДляСклонения.Добавить(0); 
		ПараметрыПрописи = СтрСоединить(МассивОписанийДляСклонения, ",");
		КурсСтрокой = ПолучитьСклоненияСтрокиПоЧислу("", Цел(Курс), ПараметрыПрописи)[0];
		ПредставлениеВалютыКурса = СтрЗаменить(КурсСтрокой, Строка(Цел(Курс)), "");
	КонецЕсли; 
	Возврат ПредставлениеВалютыКурса;
КонецФункции


&НаКлиенте
Процедура КурсБонусовПриИзменении(Элемент)
	ПредставлениеВалютыКурса = ПолучитьПредставлениеВалютыКурса(Объект.КурсБонусов, ВалютаУчета);
КонецПроцедуры
#КонецОбласти