
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		
		ТекущееРабочееМесто = ПараметрыСеанса.РабочееМестоКлиента;
		
		Если НЕ ЗначениеЗаполнено(ТекущееРабочееМесто) Тогда
			ТекущееРабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
		КонецЕсли; 
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НастройкиРабочегоМестаКассира.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиРабочегоМестаКассира КАК НастройкиРабочегоМестаКассира
		|ГДЕ
		|	НЕ НастройкиРабочегоМестаКассира.ПометкаУдаления
		|	И НастройкиРабочегоМестаКассира.РабочееМесто = &ТекущееРабочееМесто
		|	И НЕ НастройкиРабочегоМестаКассира.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)");
		Запрос.УстановитьПараметр("ТекущееРабочееМесто", ТекущееРабочееМесто);
		
		НастройкиТекущегоРабочегоМеста = Запрос.Выполнить().Выбрать();
		
		Если НастройкиТекущегоРабочегоМеста.Количество() = 0 Тогда 
			РабочееМесто = ТекущееРабочееМесто;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ИспользоватьНовыйПодборТоваров = Истина;
	КонецЕсли;
	
	ТаблицыГорячихКлавиш = ПодготовитьТаблицыГорячихКлавишДляПроверки();
	ПроверитьНекорректныеКомбинацииГорячихКлавиш(ТаблицыГорячихКлавиш, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ЗначениеЗаполнено(ОбъектКопирования.РабочееМесто) Тогда
		РабочееМесто = Справочники.РабочиеМеста.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	ПроверитьУникальностьНабораИзбранныхТоваров(Отказ, ТекстОшибки);
	
	ИспользоватьХарактеристики = Ложь;
	ОбщегоНазначенияРМКПереопределяемый.ЗаполнитьИспользованиеХарактеристик(ИспользоватьХарактеристики);
	Если ИспользоватьХарактеристики Тогда
		ПроверитьЗаполнениеХарактеристикБыстрыхТоваров(Отказ, ТекстОшибки);
	КонецЕсли;
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьТаблицыГорячихКлавишДляПроверки()
	
	РезультатФункции = Новый Структура;
	
	ПозицияВиртуальнойСтроки = ГорячиеКлавиши.Количество() + 1;
	ИмяЭлементаПанельИзбранных = "ОткрытьПанельИзбранныхТоваров";
	КомбинацияОткрытияПанелиИзбранного = ГорячиеКлавиши.Найти(ИмяЭлементаПанельИзбранных, "ИмяКнопки");
	ГорячиеКлавишиИзбранное = Справочники.НастройкиРабочегоМестаКассира.ПолучитьШаблонТаблицыГорячихКлавиш();
	ПустаяКлавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();

	Если (НЕ КомбинацияОткрытияПанелиИзбранного = Неопределено)
		И (ЗначениеЗаполнено(КомбинацияОткрытияПанелиИзбранного.Клавиша)
			И Не КомбинацияОткрытияПанелиИзбранного.Клавиша = ПустаяКлавиша) Тогда
		
		НомерПП = 0;
		Пока НомерПП < 10 Цикл
			НоваяКомбинация = ГорячиеКлавишиИзбранное.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКомбинация, КомбинацияОткрытияПанелиИзбранного);
			НоваяКомбинация.НомерСтроки = ПозицияВиртуальнойСтроки + НомерПП;
			НоваяКомбинация.ИмяКнопки = СтрШаблон(НСтр("ru = 'ИзбранныйТовар%1'"), НомерПП);
			НоваяКомбинация.ЗаголовокКнопки = СтрШаблон(НСтр("ru = 'ИзбранныйТовар%1'"), НомерПП);
			НоваяКомбинация.Клавиша = СтрШаблон("_%1", НомерПП);
			
			НомерПП = НомерПП + 1;
		КонецЦикла;
	
	КонецЕсли;
	
	РезультатФункции.Вставить("ОсновныеГорячиеКлавиши", ГорячиеКлавиши.Выгрузить());
	РезультатФункции.Вставить("ГорячиеКлавишиКупюр", ПолучитьГорячиеКлавишиКупюр());
	РезультатФункции.Вставить("ГорячиеКлавишиИзбранное", ГорячиеКлавишиИзбранное);
	
	Возврат РезультатФункции;
	
КонецФункции

Процедура ПроверитьНекорректныеКомбинацииГорячихКлавиш(ТаблицыГорячихКлавиш, Отказ)
	
	ТаблицаСтрокНекорректныхКомбинаций
		= Справочники.НастройкиРабочегоМестаКассира.ПолучитьСтрокиНекорректныхКомбинацийГорячихклавиш(ТаблицыГорячихКлавиш);
	Отказ = (ТаблицаСтрокНекорректныхКомбинаций.Количество() > 0);
	
	ТекстСообщения = "";
	
	ШаблоныТекстов = Новый Структура();
	
	ШаблоныТекстов.Вставить("ШаблонПозицииВСтроке", НСтр("ru = 'В строке %1'"));
	ШаблоныТекстов.Вставить("ШаблонПозицииДляКупюры", НСтр("ru = 'Для купюры номиналом %1'"));
	ШаблоныТекстов.Вставить("ТекстПредупреждения", НСтр("ru = 'используется недопустимая комбинация клавиш ""'"));
	ШаблоныТекстов.Вставить("ТекстПредложения", НСтр("ru = '"". Выберите другую комбинацию.'"));
	
	ТипНарушенияЗапрещеннаяКомбинация = "ЗапрещеннаяКомбинация";
	СписокПовторяющихсяСтрок = "";
	СписокПовторяющихсяКупюр = "";
	КоличествоВведенныхКомбинаций = ГорячиеКлавиши.Количество();
	Для Каждого СтрокаКомбинации Из ТаблицаСтрокНекорректныхКомбинаций Цикл
		Если СтрНайти(СтрокаКомбинации.ТипНарушения, ТипНарушенияЗапрещеннаяКомбинация) > 0 Тогда
			
			ДобавитьСообщениеОЗапрещеннойКомбинации(ШаблоныТекстов, СтрокаКомбинации, ТекстСообщения);
			
		ИначеЕсли СтрокаКомбинации.НомерСтроки <= КоличествоВведенныхКомбинаций Тогда
			
			Если СтрокаКомбинации.НомерСтроки = 0 Тогда
				СписокПовторяющихсяКупюр = СтрШаблон("%1%2, ", СписокПовторяющихсяКупюр, СтрокаКомбинации.Номинал);
			Иначе
				СписокПовторяющихсяСтрок = СтрШаблон("%1%2,", СписокПовторяющихсяСтрок, СтрокаКомбинации.НомерСтроки);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	ДобавитьСообщениеДублейГорячихКлавиш(СписокПовторяющихсяСтрок, СписокПовторяющихсяКупюр,
		ТаблицыГорячихКлавиш, ТекстСообщения);
		
	Если Не ТекстСообщения = "" Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСообщениеОЗапрещеннойКомбинации(ШаблоныТекстов, СтрокаКомбинации, ТекстСообщения)
	
	Если СтрокаКомбинации.НомерСтроки = 0 Тогда
		ТекстПозиции = СтрШаблон(ШаблоныТекстов.ШаблонПозицииДляКупюры, СтрокаКомбинации.Номинал);
	Иначе
		ТекстПозиции = СтрШаблон(ШаблоныТекстов.ШаблонПозицииВСтроке, СтрокаКомбинации.НомерСтроки);
	КонецЕсли;
	СоставляющаяCtrl = ?(СтрокаКомбинации.АкселераторCtrl, "Ctrl + ", "");
	СоставляющаяAlt = ?(СтрокаКомбинации.АкселераторAlt, "Alt + ", "");
	СоставляющаяShift = ?(СтрокаКомбинации.АкселераторShift, "Shift + ", "");
	СтроковоеПредставлениеКомбинации = СтрШаблон("%1%2%3%4",
				СоставляющаяCtrl, СоставляющаяAlt, СоставляющаяShift, СтрокаКомбинации.Клавиша);
	
	ТекстСообщения = СтрШаблон("%1%2%3 %4%5%6", ТекстСообщения, ?(ТекстСообщения = "", "", Символы.ПС), ТекстПозиции,
		ШаблоныТекстов.ТекстПредупреждения, СтроковоеПредставлениеКомбинации, ШаблоныТекстов.ТекстПредложения);
	
КонецПроцедуры

Процедура ДобавитьСообщениеДублейГорячихКлавиш(СписокПовторяющихсяСтрок,
		СписокПовторяющихсяКупюр, ТаблицыГорячихКлавиш, ТекстСообщения)
	
	Если НЕ (ПустаяСтрока(СписокПовторяющихсяСтрок) И ПустаяСтрока(СписокПовторяющихсяКупюр)) Тогда
		
		ДополнениеТекстаСообщения = "";
		ПредставлениеКомбинацииОткрытияПанелиИзбранного
			= СформироватьПредставлениеКомбинацииОткрытияПанелиИзбранного(ТаблицыГорячихКлавиш);
		
		Если НЕ ПустаяСтрока(ПредставлениеКомбинацииОткрытияПанелиИзбранного) Тогда 
			
			ДополнениеТекстаСообщения = СтрШаблон(
				НСтр("ru = '%1Для избранных товаров зарезервированы комбинации клавиш ""%2"" [0-9] цифрового ряда.'"),
				Символы.ПС, ПредставлениеКомбинацииОткрытияПанелиИзбранного);
				
		КонецЕсли;
			
		ТекстДублей = "";
		ТекстКупюр = "";
		Если НЕ ПустаяСтрока(СписокПовторяющихсяСтрок) Тогда
			СписокПовторяющихсяСтрок = Лев(СписокПовторяющихсяСтрок, СтрДлина(СписокПовторяющихсяСтрок) - 1);
			Если Не ПустаяСтрока(СписокПовторяющихсяКупюр) Тогда
				ТекстКупюр = НСтр("ru = ' и для купюр: '");
			КонецЕсли;
			ТекстДублей = СтрШаблон(НСтр("ru = 'В строках %1'"), СписокПовторяющихсяСтрок);
		ИначеЕсли Не ПустаяСтрока(СписокПовторяющихсяКупюр) Тогда
			ТекстКупюр = НСтр("ru = 'Для купюр: '");
		КонецЕсли;
		Если Не ПустаяСтрока(СписокПовторяющихсяКупюр) Тогда
			СписокПовторяющихсяКупюр = Лев(СписокПовторяющихсяКупюр, СтрДлина(СписокПовторяющихсяКупюр) - 2);
			ТекстДублей = СтрШаблон("%1%2%3", ТекстДублей, ТекстКупюр, СписокПовторяющихсяКупюр);
		КонецЕсли;
		ТекстДублей = СтрШаблон(НСтр("ru = '%1 неуникальные сочетания горячих клавиш.%2'"),
			ТекстДублей, ДополнениеТекстаСообщения);
			
		ТекстСообщения = СтрШаблон("%1%2%3", ТекстСообщения, ?(ТекстСообщения = "", "", Символы.ПС), ТекстДублей);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПредставлениеКомбинацииОткрытияПанелиИзбранного(ТаблицыГорячихКлавиш)
	
	РезультатФункции = "";
	
	ГорячиеКлавишиИзбранное = ТаблицыГорячихКлавиш.ГорячиеКлавишиИзбранное;
	Если ГорячиеКлавишиИзбранное.Количество() > 0 Тогда
		СоставляющаяCtrl = ?(ГорячиеКлавишиИзбранное[0].АкселераторCtrl, "Ctrl +", "");
		СоставляющаяAlt = ?(ГорячиеКлавишиИзбранное[0].АкселераторAlt, "Alt +", "");
		СоставляющаяShift = ?(ГорячиеКлавишиИзбранное[0].АкселераторShift, "Shift +", "");
		
		РезультатФункции = СтрШаблон("%1%2%3%4", СоставляющаяCtrl, СоставляющаяAlt, СоставляющаяShift);
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьГорячиеКлавишиКупюр()
	
	ПустаяКлавиша = ИнтерфейсРМКСлужебныйКлиентСервер.ПредставлениеПустойКлавиши();
	
	ГорячиеКлавишиКупюр = Справочники.НастройкиРабочегоМестаКассира.ПолучитьШаблонТаблицыГорячихКлавишКупюр();
	Для Каждого СтрокаНаличных Из ВводНаличных Цикл
		Если ЗначениеЗаполнено(СтрокаНаличных.Клавиша) И Не СтрокаНаличных.Клавиша = ПустаяКлавиша Тогда
			НоваяСтрока = ГорячиеКлавишиКупюр.Добавить();
			НоваяСтрока.Номинал = СтрокаНаличных.Номинал;
			НоваяСтрока.Клавиша = СтрокаНаличных.Клавиша;
			НоваяСтрока.АкселераторAlt = ВводНаличныхАкселераторAlt;
			НоваяСтрока.АкселераторCtrl = ВводНаличныхАкселераторCtrl;
			НоваяСтрока.АкселераторShift = ВводНаличныхАкселераторShift;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГорячиеКлавишиКупюр;
	
КонецФункции

Процедура ПроверитьУникальностьНабораИзбранныхТоваров(Отказ, ТекстОшибки)

	Если НЕ Отказ Тогда
		
		Запрос = Новый Запрос;
		ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросДублейСтрокВБыстрыхТоварах(Запрос, Ссылка);
		Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
			Отказ = Истина;
			ТекстОшибки = НСтр("ru = 'Не сформирован запрос для проверки дублей строк в быстрых товарах.'");
			Возврат;
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НомераСтрок = "";
		Пока Выборка.Следующий() Цикл
			НомераСтрок = СтрШаблон(НСтр("ru = '%1%2,'"), НомераСтрок, Выборка.НомерСтроки);
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(НомераСтрок) Тогда
			НомераСтрок = Лев(НомераСтрок, СтрДлина(НомераСтрок) - 1);
			ТекстОшибки = СтрШаблон(НСтр("ru = 'В строках %1 содержатся дубли комбинаций ""Номенклатура - Характеристика"".
												|Пожалуйста, удалите дубли.'"), НомераСтрок);
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ Отказ И БыстрыеТовары.Количество() > 12 Тогда
			ТекстОшибки = НСтр("ru ='Программа поддерживает не более 12 товарных позиций в разделе ""Избранное"".
				|Пожалуйста, удалите лишние позиции.'");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполненность характеристик у товаров, в виде которых указан признак использования характеристик
//
// Параметры:
//  Отказ - Булево - признак отказа
//
Процедура ПроверитьЗаполнениеХарактеристикБыстрыхТоваров(Отказ, ТекстОшибки)
	
	Если Не Отказ Тогда
		
		Запрос = Новый Запрос;
		ОбщегоНазначенияРМКПереопределяемый.СформироватьЗапросИспользованияХарактеристикВБыстрыхТоварах(Запрос, Ссылка);
		Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
			Отказ = Истина;
			ТекстОшибки = НСтр("ru = 'Не сформирован запрос для проверки заполнения характеристик.'");
			Возврат;
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НомераСтрок = "";
		Пока Выборка.Следующий() Цикл
			НомераСтрок = СтрШаблон(НСтр("ru = '%1%2,'"), НомераСтрок, Выборка.НомерСтроки);
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(НомераСтрок) Тогда
			НомераСтрок = Лев(НомераСтрок, СтрДлина(НомераСтрок) - 1);
			ТекстОшибки = СтрШаблон(НСтр("ru = 'В строках %1 не заполнены характеристики.
				|Пожалуйста, заполните их.'"), НомераСтрок);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли