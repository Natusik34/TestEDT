#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создается запись в регистре по переданным данным. Регзадание отправляет сообщения по созданным записям
// 
// Параметры:
//  МассоваяРассылка - ДокументСсылка.МассоваяРассылка - выполняемая массовая рассылка
//  МассивКакСвязаться - Массив из Строка - адреса, по которым отправляется рассылка
//  СпособОтправки - ПеречислениеСсылка.ВидыКаналовСвязи - способ отправки рассылки
//  ИнтервалМеждуПопытками - Число - интервал между попытками, указывается в минутах
//  КоличествоПопыток - Число - количество попыток
//
Процедура Зарегистрировать(
	Знач МассоваяРассылка,
	Знач МассивКакСвязаться,
	Знач СпособОтправки,
	Знач ИнтервалМеждуПопытками,
	Знач КоличествоПопыток) Экспорт
	
	Если МассивКакСвязаться.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = НаборЗаписей(МассоваяРассылка);
	
	Для Каждого КакСвязаться Из МассивКакСвязаться Цикл
		
		ЗаписьНайдена = Ложь;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Запись.КакСвязаться <> КакСвязаться Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗаписьДляРегистрации(
			Запись,
			МассоваяРассылка,
			КакСвязаться,
			ИнтервалМеждуПопытками,
			СпособОтправки,
			КоличествоПопыток);
			
			ЗаписьНайдена = Истина;
			Прервать;
			
		КонецЦикла;
		
		Если Не ЗаписьНайдена Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗаписьДляРегистрации(
			НоваяЗапись,
			МассоваяРассылка,
			КакСвязаться,
			ИнтервалМеждуПопытками,
			СпособОтправки,
			КоличествоПопыток);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Записываются данные о попытке отправить сообщения
//
// Параметры:
//  ПорцияСообщений - СписокЗначений, ТаблицаЗначений, Массив из Структура:
//   * МассоваяРассылка - ДокументСсылка.МассоваяРассылка - ссылка на документ
//   * КакСвязаться - Строка - как связаться с контактом
//
Процедура ЗарегистрироватьНачалоОтправки(ПорцияСообщений) Экспорт
	
	СсылкаИКонтакты = Новый Соответствие;
	Для Каждого Сообщение Из ПорцияСообщений Цикл
		
		Если СсылкаИКонтакты[Сообщение.МассоваяРассылка] = Неопределено Тогда
			СсылкаИКонтакты[Сообщение.МассоваяРассылка] = Новый Массив;
		КонецЕсли;
		
		СсылкаИКонтакты[Сообщение.МассоваяРассылка].Добавить(Сообщение.КакСвязаться);
		
	КонецЦикла;
	
	Для Каждого КлючЗначение Из СсылкаИКонтакты Цикл
		ЗарегистрироватьНачалоОтправкиВРазрезеДокумента(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Регистрирует факт успешной отправки электронного письма.
// 
// Параметры:
//  МассоваяРассылка - ДокументСсылка.МассоваяРассылка - выполняемая массовая рассылка,
//  КакСвязаться - Строка - адрес, по которому отправляется рассылка,
//  Идентификаторы - Структура - результат выполнения см. ЭлектроннаяПочтаУНФ.ОтправитьПочтовоеСообщение ,
//  ИдентификаторСообщенияSMS - Строка - идентификатор сообщения, который передал провайдер SMS,
//  СостояниеСообщенияSMS - ПеречислениеСсылка.СостоянияСообщенияSMS - статус доставки сообщения SMS адресату,
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - настройка, через которую отправлялась рассылка.
Процедура ЗарегистрироватьУспешнуюОтправку(Знач МассоваяРассылка, Знач КакСвязаться, Знач Идентификаторы,
	Знач ИдентификаторСообщенияSMS, Знач СостояниеСообщенияSMS, Знач УчетнаяЗапись) Экспорт
	
	МенеджерЗаписи = МенеджерЗаписи(МассоваяРассылка, КакСвязаться);
	
	Если ЗначениеЗаполнено(Идентификаторы) Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, Идентификаторы);
		МенеджерЗаписи.ИдентификаторыJSON = ЗаписьJSON.Закрыть();
		
	КонецЕсли;
	
	Если Не ТребуетсяПоследующаяПроверкаСостояния(СостояниеСообщенияSMS) Тогда
		
		МенеджерЗаписи.Состояние = Перечисления.СостоянияОтправкиРассылки.Отправлено;
		МенеджерЗаписи.ПопытокОсталось = 0;
		МенеджерЗаписи.ПоследняяДатаПроверкиСостоянияSMS = '00010101';
		
	КонецЕсли;
	
	МенеджерЗаписи.СледующаяПопытка = '00010101';
	МенеджерЗаписи.СообщениеОбОшибке = "";
	МенеджерЗаписи.ИдентификаторСообщенияSMS = ИдентификаторСообщенияSMS;
	МенеджерЗаписи.СостояниеСообщенияSMS = СостояниеСообщенияSMS;
	МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
	МенеджерЗаписи.ВременнаяОтметка = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Регистрирует ошибку отправки электронного письма.
// 
// Параметры:
//  МассоваяРассылка - ДокументСсылка.МассоваяРассылка - выполняемая массовая рассылка.
//  КакСвязаться - Строка - адрес, по которому отправляется рассылка.
//  СообщениеОбОшибке - Строка - подробное представление ошибки.
Процедура ЗарегистрироватьСообщениеОбОшибке(Знач МассоваяРассылка, Знач КакСвязаться, Знач СообщениеОбОшибке) Экспорт
	
	МенеджерЗаписи = МенеджерЗаписи(МассоваяРассылка, КакСвязаться);
	
	Если Не МенеджерЗаписи.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерЗаписи.ПопытокОсталось Тогда
		МенеджерЗаписи.Состояние = Перечисления.СостоянияОтправкиРассылки.Сформировано;
	Иначе
		МенеджерЗаписи.Состояние = Перечисления.СостоянияОтправкиРассылки.ОшибкаОтправки;
	КонецЕсли;
	
	МенеджерЗаписи.СообщениеОбОшибке = СообщениеОбОшибке;
	МенеджерЗаписи.ВременнаяОтметка = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Очистка записей в регистре по Ссылке
//
// Параметры:
//  МассоваяРассылка - ДокументСсылка.МассоваяРассылка - Ссылка для очистки записей
//
Процедура ОтменитьОтправкуРассылки(МассоваяРассылка) Экспорт
	
	НаборЗаписей = НаборЗаписей(МассоваяРассылка);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	ОтключитьНевостребованноеЗадание();
	
КонецПроцедуры

// Запускает задание асинхронного выполнения массовой рассылки.
Процедура ЗапуститьВыполнениеЗадания() Экспорт
	
	Если ЗаданиеЗапланировано() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполнятьКаждуюМинуту = Новый РасписаниеРегламентногоЗадания;
	ВыполнятьКаждуюМинуту.ПериодПовтораДней = 1;
	ВыполнятьКаждуюМинуту.ПериодПовтораВТечениеДня = 60;
	
	ДатаНачала = ТекущаяДатаСеанса() + 60;
	ВыполнятьКаждуюМинуту.ДатаНачала = ДатаНачала;
	ВыполнятьКаждуюМинуту.ВремяНачала = ДатаНачала;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания[ИмяЗадания()]);
	ПараметрыЗадания.Вставить("Расписание", ВыполнятьКаждуюМинуту);
	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
КонецПроцедуры

// Признак: запущено задание массовой рассылки.
// 
// Возвращаемое значение:
//  Булево - Истина, когда задание массовой рассылки запущено
//
Функция ЗаданиеЗапланировано() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = ОтборВыполнениеМассовойРассылки();
	Отбор.Вставить("Использование", Истина);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Возврат ЗначениеЗаполнено(Задания);
	
КонецФункции

// Признак: Задание уже выполняется.
// Используется для проверки - не поздно ли еще отменить задание.
// 
// Возвращаемое значение:
//  Булево - Истина, когда задание массовой рассылки уже выполняется.
Функция ЗаданиеУжеВыполняется() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = ОтборВыполнениеМассовойРассылки();
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого ТекЗадание Из Задания Цикл
		
		СвойстваЗадания = Новый Структура("ПоследнееЗадание, ЗапланированныйМоментЗапуска");
		
		ЗаполнитьЗначенияСвойств(СвойстваЗадания, ТекЗадание);
		
		Если ТипЗнч(СвойстваЗадания.ПоследнееЗадание) = Тип("ФоновоеЗадание") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ТипЗнч(СвойстваЗадания.ЗапланированныйМоментЗапуска) = Тип("Дата") Тогда
			Возврат ТекущаяДатаСеанса() + 5 > СвойстваЗадания.ЗапланированныйМоментЗапуска;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Отключает задание массовой рассылки, когда в очереди отсутствуют данные для отправки.
Процедура ОтключитьНевостребованноеЗадание() Экспорт
	
	Если ОтсутствуютДанныеДляОтправки() Тогда
		УдалитьЗадание();
	КонецЕсли;
	
КонецПроцедуры

// Отключает задание массовой рассылки.
Процедура УдалитьЗадание() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = ОтборВыполнениеМассовойРассылки();
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого ТекЗадание Из Задания Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(ТекЗадание);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает количество сформированных записей по указанной массовой рассылке.
// 
// Параметры:
//  МассоваяРассылка - ДокументСсылка.МассоваяРассылка - выполняемая массовая рассылка.
// 
// Возвращаемое значение:
//  Число - количество сформированных записей по указанной массовой рассылке.
Функция КоличествоСформированныхРассылок(МассоваяРассылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоСформированныхРассылок
	|ИЗ
	|	РегистрСведений.ОчередьРассылок КАК ОчередьРассылок
	|ГДЕ
	|	ОчередьРассылок.МассоваяРассылка = &МассоваяРассылка
	|	И ОчередьРассылок.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиРассылки.Сформировано)");
	Запрос.УстановитьПараметр("МассоваяРассылка", МассоваяРассылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.КоличествоСформированныхРассылок;
	
КонецФункции

// Описание ошибки отправки по измерениям
//
// Параметры:
//  МассоваяРассылка - ДокументСсылка.МассоваяРассылка - массовая рассылка
//  КакСвязаться - Строка - как связаться с контактом
// 
// Возвращаемое значение:
//   - Неопределено - запись не существует или пустая строка
//   - Строка - сообщение об ошибке
//
Функция ЗначениеОшибкиОтправки(МассоваяРассылка, КакСвязаться) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьРассылок.СообщениеОбОшибке КАК СообщениеОбОшибке
		|ИЗ
		|	РегистрСведений.ОчередьРассылок КАК ОчередьРассылок
		|ГДЕ
		|	ОчередьРассылок.МассоваяРассылка = &МассоваяРассылка
		|	И ОчередьРассылок.КакСвязаться = &КакСвязаться";
	
	Запрос.УстановитьПараметр("КакСвязаться", КакСвязаться);
	Запрос.УстановитьПараметр("МассоваяРассылка", МассоваяРассылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если ПустаяСтрока(Выборка.СообщениеОбОшибке) Тогда
		Возврат Неопределено;
	Иначе
		Возврат Выборка.СообщениеОбОшибке;
	КонецЕсли;
	
КонецФункции

// Даты начала и окончания отправления рассылки
//
// Параметры:
//  МассоваяРассылка - ДокументСсылка.МассоваяРассылка - массовая рассылка
// 
// Возвращаемое значение:
//   - Неопределено - запись не существует
//   - Структура:
//      * ДатаНачала - Дата - дата создания самой ранней записи в регистре
//      * ДатаОкончания - Неопределено, Дата - если отправлять больше нечего,
//                                             то дата создания/изменения самой поздней записи в регистре,
//                                             иначе Неопределено
//
Функция ДатыОтправкиРассылки(МассоваяРассылка) Экспорт
	
	ОтсутствуютДанныеДляОтправки = ОтсутствуютДанныеДляОтправкиРассылки(МассоваяРассылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьРассылок.ВременнаяОтметка КАК ВременнаяОтметка
		|ИЗ
		|	РегистрСведений.ОчередьРассылок КАК ОчередьРассылок
		|ГДЕ
		|	ОчередьРассылок.МассоваяРассылка = &МассоваяРассылка
		|	И ОчередьРассылок.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиРассылки.Сформировано)";
	
	Запрос.УстановитьПараметр("МассоваяРассылка", МассоваяРассылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаНачала = '39991231';
	ДатаОкончания = '00010101';
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВременнаяОтметка < ДатаНачала Тогда
			ДатаНачала = Выборка.ВременнаяОтметка;
		КонецЕсли;
		
		Если Выборка.ВременнаяОтметка > ДатаОкончания Тогда
			ДатаОкончания = Выборка.ВременнаяОтметка;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДатаНачала", ДатаНачала);
	Если ОтсутствуютДанныеДляОтправки Тогда
		Результат.Вставить("ДатаОкончания", ДатаОкончания);
	Иначе
		Результат.Вставить("ДатаОкончания", Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Дата запуска регламентного задания
// 
// Возвращаемое значение:
//   - Неопределено - задание не найдено
//   - Дата - дата запуска задания
//
Функция ДатаЗапускаЗадания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = ОтборВыполнениеМассовойРассылки();
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого ТекЗадание Из Задания Цикл
		
		СвойстваЗадания = Новый Структура("Расписание, ЗапланированныйМоментЗапуска");
		ЗаполнитьЗначенияСвойств(СвойстваЗадания, ТекЗадание);
		
		Если ТипЗнч(СвойстваЗадания.Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
			
			ДатаНачала = СвойстваЗадания.Расписание.ДатаНачала;
			ВремяНачала = СвойстваЗадания.Расписание.ВремяНачала;
			
			Возврат Дата(
			Год(ДатаНачала),
			Месяц(ДатаНачала),
			День(ДатаНачала),
			Час(ВремяНачала),
			Минута(ВремяНачала),
			Секунда(ВремяНачала));
			
		КонецЕсли;
		
		Если ТипЗнч(СвойстваЗадания.ЗапланированныйМоментЗапуска) = Тип("Дата") Тогда
			Возврат СвойстваЗадания.ЗапланированныйМоментЗапуска;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Проверяется наличие попыток отправки для сформированных на отправку записей
//
// Параметры:
//  МассоваяРассылка - ДокументСсылка.МассоваяРассылка - массовая рассылка
// 
// Возвращаемое значение:
//  Булево - Истина, если отправлять больше ничего не нужно
//
Функция ОтсутствуютДанныеДляОтправкиРассылки(МассоваяРассылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОчередьРассылок.МассоваяРассылка КАК МассоваяРассылка
	|ИЗ
	|	РегистрСведений.ОчередьРассылок КАК ОчередьРассылок
	|ГДЕ
	|	ОчередьРассылок.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиРассылки.Сформировано)
	|	И (ОчередьРассылок.ПопытокОсталось > 0
	|			ИЛИ ОчередьРассылок.ПоследняяДатаПроверкиСостоянияSMS > &ТекущаяДата)
	|	И ОчередьРассылок.МассоваяРассылка = &МассоваяРассылка");
	
	Запрос.УстановитьПараметр("МассоваяРассылка", МассоваяРассылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

// Устанавливает ошибку для SMS, 
// которые больше не будут пытаться отправиться и для которых истечено время проверки состояния
//
Процедура УстановитьОшибкуДляSMS() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьРассылок.МассоваяРассылка КАК МассоваяРассылка,
		|	ОчередьРассылок.КакСвязаться КАК КакСвязаться
		|ИЗ
		|	РегистрСведений.ОчередьРассылок КАК ОчередьРассылок
		|ГДЕ
		|	ОчередьРассылок.СпособОтправки = ЗНАЧЕНИЕ(Перечисление.ВидыКаналовСвязи.SMS)
		|	И ОчередьРассылок.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиРассылки.Сформировано)
		|	И ОчередьРассылок.ПоследняяДатаПроверкиСостоянияSMS <= &ТекущаяДата
		|	И ОчередьРассылок.ПопытокОсталось <= 0";
	
	ТекДата = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекДата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = МенеджерЗаписи(Выборка.МассоваяРассылка, Выборка.КакСвязаться);
		Если МенеджерЗаписи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи.Состояние = Перечисления.СостоянияОтправкиРассылки.ОшибкаОтправки;
		МенеджерЗаписи.ВременнаяОтметка = ТекДата;
		МенеджерЗаписи.ПоследняяДатаПроверкиСостоянияSMS = '00010101';
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Обнуляет количество попыток отправки и дату последней отправки
//
// Параметры:
//  МассоваяРассылка - ДокументСсылка.МассоваяРассылка - массовая рассылка
//  МассивКакСвязаться - Массив из Строка - адреса, по которым отправляется рассылка
//
Процедура ОтменитьОтправкуССохранениемЗаписей(МассоваяРассылка, МассивКакСвязаться) Экспорт
	
	Если МассивКакСвязаться.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = НаборЗаписей(МассоваяРассылка);
	
	Для Каждого КакСвязаться Из МассивКакСвязаться Цикл
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Запись.КакСвязаться <> КакСвязаться Тогда
				Продолжить;
			КонецЕсли;
			
			Запись.ПопытокОсталось = 0;
			Запись.ПоследняяДатаПроверкиСостоянияSMS = '00010101';
			
			Прервать;
			
		КонецЦикла;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОтсутствуютДанныеДляОтправки()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередьРассылок.МассоваяРассылка КАК МассоваяРассылка
	|ИЗ
	|	РегистрСведений.ОчередьРассылок КАК ОчередьРассылок
	|ГДЕ
	|	ОчередьРассылок.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиРассылки.Сформировано)
	|	И (ОчередьРассылок.ПопытокОсталось > 0
	|			ИЛИ ОчередьРассылок.ПоследняяДатаПроверкиСостоянияSMS > &ТекущаяДата)");
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ЗарегистрироватьНачалоОтправкиВРазрезеДокумента(МассоваяРассылка, МассивКакСвязаться)
	
	НаборЗаписей = НаборЗаписей(МассоваяРассылка);
	
	Для Каждого КакСвязаться Из МассивКакСвязаться Цикл
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Запись.КакСвязаться <> КакСвязаться Тогда
				Продолжить;
			КонецЕсли;
			
			Если Запись.Состояние <> Перечисления.СостоянияОтправкиРассылки.Сформировано Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗаписьДляРегистрацииНачалаОтправки(Запись);
			Прервать;
			
		КонецЦикла;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьЗаписьДляРегистрации(
	Запись,
	МассоваяРассылка,
	КакСвязаться,
	ИнтервалМеждуПопытками,
	СпособОтправки,
	КоличествоПопыток)
	
	Если ЗначениеЗаполнено(ИнтервалМеждуПопытками) Тогда
		Запись.ИнтервалМеждуПопытками = ИнтервалМеждуПопытками;
	Иначе
		Запись.ИнтервалМеждуПопытками = 5;
	КонецЕсли;
	
	Если СпособОтправки = Перечисления.ВидыКаналовСвязи.SMS Тогда
		Запись.ПоследняяДатаПроверкиСостоянияSMS = ТекущаяДатаСеанса() + 86400;
	Иначе
		Запись.ПоследняяДатаПроверкиСостоянияSMS = '00010101';
	КонецЕсли;
	
	Запись.МассоваяРассылка = МассоваяРассылка;
	Запись.КакСвязаться = КакСвязаться;
	Запись.СпособОтправки = СпособОтправки;
	Запись.ПопытокОсталось = КоличествоПопыток;
	Запись.СледующаяПопытка = '00010101';
	Запись.Состояние = Перечисления.СостоянияОтправкиРассылки.Сформировано;
	Запись.ВременнаяОтметка = ТекущаяДатаСеанса();
	
КонецПроцедуры

Процедура ЗаполнитьЗаписьДляРегистрацииНачалаОтправки(Запись)
	
	ТекДата = ТекущаяДатаСеанса();
	
	Если Запись.ПопытокОсталось Тогда
		Запись.ПопытокОсталось = Запись.ПопытокОсталось - 1;
	КонецЕсли;
	
	Запись.СледующаяПопытка = ТекДата + Запись.ИнтервалМеждуПопытками * 60;
	Запись.ВременнаяОтметка = ТекДата;
	
КонецПроцедуры

Функция НаборЗаписей(МассоваяРассылка)
	
	Результат = СоздатьНаборЗаписей();
	Результат.Отбор.МассоваяРассылка.Установить(МассоваяРассылка);
	Результат.Прочитать();
	
	Возврат Результат;
	
КонецФункции

Функция МенеджерЗаписи(МассоваяРассылка, КакСвязаться)
	
	Результат = СоздатьМенеджерЗаписи();
	Результат.МассоваяРассылка = МассоваяРассылка;
	Результат.КакСвязаться = КакСвязаться;
	Результат.Прочитать();
	
	Возврат Результат;
	
КонецФункции

// Проверяет необходимость последующей проверки состояния отправленного SMS-сообщения.
// 
// Параметры:
//  СостояниеСообщенияSMS - ПеречислениеСсылка.СостоянияСообщенияSMS - Статус доставки сообщения SMS адресату.
// 
// Возвращаемое значение:
//  Булево - признак необходимости последующей проверки состояния отправленного SMS-сообщения.
Функция ТребуетсяПоследующаяПроверкаСостояния(СостояниеСообщенияSMS)
	
	Если Не ЗначениеЗаполнено(СостояниеСообщенияSMS) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СостояниеСообщенияSMS = Перечисления.СостоянияСообщенияSMS.Доставлено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СостояниеСообщенияSMS = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает отбор для поиска задания массовой рассылки.
// 
// Возвращаемое значение:
//  Структура - отбор для поиска задания массовой рассылки.
Функция ОтборВыполнениеМассовойРассылки()
	
	Результат = Новый Структура;
	Результат.Вставить("Метаданные", ИмяЗадания());
	Возврат Результат;
	
КонецФункции

Функция ИмяЗадания()
	
	Возврат "ВыполнениеМассовойРассылки"; // Не локализуется
	
КонецФункции

#КонецОбласти

#КонецЕсли