
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обновляет текущее рабочее место с учетом имени компьютера.
//
// Возвращаемое значение:
//  Результат - Булево - признак успешного обновления параметра сеанса.
//
Функция ОбновитьРабочееМестоПользователя() Экспорт
	
	Результат = Истина;

	#Если Не ВебКлиент Тогда
		ИмяКомпьютераРабочегоМеста = ИмяКомпьютера();
	#Иначе
		ИмяКомпьютераРабочегоМеста = НСтр("ru = 'WebКлиент'");
	#КонецЕсли
	
	ИдентификаторРабочегоМеста = МенеджерОборудованияКлиент.ИдентификаторКлиентаДляРабочегоМеста();
	
	ДанныеПроверки = Новый Структура();
	ДанныеПроверки =
		МенеджерОборудованияРМКВызовСервера.АктуальноеРабочееМестоПользователя(ИдентификаторРабочегоМеста,
			ИмяКомпьютераРабочегоМеста);
	
	Если ДанныеПроверки.Свойство("ЗаменитьРабочееМесто")
			И ДанныеПроверки.ЗаменитьРабочееМесто
			И ДанныеПроверки.Свойство("АктуальноеРабочееМесто") Тогда
			
				РабочееМесто = ДанныеПроверки.АктуальноеРабочееМесто;
				Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
				
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ПодключаемоеОборудование

#Область ВзаимодействиеСОборудованием

Процедура ПодключитьОборудованиеПоТипу(Оповещение, Идентификатор, ТипыПО) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПодключитьОборудованиеПоТипу(Оповещение, Идентификатор, ТипыПО, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.НачатьПодключениеОборудованиеПоТипу(Оповещение, Идентификатор, ТипыПО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьОборудованиеПоТипу(ОписаниеОповещения, УникальныйИдентификатор, ТипыПО) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ОтключитьОборудованиеПоТипу(ОписаниеОповещения, УникальныйИдентификатор, ТипыПО, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.НачатьОтключениеОборудованияПоТипу(ОписаниеОповещения, УникальныйИдентификатор, ТипыПО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьПодключениеОборудования(Форма, РезультатПодключения) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ЗавершитьПодключениеОборудования(Форма, РезультатПодключения, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			СоответствиеТиповОборудования = Неопределено;
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияВызовСервера");
			СоответствиеТиповОборудования = МодульВызова.ПолучитьСоответствиеТиповОборудования();
			
			Если РезультатПодключения.ПодключенноеУстройство.ТипОборудования =
				СоответствиеТиповОборудования.Получить("ДисплейПокупателя") Тогда
				Форма.ДисплейПокупателя = РезультатПодключения.ИдентификаторУстройства;
			ИначеЕсли РезультатПодключения.ПодключенноеУстройство.ТипОборудования =
				СоответствиеТиповОборудования.Получить("ПринтерЧеков") Тогда
				Форма.ПринтерЧеков = РезультатПодключения.ИдентификаторУстройства;
			ИначеЕсли РезультатПодключения.ПодключенноеУстройство.ТипОборудования =
				СоответствиеТиповОборудования.Получить("ЭлектронныеВесы") Тогда
				НовыеЭлекторнныеВесы = Форма.ТаблицаЭлектронныхВесов.Добавить();
				НовыеЭлекторнныеВесы.ЭлектронныеВесы = РезультатПодключения.ИдентификаторУстройства;
			ИначеЕсли РезультатПодключения.ПодключенноеУстройство.ТипОборудования = 
				СоответствиеТиповОборудования.Получить("СчитывательМагнитныхКарт") Тогда 
				Форма.ИспользуетсяСчитывательМагнитныхКарт = Истина
			Иначе
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеПараметровУстройства(Оповещение, Идентификатор, ИдентификаторУстройства) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеПараметровУстройства(Оповещение, Идентификатор, ИдентификаторУстройства, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.НачатьПолучениеПараметровУстройства(Оповещение, Идентификатор, ИдентификаторУстройства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеОписанияОборудования(Оповещение, Идентификатор = Неопределено, ИдентификаторУстройства = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеОписанияОборудования(Оповещение, Идентификатор, ИдентификаторУстройства, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.НачатьПолучениеОписанияОборудования(Оповещение, Идентификатор, ИдентификаторУстройства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДрайверОборудования(Оповещение, Идентификатор) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.УстановитьДрайверОборудования(Оповещение, Идентификатор, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.УстановитьДрайверОборудования(Оповещение, Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьНастройкуОборудования(Идентификатор, Оповещение) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ВыполнитьНастройкуОборудования(Идентификатор, Оповещение, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.ВыполнитьНастройкуОборудования(Идентификатор, Оповещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолучениеОписанияДрайвера(Оповещение, Драйвер) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеОписанияДрайвера(Оповещение, Драйвер, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.НачатьПолучениеОписанияДрайвера(Оповещение, Драйвер);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьТестУстройства(Оповещение, ИдентификаторОборудования, ПараметрыУстройства) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьТестУстройства(Оповещение, ИдентификаторОборудования, ПараметрыУстройства, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.НачатьТестУстройства(Оповещение, ИдентификаторОборудования, ПараметрыУстройства);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РабочееМестоКлиента() Экспорт
	
	РабочееМесто = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПолучитьРабочееМестоКлиента(РабочееМесто, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			РабочееМесто = МодульВызова.РабочееМестоКлиента();
		КонецЕсли;
	КонецЕсли;
	
	Возврат РабочееМесто;
	
КонецФункции

Функция ИдентификаторКлиентаДляРабочегоМеста() Экспорт
	
	ИдентификаторКлиента = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПолучитьИдентификаторКлиентаДляРабочегоМеста(ИдентификаторКлиента, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			ИдентификаторКлиента = МодульВызова.ИдентификаторКлиентаДляРабочегоМеста();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторКлиента;
	
КонецФункции

Функция ДанныеУстройства(ИдентификаторУстройства) Экспорт
	
	ДанныеУстройства = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ДанныеУстройства(ИдентификаторУстройства, ДанныеУстройства, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияВызовСервера");
			ДанныеУстройства = МодульВызова.ДанныеУстройства(ИдентификаторУстройства);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеУстройства;

КонецФункции

Функция СохранитьПараметрыУстройства(Идентификатор, ЗначенияНастроек) Экспорт
	
	Результат = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.СохранитьПараметрыУстройства(Идентификатор, ЗначенияНастроек, Результат, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияВызовСервера");
			Результат = МодульВызова.СохранитьПараметрыУстройства(Идентификатор, ЗначенияНастроек);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипыПодключаемогоОборудования() Экспорт
	
	ТипыПодключаемогоОборудования = Новый Соответствие;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ТипыПодключаемогоОборудования(ТипыПодключаемогоОборудования, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияВызовСервера");
			ТипыПодключаемогоОборудования = МодульВызова.ПолучитьСоответствиеТиповОборудования();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипыПодключаемогоОборудования;
	
КонецФункции

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ОбработкаВнешнегоСобытия(Источник, Событие, Данные, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЧекопечатающиеУстройства

Процедура ДобавитьЧекВОчередьЧековККТ(ПараметрыФискализации, ПараметрыПакетнойОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ДобавитьЧекВОчередьЧековККТ(ПараметрыФискализации, ПараметрыПакетнойОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
			МодульВызова.ДобавитьЧекВОчередьЧековККТ(ПараметрыФискализации, ПараметрыПакетнойОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			МодульВызова.ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыВыполненияОперацииНаАвтономнойККТ(ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПараметрыВыполненияОперацииНаАвтономнойККТ(ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства.АвтономнаяККТ") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеАвтономныеУстройстваКлиент");
			ДополнительныеПараметры = МодульВызова.ПараметрыВыполненияОперацииНаАвтономнойККТ();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуЗавершениеАвтономнойККТ(КодВозвратаДиалога, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ВыполнитьКомандуЗавершениеАвтономнойККТ(КодВозвратаДиалога, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства.АвтономнаяККТ") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеАвтономныеУстройстваКлиент");
			МодульВызова.ВыполнитьКомандуЗавершение(КодВозвратаДиалога, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстНефискальногоЧека(ПараметрыОперации) Экспорт
	
	ТекстЧека = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.СформироватьТекстНефискальногоЧека(ПараметрыОперации, ТекстЧека, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
			ТекстЧека = МодульВызова.СформироватьТекстНефискальногоЧека(ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстЧека;
	
КонецФункции

Функция ПараметрыПечатиТекста(ТекстЧека) Экспорт
	
	ПараметрыПечатиТекста = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПараметрыПечатиТекста(ТекстЧека, ПараметрыПечатиТекста, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
			ПараметрыПечатиТекста = МодульВызова.ПараметрыПечатиТекста(ТекстЧека);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыПечатиТекста;
	
КонецФункции

Функция ПараметрыПечатиКопииЧека() Экспорт
	
	ПараметрыПечати = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПараметрыПечатиКопииЧека(ПараметрыПечати, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
			ПараметрыПечати = МодульВызова.ПараметрыПечатьКопииЧека();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыПечати;
	
КонецФункции

Функция ПараметрыПечатиQRКодаНаФискальномУстройстве() Экспорт
	
	ПараметрыПечати = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПараметрыПечатиQRКодаНаФискальномУстройстве(ПараметрыПечати, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
			ПараметрыПечати = МодульВызова.ПараметрыПечатиQRКодаНаФискальномУстройстве();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыПечати;
	
КонецФункции

Процедура НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПечатьКопииЧека(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПечатьКопииЧека(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьПечатьКопииЧека(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПечатьQRКодаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПечатьQRКодаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьПечатьQRКодаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;КонецПроцедуры
	
Процедура НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, Устройство, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ВесовоеОборудование

Процедура НачатьПолученияВесаСЭлектронныхВесов(ОповещениеЗавершенияВзвешивания, УникальныйИдентификатор, ИдентификаторВесов, ПараметрыОперации) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеЗавершенияВзвешивания, УникальныйИдентификатор, ИдентификаторВесов, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ВесовоеОборудование") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиент");
			МодульВызова.НачатьПолученияВесаСЭлектронныхВесов(ОповещениеЗавершенияВзвешивания, УникальныйИдентификатор, ИдентификаторВесов, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДисплейПокупателя

// Возвращает структуру для вывода информации на дисплей покупателя.
//
// Возвращаемое значение:
//  ИсходныеДанные - Структура.
//
Функция ИсходныеДанныеДляПервичнойПередачиНаДисплейПокупателя() Экспорт

	ИсходныеДанные = Новый Структура();
	ИсходныеДанные.Вставить("Операция");
	ИсходныеДанные.Вставить("ИспользоватьПодключаемоеОборудование");
	ИсходныеДанные.Вставить("ДанныеДляОтображения");
	ИсходныеДанные.Вставить("СуммаСкидки");
	ИсходныеДанные.Вставить("СуммаИтого");
	
	Возврат ИсходныеДанные;

КонецФункции

// Возвращает структуру для обновления дисплея покупателя.
//
// Возвращаемое значение:
//  ИсходныеДанные - Структура.
//
Функция ИсходныеДанныеДляОбновленияДанныхНаДисплееПокупателя() Экспорт
	
	ИсходныеДанные = ИсходныеДанныеДляПервичнойПередачиНаДисплейПокупателя();
	ИсходныеДанные.Вставить("ОтображатьТолькоИтоги");
	ИсходныеДанные.Вставить("ТекущаяСтрока");
	ИсходныеДанные.Вставить("Товары");
	
	Возврат ИсходныеДанные;
	
КонецФункции

// Обновление информации, выводимой на дисплей покупателя.
//
// Параметры:
//  ИсходныеДанные - Структура.
//  ОбъектВладелец - УправляемаяФорма.
//	УникальныйИдентификатор - ИдентификаторФормы
//
Процедура ОбновитьДанныеНаДисплееПокупателя(ИсходныеДанные, ОбъектВладелец, УникальныйИдентификатор) Экспорт
	
	Операция								= ИсходныеДанные.Операция;
	ОтображатьТолькоИтоги					= ИсходныеДанные.ОтображатьТолькоИтоги;
	ТекущаяСтрока							= ИсходныеДанные.ТекущаяСтрока;
	Товары									= ИсходныеДанные.Товары;
	ДанныеДляОтображения					= ИсходныеДанные.ДанныеДляОтображения;
	ИспользоватьПодключаемоеОборудование	= ИсходныеДанные.ИспользоватьПодключаемоеОборудование;
	СуммаСкидки								= ИсходныеДанные.СуммаСкидки;
	СуммаИтого								= ИсходныеДанные.СуммаИтого;
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		Если Товары.Количество() > 0 Тогда
			ТекущаяСтрока = Товары[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ПредставлениеСкидки = НСтр("ru = ''");
		
		ИспользуемоеКоличество = ?(ЗначениеЗаполнено(ТекущаяСтрока.Упаковка),
			ТекущаяСтрока.КоличествоУпаковок, ТекущаяСтрока.Количество);
			
		СуммаСтрокиТовара = ТекущаяСтрока.Цена * ИспользуемоеКоличество;
		
		Скидка = СуммаСтрокиТовара - ТекущаяСтрока.Сумма;
		
		ИнформацияОТоваре = СокрЛП(ТекущаяСтрока.Номенклатура);
		
		ДанныеДляОтображения.Весовой = ТекущаяСтрока.Весовой;
		
		Если НЕ (СуммаСтрокиТовара = 0) И(Скидка > 0.01 ИЛИ Скидка < -0.01) Тогда
			
			ПредставлениеСкидки = НСтр("ru = '%1 %2 (%1 %3)'");
			
			Коэффициент = ?(Скидка > 0, 1, -1);
			ЗнакСкидки = ?(Скидка > 0, "-", "+");
			
			ОбщийПроцентСкидкиСтрокой = СтрШаблон(НСтр("ru = '%1%%'"),
				Формат(Коэффициент * Окр(100 * Скидка / СуммаСтрокиТовара, 2, 1), НСтр("ru = 'ЧДЦ=2'")));
			СуммаСкидкиСтрокой = ФорматСумм(Коэффициент * Скидка);
			
			ПредставлениеСкидки = СтрШаблон(ПредставлениеСкидки, ЗнакСкидки, СуммаСкидкиСтрокой,
				ОбщийПроцентСкидкиСтрокой);
			
		КонецЕсли;
		
		Если НЕ ОтображатьТолькоИтоги Тогда
			
			ДанныеДляОтображения.ТоварНаименование = ИнформацияОТоваре;
			ПредставлениеСВалютой = ИспользуемоеКоличество = 1 И НЕ ТекущаяСтрока.Весовой;
			ПредставлениеЦены = ?(ПредставлениеСВалютой, ФорматСумм(ТекущаяСтрока.Цена), ФорматСуммБезВалюты(ТекущаяСтрока.Цена));
			ДанныеДляОтображения.ТоварЦена = СокрЛП(ПредставлениеЦены);
			ПредставлениеСуммы = ?(ПредставлениеСВалютой , ФорматСумм(ТекущаяСтрока.Сумма), ФорматСуммБезВалюты(ТекущаяСтрока.Сумма));
			ДанныеДляОтображения.ТоварСумма			= СокрЛП(ПредставлениеСуммы);
			ДанныеДляОтображения.ТоварКоличество	= ИспользуемоеКоличество;
			ДанныеДляОтображения.ТоварСкидка		= ПредставлениеСкидки;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ДанныеДляОтображения.СуммаИтого		= ФорматСумм(СуммаИтого);
	ДанныеДляОтображения.СуммаСкидки	= ФорматСумм(СуммаСкидки);
	
	ИсходныеДанные = ИсходныеДанныеДляПервичнойПередачиНаДисплейПокупателя();
	ИсходныеДанные.ИспользоватьПодключаемоеОборудование	= ИспользоватьПодключаемоеОборудование;
	ИсходныеДанные.Операция								= Операция;
	ИсходныеДанные.ДанныеДляОтображения					= ДанныеДляОтображения;
	ИсходныеДанные.СуммаСкидки							= СуммаСкидки;
	ИсходныеДанные.СуммаИтого							= СуммаИтого;
	
	ВывестиИнформациюНаДисплейПокупателя(ИсходныеДанные, ОбъектВладелец, УникальныйИдентификатор, Скидка);
	
КонецПроцедуры

// Вывод информации на дисплей покупателя.
//
// Параметры:
//  ИсходныеДанные - Структура
//		*Операция - Строка
//		*ИспользоватьПодключаемоеОборудование - Булево
//		*ДанныеДляОтображения - Строка
//		*СуммаСкидки - Число
//		*СуммаИтого - Число
//  ОбъектВладелец - УправляемаяФорма.
//  УникальныйИдентификатор - ИдентификаторФормы.
//  СуммаСкидкиНаТовар - Число.
//
Процедура ВывестиИнформациюНаДисплейПокупателя(ИсходныеДанные, ОбъектВладелец, УникальныйИдентификатор,
	СуммаСкидкиНаТовар = 0) Экспорт
	
	Операция								= ИсходныеДанные.Операция;
	ДанныеДляОтображения					= ИсходныеДанные.ДанныеДляОтображения;
	ИспользоватьПодключаемоеОборудование	= ИсходныеДанные.ИспользоватьПодключаемоеОборудование;
	СуммаСкидки								= ИсходныеДанные.СуммаСкидки;
	СуммаИтого								= ИсходныеДанные.СуммаИтого;

	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	БазовыйШаблон = СтрШаблон("%1%2", НСтр("ru = '%1'"), " ");
	БазовыйШаблонБезПробелов = НСтр("ru = '%1'");
	ШаблонДваПараметра = НСтр("ru = '%1 %2'");
	
	ВыводитьИтоги				= Ложь;
	ТекстПриПростое				= НСтр("ru = 'ДОБРО ПОЖАЛОВАТЬ'");
	ТекстВНерабочемСостоянии	= НСтр("ru = 'КАССА НЕ РАБОТАЕТ'");
	
	Строка1			= НСтр("ru = ''");
	Строка2			= НСтр("ru = ''");
	ВыравниватьВправо	= Ложь;
	
	Если Операция = "НачалоРаботы" Тогда
		
		Строка1 = ТекстПриПростое;
		НачатьОчисткуДисплеяПокупателя(Неопределено, ОбъектВладелец, Неопределено);
		
	ИначеЕсли Операция = "Оплата" Тогда
		
		Строка1 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'ВНЕСЕНО:'"), ДанныеДляОтображения.Оплата);
		Строка2 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'СДАЧА:'"), ДанныеДляОтображения.Сдача);
		
	ИначеЕсли Операция = "ОжиданиеОплаты" Тогда
		
		ДанныеДляОтображения.СуммаИтого	= Формат(СуммаИтого, НСтр("ru = 'ЧДЦ=2;ЧГ=;ЧН=0.00'"));
		ДанныеДляОтображения.СуммаСкидки	= Формат(СуммаСкидки, НСтр("ru = 'ЧДЦ=2;ЧГ='"));
		
		Строка1 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'ИТОГО:'"), ДанныеДляОтображения.СуммаИтого);
		
		Если НЕ ПустаяСтрока(ДанныеДляОтображения.СуммаСкидки) Тогда
			Строка2 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'СКИДКА:'"), ДанныеДляОтображения.СуммаСкидки);
		КонецЕсли;
		
	ИначеЕсли Операция = "ОтменаОплаты" Тогда
		Строка1 = НСтр("ru = 'ОТМЕНА ОПЛАТЫ'");
	ИначеЕсли Операция = "ДобавлениеТовара" ИЛИ Операция = "УдалениеТовара"
		ИЛИ Операция = "ИзменениеКоличества" ИЛИ Операция = "ИзменениеЦены" Тогда
		
		Если Операция = "ДобавлениеТовара" Тогда
			НачатьОчисткуДисплеяПокупателя(Неопределено, ОбъектВладелец, Неопределено);
		КонецЕсли;
		
		ИнформацияНаименование = ДанныеДляОтображения.ТоварНаименование;
		
		Если ВыводитьИтоги Тогда
			
			
			НачалоСтроки = ?(Операция = "УдалениеТовара", "СТОРНО", "ЦЕНА");
			ЛокализованноеНачалоСтроки = СтрШаблон(НСтр("ru = '%1:'"), НачалоСтроки);
			
			Строка1 = СтрШаблон(БазовыйШаблон, ЛокализованноеНачалоСтроки);
			
			Если НЕ ДанныеДляОтображения.ТоварКоличество = 1
				ИЛИ Операция = "ИзменениеКоличества" ИЛИ Операция = "УдалениеТовара" Тогда
					Строка1 = СтрШаблон(НСтр("ru = '%1%2x'"), Строка1, Строка(ДанныеДляОтображения.ТоварКоличество));
			КонецЕсли;
			
			Строка1 = СтрШаблон(ШаблонДваПараметра, Строка1, ДанныеДляОтображения.ТоварЦена);
			Строка2 = СтрШаблон(ШаблонДваПараметра, НСтр("ru = 'ИТОГО:'"), ДанныеДляОтображения.СуммаИтого);
			
		Иначе
			
			ВыравниватьВправо	= Истина;
			Строка1				= СтрШаблон(БазовыйШаблонБезПробелов, ДанныеДляОтображения.ТоварНаименование);
			Строка2				= СтрШаблон(БазовыйШаблонБезПробелов, ДанныеДляОтображения.ТоварЦена);
			
			Если Операция = "ИзменениеЦены" 
				И СуммаСкидкиНаТовар <> 0 Тогда
					Строка2	= СтрШаблон(НСтр("ru = 'СКИДКА: %1'"), ДанныеДляОтображения.ТоварСкидка);
			КонецЕсли;
			
			Если Не ПустаяСтрока(Строка1) Тогда
				
				Если НЕ ДанныеДляОтображения.ТоварКоличество = 1
						ИЛИ ДанныеДляОтображения.Весовой Тогда
					Строка2 = СтрШаблон( НСтр("ru = '%1x%2=%3'"), ДанныеДляОтображения.ТоварКоличество, Строка2,
						ДанныеДляОтображения.ТоварСумма);
				КонецЕсли;
					
				Если Операция = "УдалениеТовара" Тогда
					Строка2 = СтрШаблон( НСтр("ru = '-%1'"), Строка2);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Операция = "Аннулирование" Тогда
		Строка1 = НСтр("ru = 'ЧЕК АННУЛИРОВАН'");
	ИначеЕсли Операция = "ОтложитьЧек" Тогда
		Строка1 = НСтр("ru = 'ЧЕК ОТЛОЖЕН'");
	ИначеЕсли Операция = "ВозвратТовара" Тогда
		Строка1 = НСтр("ru = 'ВОЗВРАТ ТОВАРА'");
	ИначеЕсли Операция = "Сервис" Тогда
		Строка1 = ТекстВНерабочемСостоянии;
	ИначеЕсли Операция = "Коррекция" Тогда
		Строка1 = НСтр("ru = 'КОРРЕКЦИЯ'");
	КонецЕсли;
	
	// Дисплей Posua-vfd не обновляет вторую строку, если на нее передать пустую строку.
	Если ПустаяСтрока(Строка2) Тогда
		Строка2 = СтрШаблон(НСтр("ru = '%1'")," ");
	КонецЕсли;
	
	ТекстКОтправкеНаДисплей = СтрШаблон( НСтр("ru = '%1%2%3'"), Строка1, Символы.ПС, Строка2);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВывестиИнформациюНаДисплейПокупателяЗавершение", ОбъектВладелец);
		
	ПараметрыОперации = ПараметрыОперацииДисплейПокупателя(ТекстКОтправкеНаДисплей);
	ОборудованиеДисплеиПокупателяКлиент.НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеОЗавершении, ОбъектВладелец,,
		ПараметрыОперации);
		
КонецПроцедуры

Функция ПодключенныеДисплеиПокупателяВыводятQRКод() Экспорт
	
	Результат = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПодключенныеДисплеиПокупателяВыводятQRКод(Результат, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			Результат = МодульВызова.ПодключенныеДисплеиПокупателяВыводятQRКод();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыОперацииДисплейПокупателя(ТекстКОтправке = "", ЗначениеQRКода = "") Экспорт
	
	Результат = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПараметрыОперацииДисплейПокупателя(ТекстКОтправке, ЗначениеQRКода, Результат, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			Результат = МодульВызова.ПараметрыОперацииДисплейПокупателя(ТекстКОтправке, ЗначениеQRКода);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура НачатьОчисткуДисплеяПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея = Неопределено,
	ПараметрыОперации = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьОчисткуДисплеяПокупателя(ОповещениеПриЗавершении,
		УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			МодульВызова.НачатьОчисткуДисплеяПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыводСтатусаРабочегоМестаНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея,
	ПараметрыОперации, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьВыводСтатусаРабочегоМестаНаДисплейПокупателя(ОповещениеПриЗавершении,
		УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			МодульВызова.НачатьВыводСтатусаРабочегоМестаНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея,
	ПараметрыОперации, ДополнительныеПараметры = Неопределено) Экспорт
		
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении,
		УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			МодульВызова.НачатьВыводИнформацииНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыводQRКодаНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея,
	ПараметрыОперации) Экспорт
		
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьВыводQRКодаНаДисплейПокупателя(ОповещениеПриЗавершении,
		УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ДисплеиПокупателя") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент");
			МодульВызова.НачатьВыводQRКодаНаДисплейПокупателя(ОповещениеПриЗавершении, УникальныйИдентификатор, ИдентификаторДисплея, ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вывод информации на дисплей покупателя.
//
// Параметры:
//  ИсходныеДанные - Структура
//		*Операция - Строка
//		*ИспользоватьПодключаемоеОборудование - Булево
//		*ДанныеДляОтображения - Строка
//  ОбъектВладелец - УправляемаяФорма.
//  УникальныйИдентификатор - ИдентификаторФормы.
//
Процедура НачатьОтображениеИнформацииНаДисплейПокупателя(ИсходныеДанные, ОбъектВладелец, УникальныйИдентификатор) Экспорт
	
	Операция								= ИсходныеДанные.Операция;
	ДанныеДляОтображения					= ИсходныеДанные.ДанныеДляОтображения;
	ИспользоватьПодключаемоеОборудование	= ИсходныеДанные.ИспользоватьПодключаемоеОборудование;
	
	Если Не ИспользоватьПодключаемоеОборудование Тогда
		Возврат;
	КонецЕсли;
	
	Строка1			= НСтр("ru = ''");
	Строка2			= НСтр("ru = ''");
	ТекстКОтправкеНаДисплей = НСтр("ru = ''");
	
	БазовыйШаблон = СтрШаблон("%1%2", НСтр("ru = '%1'"), " ");
	ШаблонДваПараметра = НСтр("ru = '%1 %2'");
	
	Если Операция = "Информация" Тогда
		
		Строка1 = ДанныеДляОтображения.Информация;
		
	КонецЕсли;
	
	ТекстКОтправкеНаДисплей = СтрШаблон(НСтр("ru = '%1%2%3'"), Строка1, Символы.ПС, Строка2);

	ПараметрыОперации = ОборудованиеДисплеиПокупателяКлиент.ПараметрыОперацииДисплейПокупателя(ТекстКОтправкеНаДисплей);
	ПараметрыОперации.Операция = Операция;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ВывестиИнформациюНаДисплейПокупателяЗавершение", ОбъектВладелец);
	ОборудованиеДисплеиПокупателяКлиент.НачатьОтображениеИнформацииНаДисплейПокупателя(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор,,
		ПараметрыОперации);

КонецПроцедуры
#КонецОбласти

#Область СканерШтрихкода

// Завершение обработки данных по коду.
//
// Параметры:
//  Форма - УправляемаяФорма - форма родитель.
//  ИсходныеДанные - Структура - См. РаботаСоШтрихкодамиПереопределяемый.ЗаполнитьДанныеПоискаПоШтрихкоду.
//  ИмяТабличнойЧасти - Строка - имя табличной части.
//
// Возвращаемое значение:
//  ИдентификаторСтроки - Число, Неопределено.
//
Функция ИдентификаторНайденнойСтроки(Форма, ИсходныеДанные, ИмяТабличнойЧасти = "Товары") Экспорт
	
	ИдентификаторСтроки = Неопределено;
	
	Если ИсходныеДанные.Свойство("АктивироватьСтроку", ИдентификаторСтроки) Тогда
		
		Если ИдентификаторСтроки <> Неопределено Тогда
			
			Форма.ТекущийЭлемент = Форма.Элементы[ИмяТабличнойЧасти];
			Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = ИдентификаторСтроки;
			ЭлементУпаковок = Форма.Элементы.Найти(ИмяТабличнойЧасти + "КоличествоУпаковок");
			
			Если ЭлементУпаковок <> Неопределено Тогда
				Форма.Элементы[ИмяТабличнойЧасти].ТекущийЭлемент = ЭлементУпаковок;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

#КонецОбласти

#Область ПлатежныеСистемы
Процедура НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ПлатежныеСистемы") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиент");
			МодульВызова.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации,
			ДополнительныеПараметры,
			ПодключаемоеОборудование) Экспорт
			
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации,
			ДополнительныеПараметры,
			ПодключаемоеОборудование,
			СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ПлатежныеСистемы") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиент");
			МодульВызова.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации,
			ДополнительныеПараметры,
			ПодключаемоеОборудование);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации,
			ДополнительныеПараметры,
			ОборудованиеСверки) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации,
			ДополнительныеПараметры,
			ОборудованиеСверки,
			СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ПлатежныеСистемы") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиент");
			МодульВызова.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(Оповещение,
			УникальныйИдентификатор,
			ЭквайринговыйТерминал,
			ПараметрыОперации,
			ДополнительныеПараметры,
			ОборудованиеСверки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТипыПлатежнойСистемыККТ() Экспорт
	
	ТипыПлатежнойСистемыККТ = Новый Соответствие;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ТипыПлатежнойСистемыККТ(ТипыПлатежнойСистемыККТ, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ПлатежныеСистемы") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиентСервер");
			ТипыПлатежнойСистемыККТ = МодульВызова.ТипыПлатежнойСистемыККТ();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипыПлатежнойСистемыККТ;
	
КонецФункции

Функция ТипыПакетнойОперацииВОчередиЧеков() Экспорт
	
	ТипыПакетнойОперацииВОчередиЧеков = Новый Соответствие;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ТипыПакетнойОперацииВОчередиЧеков(ТипыПакетнойОперацииВОчередиЧеков, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ПлатежныеСистемы") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиент");
			ТипыПакетнойОперацииВОчередиЧеков = МодульВызова.ТипыПакетнойОперацииВОчередиЧеков();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипыПакетнойОперацииВОчередиЧеков;
	
КонецФункции
#КонецОбласти

#Область Обмен_с_ЕГАИС

// Заполняет данные в случае успешной передачи чека в ЕГАИС.
//
// Параметры:
//  Изменения - Массив - массив изменений данных.
//  ПараметрыВыполнения - Структура - параметры выполнения операции.
//
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		
		Если ТипЗнч(ЭлементДанных) = Тип("Структура") И ЭлементДанных.Свойство("ТекстОшибки") Тогда
			Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
				Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать	= НЕ ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки		= ОписаниеОшибки;
	
	ПараметрыВыполнения.Вставить("АдресЧека", Изменения[0].ИдентификаторЗапроса);
	ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

// Заполняет данные в случае передачи отмены чека в ЕГАИС
//
// Параметры:
//  Изменения - Массив - массив изменений данных.
//  ПараметрыВыполнения - Структура - параметры выполнения операции.
//
Процедура ПослеПередачиОтменыЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		
		Если ТипЗнч(ЭлементДанных) = Тип("Структура") И ЭлементДанных.Свойство("ТекстОшибки") Тогда
			Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
				Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Маркировка

Процедура НачатьПодтверждениеКМ(ОповещениеОПроверкеКМ, ЭтотОбъект, ВременныйКонтекстПроверкиМарки, УникальныйИдентификатор, Выбытие, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИдентификаторЗапроса = ВременныйКонтекстПроверкиМарки.ИдентификаторЗапроса;
	ПараметрыПодтвержденияКМ = МенеджерОборудованияРМККлиентСервер.ПараметрыПодтверждениеКМ();
	ПараметрыПодтвержденияКМ.ИдентификаторЗапроса = ИдентификаторЗапроса;
	ПараметрыПодтвержденияКМ.Выбытие = Выбытие;
	
	Отбор = Новый Структура("Организация", ВременныйКонтекстПроверкиМарки.Организация);
	СтрокаКассы = ЭтотОбъект.ТаблицаКассККМОрганизаций.НайтиСтроки(Отбор)[0];
	ПодключаемоеОборудованиеДляПроверкиМарки = СтрокаКассы.ИдентификаторУстройства;
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПодтверждениеКМ(ОповещениеОПроверкеКМ,
	УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыПодтвержденияКМ, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьПодтверждениеКМ(ОповещениеОПроверкеКМ,
			УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыПодтвержденияКМ, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПолученияРезультатовЗапросаКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьПолученияРезультатовЗапросаКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьПолученияРезультатовЗапросаКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗапросКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьЗапросКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьЗапросКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьЗакрытииСессииРегистрацииКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.НачатьЗакрытииСессииРегистрацииКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МодульВызова.НачатьЗакрытииСессииРегистрацииКМ(ОповещениеОЗавершении, УникальныйИдентификатор, ПодключаемоеОборудованиеДляПроверкиМарки, ПараметрыОперации, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция МераКоличестваПредметаРасчетаЛитр() Экспорт
	
	МераКоличестваПредметаРасчетаЛитр = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.МераКоличестваПредметаРасчетаЛитр(МераКоличестваПредметаРасчетаЛитр, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			МераКоличестваПредметаРасчетаЛитр = МодульВызова.МераКоличестваПредметаРасчетаЛитр();
		КонецЕсли;
	КонецЕсли;
	
	Возврат МераКоличестваПредметаРасчетаЛитр;
	
КонецФункции

Функция СтатусОбработкиЗапросаПоУмолчанию() Экспорт
	
	СтатусОбработкиЗапросаПоУмолчанию = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.СтатусОбработкиЗапросаПоУмолчанию(СтатусОбработкиЗапросаПоУмолчанию, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			СтатусОбработкиЗапросаПоУмолчанию = МодульВызова.СтатусОбработкиЗапросаПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусОбработкиЗапросаПоУмолчанию;
	
КонецФункции

Функция СтатусРезультатаПоУмолчанию() Экспорт
	
	СтатусРезультатаПоУмолчанию = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.СтатусРезультатаПоУмолчанию(СтатусРезультатаПоУмолчанию, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			СтатусРезультатаПоУмолчанию = МодульВызова.СтатусРезультатаПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусРезультатаПоУмолчанию;
	
КонецФункции

Функция СтатусРезультатаОжидается() Экспорт
	
	СтатусРезультатаОжидается = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.СтатусРезультатаОжидается(СтатусРезультатаОжидается, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			СтатусРезультатаОжидается = МодульВызова.СтатусРезультатаОжидается();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусРезультатаОжидается;
	
КонецФункции

Функция СтатусТовараПоУмолчанию() Экспорт
	
	СтатусТовараПоУмолчанию = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.СтатусТовараПоУмолчанию(СтатусТовараПоУмолчанию, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			СтатусРезультатаОжидается = МодульВызова.СтатусТовараПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусРезультатаОжидается;
	
КонецФункции

Функция ПланируемыеСтатусыМаркированногоТовара() Экспорт
	
	ПланируемыеСтатусыМаркированногоТовара = Новый Соответствие;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ПланируемыеСтатусыМаркированногоТовара(ПланируемыеСтатусыМаркированногоТовара, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			ПланируемыеСтатусыМаркированногоТовара = МодульВызова.ПланируемыеСтатусыМаркированногоТовара();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПланируемыеСтатусыМаркированногоТовара;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЭлектронныеСертификаты

Функция РасшифроватьQRКодЧекаККТ(ИдентификаторКорзиныНСПК) Экспорт
	
	ДанныеШтрихкода = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.РасшифроватьQRКодЧекаККТ(ИдентификаторКорзиныНСПК, ДанныеШтрихкода, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
			ДанныеШтрихкода = МодульВызова.РасшифроватьQRКодЧекаККТ(ИдентификаторКорзиныНСПК);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

Функция ЭтоРеквизитыКартыQR(Штрихкод) Экспорт
	
	ЭтоРеквизитыКартыQR = Неопределено;
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияРМККлиентПереопределяемый.ЭтоРеквизитыКартыQR(Штрихкод, ЭтоРеквизитыКартыQR, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Если ИспользуетсяБПО() И ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования.ПодключаемоеОборудование.ЧекопечатающиеУстройства") Тогда
			МодульВызова = ОбщегоНазначенияКлиент.ОбщийМодуль("ОборудованиеПлатежныеСистемыКлиентСервер");
			ЭтоРеквизитыКартыQR = МодульВызова.ЭтоРеквизитыКартыQR(Штрихкод);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоРеквизитыКартыQR;
	
КонецФункции
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает строковое представление суммы в национальной валюте.
//
// Параметры:
//  Сумма - Число
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ФорматСумм(Сумма)
	
	Сумма = ?(Сумма < 0, - Сумма, Сумма);
	ПредставлениеВалюты = ОбщегоНазначенияРМККлиент.ПредставлениеВалюты();
	
	Возврат СтрШаблон("%1 %2", Формат(Сумма, НСтр("ru = 'ЧЦ=15; ЧДЦ=2; ЧН=0.00'")), ПредставлениеВалюты);
	
КонецФункции

// Возвращает строковое представление суммы
//
// Параметры:
//  Сумма - Число
//
// Возвращаемое значение:
//  Результат - Строка
//
Функция ФорматСуммБезВалюты(Сумма)
	
	Сумма = ?(Сумма < 0, - Сумма, Сумма);
	
	Возврат СтрШаблон("%1 %2", Формат(Сумма, НСтр("ru = 'ЧЦ=15; ЧДЦ=2; ЧН=0.00; ЧГ='")));
	
КонецФункции

Функция ИспользуетсяБПО() Экспорт
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПоддержкаОборудования");
КонецФункции

#КонецОбласти
