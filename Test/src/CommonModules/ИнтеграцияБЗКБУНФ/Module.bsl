#Область ПрограммныйИнтерфейс

#Область ОбновлениеИБ

Процедура УстановитьКонстанты(ПараметрыОбработчика = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИспользуетсяОтчетность = ИСТИНА
	|	И Организации.ИПИспользуетТрудНаемныхРаботников = ИСТИНА
	|	И Организации.ПометкаУдаления = ЛОЖЬ"); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		МенеджерКонстанты = Константы.ИспользоватьРасчетПервойПоловиныМесяца.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
		
		МенеджерКонстанты = Константы.ИспользоватьНачислениеЗарплаты.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
		
		МенеджерКонстанты = Константы.ИспользоватьКадровыйУчет.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
		
		МенеджерКонстанты = Константы.РасчетЗарплатыДляНебольшихОрганизаций.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	КонецЕсли;
	
	Если ПараметрыОбработчика <> Неопределено Тогда
		ПараметрыОбработчика.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДокументыДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР(ПараметрыОбработчика) Экспорт
	
	КоличествоПорции = 500;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР КАК ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР
	|ГДЕ
	|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ОкончаниеКорректируемогоПериода = ДАТАВРЕМЯ(1, 1, 1)
	|	И ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.КорректируемыйПериод <> ДАТАВРЕМЯ(1, 1, 1)";
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущийДокумент = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			ТекущийДокумент = Выборка.Ссылка;
			ДокументОбъект = ТекущийДокумент.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			
			ДокументОбъект.ОкончаниеКорректируемогоПериода = КонецГода(ДокументОбъект.КорректируемыйПериод);
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ДокументОбъект.Разблокировать();
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЕстьОшибки = Истина;
		
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ОбработатьДокументыДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ТекущийДокумент,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < КоличествоПорции;
	
КонецПроцедуры

Процедура ОбработатьСправочникСотрудники(ПараметрыОбработчика) Экспорт
	
	КоличествоПорции = 500;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	(Сотрудники.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				И Сотрудники.Физлицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ИЛИ Сотрудники.ГоловнойСотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))";
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущаяСсылка = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			ТекущаяСсылка = Выборка.Ссылка;
			ТекущийОбъект = ТекущаяСсылка.ПолучитьОбъект();
			ТекущийОбъект.Заблокировать();
			
			ТекущийОбъект.ФизическоеЛицо = ТекущийОбъект.Физлицо;
			ТекущийОбъект.ГоловнойСотрудник = ТекущаяСсылка;
			
			ТекущийОбъект.ОбменДанными.Загрузка = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
			ТекущийОбъект.Разблокировать();
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЕстьОшибки = Истина;
		
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ОбработатьСправочникСотрудники'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ТекущаяСсылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < КоличествоПорции;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрОсновныеСотрудникиФизическихЛицИГоловнуюОрганизациюСотрудника(ПараметрыОбработчика) Экспорт
	
	КоличествоПорции = 500;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник КАК Сотрудник,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.ДатаПриема КАК ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.ДатаУвольнения КАК ДатаУвольнения,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.ТекущаяДолжность КАК ТекущаяДолжность,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.ТекущаяТарифнаяСтавка КАК ТекущаяТарифнаяСтавка,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.ВалютаТарифнойСтавки КАК ВалютаТарифнойСтавки,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.Организация КАК Организация,
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник.Физлицо КАК Физлицо
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудниковУНФ КАК ТекущиеКадровыеДанныеСотрудниковУНФ
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И ТекущиеКадровыеДанныеСотрудниковУНФ.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник.Физлицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущаяСсылка = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			// Справочник "Сотрудники"
			ТекущаяСсылка = Выборка.Сотрудник;
			ТекущийОбъект = ТекущаяСсылка.ПолучитьОбъект();
			ТекущийОбъект.Заблокировать();
			
			ТекущийОбъект.ГоловнаяОрганизация = Выборка.Организация;
			
			ТекущийОбъект.ОбменДанными.Загрузка = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
			ТекущийОбъект.Разблокировать();
			
			// Регистр сведений "ОсновныеСотрудникиФизическихЛиц"
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ОсновныеСотрудникиФизическихЛиц");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировкиДанных.УстановитьЗначение("ФизическоеЛицо", Выборка.Физлицо);
			ЭлементБлокировкиДанных.УстановитьЗначение("ГоловнаяОрганизация", Выборка.Организация);
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.Физлицо);
			НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.Организация);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			// Измерения
			НоваяЗапись.ГоловнаяОрганизация = Выборка.Организация;
			НоваяЗапись.ФизическоеЛицо = Выборка.Физлицо;
			НоваяЗапись.ДатаНачала = '00010101';
			НоваяЗапись.ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
			// Ресурс
			НоваяЗапись.Сотрудник = Выборка.Сотрудник;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЕстьОшибки = Истина;
		
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ЗаполнитьРегистрОсновныеСотрудникиФизическихЛиц'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ТекущаяСсылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < КоличествоПорции;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрИсторияРегистрацийВОрганеПФР(ПараметрыОбработчика) Экспорт
	
	Порция = 500;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.РегистрационныйНомерПФР КАК РегистрационныйНомерПФРОрганизации,
	|	ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР КАК РегистрационныйНомерПФРВРегистре
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВОрганеПФР КАК ИсторияРегистрацийВОрганеПФР
	|		ПО (ИсторияРегистрацийВОрганеПФР.Организация = Организации.Ссылка)
	|ГДЕ
	|	ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР ЕСТЬ NULL
	|	И Организации.РегистрационныйНомерПФР <> """"";
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущаяСсылка = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ИсторияРегистрацийВОрганеПФР");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировкиДанных.УстановитьЗначение("Организация", Выборка.Ссылка);
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Ссылка);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			// Стандартные реквизиты
			НоваяЗапись.Период = ПериодЗаписиИсторииРегистрацииВОрганеПФР();
			// Измерения
			НоваяЗапись.Организация = Выборка.Ссылка;
			// Ресурс
			НоваяЗапись.РегистрационныйНомерПФР = Выборка.РегистрационныйНомерПФРОрганизации;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЕстьОшибки = Истина;
		
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ЗаполнитьРегистрИсторияРегистрацийВОрганеПФР'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ТекущаяСсылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < Порция;
	
КонецПроцедуры

Процедура ОбработатьДокументыСведенияОТрудовойДеятельностиРаботникаСТД_Р(ПараметрыОбработчика) Экспорт
	
	КоличествоПорции = 500;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	СведенияОТрудовойДеятельностиРаботникаСТД_Р.Ссылка КАК Ссылка,
	|	СведенияОТрудовойДеятельностиРаботникаСТД_Р.РуководительКадровойСлужбы КАК РуководительКадровойСлужбы,
	|	СведенияОТрудовойДеятельностиРаботникаСТД_Р.УдалитьСотрудник.Физлицо КАК УдалитьСотрудникФизлицо
	|ИЗ
	|	Документ.СведенияОТрудовойДеятельностиРаботникаСТД_Р КАК СведенияОТрудовойДеятельностиРаботникаСТД_Р
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(СведенияОТрудовойДеятельностиРаботникаСТД_Р.РуководительКадровойСлужбы) = ТИП(СТРОКА)
	|				И СведенияОТрудовойДеятельностиРаботникаСТД_Р.РуководительКадровойСлужбы <> """"
	|			ИЛИ СведенияОТрудовойДеятельностиРаботникаСТД_Р.УдалитьСотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|				И СведенияОТрудовойДеятельностиРаботникаСТД_Р.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|				И СведенияОТрудовойДеятельностиРаботникаСТД_Р.УдалитьСотрудник.Физлицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))";
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущийДокумент = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			ТекущийДокумент = Выборка.Ссылка;
			ДокументОбъект = ТекущийДокумент.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			
			// Обработаем реквизит "РуководительКадровойСлужбы"
			Если ТипЗнч(ДокументОбъект.РуководительКадровойСлужбы) = Тип("Строка")
				И ЗначениеЗаполнено(ДокументОбъект.РуководительКадровойСлужбы) Тогда
				ФизЛицо = Справочники.ФизическиеЛица.НайтиПоНаименованию(СокрЛП(Выборка.РуководительКадровойСлужбы), Истина);
				Если ЗначениеЗаполнено(ФизЛицо) Тогда
					ДокументОбъект.РуководительКадровойСлужбы = ФизЛицо;
				Иначе
					ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
					ФизЛицоОбъект.Наименование = СокрЛП(Выборка.РуководительКадровойСлужбы);
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ФизЛицоОбъект);
					ОбновитьЗаписьИсторииФИО(ФизЛицоОбъект.Ссылка, ФизЛицоОбъект.Наименование, ТекущаяДатаСеанса());
					
					ФизЛицо = ФизЛицоОбъект.Ссылка;
				КонецЕсли;
				ДокументОбъект.РуководительКадровойСлужбы = ФизЛицо;
			КонецЕсли;
			// Обработаем реквизиты "УдалитьСотрудник" и "ФизическоеЛицо"
			Если Не ДокументОбъект.УдалитьСотрудник.Пустая()
				И ДокументОбъект.ФизическоеЛицо.Пустая()
				И ЗначениеЗаполнено(Выборка.УдалитьСотрудникФизлицо) Тогда
				ДокументОбъект.ФизическоеЛицо = Выборка.УдалитьСотрудникФизлицо;
			КонецЕсли;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ДокументОбъект.Разблокировать();
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЕстьОшибки = Истина;
		
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ОбработатьДокументыДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ТекущийДокумент,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < КоличествоПорции;
	
КонецПроцедуры

Процедура ОбработатьСправочникОрганизации(ПараметрыОбработчика) Экспорт
	
	КоличествоПорции = 500;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И Организации.ПометкаУдаления = ЛОЖЬ";
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущаяСсылка = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			ТекущаяСсылка = Выборка.Ссылка;
			ТекущийОбъект = ТекущаяСсылка.ПолучитьОбъект();
			ТекущийОбъект.Заблокировать();
			
			ТекущийОбъект.ГоловнаяОрганизация = ТекущаяСсылка;
			
			ТекущийОбъект.ОбменДанными.Загрузка = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
			ТекущийОбъект.Разблокировать();
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЕстьОшибки = Истина;
		
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ОбработатьСправочникОрганизации'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ТекущаяСсылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < КоличествоПорции;
	
КонецПроцедуры 

Процедура ЗаполнитьРегистрПрименяемыеТарифыСтраховыхВзносов(ПараметрыОбработчика) Экспорт
	
	Порция = 500;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	Организации.Ссылка КАК Ссылка,
	|	ПрименяемыеТарифыСтраховыхВзносовУНФ.Период КАК Период,
	|	ПрименяемыеТарифыСтраховыхВзносовУНФ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ПрименяемыеТарифыСтраховыхВзносовУНФ.ВидТарифа КАК ВидТарифа
	|ИЗ
	|	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносовУНФ КАК ПрименяемыеТарифыСтраховыхВзносовУНФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов КАК ПрименяемыеТарифыСтраховыхВзносов
	|			ПО Организации.Ссылка = ПрименяемыеТарифыСтраховыхВзносов.ГоловнаяОрганизация
	|		ПО ПрименяемыеТарифыСтраховыхВзносовУНФ.ГоловнаяОрганизация = Организации.Ссылка
	|ГДЕ
	|	НЕ ПрименяемыеТарифыСтраховыхВзносовУНФ.ГоловнаяОрганизация ЕСТЬ NULL
	|	И ПрименяемыеТарифыСтраховыхВзносов.ГоловнаяОрганизация ЕСТЬ NULL
	|	И ПрименяемыеТарифыСтраховыхВзносовУНФ.ВидТарифа <> ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносовУНФ.ПустаяСсылка)";
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущаяСсылка = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировкиДанных.УстановитьЗначение("ГоловнаяОрганизация", Выборка.Ссылка);
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.Ссылка);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			// Стандартные реквизиты
			НоваяЗапись.Период = Выборка.Период;
			// Измерения
			НоваяЗапись.ГоловнаяОрганизация = Выборка.ГоловнаяОрганизация;
			// Ресурс
			НоваяЗапись.ВидТарифа = Справочники.ВидыТарифовСтраховыхВзносов.НайтиПоНаименованию(Выборка.ВидТарифа);
			НоваяЗапись.ДатаРегистрацииИзменений = Выборка.Период;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЕстьОшибки = Истина;
		
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика ПрименяемыеТарифыСтраховыхВзносов'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ТекущаяСсылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < Порция;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев(ПараметрыОбработчика) Экспорт
	
	Порция = 500;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.ТарифНаТравматизм КАК ТарифНаТравматизм
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев КАК СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев
	|		ПО Организации.Ссылка = СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.Организация
	|ГДЕ
	|	Организации.ТарифНаТравматизм > 0
	|	И СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.Организация ЕСТЬ NULL";
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущаяСсылка = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировкиДанных.УстановитьЗначение("Организация", Выборка.Ссылка);
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Ссылка);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			// Стандартные реквизиты
			НоваяЗапись.Период = '20100101';
			// Измерения
			НоваяЗапись.Организация = Выборка.Ссылка;
			// Ресурс
			НоваяЗапись.Ставка = Выборка.ТарифНаТравматизм;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЕстьОшибки = Истина;
		
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ТекущаяСсылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < Порция;
	
КонецПроцедуры 

Процедура ЗаполнитьРегистрУчетнаяПолитикаПоНДФЛ(ПараметрыОбработчика) Экспорт
	
	Порция = 500;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	Организации.Ссылка КАК Ссылка,
	|	ФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале.Значение КАК ВыполнятьРасчетНДФЛПоПрогрессивнойШкале
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
	|		ПО Организации.Ссылка = УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация,
	|	Константа.ФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале КАК ФункциональнаяОпцияВыполнятьРасчетНДФЛПоПрогрессивнойШкале
	|ГДЕ
	|	Организации.ИПИспользуетТрудНаемныхРаботников
	|	И Организации.ИспользуетсяОтчетность
	|	И УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация ЕСТЬ NULL";
	
	ЕстьОшибки = Ложь;
	КоличествоОбработанных = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекущаяСсылка = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.УчетнаяПолитикаПоНДФЛ");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировкиДанных.УстановитьЗначение("ГоловнаяОрганизация", Выборка.Ссылка);
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.УчетнаяПолитикаПоНДФЛ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.Ссылка);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			// Стандартные реквизиты
			НоваяЗапись.Период = '20100101';
			// Измерения
			НоваяЗапись.ГоловнаяОрганизация = Выборка.Ссылка;
			// Ресурс
			НоваяЗапись.ВыполнятьРасчетНДФЛПоПрогрессивнойШкале = Выборка.ВыполнятьРасчетНДФЛПоПрогрессивнойШкале;
			НоваяЗапись.ОсобенностиИсчисленияНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина);
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЕстьОшибки = Истина;
		
		ИмяСобытия = НСтр("ru = 'Выполнение обработчика УчетнаяПолитикаПоНДФЛ'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ТекущаяСсылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;
	
	ПараметрыОбработчика.ОбработкаЗавершена = НЕ ЕстьОшибки И КоличествоОбработанных < Порция;
	
КонецПроцедуры

// Обработчик обновления УНФ
// Устанавливается константа ФункциональнаяОпцияИспользоватьРегламентированныйУчетЗарплатыИКадров,
// Истина - если включена ФункциональнаяОпцияИспользоватьОтчетность и установлена хотя бы одна из констант БЗКБ.
// Ложь - если ФункциональнаяОпцияИспользоватьОтчетность выключена, в этом случае отключаются все константы БЗКБ.
// Параметры:
//  ПараметрыОбработчика - Структура
//
Процедура ВключитьИспользованиеРеглУчетаЗарплатыКадров(ПараметрыОбработчика = Неопределено) Экспорт

	КонстантыРегУчет = Новый Массив;
	КонстантыРегУчет.Добавить(Метаданные.Константы.ИспользоватьКадровыйУчет);
	КонстантыРегУчет.Добавить(Метаданные.Константы.ИспользоватьНачислениеЗарплаты);
	КонстантыРегУчет.Добавить(Метаданные.Константы.ИспользоватьРасчетПервойПоловиныМесяца);
	КонстантыРегУчет.Добавить(Метаданные.Константы.РасчетЗарплатыДляНебольшихОрганизаций);
	КонстантыРегУчет.Добавить(Метаданные.Константы.ФункциональнаяОпцияИспользоватьРегламентированныйУчетЗарплатыИКадров);
	
	ЕстьОшибки = Ложь;
	Попытка
		НаборКонстант = Константы.СоздатьНабор(КонстантыРегУчет);
		НаборКонстант.Прочитать();
		
		Включить = Ложь;
		ЕстьВключенные = Ложь;
		ЕстьВыключенные = Ложь;
		Если Константы.ФункциональнаяОпцияИспользоватьОтчетность.Получить() Тогда
			Для Каждого Константа Из КонстантыРегУчет Цикл
				Если НаборКонстант[Константа.Имя] = Истина Тогда
					Включить = Истина;
					ЕстьВключенные = Истина;
				Иначе
					ЕстьВыключенные = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НужноИзменитьЗначение = Включить И ЕстьВыключенные ИЛИ НЕ Включить И ЕстьВключенные;
		Если НужноИзменитьЗначение Тогда
			Для Каждого Константа Из КонстантыРегУчет Цикл
				НаборКонстант[Константа.Имя] = Включить;
			КонецЦикла;
			НаборКонстант.Записать();
		КонецЕсли;
	Исключение
		ЕстьОшибки = Истина;
		
		ИмяСобытия = НСтр("ru = 'Включение регламентированного учета зарплаты и кадров'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если ПараметрыОбработчика <> Неопределено Тогда
		ПараметрыОбработчика.ОбработкаЗавершена = Не ЕстьОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления УНФ
// К виду документа физ. лиц "Паспорт иностранного гражданина" добавляется (Устарел),
// т.к. справочнике есть "Иностранный паспорт" с теми же кодами МВД и ПФР.
//
// Параметры:
//  ПараметрыОбработчика - Структура
//
Процедура ОбработатьДубльПаспортаИностранногоГражданина(ПараметрыОбработчика = Неопределено) Экспорт
	
	ЕстьОшибки = Ложь;
	НаименованиеДубль = НСтр("ru='Иностранный паспорт'");
	ВидДокументаСсылка = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию(НаименованиеДубль, Истина);
	Если ЗначениеЗаполнено(ВидДокументаСсылка) Тогда
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ВидДокументаСсылка.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВидДокументаСсылка);
			Блокировка.Заблокировать();
			
			ВидДокумента = ВидДокументаСсылка.ПолучитьОбъект();
			ВидДокумента.Наименование = СтрШаблон(НСтр("ru='(Устарел) %1'"), НаименованиеДубль);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидДокумента); 
			ЗафиксироватьТранзакцию();
		Исключение  
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось переименовать вид документа %1 по причине:
				|%2'"),
				НаименованиеДубль,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Если ПараметрыОбработчика <> Неопределено Тогда
		ПараметрыОбработчика.ОбработкаЗавершена = Не ЕстьОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Задает настройки размещения вариантов отчетов БЗКБ в панели отчетов.
//
// Параметры:
//  Настройки - Коллекция - настройки отчетов и вариантов отчетов конфигурации.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.УнифицированнаяФормаТ2, "Т2");
	Вариант.Размещение.Вставить(Метаданные.Подсистемы.ЗарплатаКадрыРегламентированныеУНФ, "Важный");
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, Вариант, Истина);
	
КонецПроцедуры

#КонецОбласти

Функция ПериодЗаписиИсторииРегистрацииВОрганеПФР() Экспорт
	Возврат '19800101';
КонецФункции

// Альтернатива вызова РегламентированноеУведомлениеРаботаИностранцев.КонтейнерЗаполнения,
// возвращает структуру для заполнения
//
// Возвращаемое значение: 
//   Структура:
//       * Основание		- Неопределено
//       * Данные 			- Структура:
//			** Титульная	- Структура, содержит поля для заполнения, все значения пустые 
//
Функция КонтейнерЗаполненияУведомленияПоИностранцам() Экспорт
	
	Контейнер = Новый Структура("Основание");
	Контейнер.Вставить("Данные", Новый Структура);
	Титульная = Новый Структура(
		"Гражданство,
		|ДАТА_ПОДПИСИ,
		|ДатаВыдачиДок,
		|ДатаДоверенности,
		|ДатаДоговора,
		|ДатаРождения,
		|Документ,
		|ДокументРазр,
		|Имя,
		|МестоРождения,
		|НаимОргМВД,
		|НомерДоверенности,
		|ОКВЭД,
		|Отчество,
		|Подпункт,
		|Пункт,
		|Работодатель,
		|Статья,
		|Телефон,
		|Фамилия,
		|ФИОДов,
		|ИмяЛат,
		|ИмяРус,
		|Квалификация,
		|ЛичнаяХарактеристика,
		|МестоПроживанияГосударство,
		|МестоПроживанияНаселенныйПункт,
		|МестоРожденияГосударство,
		|МестоРожденияНаселенныйПункт,
		|НаимОбрОрг,
		|НомерДок,
		|ОтчествоРус,
		|ОценкаКачеств,
		|Пол,
		|РекомендациюДал,
		|РодДеятельности,
		|СведенияОНавыках,
		|Специальность,
		|ФамилияЛат,
		|ФамилияРус,
		|ДатаВыдачи32п,
		|ДатаЗаключения41п,
		|Номер31п,
		|Раздел51Полностью,
		|Раздел51Частично,
		|Серия31п,
		|СрокС,
		|СрокПо");
	
	РеквизитыДокументов = СтрРазделить("Серия,Номер,ДатаВыдачи,КемВыдан", ",", Ложь);
	СуффиксыДокументов = СтрРазделить(",Дов,Разр", ",", Истина);
	Для Каждого ИмяРеквизита Из РеквизитыДокументов Цикл
		Для Каждого Суффикс Из СуффиксыДокументов Цикл
			Титульная.Вставить(ИмяРеквизита + Суффикс);
		КонецЦикла;
	КонецЦикла;
	
	Описания = СтрРазделить("31п,32п,34п,35п,4п", ",", Ложь);
	Для Каждого НомерОписания Из Описания Цикл
		Титульная.Вставить("Описание" + НомерОписания);
	КонецЦикла;
	
	Для Индекс = 1 По 17 Цикл
		Титульная.Вставить("Флаг" + Индекс);
	КонецЦикла;
	
	Периоды = СтрРазделить("33п,42п,51п,52п", ",", Ложь);
	Для Каждого СтрПериод Из Периоды Цикл
		Титульная.Вставить("СрокС" + СтрПериод);
		Титульная.Вставить("СрокПо" + СтрПериод);
	КонецЦикла;
	
	Для Индекс = 1 По 3 Цикл
		Титульная.Вставить("СуммаПолностью" + Индекс);
		Титульная.Вставить("НеИсполнено" + Индекс);
	КонецЦикла;
	
	Для Индекс = 1 По 2 Цикл
		Титульная.Вставить("СрокНеИспПо" + Индекс);
		Титульная.Вставить("СрокНеИспС" + Индекс);
		Титульная.Вставить("СуммаЧастично" + Индекс);
	КонецЦикла;
	
	Контейнер.Данные.Вставить("Титульная", Титульная);	
	
	Возврат Контейнер;
	
КонецФункции

#Область Документ__СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ__МодульМенеджера

Процедура ЗаполнитьДанныеОСтажеСотрудников(докСЗВСтаж, Сотрудники) Экспорт
	
	СписокСотрудников = ?(ТипЗнч(Сотрудники) = Тип("Массив"), Сотрудники, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники));
	Год = ?(ЗначениеЗаполнено(докСЗВСтаж.Год), докСЗВСтаж.Год, Год(ТекущаяДатаСеанса()));
	
	ДатыВыходаНаПенсию = Неопределено;
	Если докСЗВСтаж.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии Тогда 
		ДатыВыходаНаПенсию = Новый Соответствие;
		Для Каждого СтрокаСотрудника Из докСЗВСтаж.Сотрудники Цикл 
			Если СписокСотрудников.Найти(СтрокаСотрудника.Сотрудник) <> Неопределено Тогда 
				ДатыВыходаНаПенсию.Вставить(СтрокаСотрудника.Сотрудник, СтрокаСотрудника.ДатаВыходаНаПенсию);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.СоздатьВТДанныеСтажаПФР(
		МенеджерВременныхТаблиц, докСЗВСтаж.Организация, Год, СписокСотрудников, докСЗВСтаж.Ссылка);
		
	ДоговорыГПХ = Новый Массив;
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ);
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ);
		
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   |	ДанныеОСтажеПФР.ФизическоеЛицо КАК Сотрудник,
   |	ВЫБОР
   |		КОГДА ДанныеОСтажеПФР.ТретийПараметрИсчисляемогоСтажа В (&ДоговорыГПХ)
   |			ТОГДА ИСТИНА
   |		ИНАЧЕ ЛОЖЬ
   |	КОНЕЦ КАК ДоговорГПХ,
   |	ДанныеОСтажеПФР.*
   |ИЗ
   |	ВТДанныеСтажаСотрудников КАК ДанныеОСтажеПФР
   |
   |УПОРЯДОЧИТЬ ПО
   |	Сотрудник,
   |	ДоговорГПХ УБЫВ,
   |	ДанныеОСтажеПФР.ДатаНачалаПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПроверяемыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Сотрудник,КодПозицииСписка,ОснованиеИсчисляемогоСтажа,ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа,
		|ОснованиеВыслугиЛет,ПервыйПараметрВыслугиЛет,ВторойПараметрВыслугиЛет,ТретийПараметрВыслугиЛет,ОсобыеУсловияТруда,
		|ТерриториальныеУсловия,ПараметрТерриториальныхУсловий,ЗамещениеГосударственныхМуниципальныхДолжностей", , Истина, Истина);
	ТаблицаОтклонений = докСЗВСтаж.УдалитьЗаписиОСтаже.Выгрузить(Новый Массив);
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл 
		ПредыдущаяСтрока = Неопределено;
		ТаблицаОтклонений.Очистить();
		ИндексПервойСтрокиСотрудника = докСЗВСтаж.УдалитьЗаписиОСтаже.Количество();
		Пока Выборка.Следующий() Цикл
			Если ДатыВыходаНаПенсию <> Неопределено И ДатыВыходаНаПенсию[Выборка.Сотрудник] < Выборка.ДатаНачалаПериода Тогда 
				Продолжить;
			КонецЕсли; 
			Если ПредыдущаяСтрока <> Неопределено И ДанныеСтрокСовпадают(ПредыдущаяСтрока, Выборка, ПроверяемыеРеквизиты) Тогда 
				ПредыдущаяСтрока.ДатаОкончанияПериода = Выборка.ДатаОкончанияПериода;
				Если ДатыВыходаНаПенсию <> Неопределено Тогда 
					ПредыдущаяСтрока.ДатаОкончанияПериода = Мин(Выборка.ДатаОкончанияПериода, ДатыВыходаНаПенсию[Выборка.Сотрудник]);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ВывестиСтрокиОтклонений(докСЗВСтаж, ТаблицаОтклонений, ПредыдущаяСтрока);
			НоваяСтрока = докСЗВСтаж.УдалитьЗаписиОСтаже.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Если ДатыВыходаНаПенсию <> Неопределено Тогда 
				НоваяСтрока.ДатаОкончанияПериода = Мин(Выборка.ДатаОкончанияПериода, ДатыВыходаНаПенсию[Выборка.Сотрудник]);
			КонецЕсли;

		КонецЦикла;
		ВывестиСтрокиОтклонений(докСЗВСтаж, ТаблицаОтклонений, ПредыдущаяСтрока);
		ИндексПоследнейСтрокиСотрудника = докСЗВСтаж.УдалитьЗаписиОСтаже.Количество() - 1;
		СтрокиСтажаПоСотруднику = Новый Массив;
		Для Индекс = ИндексПервойСтрокиСотрудника По ИндексПоследнейСтрокиСотрудника Цикл 
		    СтрокиСтажаПоСотруднику.Добавить(докСЗВСтаж.УдалитьЗаписиОСтаже[Индекс]);
		КонецЦикла;
		ПерсонифицированныйУчетКлиентСерверУНФ.ВыполнитьНумерациюЗаписейОСтаже(СтрокиСтажаПоСотруднику);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Справочник__КомплектыОтчетностиПерсучета__МодульМенеджера

Функция ЗаполнитьКомплектСведений(ТекущийКомплект, РСВКомплекта, УчитыватьИсправления) Экспорт
	Если ТекущийКомплект.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучетаУНФ.СведенияКомплектаРазнесеныПоЛицевымСчетам
		И УчитыватьИсправления Тогда
					
		ЗаполняемыйКомплект = ТекущийКомплект.Скопировать();
	ИначеЕсли ТекущийКомплект.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучетаУНФ.КомплектНеБудетПередаваться Или
		ТекущийКомплект.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучетаУНФ.СведенияКомплектаРазнесеныПоЛицевымСчетам Тогда 	
		
		Возврат НовыйКомплектСведений(ТекущийКомплект.Организация, ТекущийКомплект.ОтчетныйПериод, РСВКомплекта, Истина);	
	Иначе
		ЗаполняемыйКомплект = ТекущийКомплект;
	КонецЕсли;	

	ЗаполняемыйКомплект.СформироватьСведенияКвартальнойОтчетности(РСВКомплекта, УчитыватьИсправления);
	
	Возврат ЗаполняемыйКомплект;
КонецФункции

Функция НовыйКомплектСведений(Организация, ОтчетныйПериод, РСВКомплекта, ФормироватьСедения = Истина) Экспорт
	Комплект = Справочники.КомплектыОтчетностиПерсУчета.СоздатьЭлемент();
	Комплект.Организация = Организация;
	Комплект.ОтчетныйПериод = ОтчетныйПериод;
	Комплект.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучетаУНФ.КомплектСформированНоНеОтправлен;
	Комплект.РСВ_1 = РСВКомплекта;
	
	Если ФормироватьСедения Тогда
		Комплект.СформироватьСведенияКвартальнойОтчетности(РСВКомплекта, Ложь);
	КонецЕсли;	
	
	Возврат Комплект;
КонецФункции

#КонецОбласти

#Область ОбработкаСобытий

// Подписка на событие ОбработкаЗаполнения документа, входящего в состав БЗКБ (ЗаполнитьКадровыйДокументБЗКБ),
// дополняет стандартную обработку заполнением реквизитов по переданной структуре с данными документа
//
// Параметры:
// 	Источник - ДокументОбъект
//  ДанныеЗаполнения - Произвольный - основание заполнения
//  ТекстЗаполнения - Строка
//  СтандартнаяОбработка - Булево
//
Процедура ЗаполнитьКадровыйДокументБЗКБОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ДействиеЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Действие", "");
		Если ДействиеЗаполнения = "ЗаполнитьПоПараметрамЗаполнения" Тогда
			ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения);
			Для Каждого ТабличнаяЧасть Из Источник.Метаданные().ТабличныеЧасти Цикл
				ИмяТаблицы = ТабличнаяЧасть.Имя;
				ДанныеТаблицы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, ИмяТаблицы, Неопределено);
				Если ДанныеТаблицы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого Строка Из ДанныеТаблицы Цикл
					НоваяСтрока = Источник[ИмяТаблицы].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Подписка на событие ОбработкаПроверкиЗаполнения документа, входящего в состав БЗКБ (ПроверкаЗаполненияКадровогоДокументаБЗКБ),
// выполняется проверка непротиворечивости кадровых данных
//
// Параметры:
// 	Источник - ДокументОбъект
// 	Отказ - Булево
// 	ПроверяемыеРеквизиты - Массив Из Строка
//
Процедура ПроверкаЗаполненияКадровогоДокументаБЗКБОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Сотрудник = Источник.Сотрудник;
	Событие = Источник.Метаданные().Синоним;
	ДатаСобытия = Дата(1, 1, 1);
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КадровыйПеревод") Тогда
		ДатаСобытия = Источник.ДатаНачала;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.Увольнение") Тогда
		ДатаСобытия = Источник.ДатаУвольнения;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) ИЛИ НЕ ЗначениеЗаполнено(ДатаСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	// Перевод/увольнение сотрудников доступен только для работающих сотрудников
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", Источник.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	               |	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	               |	КадроваяИсторияСотрудников.Период КАК ДатаПриема
	               |ПОМЕСТИТЬ ВТПриемНаРаботу
	               |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	               |ГДЕ
	               |	КадроваяИсторияСотрудников.Сотрудник = &Сотрудник
	               |	И КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПриемНаРаботу.Сотрудник КАК Сотрудник,
	               |	ВТПриемНаРаботу.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	               |	ВТПриемНаРаботу.ДатаПриема КАК ДатаПриема,
	               |	ЕСТЬNULL(КадроваяИсторияУвольнение.Период, ДАТАВРЕМЯ(3999, 12, 31)) КАК ДатаУвольнения
	               |ИЗ
	               |	ВТПриемНаРаботу КАК ВТПриемНаРаботу
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияУвольнение
	               |		ПО ВТПриемНаРаботу.Сотрудник = КадроваяИсторияУвольнение.Сотрудник
	               |			И ВТПриемНаРаботу.ГоловнаяОрганизация = КадроваяИсторияУвольнение.ГоловнаяОрганизация
	               |			И (КадроваяИсторияУвольнение.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
	               |			И (КадроваяИсторияУвольнение.Регистратор <> &ИсключаемыйРегистратор)";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстОшибки = "";
	Если Выборка.Следующий() Тогда
		Если Выборка.ДатаПриема > ДатаСобытия Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='По сотруднику %1, невозможно зарегистрировать %2 ранее, чем дата приема на работу (%3)'"),
				Сотрудник, Событие, Формат(Выборка.ДатаПриема, "ДЛФ=ДД"));
		КонецЕсли;
			
		Если Выборка.ДатаУвольнения < ДатаСобытия Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='По сотруднику %1, невозможно зарегистрировать %2 позже, чем дата увольнения (%3)'"),
				Сотрудник, Событие, Формат(Выборка.ДатаУвольнения, "ДЛФ=ДД"));
		КонецЕсли;
	Иначе
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Сотрудник %1 еще не принят на работу.'"), Сотрудник);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Источник, , , Отказ);
  	КонецЕсли;
КонецПроцедуры

// Подписка на событие ОбработкаПроверкиЗаполнения документа, входящего в состав БЗКБ (ПроверкаЗаполненияДокументаБЗКБ).
//
// Параметры:
// 	Источник - ДокументОбъект
// 	Отказ - Булево
// 	ПроверяемыеРеквизиты - Массив Из Строка
//
Процедура ПроверкаЗаполненияДокументаБЗКБОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ТекстОшибки = "";
	ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Организация, "ЮридическоеФизическоеЛицо", Истина);
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ТекстОшибки = НСтр("ru = 'В документе выбрана организация, которая является юридическим лицом.
		|Регламентированный учет заработной платы доступен для индивидуальных предпринимателей и не доступен для юр. лиц.'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Источник, , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьЗаписьИсторииФИО(СсылкаФизЛицо, Наименование, Период = Неопределено)
	
	Если ЗначениеЗаполнено(СсылкаФизЛицо) Тогда
		
		СтруктураФИО = ПолучитьСтруктуруФИОПоИмени(Наименование);
		
		РегистрыСведений.ФИОФизическихЛиц.ОбновитьПоследнююЗаписьФизЛица(СсылкаФизЛицо, СтруктураФИО, Период);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруФИОПоИмени(ПолноеИмя)
	
	Перем ЛокальнаяФамилия, ЛокальноеИмя, ЛокальноеОтчество;
	
	Результат = Новый Структура("Фамилия, Имя, Отчество");
	ЧастиФИО = СтрРазделить(ПолноеИмя, " ");
	Если ЧастиФИО.Количество() > 0 Тогда
		
		ЛокальнаяФамилия = ЧастиФИО[0];
		
		Если ЧастиФИО.Количество() > 1 Тогда
			ЛокальноеИмя = ЧастиФИО[1];
		КонецЕсли;
		
		Если ЧастиФИО.Количество() > 2 Тогда
			
			ЧастиОтчества = Новый Массив;
			Для индекс = 2 По ЧастиФИО.Количество() - 1 Цикл
				ЧастиОтчества.Добавить(ЧастиФИО[индекс]);
			КонецЦикла;
			ЛокальноеОтчество = СтрСоединить(ЧастиОтчества, " ");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Фамилия = ЛокальнаяФамилия;
	Результат.Имя = ЛокальноеИмя;
	Результат.Отчество = ЛокальноеОтчество;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеСтрокСовпадают(ПерваяСтрока, ВтораяСтрока, ПроверяемыеРеквизиты)
	
	Для Каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл 
		Если Не ЗначениеЗаполнено(ПерваяСтрока[ИмяРеквизита]) И Не ЗначениеЗаполнено(ВтораяСтрока[ИмяРеквизита]) Тогда 
			Продолжить;
		КонецЕсли;
		Если ПерваяСтрока[ИмяРеквизита] <> ВтораяСтрока[ИмяРеквизита] Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ВывестиСтрокиОтклонений(докСЗВСтаж, ТаблицаОтклонений, ПредыдущаяСтрока)
	
	Для Каждого СтрокаОтклонения Из ТаблицаОтклонений Цикл 
		НоваяСтрока = докСЗВСтаж.УдалитьЗаписиОСтаже.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтклонения);
	КонецЦикла;
	
	ТаблицаОтклонений.Очистить();
	ПредыдущаяСтрока = Неопределено;
	
КонецПроцедуры

#КонецОбласти
