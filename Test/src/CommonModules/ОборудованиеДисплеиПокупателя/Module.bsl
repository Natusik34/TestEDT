
#Область СлужебныйПрограммныйИнтерфейс

// Добавляет в список поставляемые драйверы в составе конфигурации.
// 
// Параметры:
//  ДрайвераОборудования - см. МенеджерОборудования.НоваяТаблицаПоставляемыхДрайверовОборудования
//
Процедура ОбновитьПоставляемыеДрайвера(ДрайвераОборудования) Экспорт
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "Драйвер1СДисплейПокупателя";
	Драйвер.Наименование = НСтр("ru = '1С:Дисплей покупателя'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "CustomerDisplayEx"; 
	Драйвер.ВерсияДрайвера = "4.2.6.3"; 
	
	// ++ НеМобильноеПриложение
	// ++ Локализация  
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "ДрайверАТОЛДисплеиПокупателя8X";
	Драйвер.Наименование = НСтр("ru = 'АТОЛ:Дисплеи покупателя 8.X'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "ATOL_Line_1CInt"; 
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "ДрайверPOSUAДисплеиПокупателя";
	Драйвер.Наименование = НСтр("ru = 'POSUA:Дисплеи покупателя'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "LPOSVFD"; 
	Драйвер.ВерсияДрайвера = "1.0.8.0"; 
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "Драйвер1СРарусДисплеиПокупателя";
	Драйвер.Наименование = НСтр("ru = '1С-Рарус:Дисплеи покупателя'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "d_android1c83"; 
	Драйвер.ВерсияДрайвера = "1.0.15.54"; 
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "ДрайверСканкодДисплеиПокупателяNative";
	Драйвер.Наименование = НСтр("ru = 'Сканкод:Дисплеи покупателя (Native API)'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "DSPPromag8"; 
	Драйвер.ВерсияДрайвера = "1.0.0.3"; 
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "ДрайверКристаллСервисДисплеиПокупателяVikiVision";
	Драйвер.Наименование = НСтр("ru = 'Кристалл Сервис:Дисплей покупателя Viki Vision'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "VikiVision"; 
	Драйвер.ВерсияДрайвера = "1.03"; 

	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "ДрайверККСДисплеиПокупателя";
	Драйвер.Наименование = НСтр("ru = 'ККС:Дисплеи покупателя'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "VFCD220E"; 
	Драйвер.ВерсияДрайвера = "1.0.1.1"; 
	Драйвер.СнятСПоддержки = Истина;
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "ДрайверЭвоторДисплейПокупателя";
	Драйвер.Наименование = НСтр("ru = 'Эвотор:Дисплей покупателя'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "EvoKKMExtension36"; 
	Драйвер.ВерсияДрайвера = "1.9.412.3006"; 
	Драйвер.ИмяМакетаДрайвера = "ДрайверЭвоторККТ54ФЗ";
	// -- Локализация      
	// -- НеМобильноеПриложение     
	
КонецПроцедуры

// Подготовить данные операции.
// 
// Параметры:
//  ПараметрыПодключения - Структура -Параметры подключения
//  Команда - Строка - Команда
//  ПараметрыОперации - Структура -Параметры операции
// 
// Возвращаемое значение:
//  Неопределено.
Функция ПодготовитьДанныеОперации(ПараметрыПодключения, Команда, ПараметрыОперации) Экспорт
	
	ДанныеОперации = ПараметрыОперацииДисплеиПокупателя(); 
	ДанныеОперации.ТекстHTML = "<p>No information</p>";
	ФорматЧисла = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";

	// ++ НеМобильноеПриложение
	Если Команда = "DisplayInfo" Тогда      
		
		Если ПараметрыОперации.Операция = "СервисныйРежим" Тогда
			
			Если ПараметрыОперации.ГотовностьКРаботе Тогда
				СтрокиТекста = НСтр("ru='ДОБРО ПОЖАЛОВАТЬ!'"); // АПК: 374 - интерфейсная особенность
				СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ВыполненоУспешно;
			ИначеЕсли НЕ ПараметрыОперации.ГотовностьКРаботе Тогда
				СтрокиТекста = НСтр("ru='КАССА НЕ РАБОТАЕТ!'"); // АПК: 374 - интерфейсная особенность
				СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОперацияНеВыполнена;
			Иначе                                                    
				СтрокиТекста = НСтр("ru='СЕРВИСНЫЙ РЕЖИМ'");
				СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОжиданиеОперации;
			КонецЕсли;
			
			ШаблонДисплеиПокупателя = МенеджерОборудованияПовтИсп.СодержимоеОбщегоМакета("ШаблонДисплеяПокупателя");     
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%TITLE%", " ");
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%CAPTION%", XMLСтрока(ПараметрыОперации.НазваниеОрганизации));
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%OPERATION%", " ");     
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%DESC%", " ");     
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%INFO%", СтрокиТекста);  
			ОбновитьСтатус(ШаблонДисплеиПокупателя, СтатусОперации);   
			ДанныеОперации.СтатусОперации = СтатусОперации;
			ДанныеОперации.ТекстHTML = ШаблонДисплеиПокупателя;   
			
			// Текст на обычный дисплей покупателя
			ДанныеОперации.СтрокиТекста = СтрокиТекста; 
			
		ИначеЕсли ПараметрыОперации.Операция = "Информация" Тогда   
			
			СтрокиТекста = ПараметрыОперации.СтрокиТекста;
			СтрокиТекста = СтрЗаменить(СтрокиТекста, Символы.ПС, "<br>"); 
			
			ШаблонДисплеиПокупателя = МенеджерОборудованияПовтИсп.СодержимоеОбщегоМакета("ШаблонДисплеяПокупателя");     
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%TITLE%", " ");
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%CAPTION%", XMLСтрока(ПараметрыОперации.НазваниеОрганизации));
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%OPERATION%", " ");     
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%DESC%", " ");     
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%INFO%", СтрокиТекста);   
			Если ПустаяСтрока(ПараметрыОперации.КартинкаBase64) Тогда                                   
				ОбновитьСтатус(ШаблонДисплеиПокупателя, ПараметрыОперации.СтатусОперации);    
			Иначе
				ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%QR%", ПараметрыОперации.КартинкаBase64);    
			КонецЕсли;                                            
			ДанныеОперации.СтатусОперации = ПараметрыОперации.СтатусОперации;
			ДанныеОперации.ТекстHTML = ШаблонДисплеиПокупателя;
			
			// Текст на обычный дисплей покупателя
			ДанныеОперации.СтрокиТекста = ПараметрыОперации.СтрокиТекста; 
			
		ИначеЕсли ПараметрыОперации.Операция = "ПлатежнаяОперация" Тогда   
			
			ШаблонДисплеиПокупателя = МенеджерОборудованияПовтИсп.СодержимоеОбщегоМакета("ШаблонДисплеяПокупателя");   
			
			Если ПараметрыОперации.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ВыполненоУспешно Тогда
				СтатусТекс = НСтр("ru='УСПЕШНО'");
			ИначеЕсли ПараметрыОперации.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОперацияНеВыполнена Тогда
				СтатусТекс = НСтр("ru='ОТКАЗ'");
			ИначеЕсли ПараметрыОперации.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОжиданиеОперации Тогда
				СтатусТекс = НСтр("ru='ОЖИДАНИЕ ОПЛАТЫ'");
			ИначеЕсли ПараметрыОперации.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.Информация Тогда
				СтатусТекс = НСтр("ru='ИНФОРМАЦИЯ'");         
			КонецЕсли; 
					
			Если ПараметрыОперации.НаличнаяОплата Тогда
				ТипПлатежнойСистемы = НСтр("ru='НАЛИЧНАЯ ОПЛАТА'"); 
			ИначеЕсли Не ПустаяСтрока(ПараметрыОперации.ТипПлатежнойСистемы) Тогда
				ТипПлатежнойСистемы = Строка(ПараметрыОперации.ТипПлатежнойСистемы)
			Иначе
				ТипПлатежнойСистемы = НСтр("ru='БЕЗНАЛИЧНАЯ ОПЛАТА'");      
			КонецЕсли;                                                     
			
			Если ПараметрыОперации.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей 
				И ПараметрыОперации.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОжиданиеОперации Тогда      
				ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%DESC%", 
					НСтр("ru='Для совершения платежа отсканируйте QR-код'"));
				Если Не ПустаяСтрока(ПараметрыОперации.ЗначениеQRКода) Тогда
					ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
					ПараметрыШтрихкода.Ширина = 300;
					ПараметрыШтрихкода.Высота = 300;
					ПараметрыШтрихкода.ТипКода = 16; // QR
					ПараметрыШтрихкода.Штрихкод = ПараметрыОперации.ЗначениеQRКода;
					ПараметрыШтрихкода.УбратьЛишнийФон = Истина;    
					РезультатШтрихкод = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
					КартинкаBase64 = Base64Строка(РезультатШтрихкод.ДвоичныеДанные);       
					ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%QR%", КартинкаBase64);    
					ДанныеОперации.ЗначениеQRКода = ПараметрыОперации.ЗначениеQRКода;
				КонецЕсли;                                                     
			Иначе
				ОбновитьСтатус(ШаблонДисплеиПокупателя, ПараметрыОперации.СтатусОперации);
			КонецЕсли; 
			
			Если ПустаяСтрока(ПараметрыОперации.ДополнительныйТекст) Тогда             
				Если ПараметрыОперации.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ВыполненоУспешно 
					И ПараметрыОперации.НаличнаяОплата И ПараметрыОперации.Сдача > 0 Тогда
					ОперацияОписание = НСтр("ru='СДАЧА'");     
					ОперацияИнфо = Формат(ПараметрыОперации.Сдача, ФорматЧисла);  
				Иначе
					ОперацияОписание = НСтр("ru='СУММА'");     
					ОперацияИнфо = Формат(ПараметрыОперации.Сумма, ФорматЧисла);  
				КонецЕсли;   
			Иначе
				ОперацияОписание = ПараметрыОперации.ДополнительныйТекст;  
				ОперацияИнфо = " ";     
			КонецЕсли;                                                     
			
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%DESC%", ОперацияОписание);  
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%INFO%", ОперацияИнфо);     
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%TITLE%", НСтр("ru='ОПЛАТА'"));
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%CAPTION%", ТипПлатежнойСистемы);
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%OPERATION%", СтатусТекс);    
			ДанныеОперации.СтатусОперации = ПараметрыОперации.СтатусОперации;
			ДанныеОперации.ТекстHTML = ШаблонДисплеиПокупателя;         
			
			// Текст на обычный дисплей покупателя
			ДанныеОперации.СтрокиТекста = НСтр("ru='ПЛАТЕЖНАЯ ОПЕРАЦИЯ'") + Символы.ПС + СтатусТекс;
			
		ИначеЕсли ПараметрыОперации.Операция = "СписокТоваров" Тогда 
			
			ШаблонДисплеиПокупателя = МенеджерОборудованияПовтИсп.СодержимоеОбщегоМакета("ШаблонДисплеяПокупателяЧек");
			КолонкиТабличнойЧасти = ПараметрыОперации.КолонкиТабличнойЧасти;
			ЗаголовокТаблицы = "<tr>"; 
			ШаблонСтроки = "";  
			Ширина = 10;
			Для Каждого КолонкаТабличнойЧасти Из ПараметрыОперации.КолонкиТабличнойЧасти Цикл                                        
				Ширина = Строка(?(КолонкаТабличнойЧасти.Ширина > 0, КолонкаТабличнойЧасти.Ширина, 10));
				Заголовок = ?(ПустаяСтрока(КолонкаТабличнойЧасти.Заголовок), КолонкаТабличнойЧасти.Имя, КолонкаТабличнойЧасти.Заголовок);           
				ЗаголовокТаблицы = ЗаголовокТаблицы + СтрШаблон("<td align=""center"" width=""%1"">%2</td>", Ширина + "%", Заголовок);   
				ШаблонСтроки = ШаблонСтроки + СтрШаблон("<td %1 width=""%2"">%3</td>", 
					СтрокаВыравнивания(КолонкаТабличнойЧасти.Выравнивание), 
					Ширина + "%", 
					"%" + КолонкаТабличнойЧасти.Имя + "%");   
			КонецЦикла;                                                        
			ШаблонСтроки = ШаблонСтроки;
			ЗаголовокТаблицы = ЗаголовокТаблицы  + "</tr>";
			
			ТабличнаяЧасть = "";
			
			КоличествоСтрок = ПараметрыОперации.ТабличнаяЧасть.Количество();
			ТекущаяСтрока = 1;
			Для Каждого СтрокаТабличнаяЧасть Из ПараметрыОперации.ТабличнаяЧасть Цикл 
				ТекстСтроки = СтрШаблон("<tr %1>", ?(ТекущаяСтрока = КоличествоСтрок, "position_anchor=""true"" style=""background: #D5EAFF""", "")) + ШаблонСтроки;
				Для Каждого СтрокаТаблицы Из СтрокаТабличнаяЧасть Цикл    
					ТекстСтроки = СтрЗаменить(ТекстСтроки, "%" + СтрокаТаблицы.Ключ + "%", СтрокаТаблицы.Значение);
				КонецЦикла;            
				ТекстСтроки = ТекстСтроки + "</tr>";
				ТабличнаяЧасть = ТабличнаяЧасть + ТекстСтроки;
				ТекущаяСтрока = ТекущаяСтрока + 1;
			КонецЦикла;     
			
			ПодвалТаблицы = СтрШаблон("<tr><td align=""right"" colspan=""%1"">%2</td><td align=""right"" width=""%3"">%4</td></tr>", 
				КолонкиТабличнойЧасти.Количество() - 1, 
				НСтр("ru='ИТОГО'"),
				Ширина + "%",
				Формат(ПараметрыОперации.ПодвалСумма, ФорматЧисла));
			
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "<!--Head-->" , ЗаголовокТаблицы);
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "<!--Table-->", ТабличнаяЧасть);        
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "<!--Foot-->" , ПодвалТаблицы);  
			ДанныеОперации.ТекстHTML = ШаблонДисплеиПокупателя;
			
			// Текст на обычный дисплей покупателя
			ДанныеОперации.СтрокиТекста = НСтр("ru='ИТОГО:'") + " " + Формат(ПараметрыОперации.ПодвалСумма, ФорматЧисла);  
				
		ИначеЕсли ПараметрыОперации.Операция = "ФискальныйЧек" Тогда
			
			Если Не ПустаяСтрока(ПараметрыОперации.ЗначениеQRКода) Тогда          
				ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
				ПараметрыШтрихкода.Ширина = 200;
				ПараметрыШтрихкода.Высота = 200;
				ПараметрыШтрихкода.ТипКода = 16; // QR
				ПараметрыШтрихкода.Штрихкод = ПараметрыОперации.ЗначениеQRКода;
				ПараметрыШтрихкода.УбратьЛишнийФон = Истина;    
				РезультатШтрихкод = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
				КартинкаBase64 = Base64Строка(РезультатШтрихкод.ДвоичныеДанные);       
				ДанныеОперации.ЗначениеQRКода = ПараметрыОперации.ЗначениеQRКода;
			КонецЕсли;       
			
			ШаблонДисплеиПокупателя = МенеджерОборудованияПовтИсп.СодержимоеОбщегоМакета("ШаблонДисплеяПокупателя");    
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%TITLE%", "");
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%CAPTION%", НСтр("ru='Получите электронный чек'"));
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%OPERATION%", НСтр("ru='СПАСИБО ЗА ПОКУПКУ'"));     
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%DESC%", НСтр("ru='Сканируйте QR-код в мобильном приложении'"));     
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%INFO%", СтрокиТекста);   
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%QR%", КартинкаBase64);    
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "<!--MP", "");          
			ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "MP-->", "");
			ДанныеОперации.СтатусОперации = ПараметрыОперации.СтатусОперации;
			ДанныеОперации.ТекстHTML = ШаблонДисплеиПокупателя;
			
			// Текст на обычный дисплей покупателя
			ДанныеОперации.СтрокиТекста = ?(ПустаяСтрока(ПараметрыОперации.СтрокиТекста), НСтр("ru='СПАСИБО ЗА ПОКУПКУ!'"), ПараметрыОперации.СтрокиТекста);  
			
		КонецЕсли;
			
	КонецЕсли;
	
	ДанныеОперации.Вставить("КодСтатусОперации", СтатусОперацииНаДисплее(ДанныеОперации.СтатусОперации));
	// -- НеМобильноеПриложение 
	
	Возврат ДанныеОперации;       
	
КонецФункции

Процедура ОбработатьДанныеОперации(ПараметрыПодключения, Команда, РезультатВыполнения, ДанныеОперации) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции   

// Заполнить структуру операции
// 
// Возвращаемое значение:
//  Структура - Параметры операции:
// * Результат - Булево.
// * ТекстОшибки - Строка.
Функция ПараметрыОперацииДисплеиПокупателя()
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("Результат", Истина); 
	ПараметрыОперации.Вставить("СтрокиТекста");    
	ПараметрыОперации.Вставить("ЗначениеQRКода"); // Строка - значение QR кода
	ПараметрыОперации.Вставить("КартинкаQRКода"); // Строка - строка с base64 представлением png картинки логотипа.      
	ПараметрыОперации.Вставить("СтатусОперации", 0); // Число - Статус: 0-Не установлены, 1-Выполнено успешно, 2-Операция не выполнена
	ПараметрыОперации.Вставить("ТекстОшибки");     
	ПараметрыОперации.Вставить("ТекстHTML");
	Возврат ПараметрыОперации;
	
КонецФункции 

// ++ НеМобильноеПриложение 

Процедура ОбновитьСтатус(ШаблонДисплеиПокупателя, СтатусОперации) 
	
	Если СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ВыполненоУспешно Тогда
		ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "<!--OK", "");
		ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "OK-->", "");
	ИначеЕсли СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОперацияНеВыполнена Тогда
		ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "<!--FAIL", "");
		ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "FAIL-->", "");
	ИначеЕсли СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОжиданиеОперации Тогда
		ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "<!--WAIT", "");
		ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "WAIT-->", "");
	ИначеЕсли СтатусОперации = Перечисления.СтатусОперацииНаДисплее.Информация Тогда
		ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "<!--INFO", "");
		ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "INFO-->", "");
	КонецЕсли; 
	
КонецПроцедуры

Функция СтрокаВыравнивания(Выравнивание)
	
	Если Выравнивание = ГоризонтальноеПоложение.Лево Тогда 
		Результат = "align=""left""";
	ИначеЕсли Выравнивание = ГоризонтальноеПоложение.Право Тогда 
		Результат = "align=""right""";
	Иначе
		Результат = "align=""center""";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// -- НеМобильноеПриложение 

// Код статуса операции на дисплее.
// 
// Параметры:    
//   ПеречислениеСсылка.СтатусОперацииНаДисплее - Cтатус операции на дисплее
// Возвращаемое значение:
//   КодСтатуса - Число - Код статуса.
//
Функция СтатусОперацииНаДисплее(СтатусОперации) Экспорт
	
	Если СтатусОперации = Неопределено Тогда
		КодСтатуса = 0
	Иначе
		СтатусыОперации = Новый Соответствие(); 
		СтатусыОперации.Вставить(Перечисления.СтатусОперацииНаДисплее.ВыполненоУспешно   , 0);
		СтатусыОперации.Вставить(Перечисления.СтатусОперацииНаДисплее.ВыполненоУспешно   , 1);
		СтатусыОперации.Вставить(Перечисления.СтатусОперацииНаДисплее.ОперацияНеВыполнена, 2);
		СтатусыОперации.Вставить(Перечисления.СтатусОперацииНаДисплее.ОжиданиеОперации   , 3);
		СтатусыОперации.Вставить(Перечисления.СтатусОперацииНаДисплее.Информация         , 4);
		КодСтатуса = СтатусыОперации.Получить(СтатусОперации);
	КонецЕсли;
	
	Возврат КодСтатуса;
	
КонецФункции

#КонецОбласти