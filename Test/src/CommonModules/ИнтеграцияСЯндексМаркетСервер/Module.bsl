#Область ПрограммныйИнтерфейс

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	
КонецПроцедуры

// Функция получает данные авторизации
//
// Параметры:
//  СтруктураОтвета  - Структура - структура содержит набор ключей, которые необходимо вернуть.
//
// Возвращаемое значение:
//  СтруктураДанныхАвторизации  - Структура - структура содержит запрошенный набор ключей.
//
Функция ДанныеАвторизацииИзОтветаЯндексаПолучить(УчетнаяЗапись, СтруктураОтвета) Экспорт
	
	СтруктураДанныхАвторизации = Новый Структура;
	
	Если СтруктураОтвета.Свойство("access_token")
	И СтруктураОтвета.Свойство("expires_in")
	И СтруктураОтвета.Свойство("refresh_token") Тогда
		
		expires_in = СтруктураОтвета.expires_in;
		
		Если ЭтаСтрокаЯвляетсяЦелымНеотрицательнымЧислом(expires_in) Тогда
			СрокЖизниТокена = НачалоДня(ТекущаяДатаСеанса() + Число(expires_in));
			СтруктураДанныхАвторизации.Вставить("access_token", СтруктураОтвета.access_token);
			СтруктураДанныхАвторизации.Вставить("access_token_expires", СрокЖизниТокена);
			СтруктураДанныхАвторизации.Вставить("refresh_token", СтруктураОтвета.refresh_token);
			
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( "Данные авторизации Яндекс маркет получены.", УчетнаяЗапись );
			
		Иначе
			ТекстОшибки = НСтр("ru = 'Ошибка получения данных авторизации Яндекс маркет: Некорректное значение свойства expires_in:'") + " " + СтруктураОтвета.expires_in;
			ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанныхАвторизации;
	
КонецФункции

// Функция возвращает HTTPЗапрос запрос для обновления ключей доступа к сервису для учетную запись.
//
// Параметры:
//  УчетнаяЗапись  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - ссылка на учетную запись, для которой запрашиваются ключи.
//
// Возвращаемое значение:
//  HTTPЗапрос  - HTTPЗапрос - HTTPЗапрос для получения ключей.
//
Функция ЗапросОбновитьТокеныДоступа(УчетнаяЗапись) Экспорт
	
	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	client_secret = ЯндексПриложениеДанные.client_secret;
	
	СтруктураДанныхАвторизации = ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	
	Если СтруктураДанныхАвторизации <> Неопределено Тогда
		refresh_token = СтруктураДанныхАвторизации.refresh_token;	
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");	
	
	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить("grant_type=refresh_token");
	ПараметрыURL.Добавить("refresh_token" + refresh_token);
	ПараметрыURL.Добавить("client_id=" + client_id);
	ПараметрыURL.Добавить("client_secret=" + client_secret);
	
	Адрес = "/token?"; 
	HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
	Тело = СтрСоединить( ПараметрыURL, "&");
	
	HTTPЗапрос.УстановитьТелоИзСтроки( Тело, "windows-1251" );
	
	Возврат HTTPЗапрос;
	
КонецФункции

// Функция возвращает имя сервера авторизации для обновления ключей доступа к сервису.
//
// Возвращаемое значение:
//  Сервер  - строка - имя сервера сервиса
//
Функция СерверАвторизацииЯндекс() Экспорт
	
	Сервер = "oauth.yandex.ru";	
	
	Возврат  Сервер;
	
КонецФункции

// Функция возвращает имя сервера партнерского API.
//
// Возвращаемое значение:
//  Сервер  - строка - имя сервера сервиса
//
Функция СерверПартнерскогоAPIЯндексМаркет() Экспорт
	Возврат "api.partner.market.yandex.ru";
КонецФункции

// Функция возвращает url авторизации.
//
// Возвращаемое значение:
//  Сервер  - строка - 
//
Функция АдресАвторизацииЯндекс() Экспорт

	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	client_secret = ЯндексПриложениеДанные.client_secret;

	Адрес = "https://oauth.yandex.ru/authorize?response_type=code&client_id=" + client_id + "&client_secret=" + client_secret + "&redirect_uri=" + "https://oauth.yandex.ru/verification_code";		
	Возврат Адрес;
	
КонецФункции

Функция ЗапросПолучитьТокеныПоКоду(ВременныйКод) Экспорт
	
	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	client_secret = ЯндексПриложениеДанные.client_secret;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");	
	
	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить( "grant_type=authorization_code" );
	ПараметрыURL.Добавить( "code=" + ВременныйКод );
	ПараметрыURL.Добавить( "client_id=" + client_id );
	ПараметрыURL.Добавить( "client_secret=" + client_secret );
	
	Адрес = "/token?"; 
	HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
	Тело = СтрСоединить( ПараметрыURL, "&" );
	
	HTTPЗапрос.УстановитьТелоИзСтроки( Тело, "windows-1251" );
	
	Возврат HTTPЗапрос;
	
КонецФункции

Функция ЗаписатьНастройкиАвторизации(УчетнаяЗапись, ДанныеАвторизации) Экспорт
	
	Владелец = УчетнаяЗапись;
	
	Если ДанныеАвторизации.Свойство( "access_token_expires" ) Тогда
		expires_in = ДанныеАвторизации.access_token_expires;
	ИначеЕсли ДанныеАвторизации.Свойство( "expires_in" ) Тогда
		expires_in = ДанныеАвторизации.expires_in;
	Иначе
		expires_in = Неопределено;
	КонецЕсли;
	
	Если ДанныеАвторизации.Свойство("access_token")
	И ЗначениеЗаполнено( expires_in )
	И ДанныеАвторизации.Свойство("refresh_token") Тогда
	
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации.access_token, "access_token");
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, expires_in, "access_token_expires");	
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ДанныеАвторизации.refresh_token, "refresh_token");
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( "Данные авторизации Яндекс маркет записаны в безопасное хранилище", УчетнаяЗапись );
		Возврат Истина;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не удалось сохранить данные авторизации в безопасном хранилище, получены не все обязательные поля. Учетная запись:'") + " " + УчетнаяЗапись;
		ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
		ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

Функция ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись) Экспорт
	
	Владелец = УчетнаяЗапись;
	ДанныеАвторизации = "access_token, access_token_expires, refresh_token";
	ДанныеАвторизации =	ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации, Ложь);
	
	Возврат ДанныеАвторизации;
КонецФункции

Процедура ЯндексМаркетДанныеАвторизацииУдалить(УчетнаяЗапись) Экспорт
	
	Владелец = УчетнаяЗапись;
	ДанныеАвторизации = "access_token, access_token_expires, refresh_token";
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, ДанныеАвторизации);
	
	ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( "Данные авторизации ""Яндекс маркет"" удалены", УчетнаяЗапись );
КонецПроцедуры

Процедура ЯндексМаркетУчетнаяЗаписьУдалить(УчетнаяЗапись) Экспорт

	ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииУдалить(УчетнаяЗапись);
	
	НЗ = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
	НЗ.Отбор.УчетнаяЗаписьМаркетплейса.Установить( УчетнаяЗапись, Истина );
	НЗ.Записать();
	
	НЗ = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьНаборЗаписей();
	НЗ.Отбор.УчетнаяЗаписьМаркетплейса.Установить( УчетнаяЗапись, Истина );
	НЗ.Записать();

	НЗ = РегистрыСведений.ОстаткиТоваровМаркетплейсов.СоздатьНаборЗаписей();
	НЗ.Отбор.УчетнаяЗаписьМаркетплейса.Установить( УчетнаяЗапись, Истина );
	НЗ.Записать();
	
	УчетнаяЗаписьОбъект = УчетнаяЗапись.ПолучитьОбъект();
	УчетнаяЗаписьОбъект.ПометкаУдаления = Истина;
	УчетнаяЗаписьОбъект.Записать();
	
	ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( "Данные регистров сведений ""Яндекс маркет"" удалены", УчетнаяЗапись );
	
КонецПроцедуры

Функция ОбменДаннымиЯндексМаркетОбновитьВсеДанные(УчетнаяЗапись) Экспорт

	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	Если Не ЗначениеЗаполнено( ДанныеАвторизации.access_token ) Тогда
		ТекстОшибки =  "Ошибка при обновлении данных в Яндекс Маркет: Токен для авторизации не задан. Необходимо выполнить авторизацию в форме настройки.";
		ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись );
		Возврат Ложь;
	КонецЕсли;
	
	ОбменДаннымиОбновитьТоварныйКаталог( УчетнаяЗапись );
	ОбменДаннымиВыгрузитьЦеныИз1СВЯндексМаркет( УчетнаяЗапись );
	ОбменДаннымиВыгрузитьОстаткиТоваровВЯндексМаркет(  УчетнаяЗапись );
	
	Возврат Истина;
КонецФункции

Функция ОбменДаннымиОбновитьТоварныйКаталог(УчетнаяЗапись) Экспорт

	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	Если Не ЗначениеЗаполнено( ДанныеАвторизации.access_token ) Тогда
		ТекстОшибки =  "Ошибка при обновлении данных в Яндекс Маркет: Токен для авторизации не задан. Необходимо выполнить авторизацию в форме настройки.";
		ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись );
		Возврат Ложь;
	КонецЕсли;

	ОбменДаннымиРекомендацииПолучитьИЗаписать( УчетнаяЗапись );
	ОбменДаннымиТоварыВСервисеДобавитьИзменить( УчетнаяЗапись );
	ОбменДаннымиСтатусыМодерацииПолучитьИЗаписать( УчетнаяЗапись );
	
КонецФункции

Функция ОбменДаннымиРекомендацииПолучитьИЗаписать(УчетнаяЗапись, ИдентификаторПубликации = Неопределено)
	
	Склады = СкладыСоответствияПолучить( УчетнаяЗапись );
	Если Склады.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	СкладыСтрока = Склады[0];
	
	ПолеDescriptionМаксимальнаяДлина = 6000;// значение из документации
	Если ИдентификаторПубликации = Неопределено Тогда
		ЗапросТекст = 
		"ВЫБРАТЬ ПЕРВЫЕ 200
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК offerId,
		|	СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара КАК name,
		|	СтатусыПубликацииТоваровЯндексМаркет.КатегорияНоменклатуры КАК category,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование, """") КАК vendor,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование, """") КАК ПроизводительНаименование,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.СтранаПроисхождения.Наименование, """") КАК СтранаПроисхожденияНаименование,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул, """") КАК vendorCode,
		|	ПОДСТРОКА(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Комментарий, 1, &ПолеDescriptionМаксимальнаяДлина) КАК Description
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.Новый)
		|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";
	Иначе
		ЗапросТекст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК offerId,
		|	СтатусыПубликацииТоваровЯндексМаркет.ПредставлениеТовара КАК name,
		|	СтатусыПубликацииТоваровЯндексМаркет.КатегорияНоменклатуры КАК category,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование, """") КАК vendor,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование, """") КАК ПроизводительНаименование,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.СтранаПроисхождения.Наименование, """") КАК СтранаПроисхожденияНаименование,
		|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул, """") КАК vendorCode,
		|	ПОДСТРОКА(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Комментарий, 1, &ПолеDescriptionМаксимальнаяДлина) КАК Description
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
		|ГДЕ
		|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.Новый)
		|	И СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации = &offerId
		|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";
	КонецЕсли;	

	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "offerId", ИдентификаторПубликации );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	Запрос.УстановитьПараметр( "ПолеDescriptionМаксимальнаяДлина", ПолеDescriptionМаксимальнаяДлина );
	
	РезультатЗапроса = Запрос.Выполнить();
	ТоварыДляПолученияРекомендаций = РезультатЗапроса.Выбрать();
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ТоварыДляПолученияРекомендацийПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( РезультатЗапроса.Выгрузить() );
		
		ЛогКомментарий = НСтр("ru = 'ОбменДаннымиРекомендацииПолучитьИЗаписать: ТоварыДляПолученияРекомендаций:'") + " " +  Символы.ПС
		+ ТоварыДляПолученияРекомендацийПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПолучениеРекомендации );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;	
	
	Если ТоварыДляПолученияРекомендаций.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	
	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	ssl = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPIЯндексМаркет();
	// документация: https://yandex.ru/dev/market/partner-api/doc/ru/reference/business-assortment/getSuggestedOfferMappings
	ИмяМетода = "/businesses/%1/offer-mappings/suggestions";
	
	СкладыСтрока = Склады[0];
	
	business_id = СокрЛП( СкладыСтрока.ИдентификаторКабинетаМаркетплейса );
	Адрес = СтрШаблон( ИмяМетода, business_id );	
	
	Пока ТоварыДляПолученияРекомендаций.Следующий() Цикл
		
		СтруктураПредложения = Новый Структура( "offerId, name, category, vendor, vendorCode, description");
		
		ЗаполнитьЗначенияСвойств( СтруктураПредложения, ТоварыДляПолученияРекомендаций );
		
		offers = Новый Массив;
		offers.Добавить(СтруктураПредложения);	
		
		СтруктураДляJSON = Новый Структура;
		СтруктураДляJSON.Вставить("offers",offers);
		
		ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON( СтруктураДляJSON );
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,ssl);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/json");
		Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + client_id);
		
		HTTPЗапрос = Новый HTTPЗапрос(Адрес, Заголовки);
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");

		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			HTTPЗапросПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPЗапрос );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Запрос:'") + Символы.ПС
			+ HTTPЗапросПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПолучениеРекомендации );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
		КонецЕсли;	
		
		Попытка
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки( HTTPЗапрос );
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка при получении рекомендаций Яндекс Маркет:'") + " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
			Возврат Ложь;
		КонецПопытки;

		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			HTTPМетод = "POST";
			HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
			HTTPОтветПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPОтвет );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Ответ: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
			+ HTTPОтветПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПолучениеРекомендации );
			ЛогПараметры.Вставить( "Сервер", HTTPСоединение.Сервер );
			ЛогПараметры.Вставить( "АдресРесурса", HTTPЗапрос.АдресРесурса );
			
			ЛогЭтоОшибка = HTTPОтвет.КодСостояния <> 200;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, ЛогЭтоОшибка, ЛогПараметры );
		КонецЕсли;	
		
		HTTPОтветТелоСтрока = HTTPОтвет.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(HTTPОтветТелоСтрока);
		КодСостояния = HTTPОтвет.КодСостояния;
		
		Если СтруктураОтвета = Неопределено 
			Или НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураОтвета, "status") Тогда
			ЗаписатьОшибкуПоИдентификаторуПубликации(УчетнаяЗапись, ТоварыДляПолученияРекомендаций.offerId, "Ошибка выполнения запроса: " + HTTPОтветТелоСтрока, "E153825" );
			Продолжить;
		КонецЕсли;
		
		Если КодСостояния = 200 И СтруктураОтвета.status = "OK" Тогда
			ЗаписатьРекомендацииПубликацийТоваров( УчетнаяЗапись, СтруктураОтвета.result );
		Иначе
			Если СтруктураОтвета.status = "ERROR" Тогда
				ЗаписатьОшибкиПоИдентификаторуПубликации(УчетнаяЗапись, ТоварыДляПолученияРекомендаций.offerId, СтруктураОтвета.errors);
			Иначе
				ЗаписатьОшибкуПоИдентификаторуПубликации(УчетнаяЗапись, ТоварыДляПолученияРекомендаций.offerId, "Ошибка выполнения запроса: " + HTTPОтветТелоСтрока, "E85716" );
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Процедура ЗаписатьОшибкиПоИдентификаторуПубликации( УчетнаяЗапись, ИдентификаторПубликации, МассивОшибок )
	
	ТекстыОшибок = "" + ИдентификаторПубликации + ": " + Символы.ПС;
	КодыОшибок = "";
	Для Каждого СтруктураОшибки Из МассивОшибок Цикл
	
		ТекстОшибки = "" + СтруктураОшибки.message + " ( " + СтруктураОшибки.code + " )";
		ТекстОшибкиПояснение = ОбменСВнешнимиСистемамиЛогирование.БазаЗнанийСовпаденияНайтиСтрокойПолучить( "Yandex: " + ТекстОшибки );
		ТекстОшибкиПодробный = ?(ПустаяСтрока( ТекстОшибкиПояснение ), "", ТекстОшибкиПояснение + " " ) + ТекстОшибки;

		ТекстыОшибок = ТекстыОшибок + ТекстОшибкиПодробный + ";" + Символы.ПС;
		КодыОшибок = КодыОшибок + СтруктураОшибки.code + ";" + Символы.ПС;
		
	КонецЦикла;
	
	ТекстыОшибок = СокрП( ТекстыОшибок );
	КодыОшибок = СокрП( КодыОшибок );
	
	ЗаписатьОшибкуПоИдентификаторуПубликации( УчетнаяЗапись, ИдентификаторПубликации, ТекстыОшибок, КодыОшибок );
	
КонецПроцедуры

Процедура ЗаписатьОшибкуПоИдентификаторуПубликации( УчетнаяЗапись, ИдентификаторПубликации, ТекстОшибки, КодОшибки )

	ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
	ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );

	СтруктураИзмерений = ПолучитьСтруктуруИзмеренийПоИдентификаторуПубликации(УчетнаяЗапись, ИдентификаторПубликации);
	
	МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = СтруктураИзмерений.УчетнаяЗапись;
	МенеджерЗаписи.Номенклатура = СтруктураИзмерений.Номенклатура;
	МенеджерЗаписи.Характеристика = СтруктураИзмерений.Характеристика;
	
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.КодОшибки = КодОшибки;
		МенеджерЗаписи.ОписаниеОшибки = ТекстОшибки;
		МенеджерЗаписи.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОшибкаПриОтправкеНаМодерацию;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтруктуруИзмеренийПоИдентификаторуПубликации( УчетнаяЗапись, ИдентификаторПубликации) Экспорт
	
	Структура = Новый Структура( "УчетнаяЗапись, Номенклатура, Характеристика" );

	ЗапросТекст = 
	"ВЫБРАТЬ Первые 1
	|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗапись,
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
	|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	|ГДЕ
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации = &ИдентификаторПубликации
	|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";

	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр( "ИдентификаторПубликации",ИдентификаторПубликации);
	ЗапросВыборка = Запрос.Выполнить().Выбрать();
	
	Если ЗапросВыборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств( Структура, ЗапросВыборка );
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

Процедура ЗаписатьРекомендацииПубликацийТоваров( УчетнаяЗапись, Рекомендации )
	
	Для Каждого СтруктураПредложения Из Рекомендации.offers Цикл
		
		ИдентификаторПубликации = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( СтруктураПредложения, "offer.offerId", Неопределено );
		
		Если Не ЗначениеЗаполнено( ИдентификаторПубликации ) Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствиеКарточкеНаМаркете = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( СтруктураПредложения, "mapping", Неопределено );
		Если Не ЗначениеЗаполнено( СоответствиеКарточкеНаМаркете ) Тогда
			Продолжить;
		КонецЕсли;
		
		Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		СтруктураИзмерений = ПолучитьСтруктуруИзмеренийПоИдентификаторуПубликации( УчетнаяЗапись, ИдентификаторПубликации );
		
		Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить(СтруктураИзмерений.УчетнаяЗапись);
		Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
		Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
		
		Набор.Прочитать();
		
		Если Набор.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Набор[ 0 ];
		
		
		Если СоответствиеКарточкеНаМаркете.Свойство( "marketSku" ) Тогда
			marketSku = СокрЛП(СтрЗаменить(СоответствиеКарточкеНаМаркете.marketSku, Символ(160), "" ));
			
			Если ЗначениеЗаполнено( marketSku ) 
			И Запись.ИдентификаторТовараПлощадки <> marketSku Тогда

				Запись.ИдентификаторТовараПлощадки = marketSku; 
				Запись.ЕстьИдентификаторПлощадки = Истина;

			КонецЕсли;
			
		КонецЕсли;
		
		Если СоответствиеКарточкеНаМаркете.Свойство("marketSkuName") Тогда 
		
			Запись.НаименованиеТовараПлощадки = СоответствиеКарточкеНаМаркете.marketSkuName;
			Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ПолученаРекомендация;
			
		Иначе
		
			Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.РекомендацияНеНайдена;
			Запись.ОписаниеОшибки = 
			"Для товара с указанными свойствами не была подобрана рекомендованная карточка товара на Яндекс Маркет."; 
			
		КонецЕсли;
		
		Если СоответствиеКарточкеНаМаркете.Свойство("marketCategoryName") Тогда 
		
			Запись.НаименованиеКатегорииПлощадки = СоответствиеКарточкеНаМаркете.marketCategoryName;
			
		КонецЕсли;
		
		Если СоответствиеКарточкеНаМаркете.Свойство("marketModelName") Тогда 
		
			Запись.НаименованиеМоделиПлощадки = СоответствиеКарточкеНаМаркете.marketModelName;
			
		КонецЕсли;
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбменДаннымиТоварыВСервисеДобавитьИзменить(УчетнаяЗапись)

	ИдентификаторыКабинетов = ИдентификаторыКабинетовИзСоответствияСкладовПолучить( УчетнаяЗапись );
	Если ИдентификаторыКабинетов.Количество() = 0 Тогда
	
        ЛогКомментарий = "ОбменДаннымиТоварыВСервисеДобавитьИзменить: Идентифкаторы кабинетов не заполнены в настройках учетной записи <" + УчетнаяЗапись + ">";
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаТоваровИз1С );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, Истина, ЛогПараметры );
		
		Возврат Ложь;
	КонецЕсли;
	
	ПолеDescriptionМаксимальнаяДлина = 6000;// значение из документации: https://yandex.ru/dev/market/partner-api/doc/ru/reference/offer-mappings/updateOfferMappingEntries
	
	ЗапросТекст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
	|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК offerId,
	|	"""" КАК vendor,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Артикул, """") КАК vendorCode,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Производитель.Наименование, """") КАК manufacturer,
	|	ЕСТЬNULL(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.СтранаПроисхождения.Наименование, """") КАК manufacturerCountry,
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК marketSku,
	|	СтатусыПубликацииТоваровЯндексМаркет.НаименованиеТовараПлощадки КАК name,
	|	СтатусыПубликацииТоваровЯндексМаркет.НаименованиеКатегорииПлощадки КАК category,
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Вес КАК НоменклатураВес,
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Высота КАК НоменклатураВысота,
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Длина КАК НоменклатураДлина,
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Ширина КАК НоменклатураШирина,
	|	ПОДСТРОКА(СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.Комментарий, 1, &ПолеDescriptionМаксимальнаяДлина) КАК Description,
	|	СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура.ТоварнаяНоменклатураВЭД.Код КАК ТНВЭДКод
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	|ГДЕ
	|	СтатусыПубликацииТоваровЯндексМаркет.Статус В(&СтатусыДляВыгрузки)
	|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";
	
	
	СтатусыДляВыгрузки = Новый Массив;
	СтатусыДляВыгрузки.Добавить( Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.СозданиеНового );
	СтатусыДляВыгрузки.Добавить( Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.УтвержденаРекомендация );
	
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	Запрос.УстановитьПараметр( "СтатусыДляВыгрузки", СтатусыДляВыгрузки );
	Запрос.УстановитьПараметр( "ПолеDescriptionМаксимальнаяДлина", ПолеDescriptionМаксимальнаяДлина );
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ТоварыДляМодерацииПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( РезультатЗапроса.Выгрузить() );
		КабинетыПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ИдентификаторыКабинетов );
		
		ЛогКомментарий = НСтр("ru = 'ОбменДаннымиТоварыВСервисеДобавитьИзменить: ТоварыДляМодерацииПредставление:'") + Символы.ПС
		+ ТоварыДляМодерацииПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ "Кабинеты:" + Символы.ПС
		+ КабинетыПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаТоваровИз1С );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;	
	
	Товары = РезультатЗапроса.Выбрать();
	Если Товары.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ssl = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	
	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	
	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPIЯндексМаркет();
	ИмяМетода = "/businesses/%1/offer-mappings/update.json";

	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,ssl);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + client_id);
	
	Пока Товары.Следующий() Цикл
		
		Для Каждого ИдентификаторКабинета Из ИдентификаторыКабинетов Цикл
			
			BusinessId = СокрЛП( ИдентификаторКабинета );
			Адрес = СтрШаблон( ИмяМетода, BusinessId );
			
			СтруктураОписанияТовара = Новый Структура( "offerId, name, category, manufacturer, weightDimensions, description" );
			ЗаполнитьЗначенияСвойств(СтруктураОписанияТовара, Товары );
			
			Если ЗначениеЗаполнено( Товары.manufacturerCountry ) Тогда
				manufacturerCountries = Новый Массив;
				manufacturerCountries.Добавить( Товары.manufacturerCountry );
				СтруктураОписанияТовара.Вставить( "manufacturerCountries", manufacturerCountries );
			КонецЕсли;

			Если ЗначениеЗаполнено( Товары.vendor ) Тогда
				СтруктураОписанияТовара.Вставить( "vendor", Товары.vendor );
			КонецЕсли;

			Если ЗначениеЗаполнено( Товары.vendorCode ) Тогда
				СтруктураОписанияТовара.Вставить( "vendorCode", Товары.vendorCode );
			КонецЕсли;
			
			Если ЗначениеЗаполнено( Товары.marketSku ) Тогда
				urls = Новый Массив;
				urls.Добавить( "https://pokupki.market.yandex.ru/product/" + СокрЛП(СтрЗаменить(Товары.marketSku, Символ(160),"")));
				СтруктураОписанияТовара.Вставить( "urls", urls );
			КонецЕсли;
			
			Если ЗначениеЗаполнено( Товары.ТНВЭДКод ) Тогда
				СтруктураОписанияТовара.Вставить( "customsCommodityCode", Товары.ТНВЭДКод );
			КонецЕсли;
			
			barcodes = ПолучитьШрихКоды( Товары.Номенклатура, Товары.Характеристика );
			Если barcodes.Количество() > 0 Тогда
				СтруктураОписанияТовара.Вставить("barcodes", barcodes);
			КонецЕсли;
			
			СтруктураВесогабаритов = ПолучитьВесогабариты(Товары.НоменклатураВес,
			Товары.НоменклатураВысота,
			Товары.НоменклатураДлина,
			Товары.НоменклатураШирина);
			
			СтруктураОписанияТовара.weightDimensions = СтруктураВесогабаритов;
			
			UpdateOfferMappingDTO = Новый Структура( "offer, mapping" );
			
			UpdateOfferMappingDTO.mapping = Новый Структура( "marketSku" );
			UpdateOfferMappingDTO.mapping.marketSku = ?(ЗначениеЗаполнено( Товары.marketSku ), Товары.marketSku, 0 );
			UpdateOfferMappingDTO.offer = СтруктураОписанияТовара; 
			
			offerMappings = Новый Массив;
			// можно до 500 товаров: https://yandex.ru/dev/market/partner-api/doc/ru/reference/offer-mappings/updateOfferMappingEntries
			// но в случае ошибки в одном товаре ответ сервера {"status":"ERROR","errors":[{"code":"BAD_REQUEST","message":"bad request"}]}
			// и невозможно определить товар с ошибкой
			offerMappings.Добавить( UpdateOfferMappingDTO );
			
			СтруктураДляJSON = Новый Структура;
			СтруктураДляJSON.Вставить( "offerMappings", offerMappings );
			
			ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON( СтруктураДляJSON );
			
			HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
			HTTPЗапрос.УстановитьТелоИзСтроки( ТелоЗапроса, "UTF-8" );
			
			Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
				HTTPЗапросПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPЗапрос );
				
				ЛогКомментарий = НСтр("ru = 'HTTP: Запрос:'") + Символы.ПС
				+ HTTPЗапросПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
				+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
				
				ЛогПараметры = Новый Структура;
				ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаТоваровИз1С );
				ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
			КонецЕсли;
			
			Попытка
				HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки( HTTPЗапрос );
			Исключение 
				ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса'") + " " + ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
				ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
				ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
				Возврат Ложь;
			КонецПопытки;	
			
			Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
				HTTPМетод = "POST";
				HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
				HTTPОтветПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPОтвет );
				
				ЛогКомментарий = НСтр("ru = 'HTTP: Ответ: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
				+ HTTPОтветПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
				+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
				+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
				
				ЛогПараметры = Новый Структура;
				ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаТоваровИз1С );
				ЛогПараметры.Вставить( "Сервер", HTTPСоединение.Сервер );
				ЛогПараметры.Вставить( "АдресРесурса", HTTPЗапрос.АдресРесурса );
				
				ЛогЭтоОшибка = HTTPОтвет.КодСостояния <> 200;
				ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, ЛогЭтоОшибка, ЛогПараметры );
			КонецЕсли;
			
			СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
			КодСостояния = HTTPОтвет.КодСостояния;
			
			offerId = Товары.offerId;
			Если КодСостояния= 200 И СтруктураОтвета.status = "OK" Тогда
				ЗаписатьСтатусНаМодерации( УчетнаяЗапись, offerId );
			Иначе	
				Если СтруктураОтвета.status = "ERROR" Тогда
					ЗаписатьОшибкиПоИдентификаторуПубликации( УчетнаяЗапись, offerId, СтруктураОтвета.errors );
				Иначе
					КодОшибки = "E53253";
					ТоварПредставление = ПредставлениеНоменклатуры( Товары.Номенклатура, Товары.Характеристика );
					ТекстОшибки = "Ошибка при отправке товара на модерацию: " + ТоварПредставление + " ( " + Товары.offerId + " ) "
					 + ": Идентификатор кабинета: " + BusinessId + ": " + СтрокаОтвета;
					ЗаписатьОшибкуПоИдентификаторуПубликации( УчетнаяЗапись, offerId, СтрокаОтвета, КодОшибки );
				КонецЕсли;
				
			КонецЕсли;
		
			// Если успешно, то сделать цикл по складам для размещения товара в магазине
			// https://yandex.ru/dev/market/partner-api/doc/ru/reference/assortment/updateCampaignOffers
			// https://api.partner.market.yandex.ru/campaigns/{campaignId}/offers/update

			
		КонецЦикла;	// кабинеты
		
		
	КонецЦикла;	// товары
	
	Возврат Истина;
КонецФункции

Функция ПредставлениеНоменклатуры( Номенклатура, Характеристика )

	СтрПредставление = СокрЛП(Номенклатура);

	Если ЗначениеЗаполнено(Характеристика)Тогда
		СтрПредставление = СтрПредставление + ", " + СокрЛП(Характеристика);
	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции

Функция ПолучитьШрихКоды(Номенклатура, Характеристика)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Номенклатура",Номенклатура);

	ТипХарактеристикиНоменклатуры = Новый ОписаниеТипов( "СправочникСсылка.ХарактеристикиНоменклатуры" );
	Запрос.Параметры.Вставить("Характеристика", ТипХарактеристикиНоменклатуры.ПривестиЗначение( Характеристика ));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК barcode,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика";
	
	Результат = Запрос.Выполнить().Выгрузить();
	ШтрихКоды = Результат.ВыгрузитьКолонку( "barcode" );
	
	Возврат ШтрихКоды;
КонецФункции

Функция ПолучитьВесогабариты(пВес, пВысота, пДлина, пШирина) Экспорт
	
	СтруктураВесогабаритов = Новый Структура("length,width,height,weight", 0, 0, 0, 0);
	
	СтруктураВесогабаритов.weight = Формат(пВес, "ЧДЦ=2; ЧРД=.");
	СтруктураВесогабаритов.height = Формат(пВысота, "ЧДЦ=2; ЧРД=.");
	СтруктураВесогабаритов.length = Формат(пДлина, "ЧДЦ=2; ЧРД=.");
	СтруктураВесогабаритов.width = Формат(пШирина, "ЧДЦ=2; ЧРД=.");
	
	Возврат СтруктураВесогабаритов;
	
КонецФункции

Процедура ЗаписатьСтатусНаМодерации( УчетнаяЗапись, shopSku )
	
	Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
	СтруктураИзмерений = ПолучитьСтруктуруИзмеренийПоИдентификаторуПубликации( УчетнаяЗапись, shopSku);
	
	Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить(СтруктураИзмерений.УчетнаяЗапись);
	Набор.Отбор.Номенклатура.Установить(СтруктураИзмерений.Номенклатура);
	Набор.Отбор.Характеристика.Установить(СтруктураИзмерений.Характеристика);
	
	Набор.Прочитать();
	Если Набор.Количество() > 0 Тогда
		Запись = Набор[0];
		Если Запись.Статус <> Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации Тогда
			Запись.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации;
			Набор.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбменДаннымиПолучитьОписанияТоваровИзСервиса( УчетнаяЗапись, Товары )

	offerIds    = Новый Массив;
	Предложения = Новый Соответствие;
	
	Для Каждого ТоварыСтрока Из Товары Цикл
		offerIds.Добавить( ТоварыСтрока.ИдентификаторПубликации );
	КонецЦикла;
	
	Если offerIds.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("offerIds", offerIds);
	ТелоЗапроса = ВJSON(ДанныеЗапроса);

	ИдентификаторыКабинетов = ИдентификаторыКабинетовИзСоответствияСкладовПолучить( УчетнаяЗапись );
	Если ИдентификаторыКабинетов.Количество() = 0 Тогда
	
        ЛогКомментарий = "ОбменДаннымиПолучитьОписанияТоваровИзСервиса: Идентифкаторы кабинетов не заполнены в настройках учетной записи <" + УчетнаяЗапись + ">";
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаТоваровИз1С );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, Истина, ЛогПараметры );
		
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	
	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPIЯндексМаркет();
	ИмяМетода = "/businesses/%1/offer-mappings";

	ssl = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Таймаут = 60;
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,, Таймаут, ssl);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить( "Content-Type", "application/json" );
	Заголовки.Вставить( "Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + client_id);

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Каждого ИдентификаторКабинета Из ИдентификаторыКабинетов Цикл
		
		business_id = СокрЛП( ИдентификаторКабинета );
		Адрес = СтрШаблон( ИмяМетода, business_id  );
		
		HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			
			HTTPЗапросПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPЗапрос );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Запрос:'") + Символы.ПС
			+ HTTPЗапросПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПроверкаСтатусаПубликации );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
		КонецЕсли;
		
		Попытка
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки( HTTPЗапрос );  
		Исключение 
			ТекстОшибки = НСтр("ru = 'ОбменДаннымиПолучитьОписанияТоваровИзСервиса: Ошибка выполнения HTTP запроса:'") + " " + ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
		КонецПопытки;	
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			HTTPМетод = "GET";
			HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
			HTTPОтветПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPОтвет );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Ответ: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
			+ HTTPОтветПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПроверкаСтатусаПубликации );
			ЛогПараметры.Вставить( "Сервер", HTTPСоединение.Сервер );
			ЛогПараметры.Вставить( "АдресРесурса", HTTPЗапрос.АдресРесурса );
			
			ЛогЭтоОшибка = HTTPОтвет.КодСостояния <> 200;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, ЛогЭтоОшибка, ЛогПараметры );
		КонецЕсли;
		
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
		КодСостояния = HTTPОтвет.КодСостояния;
		
		Если КодСостояния = 200 И СтруктураОтвета.status = "OK" Тогда

			РезультатЗначение = СтруктураОтвета;
			Ошибка = Неопределено;
			
		Иначе
			
			СобытиеОписание = "Получение статуса публикации";
			ТекстОшибки = СтрокаОтвета;
			ТекстОшибкиПояснение = ОбменСВнешнимиСистемамиЛогирование.БазаЗнанийСовпаденияНайтиСтрокойПолучить( "Yandex: " + ТекстОшибки );
			ТекстОшибкиПодробный = СобытиеОписание + ": " + ?(ПустаяСтрока( ТекстОшибкиПояснение ), "", ТекстОшибкиПояснение + " " ) + ТекстОшибки;
			
			РезультатЗначение = Неопределено;
			Ошибка = ТекстОшибкиПодробный;
			
		КонецЕсли;

		Результат.Добавить( Новый Структура( "ИдентификаторКабинета, Значение, Ошибка", business_id, РезультатЗначение, Ошибка ) );
		
	КонецЦикла; // ИдентификаторыКабинетов
	
	Возврат Результат;
КонецФункции 

Функция ЗаписатьСтатусТовараНаМодерацииИСоответствиеКарточкеНаМаркете( УчетнаяЗапись, ИдентификаторПубликации, СтатусыМодерации, СоответствиеКарточкеНаМаркете = Неопределено )

    Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
    	СтатусыМодерацииПоСкладамПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( СтатусыМодерации );
		ЛогКомментарий = "ЗаписатьСтатусТовараНаМодерацииИСоответствиеКарточкеНаМаркете: Идентификатор публикации = " + ИдентификаторПубликации + ": " + Символы.ПС 
		+ "СтатусыМодерацииПоСкладам: " +  Символы.ПС + СтатусыМодерацииПоСкладамПредставление;

		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПроверкаСтатусаПубликации );
		
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;
	
	СтатусыМодерацииОсновной = Неопределено;
	Для Каждого СтатусМодерации Из СтатусыМодерации Цикл 
		
		// обновим статус "худшим" статусом по кабинетам
		
		Статус = СтатусМодерации.Статус.Статус;
		Если Статус = Неопределено Тогда
			Прервать;
		ИначеЕсли Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена Тогда
			Прервать;
		ИначеЕсли Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации Тогда
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
	СтруктураИзмерений = ПолучитьСтруктуруИзмеренийПоИдентификаторуПубликации( УчетнаяЗапись, ИдентификаторПубликации );
	
	Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить( СтруктураИзмерений.УчетнаяЗапись );
	Набор.Отбор.Номенклатура.Установить( СтруктураИзмерений.Номенклатура );
	Набор.Отбор.Характеристика.Установить( СтруктураИзмерений.Характеристика );
	
	Набор.Прочитать();
	Если Набор.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Записать = Ложь;
	
	Запись = Набор[0];
	
	// Соответствие товара карточке на маркете ( marketSku )
	Если ЗначениеЗаполнено( СоответствиеКарточкеНаМаркете ) Тогда
		
		ИдентификаторТовараПлощадки = XMLСтрока( СоответствиеКарточкеНаМаркете.ИдентификаторТовараПлощадки );
		Если ЗначениеЗаполнено( ИдентификаторТовараПлощадки ) 
		И Запись.ИдентификаторТовараПлощадки <> ИдентификаторТовараПлощадки Тогда
			
			Запись.ИдентификаторТовараПлощадки = ИдентификаторТовараПлощадки;
			Запись.НаименованиеТовараПлощадки = СоответствиеКарточкеНаМаркете.НаименованиеТовараПлощадки;
			
			Записать = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено( СоответствиеКарточкеНаМаркете.НаименованиеКатегорииПлощадки )
		И Запись.НаименованиеКатегорииПлощадки <> СоответствиеКарточкеНаМаркете.НаименованиеКатегорииПлощадки Тогда
			Запись.НаименованиеКатегорииПлощадки = СоответствиеКарточкеНаМаркете.НаименованиеКатегорииПлощадки;
			
			Записать = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено( СоответствиеКарточкеНаМаркете.НаименованиеМоделиПлощадки )
		И Запись.НаименованиеМоделиПлощадки <> СоответствиеКарточкеНаМаркете.НаименованиеМоделиПлощадки Тогда
			Запись.НаименованиеМоделиПлощадки = СоответствиеКарточкеНаМаркете.НаименованиеМоделиПлощадки;
			
			Записать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено( Статус ) Тогда
		Если Запись.Статус <> Статус Тогда
			Запись.Статус = Статус;
			
			Записать = Истина;
		КонецЕсли;
	Иначе

		СтатусДляЛога = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( СтатусМодерации.Статус, "СтатусМодерацииИзОтветаЯндекса", Неопределено );
		ЛогКомментарий = "Ошибка: ЗаписатьСтатусТовараНаМодерацииИСоответствиеКарточкеНаМаркете: " + ИдентификаторПубликации + ": Значение не обработано: Статус = <" + СтатусДляЛога + ">";

		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПроверкаСтатусаПубликации );

		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, Истина, ЛогПараметры );

	КонецЕсли;
	
	Если СтатусМодерации.Статус.ОписаниеОшибки <> Неопределено Тогда
		Если Запись.ОписаниеОшибки <> СтатусМодерации.Статус.ОписаниеОшибки Тогда
			Запись.ОписаниеОшибки = СтатусМодерации.Статус.ОписаниеОшибки;
			Записать = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Записать = Истина Тогда
		Набор.Записать();
	КонецЕсли;
	
	Возврат СтатусМодерации;
КонецФункции

Процедура ОбменДаннымиСтатусыМодерацииПолучитьИЗаписать( УчетнаяЗапись )
	
	ЗапросТекст = 
	"ВЫБРАТЬ
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК ИдентификаторПубликации,
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
	|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	|ГДЕ
	|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации)
	|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";
	
	Запрос = Новый Запрос(ЗапросТекст);
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
   
   	РезультатЗапроса = Запрос.Выполнить();
   	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ТоварыПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( РезультатЗапроса.Выгрузить() );
		
		ЛогКомментарий = НСтр("ru = 'ОбменДаннымиСтатусыМодерацииПолучитьИЗаписать: Товары:'") + " " +  Символы.ПС
		+ ТоварыПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПолучениеРекомендации );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Товары = РезультатЗапроса.Выгрузить();
	Товары.Индексы.Добавить( "ИдентификаторПубликации" );
	
	ОписанияТоваровИзСервиса = ОбменДаннымиПолучитьОписанияТоваровИзСервиса( УчетнаяЗапись, Товары );

	СтатусыМодерацииТоваров = ПолучитьСтатусыМодерацииИзОтветаСервиса( ОписанияТоваровИзСервиса, Товары );
	
	ЗаписатьСтатусыТоваровНаМодерацииИСоответствиеКарточкеНаМаркете( УчетнаяЗапись, СтатусыМодерацииТоваров );
	
КонецПроцедуры

Функция ПолучитьСтатусыМодерацииИзОтветаСервиса( ОписанияТоваровИзСервиса, Товары )
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить( "ИдентификаторПубликации" );
	Результат.Колонки.Добавить( "Номенклатура" );
	Результат.Колонки.Добавить( "Характеристика" );
	Результат.Колонки.Добавить( "СтатусыПоКабинетам", Новый ОписаниеТипов( "Массив" ) );
	Результат.Индексы.Добавить( "ИдентификаторПубликации" );
	Результат.Колонки.Добавить( "СоответствиеКарточкеНаМаркете" );
	
	ОтборПоИдентификатору = Новый Структура( "ИдентификаторПубликации" );
	Для Каждого ОписанияТоваровИзСервисаЭлемент Из ОписанияТоваровИзСервиса Цикл
		
		ИдентификаторКабинета = ОписанияТоваровИзСервисаЭлемент.ИдентификаторКабинета;
		ОписанияТоваровКабинета = ОписанияТоваровИзСервисаЭлемент.Значение;
		
		offerMappings = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( ОписанияТоваровКабинета, "result.offerMappings", Неопределено );
		Если offerMappings = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого offerMappingsЭлемент Из offerMappings Цикл
			
			offer = offerMappingsЭлемент.offer;
			
			Если Не offer.Свойство( "cardStatus" ) Тогда
				Продолжить;
			КонецЕсли;
			
			offerId = offer.offerId;
			ОтборПоИдентификатору.ИдентификаторПубликации = offerId;
			
			ТоварыСтроки = Товары.НайтиСтроки( ОтборПоИдентификатору );
			Если ТоварыСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТоварыСтрока = ТоварыСтроки[ 0 ];
			
			РезультатСтроки = Результат.НайтиСтроки( ОтборПоИдентификатору );
			Если РезультатСтроки.Количество() = 0 Тогда
				РезультатСтрока = Результат.Добавить();
			Иначе
				РезультатСтрока = РезультатСтроки[ 0 ];
			КонецЕсли;
			
			РезультатСтрока.ИдентификаторПубликации = offerId;
			РезультатСтрока.Номенклатура = ТоварыСтрока.Номенклатура;
			РезультатСтрока.Характеристика = ТоварыСтрока.Характеристика;
			
			Статус = ПолучитьСтатусМодерацииСОписаниемПоЗначениюИзСервиса( offer.cardStatus );
			СтатусПоКабинету = Новый Структура( "ИдентификаторКабинета, Статус", ИдентификаторКабинета, Статус );
			РезультатСтрока.СтатусыПоКабинетам.Добавить( СтатусПоКабинету );
			
			Если offerMappingsЭлемент.Свойство( "mapping" ) Тогда
				mapping = offerMappingsЭлемент.mapping;

				СоответствиеКарточкеНаМаркете = Новый Структура;
				
				СоответствиеКарточкеНаМаркете.Вставить( "ИдентификаторТовараПлощадки", ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( mapping, "marketSku", Неопределено ) );
				СоответствиеКарточкеНаМаркете.Вставить( "НаименованиеТовараПлощадки", ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( mapping, "marketSkuName", Неопределено ) );
				
				СоответствиеКарточкеНаМаркете.Вставить( "ИдентификаторМоделиПлощадки", ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( mapping, "marketModelId", Неопределено ) );
				СоответствиеКарточкеНаМаркете.Вставить( "НаименованиеМоделиПлощадки", ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( mapping, "marketModelName", Неопределено ) );

				СоответствиеКарточкеНаМаркете.Вставить( "ИдентификаторКатегорииПлощадки",  ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( mapping, "marketCategoryId", Неопределено ) );
				СоответствиеКарточкеНаМаркете.Вставить( "НаименованиеКатегорииПлощадки",  ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( mapping, "marketCategoryName", Неопределено ) );
				
				РезультатСтрока.СоответствиеКарточкеНаМаркете = СоответствиеКарточкеНаМаркете;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ЗаписатьСтатусыТоваровНаМодерацииИСоответствиеКарточкеНаМаркете( УчетнаяЗапись, СтатусыМодерацииТоваров )
	Для Каждого СтатусыМодерацииТоваровЭлемент Из СтатусыМодерацииТоваров Цикл
		ЗаписатьСтатусТовараНаМодерацииИСоответствиеКарточкеНаМаркете( УчетнаяЗапись, СтатусыМодерацииТоваровЭлемент.ИдентификаторПубликации, 
		СтатусыМодерацииТоваровЭлемент.СтатусыПоКабинетам, СтатусыМодерацииТоваровЭлемент.СоответствиеКарточкеНаМаркете );
	КонецЦикла;
КонецПроцедуры

// Определяет расширенное описание статуса публикации товарной позиции.
//
// Параметры:
//   СтатусПубликации - Строка - статус публикации товара (OfferProcessingStatusType);
//   ТекущийСтатус    - ПеречислениеСсылка.СтатусыВыгрузкиТоваровЯндексМаркет - текущий статус товарной позиции;
//   ПричиныОтказа    - Массив Из Структура - причины, по которым товар не прошел модерацию (OfferProcessingNoteDTO):
//     * type           - Строка - тип причины, по которой товар не прошел модерацию;
//     * payload        - Строка - дополнительная информация о причине отклонения товара.
//
Функция ПолучитьСтатусМодерацииСОписаниемПоЗначениюИзСервиса(СтатусПубликации, ПричиныОтказа = Неопределено)
	
	Структура = Новый Структура("Статус, ОписаниеОшибки");
	
	Если СтатусПубликации = "READY" Тогда

		// Товар прошел модерацию. Чтобы разместить его на Маркете, установите для него цену
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена; 
		Структура.ОписаниеОшибки = "";
		
	ИначеЕсли СтатусПубликации = "IN_WORK" Тогда
		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 
		
	ИначеЕсли СтатусПубликации = "NEED_CONTENT" Тогда
		// Для товара без SKU на Маркете marketSku нужно найти карточку самостоятельно (через API или личный кабинет магазина) или создать ее, если товар еще не продается на Маркете
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'Для товара не указан SKU на Яндексе, и сотрудники Маркета не смогли привязать его к карточке. Найдите карточку товара самостоятельно в поиске по разделу «Покупки» или создайте ее, если товар еще не продается на Маркете.'");
		
	ИначеЕсли СтатусПубликации = "NEED_INFO" Тогда
		// Товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. Информация о причинах отклонения возвращается в параметре notes
		ОписаниеОшибки = НСтр("ru = 'Для товара указана неверная или недостаточная информация.'");
		
		Если ЗначениеЗаполнено(ПричиныОтказа) Тогда
			Если ТипЗнч(ПричиныОтказа) = Тип("Строка") Тогда 
				ОписаниеОшибки = ОписаниеОшибки + " " + ПричиныОтказа;
				
			ИначеЕсли ТипЗнч(ПричиныОтказа) = Тип("Массив") Тогда 
				Для каждого ЭлементКоллекции Из ПричиныОтказа Цикл
					Если ЭлементКоллекции.type = "ASSORTMENT" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар производится в разных вариантах. Каждый из них нужно описать как отдельный товар'");
					ИначеЕсли ЭлементКоллекции.type = "CANCELLED" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар отозван с модерации по вашей инициативе'");
					ИначеЕсли ЭлементКоллекции.type = "CONFLICTING_INFORMATION" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Предоставлена противоречивая информацию о товаре'");
					ИначеЕсли ЭлементКоллекции.type = "DEPARTMENT_FROZEN" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Правила размещения товаров в данной категории перерабатываются, поэтому товар пока не может пройти модерацию'");
					ИначеЕсли ЭлементКоллекции.type = "INCORRECT_INFORMATION" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Предоставленная информация о товаре, противоречит описанию от производителя'");
					ИначеЕсли ЭлементКоллекции.type = "LEGAL_CONFLICT" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар не прошел модерацию по юридическим причинам. Например, он официально не продается в России или нет разрешения на его продажу'");
					ИначеЕсли ЭлементКоллекции.type = "NEED_CLASSIFICATION_INFORMATION" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Предоставленной информации о товаре не хватает, чтобы отнести его к категории. Проверьте, что правильно указано название, категория, производитель и страна производства товара, а также URL изображений или страниц с описанием, по которым можно идентифицировать товар'");
					ИначеЕсли ЭлементКоллекции.type = "NEED_INFORMATION" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар раньше не продавался в России и пока не размещается на Маркете. Для него можно создать карточку'");
					ИначеЕсли ЭлементКоллекции.type = "NEED_PICTURES" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Для идентификации товара нужны его изображения. Отправьте URL изображений товара или загрузите обновленный каталог через личный кабинет магазина'");
					ИначеЕсли ЭлементКоллекции.type = "NEED_VENDOR" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Неверно указан производитель товара'");
					ИначеЕсли ЭлементКоллекции.type = "NO_CATEGORY, NO_KNOWLEDGE" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товары из указанной категории пока не размещаются на Маркете. Если категория появится, товар будет снова отправлен на модерацию'");
					ИначеЕсли ЭлементКоллекции.type = "NO_PARAMETERS_IN_SHOP_TITLE" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Товар производится в разных вариантах, и из указанного названия непонятно, о каком идет речь'");
					ИначеЕсли ЭлементКоллекции.type = "NO_SIZE_MEASURE" Тогда
						ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Для этого товара нужна размерная сетка. Отправьте ее в службу поддержки или вашему менеджеру'");
					ИначеЕсли ЭлементКоллекции.type = "UNKNOWN" Тогда
						ОписаниеОшибки = НСтр("ru = 'Товар не прошел модерацию по другой причине. Обратитесь в службу поддержки или к вашему менеджеру'");
					КонецЕсли;
					
					Если ЭлементКоллекции.Свойство("payload") И ЗначениеЗаполнено(ЭлементКоллекции.payload) Тогда
						ОписаниеОшибки = ОписаниеОшибки + " (" + ЭлементКоллекции.payload + ")";
					КонецЕсли;
					ОписаниеОшибки = ОписаниеОшибки + ".";
				КонецЦикла;
			Иначе
				ОписаниеОшибки = ОписаниеОшибки + " " + НСтр("ru = 'Уточните входные данные запроса и отправьте связь на модерацию повторно.'");
			КонецЕсли;
		КонецЕсли;	
			
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = ОписаниеОшибки;
		
	ИначеЕсли СтатусПубликации = "REJECTED" Или СтатусПубликации = "EJECTED" Тогда
		// Товар не прошел модерацию, так как Маркет не планирует размещать подобные товары
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'В ближайшее время Маркет не планирует размещать товары данной категории. Если есть вопросы по категориям товаров, размещаемым на Маркете, обратитесь в службу поддержки.'");
		
	ИначеЕсли СтатусПубликации = "SUSPENDED" Тогда                                                   
		// Товар не прошел модерацию, так как Маркет пока не размещает подобные товары
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации;
		Структура.ОписаниеОшибки = НСтр("ru = 'Маркет пока не размещает товары данной категории, но начнет в ближайшее время. После этого товар автоматически отправится на модерацию, и статус изменится на IN_WORK. Чтобы уточнить сроки появления категорий товаров на Маркете, обратитесь в службу поддержки.'");
	КонецЕсли;
	
	Если СтатусПубликации = "HAS_CARD_CAN_UPDATE_PROCESSING" 
		 ИЛИ СтатусПубликации = "NO_CARD_PROCESSING" Тогда 

		Структура.Статус = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации; 

	ИначеЕсли СтатусПубликации = "NO_CARD_ADD_TO_CAMPAIGN" Тогда 
		// Разместите товар в магазине
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена; 
		Структура.ОписаниеОшибки = "";

	ИначеЕсли СтатусПубликации = "NO_CARD_MARKET_WILL_CREATE" Тогда 
		// Создаст Маркет
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.ОжидаетМодерации;
		Структура.ОписаниеОшибки = НСтр("ru = 'Добавлен товар, который пока не продавался на Маркете. Карточки для товаров этой категории могут создавать только сотрудники Маркета. Обычно создание карточки занимает не больше двух дней.'");

	ИначеЕсли СтатусПубликации = "HAS_CARD_CAN_NOT_UPDATE" Тогда
		// Карточка Маркета
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'Напрямую управлять карточкой с таким статусом нельзя - можно менять только условия продажи товара, его вес и габариты.
                                         |Если нужно изменить описание, изображения или другие характеристики товара — напишите в службу поддержки с помощью кнопки Помощь с карточкой на странице товара.'");
		
	ИначеЕсли СтатусПубликации = "NO_CARD_NEED_CONTENT" Тогда 
		// Создайте карточку
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'В категории есть дополнительные поля, без которых карточку нельзя создать. Заполните характеристики на странице товара или загрузите информацию для всех товаров, используя Excel-шаблон категории или конвертер контента.'");

	ИначеЕсли СтатусПубликации = "NO_CARD_ERRORS" Тогда 
		// Не создана из-за ошибки
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'Маркет обнаружил ошибку в данных о товаре, поэтому создать карточку не удалось.'");

	ИначеЕсли СтатусПубликации = "HAS_CARD_CAN_UPDATE" Тогда 
		// Можно дополнить
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена; 
		Структура.ОписаниеОшибки = НСтр("ru = 'Карточку можно дополнить недостающей информацией. 
                                         |Если на карточке мало данных - товар сложно найти в поиске и с помощью фильтров на Маркете, а покупателям будет трудно принять решение о покупке.
                                         |Дополните карточку товара и Маркет за свой счет предложит покупателям кешбэк на ваши товары.'");
		
	ИначеЕсли СтатусПубликации = "HAS_CARD_CAN_UPDATE_ERRORS" Тогда 
		// Изменения не приняты
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена;
		Структура.ОписаниеОшибки = НСтр("ru = 'Карточка отредактирована, но Маркет нашел ошибки в измененных данных - их нужно исправить. Карточка пока остается в том же виде, что была до редактирования.'");
	КонецЕсли;
	
	// Прочее
	Если НЕ ЗначениеЗаполнено(Структура.Статус) Тогда
		Структура.Статус         = Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена; 
		Структура.ОписаниеОшибки = НСтр("ru = 'Товар не прошел модерацию по неустановленной причине. Обратитесь в службу поддержки или к вашему менеджеру.'");
	КонецЕсли;
	
	Возврат Структура;

КонецФункции

Функция ОбменДаннымиКампанииПолучить(УчетнаяЗапись) Экспорт
	
	Кампании = Новый Массив;
	
	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	
	ЯндексПриложениеДанные = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетПриложениеДанныеПолучить();
	client_id = ЯндексПриложениеДанные.client_id;
	
	// https://yandex.ru/dev/market/partner/doc/dg/reference/get-campaigns.html
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPIЯндексМаркет();
	ИмяМетода = "/campaigns";
	Адрес = ИмяМетода;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", "OAuth oauth_token=""" + ДанныеАвторизации.access_token + """, oauth_client_id=""" + client_id + """");
	
	ssl = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,ssl);
	
	HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		HTTPЗапросПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPЗапрос );
		
		ЛогКомментарий = НСтр("ru = 'HTTP: Запрос:'") + Символы.ПС
		+ HTTPЗапросПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ЗагрузкаСкладовВ1С );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;	
	
	Попытка
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод( "GET", HTTPЗапрос );
	Исключение 
		ТекстОшибки = НСтр("ru = 'ОбменДаннымиКампанииПолучить: Ошибка выполнения запроса:'") + " " + ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		ЗаписьЖурналаРегистрации(ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;	
	
	ЛогЭтоОшибка = HTTPОтвет.КодСостояния <> 200;
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Или ЛогЭтоОшибка Тогда
		HTTPМетод = "GET";
		HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
		HTTPОтветПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPОтвет );
		
		ЛогКомментарий = НСтр("ru = 'HTTP: Ответ: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
		+ HTTPОтветПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ЗагрузкаСкладовВ1С );
		ЛогПараметры.Вставить( "Сервер", HTTPСоединение.Сервер );
		ЛогПараметры.Вставить( "АдресРесурса", HTTPЗапрос.АдресРесурса );
		
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, ЛогЭтоОшибка, ЛогПараметры );
	КонецЕсли;	
	
	СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
	КодСостояния = HTTPОтвет.КодСостояния;

	Если КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КампанииДанные = ИзJSON( СтрокаОтвета );
	
	campaigns = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( КампанииДанные, "campaigns", Неопределено );
	Если ТипЗнч( campaigns ) <> Тип( "Массив" ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого Элемент Из campaigns Цикл
		
		НаименованиеМагазина = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Элемент, "domain", "" );
		Если ПустаяСтрока( НаименованиеМагазина ) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторПлательщикаВЯндексБалансе = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Элемент, "clientId", 0 );
		Если Не ЗначениеЗаполнено( ИдентификаторПлательщикаВЯндексБалансе ) Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторПлательщикаВЯндексБалансе = Формат( ИдентификаторПлательщикаВЯндексБалансе, "ЧГ=0" );
		
		ИдентификаторКампании = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Элемент, "id", 0 );
		Если Не ЗначениеЗаполнено( ИдентификаторКампании ) Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторКампании = Формат( ИдентификаторКампании, "ЧГ=0" );
		
		ИдентификаторКабинета = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( Элемент, "business.id", Неопределено );
		ИдентификаторКабинета = Формат( ИдентификаторКабинета, "ЧГ=0" );
		
		Значение = Новый Структура( "НаименованиеМагазина, ИдентификаторПлательщикаВЯндексБалансе, ИдентификаторКампании, ИдентификаторКабинета",
		НаименованиеМагазина, ИдентификаторПлательщикаВЯндексБалансе, ИдентификаторКампании, ИдентификаторКабинета );
		
		Кампании.Добавить( Значение );
		
	КонецЦикла;

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
        КампанииПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( Кампании );
        
		ЛогКомментарий = НСтр("ru = 'ОбменДаннымиКампанииПолучить: Кампании: '") + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
		+ КампанииПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ЗагрузкаСкладовВ1С );
		
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;	
	
	Возврат Кампании;
КонецФункции

Функция ЯндексМаркетПриложениеДанныеПолучить() Экспорт

	Данные = Новый Структура;
	
	Данные.Вставить( "client_id", "cc9b7be075074e6caaff515a3c5ef0e5" );
	Данные.Вставить( "client_secret", "dc807379134444cca2a27e21c9bf9d7d" );
	
	Возврат Данные;
КонецФункции

Функция ОбменДаннымиВыгрузитьЦеныИз1СВЯндексМаркет( УчетнаяЗапись ) Экспорт
    
	Склады = СкладыСоответствияПолучить( УчетнаяЗапись );
	Если Склады.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена);
	Статусы.Добавить(Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.НаМодерации);
	Статусы.Добавить(Перечисления.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияНеПройдена);
	
	ВидыЦен = Склады.Скопировать( , "ВидЦены" );
	ВидыЦен.Свернуть( "ВидЦены" );
	ВидыЦен = ВидыЦен.ВыгрузитьКолонку( "ВидЦены" );
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "Статусы", Статусы );
	Запрос.УстановитьПараметр( "ВидыЦен", ВидыЦен );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	
	// выгрузка только измененных цен от последней успешной выгрузки
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
	|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторТовараПлощадки КАК ИдентификаторТовараПлощадки,
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК ИдентификаторПубликации,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
	|	ЕСТЬNULL(ВыгруженныеЦеныМаркетплейсов.Цена, 0) КАК ВыгруженнаяЦена
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦен В (&ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И СтатусыПубликацииТоваровЯндексМаркет.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгруженныеЦеныМаркетплейсов КАК ВыгруженныеЦеныМаркетплейсов
	|		ПО СтатусыПубликацииТоваровЯндексМаркет.Номенклатура = ВыгруженныеЦеныМаркетплейсов.Номенклатура
	|			И СтатусыПубликацииТоваровЯндексМаркет.Характеристика = ВыгруженныеЦеныМаркетплейсов.Характеристика
	|			И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = ВыгруженныеЦеныМаркетплейсов.УчетнаяЗаписьМаркетплейса
	|			И (ЦеныНоменклатурыСрезПоследних.ВидЦен = ВыгруженныеЦеныМаркетплейсов.ВидЦены)
	|ГДЕ
	|	НЕ ЦеныНоменклатурыСрезПоследних.Номенклатура ЕСТЬ NULL
	|	И СтатусыПубликацииТоваровЯндексМаркет.Статус В(&Статусы)
	|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
	|	И ЦеныНоменклатурыСрезПоследних.Цена <> ЕСТЬNULL(ВыгруженныеЦеныМаркетплейсов.Цена, 0)";
	
	ЦеныДляВыгрузки = Запрос.Выполнить().Выгрузить();
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЦеныДляВыгрузкиПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ЦеныДляВыгрузки );
		
		ЛогКомментарий = НСтр("ru = 'ОбменДаннымиВыгрузитьЦеныИз1СВЯндексМаркет: Цены:'") + " " +  Символы.ПС
		+ ЦеныДляВыгрузкиПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;	
	
	Если ЦеныДляВыгрузки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

    УникальнаяЦенаДляКаждогоМагазина = 
    ОбщегоНазначения.ЗначениеРеквизитаОбъекта( УчетнаяЗапись, "УникальнаяЦенаДляКаждогоМагазина" );// если истина, то campaigns, иначе businesses
	
	Если УникальнаяЦенаДляКаждогоМагазина = Истина Тогда
		// группировка цен по складам/магазинам
		
		// каждый склад это отдельная кампания в Яндекс маркет, нужен отдельный HTTPЗапрос
		ЦеныДляВыгрузкиПоСкладам = Склады.Скопировать( , "ВидЦены, ИдентификаторКампанииМаркетплейса" );
		ЦеныДляВыгрузкиПоСкладам.Свернуть( "ВидЦены, ИдентификаторКампанииМаркетплейса" );
		
		ЦеныДляВыгрузкиПоСкладам.Колонки.Добавить( "offers" );
		ЦеныДляВыгрузкиПоСкладам.Колонки.Добавить( "Цены" );
		ЦеныДляВыгрузкиПоСкладам.Колонки.Добавить( "Результат" );
		
		ЦеныДляВыгрузки.Индексы.Добавить( "ВидЦены" );
		
		КешЦеныДляВыгрузки = Новый Соответствие;
		ОтборПоЦенам = Новый Структура( "ВидЦены" );
		Для Каждого ЦеныДляВыгрузкиПоСкладамСтрока Из ЦеныДляВыгрузкиПоСкладам Цикл
			
			ДанныеИзКеша = КешЦеныДляВыгрузки.Получить( ЦеныДляВыгрузкиПоСкладамСтрока.ВидЦены );
			Если ДанныеИзКеша <> Неопределено Тогда
				ЦеныДляВыгрузкиПоСкладамСтрока.offers = ДанныеИзКеша.offers;
				ЦеныДляВыгрузкиПоСкладамСтрока.Цены = ДанныеИзКеша.Цены;
				Продолжить;
			КонецЕсли;
			
			ОтборПоЦенам.ВидЦены = ЦеныДляВыгрузкиПоСкладамСтрока.ВидЦены;
			ЦеныПоСкладу = ЦеныДляВыгрузки.Скопировать( ОтборПоЦенам );
			
			offers = Новый Массив;
			Для Каждого ЦеныПоСкладуСтрока Из ЦеныПоСкладу Цикл
				
				СтруктураПредложения = Новый Структура( "offerId, price" );
				СтруктураПредложения.offerId = ЦеныПоСкладуСтрока.ИдентификаторПубликации;
				СтруктураЦены = Новый Структура( "currencyId, value" );
				СтруктураЦены.currencyId = "RUR";
				СтруктураЦены.value = ЦеныПоСкладуСтрока.Цена;
				СтруктураПредложения.price = СтруктураЦены;
				
				offers.Добавить( СтруктураПредложения );
			КонецЦикла;
			
			ЦеныДляВыгрузкиПоСкладамСтрока.offers = offers;
			ЦеныДляВыгрузкиПоСкладамСтрока.Цены = ЦеныПоСкладу;
			
			ДанныеВКеш = Новый Структура( "offers, Цены" );
			ДанныеВКеш.offers = offers;
			ДанныеВКеш.Цены = ЦеныПоСкладу;
			КешЦеныДляВыгрузки.Вставить( ЦеныДляВыгрузкиПоСкладамСтрока.ВидЦены, ДанныеВКеш );
			
		КонецЦикла;
		
		ЦеныДляВыгрузкиВСервис = ЦеныДляВыгрузкиПоСкладам;
		ИмяМетода = "/campaigns/%1/offer-prices/updates.json";
			
	Иначе
		// группировка цен по кабинетам
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, Истина, ЛогПараметры );

		ЦеныДляВыгрузкиПоКабинетам = Склады.Скопировать( , "ВидЦены, ИдентификаторКабинетаМаркетплейса" );
		ЦеныДляВыгрузкиПоКабинетам.Свернуть( "ВидЦены, ИдентификаторКабинетаМаркетплейса" );
		
		ЦеныДляВыгрузкиПоКабинетам.Колонки.Добавить( "offers" );
		ЦеныДляВыгрузкиПоКабинетам.Колонки.Добавить( "Цены" );
		ЦеныДляВыгрузкиПоКабинетам.Колонки.Добавить( "Результат" );
		
		ЦеныДляВыгрузки.Индексы.Добавить( "ВидЦены" );
		
		КешЦеныДляВыгрузки = Новый Соответствие;
		ОтборПоЦенам = Новый Структура( "ВидЦены" );
		Для Каждого ЦеныДляВыгрузкиПоКабинетамСтрока Из ЦеныДляВыгрузкиПоКабинетам Цикл
			
			ДанныеИзКеша = КешЦеныДляВыгрузки.Получить( ЦеныДляВыгрузкиПоКабинетамСтрока.ВидЦены );
			Если ДанныеИзКеша <> Неопределено Тогда
				ЦеныДляВыгрузкиПоКабинетамСтрока.offers = ДанныеИзКеша.offers;
				ЦеныДляВыгрузкиПоКабинетамСтрока.Цены = ДанныеИзКеша.Цены;
				Продолжить;
			КонецЕсли;
			
			ОтборПоЦенам.ВидЦены = ЦеныДляВыгрузкиПоКабинетамСтрока.ВидЦены;
			ЦеныПоКабинету = ЦеныДляВыгрузки.Скопировать( ОтборПоЦенам );
			
			offers = Новый Массив;
			Для Каждого ЦеныПоКабинетуСтрока Из ЦеныПоКабинету Цикл
				
				СтруктураПредложения = Новый Структура( "offerId, price" );
				СтруктураПредложения.offerId = ЦеныПоКабинетуСтрока.ИдентификаторПубликации;
				СтруктураЦены = Новый Структура( "currencyId, value" );
				СтруктураЦены.currencyId = "RUR";
				СтруктураЦены.value =  Формат( ЦеныПоКабинетуСтрока.Цена, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				СтруктураПредложения.price = СтруктураЦены;
				
				offers.Добавить( СтруктураПредложения );
			КонецЦикла;
			
			ЦеныДляВыгрузкиПоКабинетамСтрока.offers = offers;
			ЦеныДляВыгрузкиПоКабинетамСтрока.Цены = ЦеныПоКабинету;
			
			ДанныеВКеш = Новый Структура( "offers, Цены" );
			ДанныеВКеш.offers = offers;
			ДанныеВКеш.Цены = ЦеныПоКабинету;
			КешЦеныДляВыгрузки.Вставить( ЦеныДляВыгрузкиПоКабинетамСтрока.ВидЦены, ДанныеВКеш );
			
		КонецЦикла;
		
		ЦеныДляВыгрузкиВСервис = ЦеныДляВыгрузкиПоКабинетам;
		ИмяМетода = "/businesses/%1/offer-prices/updates.json";
		
	КонецЕсли;
 
 	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	
	ssl = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPIЯндексМаркет();
	
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,,ssl);
	
	client_id = ЯндексМаркетПриложениеДанныеПолучить().client_id;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить( "Content-Type", "application/json" );
	Заголовки.Вставить( "Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + client_id );

	БылиОшибки = Ложь;	
	Для Каждого ЦеныДляВыгрузкиВСервисСтрока Из ЦеныДляВыгрузкиВСервис Цикл

		offers = ЦеныДляВыгрузкиВСервисСтрока.offers;
		Если offers.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если УникальнаяЦенаДляКаждогоМагазина = Истина Тогда
			ИдентификаторДляАдресаСервиса = СокрЛП( ЦеныДляВыгрузкиВСервисСтрока.ИдентификаторКампанииМаркетплейса );
		Иначе
			ИдентификаторДляАдресаСервиса = СокрЛП( ЦеныДляВыгрузкиВСервисСтрока.ИдентификаторКабинетаМаркетплейса );
		КонецЕсли;
		Адрес = СтрШаблон( ИмяМетода, ИдентификаторДляАдресаСервиса );

		
		СтруктураДляJSON = Новый Структура;
		СтруктураДляJSON.Вставить( "offers", offers );
		ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON( СтруктураДляJSON );
		
		HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
		HTTPЗапрос.УстановитьТелоИзСтроки( ТелоЗапроса, "UTF-8" );

		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			HTTPЗапросПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPЗапрос );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Запрос:'") + Символы.ПС
			+ HTTPЗапросПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
		КонецЕсли;	

		Попытка
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки( HTTPЗапрос );
		Исключение 
			ТекстОшибки = НСтр("ru = 'Выгрузка цены из 1С в Яндекс маркет: Ошибка выполнения запроса'") + ": " + Символы.ПС + ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
			ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
			БылиОшибки = Истина;
			Продолжить;
		КонецПопытки;	

		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
		КодСостояния = HTTPОтвет.КодСостояния;

		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			HTTPМетод = "POST";
			HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
			HTTPОтветПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPОтвет );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Ответ: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
			+ HTTPОтветПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С );
			ЛогПараметры.Вставить( "Сервер", HTTPСоединение.Сервер );
			ЛогПараметры.Вставить( "АдресРесурса", HTTPЗапрос.АдресРесурса );
			
			ЛогЭтоОшибка = HTTPОтвет.КодСостояния <> 200;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, ЛогЭтоОшибка, ЛогПараметры );
		КонецЕсли;	
		
		Если КодСостояния = 200 И СтруктураОтвета.status = "OK" Тогда
			
			ЗаписатьДатуУстановкиЦены( УчетнаяЗапись, ЦеныДляВыгрузкиВСервисСтрока.Цены );
			
		Иначе
			
			СобытиеОписание = "Выгрузка цены из 1С в Яндекс маркет: Идентификатор "
			+ ?( УникальнаяЦенаДляКаждогоМагазина = Истина, "кампании", "кабинета" )
			+ " """ + ИдентификаторДляАдресаСервиса + """";
			
			ТекстОшибки = СтрокаОтвета;
			ТекстОшибкиПояснение = ОбменСВнешнимиСистемамиЛогирование.БазаЗнанийСовпаденияНайтиСтрокойПолучить( "Yandex: " + ТекстОшибки );
			ТекстОшибкиПодробный = СобытиеОписание + ": " + ?(ПустаяСтрока( ТекстОшибкиПояснение ), "", ТекстОшибкиПояснение + " " ) + ТекстОшибки;
			
			ОбщегоНазначения.СообщитьПользователю( ТекстОшибкиПодробный );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибкиПодробный);
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибкиПодробный, УчетнаяЗапись, Истина );
			
			БылиОшибки = Истина;
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;// ЦеныДляВыгрузкиПоСкладам

	ВыгруженныеЦеныНеактуальныеУдалить( УчетнаяЗапись );
	
	Возврат (БылиОшибки = Ложь);
КонецФункции

Процедура ЗаписатьДатуУстановкиЦены( УчетнаяЗапись, Цены )

	Для Каждого ЦеныСтрока Из Цены Цикл
	
		Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		
		Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить( УчетнаяЗапись );
		Набор.Отбор.Номенклатура.Установить( ЦеныСтрока.Номенклатура );
		Набор.Отбор.Характеристика.Установить( ЦеныСтрока.Характеристика );
		
		Набор.Прочитать();
		
		ДатаУстановкиЦены = ТекущаяДатаСеанса();
		Если Набор.Количество() > 0 Тогда
			Запись = Набор[0];
			Запись.ДатаУстановкиЦены = ДатаУстановкиЦены;
			Набор.Записать();
		КонецЕсли;
		
		// запишем новое значение выгруженной цены
		Запись = РегистрыСведений.ВыгруженныеЦеныМаркетплейсов.СоздатьМенеджерЗаписи();
		Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
		Запись.ВидЦены = ЦеныСтрока.ВидЦены;
		Запись.Номенклатура = ЦеныСтрока.Номенклатура;
		Запись.Характеристика = ЦеныСтрока.Характеристика;
		Запись.Цена = ЦеныСтрока.Цена;
		Запись.ДатаВыгрузки = ДатаУстановкиЦены;
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Проверяет, является ли строка целым неотрицательным числом	
// Параметры:
//  ПроверяемаяСтрока - Строка - проверяемый строка.
//
// Возвращаемое значение:
//  Булево - Истина, если строка содержит только цифры.
//
Функция ЭтаСтрокаЯвляетсяЦелымНеотрицательнымЧислом(ПроверяемаяСтрока) Экспорт
	
	СтрокаЯвляетсяЧислом = Истина;
	ПроверяемаяСтрока = СокрЛП(ПроверяемаяСтрока);
	Длина = СтрДлина(ПроверяемаяСтрока);
	
	Для НомерСимвола = 1 По Длина Цикл
		Симв = Сред(ПроверяемаяСтрока, НомерСимвола, 1);
		Если Найти("0123456789", Симв) = 0 И КодСимвола(Симв)<>160 Тогда
			СтрокаЯвляетсяЧислом = Ложь;		
		КонецЕсли;		
	КонецЦикла;
	
	Возврат СтрокаЯвляетсяЧислом;
	
КонецФункции

Функция ВJSON( Структура )Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();	
	ЗаписьJSON.ПроверятьСтруктуру = Истина;
	
	Попытка
		ЗаписатьJSON( ЗаписьJSON, Структура );
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ИнформацияОбОшибкеПричина = ОбменСВнешнимиСистемамиЛогирование.ИнформацияОбОшибкеПричина( ИнформацияОбОшибке );
		СтруктураПредставление = СтрЗаменить( ЗначениеВСтрокуВнутр( Структура ), Символы.ПС, "" );
		
		ТекстОшибки = "Ошибка при подготовке JSON: " + ИнформацияОбОшибкеПричина + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ СтруктураПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ ПодробноеПредставлениеОшибки( ИнформацияОбОшибке );
		
		ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, , Истина );
		
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;

	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ИзJSON( Строка, СтрДат = "", ФлСоответствие = Ложь )Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	ЗапросСтруктура = ПрочитатьJSON(ЧтениеJSON, ФлСоответствие, СтрДат );
	
	Возврат ЗапросСтруктура;
	
КонецФункции

Функция ЯндексМаркетСобытиеЖурналаРегистрацииПолучить() Экспорт
	Возврат НСтр( "ru = 'Яндекс маркет'" );
КонецФункции

Функция ОбменДаннымиВыгрузитьОстаткиТоваровВЯндексМаркет( УчетнаяЗапись ) Экспорт

	ДанныеАвторизации = ИнтеграцияСЯндексМаркетСервер.ЯндексМаркетДанныеАвторизацииПолучить( УчетнаяЗапись );
	Если Не ЗначениеЗаполнено( ДанныеАвторизации.access_token ) Тогда
		ТекстСообщения = НСтр( "ru = 'Ошибка при выгрузке остатков товаров в Яндекс Маркет: Токен для авторизации не задан. Необходимо выполнить авторизацию в форме настройки.'" );
		ОбщегоНазначения.СообщитьПользователю( ТекстСообщения );
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросТекст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2000
	|	СтатусыПубликацииТоваровЯндексМаркет.Номенклатура КАК Номенклатура,
	|	СтатусыПубликацииТоваровЯндексМаркет.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(СоответствияОбъектовМаркетплейсов.Объект1С КАК Справочник.СтруктурныеЕдиницы) КАК Склад,
	|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК СкладМаркетплейсИдентификатор,
	|	СтатусыПубликацииТоваровЯндексМаркет.ИдентификаторПубликации КАК ТоварМаркетплейсИдентификатор,
	|	СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса КАК ИдентификаторКампанииМаркетплейса
	|ПОМЕСТИТЬ ВТТоварыИСклады
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет КАК СтатусыПубликацииТоваровЯндексМаркет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
	|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет))
	|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад))
	|			И (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|			И (СоответствияОбъектовМаркетплейсов.МодельСклада <> &МодельСкладаFBY)
	|			И ((ВЫРАЗИТЬ(СоответствияОбъектовМаркетплейсов.Объект1С КАК Справочник.СтруктурныеЕдиницы)) <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))
	|ГДЕ
	|	СтатусыПубликацииТоваровЯндексМаркет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыгрузкиТоваровЯндексМаркет.МодерацияПройдена)
	|	И СтатусыПубликацииТоваровЯндексМаркет.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТоварыИСклады.Номенклатура КАК Номенклатура,
	|	ВТТоварыИСклады.ТоварМаркетплейсИдентификатор КАК ТоварМаркетплейсИдентификатор,
	|	ВТТоварыИСклады.Характеристика КАК Характеристика,
	|	ВТТоварыИСклады.Склад КАК Склад,
	|	ВТТоварыИСклады.СкладМаркетплейсИдентификатор КАК СкладМаркетплейсИдентификатор,
	|	СУММА(ЕСТЬNULL(ОстаткиТоваров.Количество, 0)) КАК Остаток,
	|	СУММА(ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество, 0)) КАК ОстатокВыгружен,
	|	ВТТоварыИСклады.ИдентификаторКампанииМаркетплейса КАК ИдентификаторКампанииМаркетплейса
	|ИЗ
	|	ВТТоварыИСклады КАК ВТТоварыИСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|		ПО (ОстаткиТоваров.СтруктурнаяЕдиница = ВТТоварыИСклады.Склад)
	|			И (ОстаткиТоваров.Характеристика = ВТТоварыИСклады.Характеристика)
	|			И (ОстаткиТоваров.Номенклатура = ВТТоварыИСклады.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваровМаркетплейсов КАК ОстаткиТоваровМаркетплейсов
	|		ПО ВТТоварыИСклады.Номенклатура = ОстаткиТоваровМаркетплейсов.Номенклатура
	|			И ВТТоварыИСклады.Характеристика = ОстаткиТоваровМаркетплейсов.Характеристика
	|			И ВТТоварыИСклады.Склад = ОстаткиТоваровМаркетплейсов.Склад
	|			И (ОстаткиТоваровМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТоварыИСклады.Склад,
	|	ВТТоварыИСклады.СкладМаркетплейсИдентификатор,
	|	ВТТоварыИСклады.Номенклатура,
	|	ВТТоварыИСклады.ТоварМаркетплейсИдентификатор,
	|	ВТТоварыИСклады.Характеристика,
	|	ВТТоварыИСклады.ИдентификаторКампанииМаркетплейса
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(ОстаткиТоваров.Количество, 0)) <> СУММА(ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество, 0))";
	
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр( "МодельСкладаFBY", ПредопределенноеЗначение( "Перечисление.МоделиСкладовЯндексМаркета.FBY" ) );
	Остатки = Запрос.Выполнить().Выгрузить();

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ОстаткиПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( Остатки );
		
		ЛогКомментарий = НСтр("ru = 'ОбменДаннымиВыгрузитьОстаткиТоваровВЯндексМаркет: Остатки:'") + " " +  Символы.ПС
		+ ОстаткиПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаОстатковИз1С );
		
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;	
	
	Если Остатки.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// каждый склад это отдельная кампания в Яндекс маркет, нужен отдельный HTTPЗапрос
	ОстаткиДляВыгрузкиПоСкладам = Остатки.Скопировать( , "Склад, ИдентификаторКампанииМаркетплейса" );
	
	ОстаткиДляВыгрузкиПоСкладам.Свернуть( "Склад, ИдентификаторКампанииМаркетплейса" );
	
	ОстаткиДляВыгрузкиПоСкладам.Колонки.Добавить( "ОстаткиДляВыгрузки" );
	ОстаткиДляВыгрузкиПоСкладам.Колонки.Добавить( "Результат" );

	Остатки.Индексы.Добавить( "Склад" );
	
	ОтборПоСкладам = Новый Структура( "Склад" );
	Для Каждого ОстаткиДляВыгрузкиПоСкладамСтрока Из ОстаткиДляВыгрузкиПоСкладам Цикл
	
		ОтборПоСкладам.Склад = ОстаткиДляВыгрузкиПоСкладамСтрока.Склад;
		ОстаткиПоСкладу = Остатки.НайтиСтроки( ОтборПоСкладам );
		
		ОстаткиДляВыгрузки = Новый Массив;	
		Для Каждого ОстаткиПоСкладуСтрока Из ОстаткиПоСкладу Цикл
			
			СтруктураОстатков = Новый Структура( "sku, warehouseId, items" );
			
			СтруктураОстатков.sku = ОстаткиПоСкладуСтрока.ТоварМаркетплейсИдентификатор;  
			СтруктураОстатков.warehouseId = ОстаткиПоСкладуСтрока.СкладМаркетплейсИдентификатор;
			
			СтруктураПозиции = Новый Структура( "type, count, updatedAt" );
			
			СтруктураПозиции.type = "FIT";// из документации API Яндекса: "type - Этот параметр пока не используется. Всегда передавайте одно значение — FIT"
			СтруктураПозиции.count = ОстаткиПоСкладуСтрока.Остаток;
			СтруктураПозиции.updatedAt = ЗаписатьДатуJSON( ТекущаяДатаСеанса(), ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата );
			
			items = Новый Массив;
			items.Добавить( СтруктураПозиции );
			
			СтруктураОстатков.items = items;// из документации API Яндекса: "items - Информация об остатках товара. Представлена в виде массива, состоящего из одного объекта."
			
			ОстаткиДляВыгрузки.Добавить( СтруктураОстатков );
		КонецЦикла;
		
		ОстаткиДляВыгрузкиПоСкладамСтрока.ОстаткиДляВыгрузки = ОстаткиДляВыгрузки;
	КонецЦикла;

	ЯндексПриложениеДанные = ЯндексМаркетПриложениеДанныеПолучить();
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;

	Сервер = ИнтеграцияСЯндексМаркетСервер.СерверПартнерскогоAPIЯндексМаркет();
	ИмяМетода = "/campaigns/%1/offers/stocks.json";	
	Таймаут = 180;
	СоединениеOpenSSL = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	HTTPСоединение = Новый HTTPСоединение( Сервер, , , , ИнтернетПрокси, Таймаут, СоединениеOpenSSL );

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "OAuth oauth_token=" + ДанныеАвторизации.access_token + ", oauth_client_id=" + ЯндексПриложениеДанные.client_id);
    
	СтруктураДляJSON = Новый Структура;
	
    // отправим запросы по остаткам в Яндекс маркет
	Для Каждого ОстаткиДляВыгрузкиПоСкладамСтрока Из ОстаткиДляВыгрузкиПоСкладам Цикл
		
		campaign_id = СокрЛП( ОстаткиДляВыгрузкиПоСкладамСтрока.ИдентификаторКампанииМаркетплейса );
		Адрес = СтрШаблон( ИмяМетода, campaign_id );
		
		ОстаткиДляВыгрузки = ОстаткиДляВыгрузкиПоСкладамСтрока.ОстаткиДляВыгрузки;
		
		СтруктураДляJSON.Вставить( "skus", ОстаткиДляВыгрузки );
		
		ТелоЗапроса = ИнтеграцияСЯндексМаркетСервер.ВJSON( СтруктураДляJSON );
		
		HTTPЗапрос = Новый HTTPЗапрос( Адрес, Заголовки );
		HTTPЗапрос.УстановитьТелоИзСтроки( ТелоЗапроса, "UTF-8");
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			HTTPЗапросПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPЗапрос );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Запрос:'") + Символы.ПС
			+ HTTPЗапросПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаОстатковИз1С );
			
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
		КонецЕсли;	
		
		Попытка
			HTTPОтвет = HTTPСоединение.Записать( HTTPЗапрос );
		Исключение 
			ТекстОшибки = НСтр("ru = 'Ошибка при выгрузке остатков товаров в Яндекс Маркет:'") + " " + campaign_id + ": " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
			ОстаткиДляВыгрузкиПоСкладамСтрока.Результат = Ложь;
			Продолжить;
		КонецПопытки;	
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			HTTPМетод = "PUT";
			HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
			HTTPОтветПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPОтвет );
			
			ЛогКомментарий = НСтр("ru = 'HTTP: Ответ: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
			+ HTTPОтветПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			
			ЛогПараметры = Новый Структура;
			ЛогПараметры.Вставить( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаОстатковИз1С );
			ЛогПараметры.Вставить( "Сервер", HTTPСоединение.Сервер );
			ЛогПараметры.Вставить( "АдресРесурса", HTTPЗапрос.АдресРесурса );
			
			ЛогЭтоОшибка = HTTPОтвет.КодСостояния <> 200;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, ЛогЭтоОшибка, ЛогПараметры );
		КонецЕсли;	
		
		СтрокаОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ИнтеграцияСЯндексМаркетСервер.ИзJSON(СтрокаОтвета);
		КодСостояния = HTTPОтвет.КодСостояния;
		
		Если КодСостояния= 200 И СтруктураОтвета.status = "OK" Тогда
			
			ВыгруженныеВЯндексОстаткиЗаписать( УчетнаяЗапись, Остатки );
			
		Иначе
			ТекстОшибки = НСтр("ru = 'Ошибка при выгрузке остатков товаров в Яндекс Маркет:'") + " " + campaign_id + ": " + КодСостояния + ": "+ СтрокаОтвета;
			ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
			ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);		
			ОстаткиДляВыгрузкиПоСкладамСтрока.Результат = Ложь;
			Продолжить;
			
		КонецЕсли;
		
		ОстаткиДляВыгрузкиПоСкладамСтрока.Результат = Истина;
	КонецЦикла;
	
	Если ОстаткиДляВыгрузкиПоСкладам.Найти( Ложь, "Результат" ) = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ВыгруженныеВЯндексОстаткиЗаписать( УчетнаяЗапись, Остатки )
	
	Если Не ЗначениеЗаполнено( УчетнаяЗапись ) Тогда
		ТекстОшибки = НСтр( "ru = 'ВыгруженныеВЯндексОстаткиЗаписать: УчетнаяЗапись не заполнена.'" );
		ЗаписьЖурналаРегистрации(ЯндексМаркетСобытиеЖурналаРегистрацииПолучить(), УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗапись, Истина );
		Возврат;
	КонецЕсли;
	
	Для Каждого ОстаткиСтрока Из Остатки Цикл
		Набор = РегистрыСведений.ОстаткиТоваровМаркетплейсов.СоздатьНаборЗаписей(); 
		
		Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗапись);
		Набор.Отбор.Склад.Установить(ОстаткиСтрока.Склад);
		Набор.Отбор.Номенклатура.Установить(ОстаткиСтрока.Номенклатура);
		Набор.Отбор.Характеристика.Установить(ОстаткиСтрока.Характеристика);
		
		Набор.Прочитать();
		Если Набор.Количество() > 0 Тогда
			Запись = Набор[0];
			Запись.Количество = ОстаткиСтрока.Остаток; 
			Запись.ДатаВыгрузкиОстатков = ТекущаяДатаСеанса();
		Иначе
			Запись = Набор.Добавить();  
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись; 
			Запись.Склад = ОстаткиСтрока.Склад;
			Запись.Номенклатура = ОстаткиСтрока.Номенклатура;  
			Запись.Характеристика = ОстаткиСтрока.Характеристика;
			Запись.Количество = ОстаткиСтрока.Остаток;
			Запись.ДатаВыгрузкиОстатков = ТекущаяДатаСеанса();	
		КонецЕсли;
		Набор.Записать();
	КонецЦикла; 	
	
	ТоварыДляЗаписи = Остатки.Скопировать();
	ТоварыДляЗаписи.Свернуть( "Номенклатура, Характеристика" );
	
	ЗапросТекст = 
	"ВЫБРАТЬ
	|	ВТТовары.Номенклатура КАК Номенклатура,
	|	ВТТовары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&ТоварыДляЗаписи КАК ВТТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТоваровМаркетплейсов.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровМаркетплейсов.Характеристика КАК Характеристика,
	|	СУММА(ОстаткиТоваровМаркетплейсов.Количество) КАК Остаток
	|ИЗ
	|	РегистрСведений.ОстаткиТоваровМаркетплейсов КАК ОстаткиТоваровМаркетплейсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТовары КАК ВТТовары
	|		ПО ОстаткиТоваровМаркетплейсов.Номенклатура = ВТТовары.Номенклатура
	|			И ОстаткиТоваровМаркетплейсов.Характеристика = ВТТовары.Характеристика
	|ГДЕ
	|	ОстаткиТоваровМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваровМаркетплейсов.Номенклатура,
	|	ОстаткиТоваровМаркетплейсов.Характеристика";
	
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "ТоварыДляЗаписи", ТоварыДляЗаписи );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	ОбщиеОстаткиБезСкладов = Запрос.Выполнить().Выбрать();
	
	Пока ОбщиеОстаткиБезСкладов.Следующий() Цикл	
		Набор = РегистрыСведений.СтатусыПубликацииТоваровЯндексМаркет.СоздатьНаборЗаписей();
		
		Набор.Отбор.УчетнаяЗаписьМаркетплейса.Установить( УчетнаяЗапись );
		Набор.Отбор.Номенклатура.Установить( ОбщиеОстаткиБезСкладов.Номенклатура );
		Набор.Отбор.Характеристика.Установить( ОбщиеОстаткиБезСкладов.Характеристика );
		
		Набор.Прочитать();
		
		Если Набор.Количество() > 0 Тогда
			Запись = Набор[0];
			Запись.ОстатокВУпаковках = ОбщиеОстаткиБезСкладов.Остаток;
			Набор.Записать();
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Функция СкладыСоответствияПолучить( УчетнаяЗапись ) Экспорт

	ЗапросТекст = 
	"ВЫБРАТЬ
	|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК СкладМаркетплейсИдентификатор,
	|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК НаименованиеСкладаМаркетплейса,
	|	СоответствияОбъектовМаркетплейсов.Объект1С КАК Склад1С,
	|	СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса КАК ИдентификаторКампанииМаркетплейса,
	|	СоответствияОбъектовМаркетплейсов.ВидЦены КАК ВидЦены,
	|	СоответствияОбъектовМаркетплейсов.МодельСклада КАК МодельСклада,
	|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СоответствияОбъектовМаркетплейсов.ИдентификаторКабинета КАК ИдентификаторКабинетаМаркетплейса
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
	|ГДЕ
	|	СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
	|	И СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";
	
	Запрос = Новый Запрос( ЗапросТекст );
	
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ИдентификаторыКабинетовИзСоответствияСкладовПолучить( УчетнаяЗапись ) Экспорт

	ЗапросТекст = 
	"ВЫБРАТЬ
	|	СоответствияОбъектовМаркетплейсов.ИдентификаторКабинета КАК ИдентификаторКабинетаМаркетплейса
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
	|ГДЕ
	|	СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
	|	И СоответствияОбъектовМаркетплейсов.ИдентификаторКабинета > """"
	|	И СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствияОбъектовМаркетплейсов.ИдентификаторКабинета";
	
	Запрос = Новый Запрос( ЗапросТекст );
	
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку( "ИдентификаторКабинетаМаркетплейса" );
КонецФункции

Процедура СкладыСоответствияЗаписать( УчетнаяЗапись, Склады ) Экспорт
	
	НаборЗаписей = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьНаборЗаписей();   
	
	НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗапись);
	НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Склад"));  
			
	ДатаАктуальности = ТекущаяДатаСеанса();
	Для Каждого СкладыСтрока Из Склады Цикл  	
		
		Запись = НаборЗаписей.Добавить();  
		
		Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;	 	                                                
		Запись.ВидОбъектаМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Склад"); 
		Запись.ИдентификаторОбъектаМаркетплейса = СкладыСтрока.СкладМаркетплейсИдентификатор; 
		Запись.ИдентификаторВладельцаОбъектаМаркетплейса = СкладыСтрока.ИдентификаторКампанииМаркетплейса; 
		Запись.НаименованиеОбъектаМаркетплейса =  СкладыСтрока.НаименованиеСкладаМаркетплейса; 
		Запись.Объект1С = СкладыСтрока.Склад1С; 
		Запись.ДатаАктуальности = ДатаАктуальности;
		Запись.ВидЦены = СкладыСтрока.ВидЦены; 
		Запись.МодельСклада = СкладыСтрока.МодельСклада; 
		Запись.ИдентификаторКабинета = СкладыСтрока.ИдентификаторКабинетаМаркетплейса;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();  
	
КонецПроцедуры

Функция ВыгруженныеЦеныНеактуальныеУдалить( УчетнаяЗапись )

	// очистим старые записи на случай если менялись виды цен для складов
	
    Склады = СкладыСоответствияПолучить( УчетнаяЗапись );
	АктуальныеВидыЦен = Склады.Скопировать( , "ВидЦены" );
	АктуальныеВидыЦен.Свернуть( "ВидЦены" );
	
	ЗапросТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыгруженныеЦеныМаркетплейсов.ВидЦены КАК ВидЦены
	|ИЗ
	|	РегистрСведений.ВыгруженныеЦеныМаркетплейсов КАК ВыгруженныеЦеныМаркетплейсов
	|ГДЕ
	|	ВыгруженныеЦеныМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
	|	И НЕ ВыгруженныеЦеныМаркетплейсов.ВидЦены В (&АктуальныеВидыЦен)";
	
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	Запрос.УстановитьПараметр( "АктуальныеВидыЦен", АктуальныеВидыЦен );
	
	ЗапросВыборка = Запрос.Выполнить().Выбрать();
	Пока ЗапросВыборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ВыгруженныеЦеныМаркетплейсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить( УчетнаяЗапись );
		НаборЗаписей.Отбор.ВидЦены.Установить( ЗапросВыборка.ВидЦены );
		НаборЗаписей.Записать();
	КонецЦикла;
				
	Возврат Истина;
КонецФункции

Функция ЯндексМаркетПроверитьДанныеАвторизацииПомещеныВХранилище(УчетнаяЗапись) Экспорт
	Попытка
		ДанныеАвторизации = ЯндексМаркетДанныеАвторизацииПолучить(УчетнаяЗапись);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат ЗначениеЗаполнено( ДанныеАвторизации.access_token );
КонецФункции

Процедура ОбновлениеИнформационнойБазыУстановитьРеквизитУникальнаяЦенаДляКаждогоМагазина( Параметры ) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	// Справочник.УчетныеЗаписиМаркетплейсов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиМаркетплейсов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
	|ГДЕ
	|	УчетныеЗаписиМаркетплейсов.ПометкаУдаления = ЛОЖЬ
	|	И УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = &ВидМаркетплейсаOzon
	|	И УчетныеЗаписиМаркетплейсов.УникальнаяЦенаДляКаждогоМагазина = ЛОЖЬ";
	
	Запрос.УстановитьПараметр( "ВидМаркетплейсаOzon", Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет );
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда

		ТекстСообщения = НСтр("ru='Процедура ОбновлениеИнформационнойБазыУстановитьРеквизитУникальнаяЦенаДляКаждогоМагазина завершила обработку.'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.НастройкиИнтеграцииСИнтернетМагазином,, ТекстСообщения);
			
		Параметры.ОбработкаЗавершена = Истина;
		
		Возврат;
	КонецЕсли;
	
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НачатьТранзакцию();
		
		Попытка
		
			ПредставлениеОбъекта = Строка(Выборка.Ссылка);
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			Объект.УникальнаяЦенаДляКаждогоМагазина = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные( Объект );
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = НСтр("ru='Не удалось обработать объект ""%1"" по причине:
			|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ПредставлениеОбъекта, ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.НастройкиИнтеграцииСИнтернетМагазином, Выборка.Ссылка, ТекстСообщения);
				
		КонецПопытки;
	КонецЦикла;

	Если ОбъектовОбработано > 0 И ПроблемныхОбъектов = 0 Тогда

		ТекстСообщения = НСтр("ru='Процедура ОбновлениеИнформационнойБазыУстановитьРеквизитУникальнаяЦенаДляКаждогоМагазина завершила обработку.'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.НастройкиИнтеграцииСИнтернетМагазином,, ТекстСообщения);
			
		Параметры.ОбработкаЗавершена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры
