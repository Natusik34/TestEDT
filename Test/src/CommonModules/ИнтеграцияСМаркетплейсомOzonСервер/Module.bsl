///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает хеш переданной строки.
//
// Параметры:
//  СтрокаДанных            - Строка - строка для хеширования.
//  ПреобразоватьВHEX       - Булево - признак преобразования в HEX.
//  ПеревестиВНижнийРегистр - Булево - признак перевода строки в нижний регистр.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - значение хеш-суммы.
//
Функция ПолучитьХешСтроки(знач СтрокаДанных, ПреобразоватьВHEX = Истина, ПеревестиВНижнийРегистр = Истина) Экспорт
	
	Если ТипЗнч(СтрокаДанных) <> Тип("Строка") Тогда 
		СтрокаДанных = "";
	КонецЕсли;
	
	Возврат ХешСуммаДвоичныхДанных(ПолучитьДвоичныеДанныеИзСтроки(СтрокаДанных,КодировкаТекста.UTF8), ПреобразоватьВHEX, ПеревестиВНижнийРегистр);
	
КонецФункции

// Возвращает детальную информацию по типам цен, используемым учетной записью Ozon.
//
// Параметры:
//  ВключатьВыгружаемые       - Булево - Признак включения в результат функции выгружаемых типов цен.
//  ВключатьЗагружаемые       - Булево - Признак включения в результат функции загружаемых типов цен.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с описанием указанных типов цен учетной записи. Содержит колонки:
//                  * Идентификатор - Строка - Строковое обозначение типа цен;
//                  * ИдентификаторДляФормул - Шаблон для формирования идентификатора вида цен;
//                  * Наименование - Строка - Наименование типа цен;
//                  * ДляУчетнойЗаписи - Булево - Признак отношения типа цен к учетной записи или к интеграции в целом;
//                  * ОбязательноеЗаполнение - Булево - Признак обязательного заполнения в формах;
//                  * Значение - СправочникСсылка.ВидыЦен - Пустая ссылка вида цен.
//
Функция ТипыЦенOzon(ВключатьВыгружаемые = Истина, ВключатьЗагружаемые = Истина) Экспорт

	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная));

	ТипыЦен = Новый ТаблицаЗначений;
	ТипыЦен.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока50);
	ТипыЦен.Колонки.Добавить("ИдентификаторДляФормул", ОписаниеТиповСтрока50);
	ТипыЦен.Колонки.Добавить("Наименование", ОписаниеТиповСтрока50);
	ТипыЦен.Колонки.Добавить("ДляУчетнойЗаписи", Новый ОписаниеТипов("Булево"), НСтр("ru = 'Тип цен уникален для учетной записи'"));
	ТипыЦен.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	ТипыЦен.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));

	Если ВключатьВыгружаемые Тогда
		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныСУчетомСкидок";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цена с учетом скидок'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Истина;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныДоСкидок";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цена до скидок'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныМинимальныхЦен";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Минимальная цена после применения всех акций'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;
	КонецЕсли;
	
	Если ВключатьЗагружаемые Тогда
		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныСАкциямиПродавца";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "marketing_seller_price";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цены с учетом акций продавца'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныСоВсемиАкциями";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "marketing_price";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цены с учетом всех акций'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Истина;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныРекомендованный";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "recommended_price";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Рекомендованные цены'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Ложь;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;

		СтрокаТаблицыЗначений = ТипыЦен.Добавить();
		СтрокаТаблицыЗначений.Идентификатор = "ВидЦеныПоставщика";
		СтрокаТаблицыЗначений.ИдентификаторДляФормул = "retail_price";
		СтрокаТаблицыЗначений.Наименование = НСтр("ru = 'Цены поставщика товаров'");
		СтрокаТаблицыЗначений.ДляУчетнойЗаписи = Ложь;
		СтрокаТаблицыЗначений.ОбязательноеЗаполнение = Ложь;
	КонецЕсли;

	Возврат ТипыЦен;

КонецФункции

Функция МаксимальноеКоличествоСимволовПоИмениАтрибута( ИмяАтрибута ) Экспорт
	Если ИмяАтрибута = "Аннотация" Тогда
		Возврат 6000;
	ИначеЕсли ИмяАтрибута = "Rich-контент JSON" Тогда
		Возврат 50000;
	КонецЕсли;
	
КонецФункции

// Возвращает расписание регламентного задания по умолчанию.
//
// Возвращаемое значение:
//  РасписаниеРегламентногоЗадания - расписание регламентного задания.
//
Функция ПолучитьРасписаниеРегламентногоЗаданияПоУмолчанию() Экспорт
	
	РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня = 14400;// 4 часа
	РасписаниеРегламентногоЗадания.ПериодПовтораДней = 1; // каждый день
	
	Возврат РасписаниеРегламентногоЗадания;
	
КонецФункции

// Создает или обновляет регламентное задание обмена
//
// Параметры:
//  НастройкаИнтеграции     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Признак включения в результат функции
//                                                                          выгружаемых типов цен.
//  ЗаписатьНастройку       - Булево - Признак для записи ИдентификаторРегламентногоЗадания в НастройкаИнтеграции
//  ОбновитьРасписание      - Булево - Признак для обновления расписания в регламентном задании
//  ОписаниеНастроек        - Структура - Значения настроек интеграции, если не задано, то заполняется из НастройкаИнтеграции
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - Идентификатор регламентного задания
//
Функция СоздатьОбновитьРегламентноеЗаданиеОбмена(НастройкаИнтеграции, ЗаписатьНастройку = Ложь, ОбновитьРасписание = Ложь, ОписаниеНастроек = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОписаниеНастроек = Неопределено Тогда
		ОписаниеНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаИнтеграции,
		"ПометкаУдаления,Наименование,ИдентификаторРегламентногоЗадания,ИспользоватьРегламентныеЗадания,РасписаниеРегламентногоЗадания");
	КонецЕсли;
	
	Если ОписаниеНастроек.ПометкаУдаления Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ОписаниеНастроек.ИспользоватьРегламентныеЗадания Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторРегламентногоЗадания = ОписаниеНастроек.ИдентификаторРегламентногоЗадания;
	
	Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторРегламентногоЗадания);
	Если Задание = Неопределено Тогда
		
		РасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗаданияПоУмолчанию();
		Если ОписаниеНастроек.РасписаниеРегламентногоЗадания <> "" Тогда
			Попытка
				РасписаниеРегламентногоЗадания = ЗначениеИзСтрокиВнутр(ОписаниеНастроек.РасписаниеРегламентногоЗадания);
			Исключение
				РасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗаданияПоУмолчанию();
			КонецПопытки;
		КонецЕсли;
		
		Параметры = Новый Массив;
		Параметры.Добавить(НастройкаИнтеграции.Ссылка);
		
		ПараметрыЗадания = Новый Структура();
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("ИмяМетода", "ОбновитьТоварныйКаталогРегламентнымЗаданием");
		ПараметрыЗадания.Вставить("Параметры", Параметры);
		ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
		ПараметрыЗадания.Вставить("Наименование", ОписаниеНастроек.Наименование);
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеТоварногоКаталогаOzon);
		
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		ИдентификаторРегламентногоЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
		
		Если ЗаписатьНастройку Тогда
			НастройкаИнтеграцииОбъект = НастройкаИнтеграции.ПолучитьОбъект();
			НастройкаИнтеграцииОбъект.ИдентификаторРегламентногоЗадания = ИдентификаторРегламентногоЗадания;
			НастройкаИнтеграцииОбъект.ОбменДанными.Загрузка = Истина;
			НастройкаИнтеграцииОбъект.Записать();
		КонецЕсли;
	ИначеЕсли ОбновитьРасписание = Истина Тогда
		
		РасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗаданияПоУмолчанию();
		Если ОписаниеНастроек.РасписаниеРегламентногоЗадания <> "" Тогда
			Попытка
				РасписаниеРегламентногоЗадания = ЗначениеИзСтрокиВнутр(ОписаниеНастроек.РасписаниеРегламентногоЗадания);
			Исключение
				РасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗаданияПоУмолчанию();
			КонецПопытки;
		КонецЕсли;
		
		Параметры = Новый Массив;
		Параметры.Добавить(НастройкаИнтеграции.Ссылка);
		
		ПараметрыЗадания = Новый Структура();
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Параметры", Параметры);
		ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
		ПараметрыЗадания.Вставить("Наименование", ОписаниеНастроек.Наименование);
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторРегламентногоЗадания, ПараметрыЗадания);
	КонецЕсли;
	
	Возврат ИдентификаторРегламентногоЗадания;
	
КонецФункции

Процедура УдалитьРегламентноеЗаданиеОбмена(НастройкаИнтеграции) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторРегламентногоЗадания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаИнтеграции, "ИдентификаторРегламентногоЗадания");
	
	Если НЕ ЕстьРегламентноеЗаданиеОбмена(НастройкаИнтеграции) Тогда
		Возврат;
	КонецЕсли;
	
	Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторРегламентногоЗадания);
	Если Задание <> Неопределено Тогда
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьРегламентноеЗаданиеОбмена(НастройкаИнтеграции, ИдентификаторРегламентногоЗадания = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда
		ИдентификаторРегламентногоЗадания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаИнтеграции, "ИдентификаторРегламентногоЗадания");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторРегламентногоЗадания);
	Если Задание = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеТоварногоКаталогаOzon;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Возвращает детальную информацию по видам цен, используемым учетной записью Ozon с заполненным значением цены.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для детализации.
//  ВключатьВыгружаемые       - Булево - Признак включения в результат функции выгружаемых видов цен.
//  ВключатьЗагружаемые       - Булево - Признак включения в результат функции загружаемых видов цен.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с запрошенными видами цен и заполненным значением цены.
//                    см.описание функции ТипыЦенOzon()
//
Функция ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, ВключатьВыгружаемые = Истина, ВключатьЗагружаемые = Истина) Экспорт

	ТипыЦен = ТипыЦенOzon(ВключатьВыгружаемые, ВключатьЗагружаемые);

	// Выгружаемые виды цен
	Если ВключатьВыгружаемые Тогда
		Для каждого ВидЦены Из УчетнаяЗаписьМаркетплейса.ВидыЦен Цикл
			Результат = ТипыЦен.НайтиСтроки(Новый Структура("Идентификатор", ВидЦены.ИмяНастройки));
			Если Результат.Количество() = 1 Тогда
				Результат[0].Значение = ВидЦены.ВидЦены;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат ТипыЦен;

КонецФункции

// Возвращает загружаемые типы цен Ozon в виде списка значений.
//
// Возвращаемое значение:
//  СписокЗначений - Список типов цен Ozon.
//
Функция ЗагружаемыеТипыЦенНаOzon() Экспорт

	ТипыЦен = ТипыЦенOzon(Ложь);
	СписокТиповЦенНаOzon = Новый СписокЗначений;
	Для каждого ТипЦен Из ТипыЦен Цикл
		СписокТиповЦенНаOzon.Добавить(ТипЦен.ИдентификаторДляФормул, ТипЦен.Наименование);
	КонецЦикла;

	Возврат СписокТиповЦенНаOzon;

КонецФункции

// Возвращает загружаемые типы цен Ozon, применимые к учетным записям Ozon, в виде массива.
//
// Возвращаемое значение:
//  Массив - Загружаемые типы цен для учетных записей.
//
Функция ПолучитьТипыЦенНаOzonДляУчетныхЗаписей() Экспорт

	Результат = Новый Массив;
	ТипыЦен = ТипыЦенOzon(Ложь);
	ТипыЦенПоУчетнымЗаписям = ТипыЦен.НайтиСтроки(Новый Структура("ДляУчетнойЗаписи", Истина));
	Для каждого ТипЦены Из ТипыЦенПоУчетнымЗаписям Цикл
		Результат.Добавить(ТипЦены.Наименование);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список действующих учетных записей маркетплейсов.
// 
// Возвращаемое значение:
//  СписокЗначений - Не помеченные на удаление учетные записи Ozon.
//
Функция СписокНастроекПодключенияКСервису() Экспорт
	
	СписокНастроек = Новый СписокЗначений;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиМаркетплейсов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(УчетныеЗаписиМаркетплейсов.Ссылка) КАК Наименование
	|ИЗ
	|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
	|ГДЕ
	|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
	|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СписокНастроек;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокНастроек.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокНастроек;
	
КонецФункции

// Возвращает параметра способа задания цены.
// 
// Возвращаемое значение:
//  Структура - параметры способа задания цены.
//
Функция СтруктураПараметровСпособаЗаданияЦены() Экспорт

	СтруктураПараметровСпособаЗаданияЦены = Новый Структура;
	СтруктураПараметровСпособаЗаданияЦены.Вставить("ТипЦеныНаOzon", "");
	СтруктураПараметровСпособаЗаданияЦены.Вставить("УчетнаяЗаписьМаркетплейса",
			ПредопределенноеЗначение("Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка"));
	
	СтруктураПараметровСпособаЗаданияЦены.Вставить("ИмяТипЦеныНаOzon",
			НСтр("ru = 'Тип цены Ozon'"));
	
	СтруктураПараметровСпособаЗаданияЦены.Вставить("ИмяУчетнаяЗаписьМаркетплейса",
			НСтр("ru = 'Учетная запись Ozon'"));
	
	СтруктураПараметровСпособаЗаданияЦены.Вставить("СписокВыбора", ЗагружаемыеТипыЦенНаOzon());

	Возврат СтруктураПараметровСпособаЗаданияЦены;
	
КонецФункции

// Формирует строковое представление товарной позиции Ozon по шаблону.
//
// Параметры:
//  Номенклатура   - СправочникСсылка.Номенклатура - 
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - 
//  Упаковка       - СправочникСсылка.ЕдиницыИзмерения - 
//  ОбъектПубликации - СправочникСсылка.НоменклатураПрисоединенныеФайлы,
//                       - Если указано, то возвращается наименование данного объекта.
// 
// Возвращаемое значение:
//  Строка - Строковое представление товарной позиции Ozon.
//
Функция ПредставлениеТоварнойПозиции(Номенклатура, Характеристика, Упаковка = Неопределено, ОбъектПубликации = Неопределено) Экспорт
    
	Если ЗначениеЗаполнено(ОбъектПубликации) Тогда
		Возврат ОбъектПубликации.Наименование;
	Иначе
		ЧастиПредставления = Новый Массив;
		ЧастиПредставления.Добавить(Номенклатура);
		Если Не Характеристика.Пустая() Тогда
			ЧастиПредставления.Добавить(Характеристика);
		КонецЕсли;

		Возврат СтрСоединить(ЧастиПредставления, ", ");
	КонецЕсли;

КонецФункции

// Проверяет установку соединения с маркетплейсом.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись, подключение которой проверяется.
// 
// Возвращаемое значение:
//  Структура - Содержит свойства КодСостояния и ТекстОшибки.
//
Функция ПроверитьСвязьСМаркетплейсом(УчетнаяЗаписьМаркетплейса) Экспорт

	МассивСкладов = Новый Массив;

	ТекстЗапроса = "v1/warehouse/list";
	СлужебныеПараметры = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ВернутьКодСостояния = Истина;
	ПараметрыЗапроса = Новый Структура("СлужебныеПараметры", СлужебныеПараметры);
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина);

	Результат = Новый Структура("КодСостояния, ТекстОшибки", РезультатЗапроса, "");
	Если РезультатЗапроса = 200 Тогда
		Результат.ТекстОшибки = "OK";
	ИначеЕсли РезультатЗапроса = 301 Тогда
		Результат.ТекстОшибки = "Moved Permanently";
	ИначеЕсли РезультатЗапроса = 400 Тогда
		Результат.ТекстОшибки = "Bad Request";
	ИначеЕсли РезультатЗапроса = 401 Тогда
		Результат.ТекстОшибки = "Unauthorized";
	ИначеЕсли РезультатЗапроса = 403 Тогда
		Результат.ТекстОшибки = "Forbidden";
	ИначеЕсли РезультатЗапроса = 404 Тогда
		Результат.ТекстОшибки = "Not Found";
	ИначеЕсли РезультатЗапроса = 409 Тогда
		Результат.ТекстОшибки = "Conflict";
	ИначеЕсли РезультатЗапроса = 500 Тогда
		Результат.ТекстОшибки = "Internal Server Error";
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выгрузка остатков товарных позиций из ИБ на маркетплейс.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выгрузки.
//  ТаблицаТоваров            - ТаблицаЗначений - Обрабатываемые товарные позиции.
//                                                Подробнее см.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных()
//  НулевыеОстатки            - Булево - Признак выгрузки нулевых остатков вместо фактических значений.
//  ТолькоИзменения           - Булево - Признак выгрузки только измененных значений.
//
Процедура ВыгрузитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров, НулевыеОстатки = Ложь, ТолькоИзменения = Истина) Экспорт


	// Получение настроек учетной записи. Определение необходимости выгрузки.
	ТаблицаСкладов = ПолучитьСопоставленныеСклады(УчетнаяЗаписьМаркетплейса, Ложь);
	Если ТаблицаСкладов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружено сопоставленных складов OZON по учетной записи %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Предупреждение,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УчетнаяЗаписьМаркетплейса));
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ТаблицаСкладов", ТаблицаСкладов);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаСкладов.Группа КАК Справочник.СтруктурныеЕдиницы) КАК Группа,
		|	ВЫРАЗИТЬ(ТаблицаСкладов.Склад КАК Справочник.СтруктурныеЕдиницы) КАК Склад,
		|	ВЫРАЗИТЬ(ТаблицаСкладов.ИдентификаторСклада КАК СТРОКА(50)) КАК ИдентификаторСклада
		|ПОМЕСТИТЬ ТаблицаСкладов
		|ИЗ
		|	&ТаблицаСкладов КАК ТаблицаСкладов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликации.Номенклатура КАК Номенклатура,
		|	СтатусыПубликации.Характеристика КАК Характеристика,
		|	СтатусыПубликации.Упаковка КАК Упаковка,
		|	ТаблицаСкладов.Группа КАК ГруппаСкладов,
		|	ТаблицаСкладов.Склад КАК Склад,
		|	ТаблицаСкладов.ИдентификаторСклада КАК ИдентификаторСклада,
		|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъекта,
		|	СтатусыПубликации.ИдентификаторПубликации КАК ИдентификаторПубликации
		|ПОМЕСТИТЬ ВТНоменклатураСоСкладами
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСкладов КАК ТаблицаСкладов
		|		ПО (ИСТИНА)
		|			И (&ОграничениеПоТаблицеТоваров)
		|ГДЕ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)
		|	И ВЫБОР
		|			КОГДА СтатусыПубликации.ВыгружатьПоНастройкамУчетнойЗаписи
		|				ТОГДА СтатусыПубликации.УчетнаяЗаписьМаркетплейса.ВыгружатьОстатки
		|			ИНАЧЕ СтатусыПубликации.ВыгружатьОстатки
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаТоваров";

	ТекстЗамены = "";
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ТекстЗамены =
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
			|		ПО ТаблицаТоваров.Номенклатура = СтатусыПубликации.Номенклатура
			|			И ТаблицаТоваров.Характеристика = СтатусыПубликации.Характеристика
			|			И ТаблицаТоваров.Упаковка = СтатусыПубликации.Упаковка";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (&ОграничениеПоТаблицеТоваров)", ТекстЗамены);

	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();

	Если НулевыеОстатки Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК Склад,
			|	0 КАК Остаток
			|ПОМЕСТИТЬ ВТЗапасы";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Запасы.Номенклатура КАК Номенклатура,
			|	Запасы.Характеристика КАК Характеристика,
			|	Запасы.СтруктурнаяЕдиница КАК Склад,
			|	СУММА(Запасы.КоличествоОстаток) КАК Остаток
			|ПОМЕСТИТЬ ВТЗапасы
			|ИЗ
			|	РегистрНакопления.Запасы.Остатки(
			|			,
			|			(Номенклатура, Характеристика, СтруктурнаяЕдиница ) В
			|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|					ВТНоменклатураСоСкладами.Номенклатура КАК Номенклатура,
			|					ВТНоменклатураСоСкладами.Характеристика КАК Характеристика,
			|					ВТНоменклатураСоСкладами.Склад КАК Склад
			|				ИЗ
			|					ВТНоменклатураСоСкладами КАК ВТНоменклатураСоСкладами)) КАК Запасы
			|
			|СГРУППИРОВАТЬ ПО
			|	Запасы.Номенклатура,
			|	Запасы.Характеристика,
			|	Запасы.СтруктурнаяЕдиница
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Склад";
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВТНоменклатураСоСкладами.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВТНоменклатураСоСкладами.Номенклатура КАК Номенклатура,
		|	ВТНоменклатураСоСкладами.Характеристика КАК Характеристика,
		|	ВТНоменклатураСоСкладами.Упаковка КАК Упаковка,
		|	ВТНоменклатураСоСкладами.ГруппаСкладов КАК Склад,
		|	ВТНоменклатураСоСкладами.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ВТНоменклатураСоСкладами.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ВТНоменклатураСоСкладами.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СУММА(ЕСТЬNULL(Запасы.Остаток, 0)) КАК Остаток
		|ПОМЕСТИТЬ ВТНоменклатураКВыгрузке
		|ИЗ
		|	ВТНоменклатураСоСкладами КАК ВТНоменклатураСоСкладами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
		|		ПО ВТНоменклатураСоСкладами.Номенклатура = СправочникНоменклатуры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗапасы КАК Запасы
		|		ПО ВТНоменклатураСоСкладами.Номенклатура = Запасы.Номенклатура
		|			И ВТНоменклатураСоСкладами.Характеристика = Запасы.Характеристика
		|			И ВТНоменклатураСоСкладами.Склад = Запасы.Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНоменклатураСоСкладами.УчетнаяЗаписьМаркетплейса,
		|	ВТНоменклатураСоСкладами.Номенклатура,
		|	ВТНоменклатураСоСкладами.Характеристика,
		|	ВТНоменклатураСоСкладами.Упаковка,
		|	ВТНоменклатураСоСкладами.ГруппаСкладов,
		|	ВТНоменклатураСоСкладами.ИдентификаторСклада,
		|	ВТНоменклатураСоСкладами.ИдентификаторОбъекта,
		|	ВТНоменклатураСоСкладами.ИдентификаторПубликации,
		|	СправочникНоменклатуры.ЕдиницаИзмерения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗапасы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНоменклатураСоСкладами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНоменклатураКВыгрузке.Номенклатура КАК Номенклатура,
		|	ОграниченияВыгрузки.ПроцентОстатка КАК ПроцентОстатка,
		|	ОграниченияВыгрузки.СтраховойЗапас КАК СтраховойЗапас,
		|	3 КАК Приоритет
		|ПОМЕСТИТЬ ВТОграниченияВыгрузки
		|ИЗ
		|	ВТНоменклатураКВыгрузке КАК ВТНоменклатураКВыгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОграниченияВыгрузкиОстатковМаркетплейсов КАК ОграниченияВыгрузки
		|		ПО ВТНоменклатураКВыгрузке.Номенклатура = ОграниченияВыгрузки.ОбластьДействия
		|			И (ОграниченияВыгрузки.Используется)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНоменклатураКВыгрузке.Номенклатура,
		|	ОграниченияВыгрузки.ПроцентОстатка,
		|	ОграниченияВыгрузки.СтраховойЗапас,
		|	1
		|ИЗ
		|	ВТНоменклатураКВыгрузке КАК ВТНоменклатураКВыгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
		|		ПО ВТНоменклатураКВыгрузке.Номенклатура = СправочникНоменклатуры.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОграниченияВыгрузкиОстатковМаркетплейсов КАК ОграниченияВыгрузки
		|		ПО (СправочникНоменклатуры.КатегорияНоменклатуры = ОграниченияВыгрузки.ОбластьДействия)
		|			И (ОграниченияВыгрузки.Используется)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОграниченияВыгрузки.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ВТОграниченияВыгрузки.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТПриоритетыОграничений
		|ИЗ
		|	ВТОграниченияВыгрузки КАК ВТОграниченияВыгрузки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОграниченияВыгрузки.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНоменклатураКВыгрузке.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВТНоменклатураКВыгрузке.Номенклатура КАК Номенклатура,
		|	ВТНоменклатураКВыгрузке.Характеристика КАК Характеристика,
		|	ВТНоменклатураКВыгрузке.Упаковка КАК Упаковка,
		|	ВТНоменклатураКВыгрузке.Склад КАК Склад,
		|	ВТНоменклатураКВыгрузке.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ВЫБОР
		|		КОГДА ВТПриоритетыОграничений.Приоритет ЕСТЬ NULL
		|			ТОГДА ВТНоменклатураКВыгрузке.Остаток
		|		КОГДА ВТНоменклатураКВыгрузке.Остаток * ЕСТЬNULL(ВТОграниченияВыгрузки.ПроцентОстатка, 0) / 100 < ВТНоменклатураКВыгрузке.Остаток - ЕСТЬNULL(ВТОграниченияВыгрузки.СтраховойЗапас, 0)
		|			ТОГДА ВТНоменклатураКВыгрузке.Остаток * ЕСТЬNULL(ВТОграниченияВыгрузки.ПроцентОстатка, 0) / 100
		|		ИНАЧЕ ВТНоменклатураКВыгрузке.Остаток - ЕСТЬNULL(ВТОграниченияВыгрузки.СтраховойЗапас, 0)
		|	КОНЕЦ КАК Остаток,
		|	ВТНоменклатураКВыгрузке.Остаток КАК ОстатокБезОграничений,
		|	ВТНоменклатураКВыгрузке.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ВТНоменклатураКВыгрузке.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ВЫБОР
		|		КОГДА ВТПриоритетыОграничений.Приоритет ЕСТЬ NULL
		|			ТОГДА ВТНоменклатураКВыгрузке.Остаток
		|		КОГДА ВТНоменклатураКВыгрузке.Остаток * ЕСТЬNULL(ВТОграниченияВыгрузки.ПроцентОстатка, 0) / 100 < ВТНоменклатураКВыгрузке.Остаток - ЕСТЬNULL(ВТОграниченияВыгрузки.СтраховойЗапас, 0)
		|			ТОГДА ВТНоменклатураКВыгрузке.Остаток * ЕСТЬNULL(ВТОграниченияВыгрузки.ПроцентОстатка, 0) / 100
		|		ИНАЧЕ ВТНоменклатураКВыгрузке.Остаток - ЕСТЬNULL(ВТОграниченияВыгрузки.СтраховойЗапас, 0)
		|	КОНЕЦ <> ЕСТЬNULL(ОстаткиТоваровМаркетплейсов.Количество, 0) КАК ОстатокИзменен
		|ПОМЕСТИТЬ ВыборкаОстатков
		|ИЗ
		|	ВТНоменклатураКВыгрузке КАК ВТНоменклатураКВыгрузке
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетыОграничений КАК ВТПриоритетыОграничений
		|		ПО ВТНоменклатураКВыгрузке.Номенклатура = ВТПриоритетыОграничений.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОграниченияВыгрузки КАК ВТОграниченияВыгрузки
		|		ПО ВТНоменклатураКВыгрузке.Номенклатура = ВТОграниченияВыгрузки.Номенклатура
		|			И (ЕСТЬNULL(ВТПриоритетыОграничений.Приоритет, 0) = ВТОграниченияВыгрузки.Приоритет)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваровМаркетплейсов КАК ОстаткиТоваровМаркетплейсов
		|		ПО ВТНоменклатураКВыгрузке.УчетнаяЗаписьМаркетплейса = ОстаткиТоваровМаркетплейсов.УчетнаяЗаписьМаркетплейса
		|			И ВТНоменклатураКВыгрузке.Номенклатура = ОстаткиТоваровМаркетплейсов.Номенклатура
		|			И ВТНоменклатураКВыгрузке.Характеристика = ОстаткиТоваровМаркетплейсов.Характеристика
		|			И ВТНоменклатураКВыгрузке.Склад = ОстаткиТоваровМаркетплейсов.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНоменклатураКВыгрузке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПриоритетыОграничений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОграниченияВыгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыборкаОстатков.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВыборкаОстатков.Номенклатура КАК Номенклатура,
		|	ВыборкаОстатков.Характеристика КАК Характеристика,
		|	ВыборкаОстатков.Упаковка КАК Упаковка,
		|	ВыборкаОстатков.Склад КАК Склад,
		|	ВыборкаОстатков.ИдентификаторСклада КАК ИдентификаторСклада,
		|	ВЫБОР
		|		КОГДА ВыборкаОстатков.Остаток < 0
		|			ТОГДА 0
		|		ИНАЧЕ ВыборкаОстатков.Остаток
		|	КОНЕЦ КАК Остаток,
		|	ВЫБОР
		|		КОГДА ВыборкаОстатков.Остаток < 0
		|			ТОГДА 0
		|		ИНАЧЕ ВыборкаОстатков.Остаток * &ТекстЗапросаКоэффициентУпаковки
		|	КОНЕЦ КАК ОстатокВУпаковкахOzon,
		|	ВыборкаОстатков.ОстатокБезОграничений КАК ОстатокБезОграничений,
		|	ВыборкаОстатков.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
		|	ВыборкаОстатков.ИдентификаторПубликации КАК ИдентификаторПубликации
		|ИЗ
		|	ВыборкаОстатков КАК ВыборкаОстатков
		|ГДЕ
		|	&ТолькоИзменения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВыборкаОстатков";
	
	Если ТолькоИзменения Тогда
		ТекстЗамены = "ВыборкаОстатков.ОстатокИзменен";
	Иначе
		ТекстЗамены = "ИСТИНА";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТолькоИзменения", ТекстЗамены);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки", "1/ЕстьNull(ВыборкаОстатков.Упаковка.Коэффициент, 1)");

	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();

	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаОстатковИз1С );
	
	Если Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружены товары для выгрузки остатков по учетной записи %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УчетнаяЗаписьМаркетплейса));
			
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
			СкладыСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ТаблицаСкладов, "Склад" );
			ТоварыСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ТаблицаТоваров, "Номенклатура, Характеристика" );
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			ЛогКомментарий = НСтр("ru = 'Не обнаружены товары для выгрузки остатков по складам:'") + Символы.ПС
			+ СкладыСтр + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ "Параметры:" + Символы.ПС + "НулевыеОстатки = " + НулевыеОстатки + "; " + Символы.ПС
			+ "ТолькоИзменения = " + ТолькоИзменения + ";" + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ "ТаблицаТоваров:" + Символы.ПС + ТоварыСтр + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, , ПараметрыКонтекст );
		КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
		СкладыСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ТаблицаСкладов, "Склад" );
		ТоварыСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ТаблицаТоваров, "Номенклатура, Характеристика" );
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		ЛогТоварыОстатки = Результат.Выгрузить();
		ЛогТоварыОстаткиСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ЛогТоварыОстатки );
		ЛогТоварыОстатки = Неопределено;
		
		ЛогКомментарий = НСтр("ru = 'Обнаружены товары для выгрузки остатков по складам:'") + Символы.ПС
		+ СкладыСтр + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ "Параметры:" + Символы.ПС + "НулевыеОстатки = " + НулевыеОстатки + "; " + Символы.ПС
		+ "ТолькоИзменения = " + ТолькоИзменения + ";" + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ "ТаблицаТоваров:" + Символы.ПС + ТоварыСтр + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ "Остатки: " + Символы.ПС + ЛогТоварыОстаткиСтр + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, , ПараметрыКонтекст );
	КонецЕсли;

	// Выгрузка итерациями по 100 элементов.
	// Пока не ясна методика учета пакетов в минуту:
	// - по календарной минуте;
	// - по минуте относительно времени отправки первого запроса;
	// - по минуте относительно времени отправки каждого запроса.
	// Реализация построена по второму варианту.

	ЛимитПозицийНаИтерацию = 100;
	ИтерацийВМинуту = 80;

	СчетчикИтераций = 0;
	ДатаИтерации = ТекущаяДатаСеанса();
	ДанныеИтерации = Новый Структура("stocks", Новый Массив);
	ОтправленныеОстатки = СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	ОтправленныеОстатки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ОтправленныеОстатки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ОтправленныеОстатки.Колонки.Добавить("offer_id", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ОтправленныеОстатки.Колонки.Добавить("product_id", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Любой)));
	ОтправленныеОстатки.Колонки.Добавить("warehouse_id", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Любой)));

	ОтправленныеОстатки.Индексы.Добавить("offer_id, product_id, warehouse_id");

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ДанныеОстатка = Новый Структура;
		ДанныеОстатка.Вставить("offer_id", ""); // Выборка.ИдентификаторПубликации
		ДанныеОстатка.Вставить("product_id", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.ИдентификаторОбъекта));
		ДанныеОстатка.Вставить("stock", Цел(Выборка.ОстатокВУпаковкахOzon));
		ДанныеОстатка.Вставить("warehouse_id", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.ИдентификаторСклада));

		ДанныеИтерации.stocks.Добавить(ДанныеОстатка);
		НоваяСтрока = ОтправленныеОстатки.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.Склад = Выборка.Склад;
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Характеристика = Выборка.Характеристика;
		НоваяСтрока.Количество = Выборка.Остаток;
		НоваяСтрока.offer_id = ДанныеОстатка.offer_id;
		НоваяСтрока.product_id = ДанныеОстатка.product_id;
		НоваяСтрока.warehouse_id = ДанныеОстатка.warehouse_id;
		НоваяСтрока.ВидОбъектаМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");
		Если ДанныеИтерации.stocks.Количество() = ЛимитПозицийНаИтерацию Тогда
			Если ТекущаяДатаСеанса() - ДатаИтерации < 60 Тогда
				СчетчикИтераций = СчетчикИтераций + 1;
			Иначе
				ДатаИтерации = ТекущаяДатаСеанса();
			КонецЕсли;
			
			ОтправитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ОтправленныеОстатки);
			
			ДанныеИтерации = Новый Структура("stocks", Новый Массив);
			ОтправленныеОстатки.Очистить();
			Если СчетчикИтераций = ИтерацийВМинуту Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ДанныеИтерации.stocks.Количество() > 0 Тогда
		ОтправленныеОстатки.Индексы.Добавить("offer_id, product_id, warehouse_id");
		ОтправитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ОтправленныеОстатки);
	КонецЕсли;

КонецПроцедуры

// Загрузка остатки товарных позиций с маркетплейса в ИБ.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для загрузки.
//  ТаблицаТоваров            - ТаблицаЗначений - Обрабатываемые товарные позиции.
//                                                Подробнее см.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных()
//
Процедура ЗагрузитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров) Экспорт

	// Получение настроек учетной записи. Определение необходимости выгрузки.
	ТаблицаСкладов = ПолучитьСопоставленныеСклады(УчетнаяЗаписьМаркетплейса, Ложь);
	Если ТаблицаСкладов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружено сопоставленных складов OZON по учетной записи %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УчетнаяЗаписьМаркетплейса));
		Возврат;
	КонецЕсли;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар) КАК ВидОбъектаМаркетплейса,
	|	СтатусыПубликации.Номенклатура КАК Номенклатура,
	|	СтатусыПубликации.Характеристика КАК Характеристика,
	|	СтатусыПубликации.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
	|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК ОстатокFBS,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК РезервFBS,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК ОстатокFBO,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15, 3)) КАК РезервFBO
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|		ПО СтатусыПубликации.Номенклатура = ТаблицаТоваров.Номенклатура
	|			И СтатусыПубликации.Характеристика = ТаблицаТоваров.Характеристика
	|			И СтатусыПубликации.Упаковка = ТаблицаТоваров.Упаковка
	|ГДЕ
	|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
	|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
	|	И СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)";

	Если ТаблицаТоваров.Количество() = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
			|		ПО СтатусыПубликации.Номенклатура = ТаблицаТоваров.Номенклатура
			|			И СтатусыПубликации.Характеристика = ТаблицаТоваров.Характеристика
			|			И СтатусыПубликации.Упаковка = ТаблицаТоваров.Упаковка",
			"");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружено товаров для загрузки остатков по учетной записи %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УчетнаяЗаписьМаркетплейса));
		Возврат;
	КонецЕсли;

	ЛимитПозицийНаИтерацию = 1000;
	ПоследнийИдентификатор = "";
	Фильтр = Новый Структура("offer_id, product_id, visibility", Новый Массив, Новый Массив, "ALL");
	ДанныеИтерации = Новый Структура("filter, last_id, limit", Фильтр, "", 1000);

	МассивИдентификаторов = Новый Массив;
	ПолученныеОстатки = СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	ПолученныеОстатки.Колонки.Добавить("product_id", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Любой)));
	ПолученныеОстатки.Колонки.Добавить("ОстатокFBO", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ПолученныеОстатки.Колонки.Добавить("РезервFBO", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ПолученныеОстатки.Колонки.Добавить("ОстатокFBS", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	ПолученныеОстатки.Колонки.Добавить("РезервFBS", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ИдентификаторЧислом = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.ИдентификаторОбъектаМаркетплейса);
		МассивИдентификаторов.Добавить(ИдентификаторЧислом);
		НоваяСтрока = ПолученныеОстатки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.product_id = ИдентификаторЧислом;
		Если МассивИдентификаторов.Количество() = ЛимитПозицийНаИтерацию Тогда
			ДанныеИтерации.last_id = ПоследнийИдентификатор;
			ДанныеИтерации.filter.Вставить("product_id", МассивИдентификаторов);
			ПолученныеОстатки.Индексы.Добавить("product_id");
			ПоследнийИдентификатор = ПолучитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ПолученныеОстатки);
			ДанныеИтерации.filter.product_id.Очистить();
			ПолученныеОстатки.Очистить();
			ПолученныеОстатки.Индексы.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если МассивИдентификаторов.Количество() > 0 Тогда
		ДанныеИтерации.filter.Вставить("product_id", МассивИдентификаторов);
		ПолученныеОстатки.Индексы.Добавить("product_id");
		ПолучитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ПолученныеОстатки);
	КонецЕсли;

КонецПроцедуры

// Выгрузка цен товарных позиций из ИБ на маркетплейс.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выгрузки.
//  ТаблицаТоваров            - ТаблицаЗначений - Обрабатываемые товарные позиции.
//                                                Подробнее см.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных()
//  ТолькоИзменения           - Булево - Признак выгрузки только измененных значений.
//
Процедура ВыгрузитьЦеныТоваров(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров, ТолькоИзменения = Истина ) Экспорт

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ТаблицаТоваровПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ТаблицаТоваров, "Номенклатура, Характеристика" );
		
		ЛогКомментарий = НСтр("ru = 'Выгрузка цен товаров:'") + Символы.ПС
		+ "Товары:" + Символы.ПС + ТаблицаТоваровПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С" ) );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, , ЛогПараметры );
	КонецЕсли;

	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);

	Если НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок.Пустая()
		И НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныДоСкидок.Пустая()
		И НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныМинимальныхЦен.Пустая() Тогда
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		НСтр("ru = 'Не установлены виды цен для выгрузки.'"));
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
			ЛогКомментарий = НСтр("ru = 'Не установлены виды цен для выгрузки.'");
			ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С" ) );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, Истина, ЛогПараметры );
		КонецЕсли;
			
		Возврат;
	КонецЕсли;

	ВидыЦен = Новый Массив;
	ВидыЦен.Добавить(НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок);
	ВидыЦен.Добавить(НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныДоСкидок);
	ВидыЦен.Добавить(НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныМинимальныхЦен);

	ТекущаяДата = КонецДня(ТекущаяДатаСеанса());

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТоварыБезЦен
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликации.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	СтатусыПубликации.Номенклатура КАК Номенклатура,
	|	СтатусыПубликации.Характеристика КАК Характеристика,
	|	СтатусыПубликации.Упаковка КАК Упаковка,
	|	СтатусыПубликации.ИдентификаторПубликации КАК ИдентификаторПубликации,
	|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
	|	СтатусыПубликации.ЦенаДоСкидки КАК ЦенаДоСкидки,
	|	СтатусыПубликации.ЦенаСоСкидкой КАК ЦенаСоСкидкой,
	|	СтатусыПубликации.МинимальнаяЦена КАК МинимальнаяЦена,
	|	ВидыЦен.Ссылка КАК ВидЦены
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
	|		ПО (ВидыЦен.Ссылка В (&ВидыЦен))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = СтатусыПубликации.Номенклатура.КатегорияНоменклатуры)
	|			И (&ОграничениеПоТаблицеТоваров)
	|ГДЕ
	|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
	|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
	|	И СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)
	|	И ВЫБОР
	|			КОГДА СтатусыПубликации.ВыгружатьПоНастройкамУчетнойЗаписи
	|				ТОГДА СтатусыПубликации.УчетнаяЗаписьМаркетплейса.ВыгружатьЦены
	|			ИНАЧЕ СтатусыПубликации.ВыгружатьЦены
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыБезЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ЦеныНоменклатуры.ВидЦен, НЕОПРЕДЕЛЕНО) КАК ВидЦены,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент, 1) КАК Цена
	|ПОМЕСТИТЬ ТоварыСЦенами
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				(Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|							ТаблицаТоваров.Характеристика КАК Характеристика
	|						ИЗ
	|							ТаблицаТоваров КАК ТаблицаТоваров)
	|					И ВидЦен В (&ВидыЦен)) КАК ЦеныНоменклатуры
	|		ПО ТаблицаТоваров.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ЦеныНоменклатуры.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	ТаблицаТоваров.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ТаблицаТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
	|	ТаблицаТоваров.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныДоСкидок
	|				ТОГДА ТоварыСЦенами.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЦенаДоСкидки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныСУчетомСкидок
	|				ТОГДА ТоварыСЦенами.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЦенаСоСкидкой,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныМинимальныхЦен
	|				ТОГДА ТоварыСЦенами.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК МинимальнаяЦена
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСЦенами КАК ТоварыСЦенами
	|		ПО ТаблицаТоваров.Номенклатура = ТоварыСЦенами.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТоварыСЦенами.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.УчетнаяЗаписьМаркетплейса,
	|	ТаблицаТоваров.ВидОбъектаМаркетплейса,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.ИдентификаторПубликации,
	|	ТаблицаТоваров.ИдентификаторОбъектаМаркетплейса,
	|	ТаблицаТоваров.ЦенаДоСкидки,
	|	ТаблицаТоваров.ЦенаСоСкидкой,
	|	ТаблицаТоваров.МинимальнаяЦена";
	
	Если ТолькоИзменения Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ИМЕЮЩИЕ
		|	(МАКСИМУМ(ВЫБОР
		|				КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныДоСкидок
		|					ТОГДА ТоварыСЦенами.Цена
		|				ИНАЧЕ 0
		|			КОНЕЦ) <> ТаблицаТоваров.ЦенаДоСкидки
		|		ИЛИ МАКСИМУМ(ВЫБОР
		|				КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныСУчетомСкидок
		|					ТОГДА ТоварыСЦенами.Цена
		|				ИНАЧЕ 0
		|			КОНЕЦ) <> ТаблицаТоваров.ЦенаСоСкидкой
		|		ИЛИ МАКСИМУМ(ВЫБОР
		|				КОГДА ТоварыСЦенами.ВидЦены = &ВидЦеныМинимальныхЦен
		|					ТОГДА ТоварыСЦенами.Цена
		|				ИНАЧЕ 0
		|			КОНЕЦ) <> ТаблицаТоваров.МинимальнаяЦена)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("ДатаЦен", ТекущаяДата);
	Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
	Запрос.УстановитьПараметр("ВидЦеныДоСкидок", НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныДоСкидок);
	Запрос.УстановитьПараметр("ВидЦеныСУчетомСкидок", НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок);
	Запрос.УстановитьПараметр("ВидЦеныМинимальныхЦен", НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныМинимальныхЦен);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);

	ТекстЗамены = "";
	Если ТаблицаТоваров.Количество() > 0 Тогда
		ТекстЗамены =
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыБезЦен КАК ТоварыБезЦен
			|		ПО ТоварыБезЦен.Номенклатура = СтатусыПубликации.Номенклатура
			|			И ТоварыБезЦен.Характеристика = СтатусыПубликации.Характеристика
			|			И ТоварыБезЦен.Упаковка = СтатусыПубликации.Упаковка";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (&ОграничениеПоТаблицеТоваров)", ТекстЗамены);

	Запрос.Текст = ТекстЗапроса;

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружено товаров для выгрузки цен по учетной записи %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, УчетнаяЗаписьМаркетплейса));
			
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
			ЛогКомментарий = НСтр("ru = 'Не обнаружено товаров для выгрузки цен.'");
			ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С" ) );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, Ложь, ЛогПараметры );
		КонецЕсли;
			
		Возврат;
	КонецЕсли;

	ПредставлениеВалюты = "RUB";
	ЛимитПозицийНаИтерацию = 1000;

	ДанныеИтерации = Новый Структура("prices", Новый Массив);
	ОтправленныеЦены = СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	ОтправленныеЦены.Колонки.Добавить("offer_id", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	ОтправленныеЦены.Колонки.Добавить("product_id", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Любой)));
	ОтправленныеЦены.Колонки.Добавить("ЦенаДоСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	ОтправленныеЦены.Колонки.Добавить("ЦенаСоСкидкой", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	ОтправленныеЦены.Колонки.Добавить("МинимальнаяЦена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
	ОтправленныеЦены.Индексы.Добавить("offer_id, product_id");

	Выборка = Результат.Выбрать();
    
    // выгрузка цен по product_id
	Пока Выборка.Следующий() Цикл
		ДанныеЦены = Новый Структура;
		ДанныеЦены.Вставить("auto_action_enabled", "UNKNOWN");
		ДанныеЦены.Вставить("currency_code", ПредставлениеВалюты);
		ДанныеЦены.Вставить("min_price", Формат(Выборка.МинимальнаяЦена, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
		ДанныеЦены.Вставить("offer_id", "");
		ДанныеЦены.Вставить("old_price", Формат(Выборка.ЦенаДоСкидки, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
		ДанныеЦены.Вставить("price", Формат(Выборка.ЦенаСоСкидкой, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ="));
		ДанныеЦены.Вставить("product_id", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.ИдентификаторОбъектаМаркетплейса));

		ДанныеИтерации.prices.Добавить(ДанныеЦены);

		НоваяСтрока = ОтправленныеЦены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.МинимальнаяЦена = Выборка.МинимальнаяЦена;
		НоваяСтрока.ЦенаДоСкидки = Выборка.ЦенаДоСкидки;
		НоваяСтрока.ЦенаСоСкидкой = Выборка.ЦенаСоСкидкой;
		НоваяСтрока.offer_id = ДанныеЦены.offer_id;
		НоваяСтрока.product_id = ДанныеЦены.product_id;

		Если ДанныеИтерации.prices.Количество() = ЛимитПозицийНаИтерацию Тогда
			ОтправитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ОтправленныеЦены);
			ДанныеИтерации.prices.Очистить();
			ОтправленныеЦены.Очистить();
			ОтправленныеЦены.Индексы.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ДанныеИтерации.prices.Количество() > 0 Тогда
		ОтправитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, ОтправленныеЦены);
	КонецЕсли;

КонецПроцедуры

//  Возвращает информацию о счетчике выгрузки товаров.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для получения информации о счетчике.
// 
// Возвращаемое значение:
//  Структура - Структура формата:
//  ЗначениеУстановлено - Булево - Признак, что метод API успешно вернул результат;
//  Остаток - Число - Остаток счетчика;
//  ВремяСброса - Дата - Дата сброса счетчика;
//  Значение - Число - Номинальное значение счетчика.
//
Функция ПолучитьСчетчикВыгрузки(УчетнаяЗаписьМаркетплейса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СлужебныеПараметры = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата = "reset_at";
	ПараметрыЗапроса = Новый Структура("СлужебныеПараметры", СлужебныеПараметры);
	Результат = Новый Структура;
	Результат.Вставить("ЗначениеУстановлено", Ложь);
	Результат.Вставить("Использовано", 0);
	Результат.Вставить("Остаток", 0);
	Результат.Вставить("ВремяСброса", '00010101000000');
	Результат.Вставить("Значение", 0);
	
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПолучениеЛимитовЗагрузки );
	
	ТекстЗапроса = "v4/product/info/limit";
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина
	, ПараметрыКонтекст	);

	Если РезультатЗапроса <> Неопределено Тогда
		Результат.ЗначениеУстановлено = Истина;
		Результат.Использовано = РезультатЗапроса[ "daily_update" ][ "usage" ];
		Результат.ВремяСброса = РезультатЗапроса[ "daily_update" ][ "reset_at" ];
		Результат.Значение = РезультатЗапроса[ "daily_update" ][ "limit" ];
		Результат.Остаток = Результат.Значение - Результат.Использовано;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Перенос товарных позиций из списка доступных для продажи в архив. 
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выполнения операции.
//  ТаблицаТоваров            - ТаблицаЗначений - Обрабатываемые товарные позиции.
//                                                Подробнее см.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных()
// 
// Возвращаемое значение:
//  Структура - Результат выполнения.
//              Подробнее см.НоваяОшибка()
//
Функция ПеренестиТоварыВАрхив(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров) Экспорт

	ОписаниеОшибки = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТоварыКПереносу
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&УчетнаяЗапись КАК УчетнаяЗаписьМаркетплейса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар) КАК ВидОбъектаМаркетплейса,
	|	ТоварыКПереносу.Номенклатура КАК Номенклатура,
	|	ТоварыКПереносу.Характеристика КАК Характеристика,
	|	ТоварыКПереносу.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
	|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК product_id
	|ИЗ
	|	ТоварыКПереносу КАК ТоварыКПереносу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|			И ТоварыКПереносу.Номенклатура = СтатусыПубликации.Номенклатура
	|			И ТоварыКПереносу.Характеристика = СтатусыПубликации.Характеристика
	|			И ТоварыКПереносу.Упаковка = СтатусыПубликации.Упаковка
	|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|			И (СтатусыПубликации.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве))
	|ГДЕ
	|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса <> """"";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьМаркетплейса);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ОписаниеОшибки.КодОшибки = 1;
		ОписаниеОшибки.ОписаниеОшибки = НСтр("ru = 'Доступные для переноса в архив товары не найдены. Переносить можно только товары, не находящиеся в архиве.'");
		Возврат ОписаниеОшибки;
	КонецЕсли;

	ЕстьОшибки = Ложь;
	ЛимитПозицийНаИтерацию = 500;

	СведенияОВыгруженныхДанных = СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	ИдентификаторыТоваров = Новый Массив;
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ИдентификаторыТоваров.Добавить(Выборка.product_id);
		НоваяСтрока = СведенияОВыгруженныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ИдентификаторыТоваров.Количество() = ЛимитПозицийНаИтерацию Тогда
			ДанныеИтерации = Новый Структура("product_id", ИдентификаторыТоваров);
			ВыгрузитьПорциюТоваровВАрхив(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных, ЕстьОшибки);
			ИдентификаторыТоваров.Очистить();
			СведенияОВыгруженныхДанных.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ИдентификаторыТоваров.Количество() > 0 Тогда
		ДанныеИтерации = Новый Структура("product_id", ИдентификаторыТоваров);
		ВыгрузитьПорциюТоваровВАрхив(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных, ЕстьОшибки);
	КонецЕсли;

	Если ЕстьОшибки Тогда
		ОписаниеОшибки.КодОшибки = 2;
		ОписаниеОшибки.ОписаниеОшибки = НСтр("ru = 'При переносе товаров в архив возникли ошибки.
			|Подробности см. в журнале регистрации.'");
	КонецЕсли;

	Возврат ОписаниеОшибки;

КонецФункции

// Возврат товаров из архива.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выполнения операции.
//  ТаблицаТоваров            - ТаблицаЗначений - Обрабатываемые товарные позиции.
//                                                Подробнее см.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных()
//
Процедура ВернутьТоварыИзАрхива(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТоварыКПереносу
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&УчетнаяЗапись КАК УчетнаяЗаписьМаркетплейса,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар) КАК ВидОбъектаМаркетплейса,
	|	ТоварыКПереносу.Номенклатура КАК Номенклатура,
	|	ТоварыКПереносу.Характеристика КАК Характеристика,
	|	ТоварыКПереносу.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
	|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК product_id
	|ИЗ
	|	ТоварыКПереносу КАК ТоварыКПереносу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|			И ТоварыКПереносу.Номенклатура = СтатусыПубликации.Номенклатура
	|			И ТоварыКПереносу.Характеристика = СтатусыПубликации.Характеристика
	|			И ТоварыКПереносу.Упаковка = СтатусыПубликации.Упаковка
	|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|			И (СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве))";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьМаркетплейса);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ЛимитПозицийНаИтерацию = 500;

	СведенияОВыгруженныхДанных = СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	ИдентификаторыТоваров = Новый Массив;
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ИдентификаторыТоваров.Добавить(Выборка.product_id);
		НоваяСтрока = СведенияОВыгруженныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ИдентификаторыТоваров.Количество() = ЛимитПозицийНаИтерацию Тогда
			ДанныеИтерации = Новый Структура("product_id", ИдентификаторыТоваров);
			ВыгрузитьПорциюТоваровИзАрхива(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных);
			ИдентификаторыТоваров.Очистить();
			СведенияОВыгруженныхДанных.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ИдентификаторыТоваров.Количество() > 0 Тогда
		ДанныеИтерации = Новый Структура("product_id", ИдентификаторыТоваров);
		ВыгрузитьПорциюТоваровИзАрхива(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных);
	КонецЕсли;

КонецПроцедуры

// Возвращает коды ошибок.
// 
// Возвращаемое значение:
//  Структура - описания ошибок.
//
Функция КодыОшибокРегистраСтатусовПубликацииТоваров() Экспорт

	КодыОшибок = Новый Структура;
	КодыОшибок.Вставить("ОшибкаЗаполненияДанных", "Ошибка_заполнения_данных_в_1С");
	КодыОшибок.Вставить("ОшибкаПубликацииТоваров", "Ошибка_публикации");
	КодыОшибок.Вставить("ОшибкаЗагрузкиСертификата", "Ошибка_загрузки_сертификата");
	КодыОшибок.Вставить("ОшибкаВыборкиТоваров", "Ошибка_выборки_товаров");
	КодыОшибок.Вставить("ОшибкаПереносаТоваров", "Ошибка_переноса_в_архив");
	КодыОшибок.Вставить("ОшибкаВозвратаТоваров", "Ошибка_возврата_из_архива");
	КодыОшибок.Вставить("ОшибкаУдаленияТоваров", "Ошибка_удаления_товаров");
	КодыОшибок.Вставить("ОшибкаОбновлениеДанныхЗапрещено", "Ошибка_обновление_данных_торговой_площадки_запрещено");
	КодыОшибок.Вставить("ОшибкаПрочие", "Ошибка_прочие");

	Возврат КодыОшибок;

КонецФункции

Функция УдалитьТоварИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon( УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка ) Экспорт

	#Область ПроверкаВходящихПараметров
	ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( УчетнаяЗаписьМаркетплейса, ,
	Тип( "СправочникСсылка.УчетныеЗаписиМаркетплейсов" ),
	Истина, Истина, "Функция <УдалитьТоварИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon>: Переменная <УчетнаяЗаписьМаркетплейса>: " );
	
	ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( Номенклатура, ,
	Тип( "СправочникСсылка.Номенклатура" ),
	Истина, Истина, "Функция <УдалитьТоварИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon>: Переменная <Номенклатура>: " );
	
	ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( Характеристика, ,
	Тип( "СправочникСсылка.ХарактеристикиНоменклатуры" ),
	Ложь, Истина, "Функция <УдалитьТоварИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon>: Переменная <Характеристика>: " );
	
	ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( Упаковка, ,
	Тип( "СправочникСсылка.ЕдиницыИзмерения" ),
	Ложь, Истина, "Функция <УдалитьТоварИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon>: Переменная <Упаковка>: " );
	#КонецОбласти

	УчетнаяЗаписьМаркетплейсаПредставление = Строка( УчетнаяЗаписьМаркетплейса );
	НоменклатураПредставление = Строка( Номенклатура );
	ХарактеристикаПредставление = Строка( Характеристика );
	УпаковкаПредставление = Строка( Упаковка );
	
	НачатьТранзакцию();
	
	Попытка
	
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
		ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса",УчетнаяЗаписьМаркетплейса);
		ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", Номенклатура);
		ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", Характеристика);
		ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка", Упаковка);
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗаписьМаркетплейса);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(Характеристика);
		НаборЗаписей.Отбор.Упаковка.Установить(Упаковка);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
	
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(
		НСтр("ru = '%1: При удалении товара %2 возникла ошибка: %3'"),
		УчетнаяЗаписьМаркетплейсаПредставление,
		НоменклатураПредставление + ";" + ХарактеристикаПредставление + ";" + УпаковкаПредставление + ";",
		ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() ));
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения );
		
		ОбщегоНазначения.СообщитьПользователю( ТекстСообщения );
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция УдалитьТоварыИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon( Товары ) Экспорт
	
	#Область ПроверкаВходящихПараметров
	ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( Товары, ,
	Тип( "Массив" ),
	Истина, Истина, "Функция <УдалитьТоварыИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon>: Переменная <Товары>: " );
	#КонецОбласти
	
	ЕстьОшибки = Ложь;
	Для Каждого ТоварыЭлемент Из Товары Цикл
		
		ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( ТоварыЭлемент, ,
		Тип( "РегистрСведенийКлючЗаписи.СтатусыПубликацииОбъектовМаркетплейсаOzon" ),
		Истина, Истина, "Функция <УдалитьТоварыИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon>: Переменная <ТоварыЭлемент>: " );
		
		УчетнаяЗаписьМаркетплейса = ТоварыЭлемент.УчетнаяЗаписьМаркетплейса;
		Номенклатура = ТоварыЭлемент.Номенклатура;
		Характеристика = ТоварыЭлемент.Характеристика;
		Упаковка = ТоварыЭлемент.Упаковка;
		
		#Область ПроверкаВходящихПараметров
		ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( УчетнаяЗаписьМаркетплейса, ,
		Тип( "СправочникСсылка.УчетныеЗаписиМаркетплейсов" ),
		Истина, Истина, "Функция <УдалитьТоварыИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon>: Переменная <УчетнаяЗаписьМаркетплейса>: " );

		ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( Номенклатура, ,
		Тип( "СправочникСсылка.Номенклатура" ),
		Истина, Истина, "Функция <УдалитьТоварыИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon>: Переменная <Номенклатура>: " );

		ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( Характеристика, ,
		Тип( "СправочникСсылка.ХарактеристикиНоменклатуры" ),
		Ложь, Истина, "Функция <УдалитьТоварыИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon>: Переменная <Характеристика>: " );

		ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( Упаковка, ,
		Тип( "СправочникСсылка.ЕдиницыИзмерения" ),
		Ложь, Истина, "Функция <УдалитьТоварыИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon>: Переменная <Упаковка>: " );
		#КонецОбласти
		
        УдалениеТовараРезультат = ИнтеграцияСМаркетплейсомOzonСервер.УдалитьТоварИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon(
        УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка );
        
		Если УдалениеТовараРезультат <> Истина Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
        
	КонецЦикла;
	
	Возврат Не ЕстьОшибки;
КонецФункции
// Удаление товаров с маркетплейса.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выполнения операции.
//  ТаблицаТоваров            - ТаблицаЗначений - Обрабатываемые товарные позиции.
//                                                Подробнее см.СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных()
// 
// Возвращаемое значение:
//  Структура - Результат выполнения.
//              Подробнее см.НоваяОшибка()
//
Функция УдалитьТовары(УчетнаяЗаписьМаркетплейса, ТаблицаТоваров) Экспорт

	ОписаниеОшибки = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
	|ПОМЕСТИТЬ ТоварыКПереносу
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликации.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	ТоварыКПереносу.Номенклатура КАК Номенклатура,
	|	ТоварыКПереносу.Характеристика КАК Характеристика,
	|	ТоварыКПереносу.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
	|	СтатусыПубликации.ИдентификаторПубликации КАК offer_id
	|ИЗ
	|	ТоварыКПереносу КАК ТоварыКПереносу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|			И ТоварыКПереносу.Номенклатура = СтатусыПубликации.Номенклатура
	|			И ТоварыКПереносу.Характеристика = СтатусыПубликации.Характеристика
	|			И ТоварыКПереносу.Упаковка = СтатусыПубликации.Упаковка
	|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|			И (СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве))
	|			И (ВЫБОР
	|				КОГДА СтатусыПубликации.ВыгружатьПоНастройкамУчетнойЗаписи
	|					ТОГДА СтатусыПубликации.УчетнаяЗаписьМаркетплейса.ВыгружатьОписаниеТовара
	|				ИНАЧЕ СтатусыПубликации.ВыгружатьОписаниеТовара
	|			КОНЕЦ)
	|			И (СтатусыПубликации.ИдентификаторFBOSKU = """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликации.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	ТоварыКПереносу.Номенклатура КАК Номенклатура,
	|	ТоварыКПереносу.Характеристика КАК Характеристика,
	|	ТоварыКПереносу.Упаковка КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
	|	СтатусыПубликации.ИдентификаторПубликации КАК offer_id
	|ИЗ
	|	ТоварыКПереносу КАК ТоварыКПереносу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
	|			И ТоварыКПереносу.Номенклатура = СтатусыПубликации.Номенклатура
	|			И ТоварыКПереносу.Характеристика = СтатусыПубликации.Характеристика
	|			И ТоварыКПереносу.Упаковка = СтатусыПубликации.Упаковка
	|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|			И (СтатусыПубликации.ИдентификаторFBOSKU = """")
	|			И (СтатусыПубликации.ИдентификаторFBSSKU = """")
	|			И (СтатусыПубликации.ДатаСозданияНаМаркетплейсе = ДАТАВРЕМЯ(1, 1, 1))
	|			И (СтатусыПубликации.ЗаданиеПубликации = """")
	|			И (СтатусыПубликации.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве))";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьМаркетплейса);
	ПакетРезультата = Запрос.ВыполнитьПакет();
	Результат = ПакетРезультата[ПакетРезультата.ВГраница() - 1];
	РезультатНеАрхивныхПозиций = ПакетРезультата[ПакетРезультата.ВГраница()];
	
	ТоварыДляУдаленияКоличество = ТаблицаТоваров.Количество();
	АктивныеТоварыКоличество = Результат.Выгрузить().Количество();
	НеАктивныеТоварыКоличество = РезультатНеАрхивныхПозиций.Выгрузить().Количество();
	ВсеВыбранныеТоварыМожноУдалить = Истина;
	Если ТоварыДляУдаленияКоличество <> АктивныеТоварыКоличество + НеАктивныеТоварыКоличество Тогда
		ВсеВыбранныеТоварыМожноУдалить = Ложь;
	КонецЕсли;
	
	СтатусАрхив = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве");
	Если ВсеВыбранныеТоварыМожноУдалить = Ложь Тогда
		ОписаниеОшибки.КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаВыборкиТоваров;
		Шаблон = НСтр("ru = 'Не все выбранные товары можно удалить. Удалять можно только товары с незаполненными идентификаторами товара площадки маркетплейса Ozon (SKU FBO и SKU FBS), имеющие статус ""%1"".'");
		ОписаниеОшибки.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,	СтатусАрхив);
	ИначеЕсли Результат.Пустой() И РезультатНеАрхивныхПозиций.Пустой() Тогда
		ОписаниеОшибки.КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаВыборкиТоваров;
		Шаблон = НСтр("ru = 'Доступные для удаления товары не найдены. Удалять можно только товары с незаполненными идентификаторами товара площадки маркетплейса Ozon (SKU FBO и SKU FBS), имеющие статус ""%1"".'");
		ОписаниеОшибки.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтатусАрхив);
		Возврат ОписаниеОшибки;
	КонецЕсли;

	ЕстьОшибки = Ложь;

	// Удаление архивных товаров.
	ЛимитПозицийНаИтерацию = 500;

	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(250, ДопустимаяДлина.Переменная));
	СведенияОВыгруженныхДанных = СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных();
	СведенияОВыгруженныхДанных.Колонки.Добавить("offer_id", ОписаниеТипаСтрока250);
	ИдентификаторыТоваров = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторыТоваров.Добавить(Новый Структура("offer_id", Выборка.offer_id));
		НоваяСтрока = СведенияОВыгруженныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ИдентификаторыТоваров.Количество() = ЛимитПозицийНаИтерацию Тогда
			ДанныеИтерации = Новый Структура("products", ИдентификаторыТоваров);
			УдалитьПорциюТоваров(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных, ЕстьОшибки);
			ИдентификаторыТоваров.Очистить();
			СведенияОВыгруженныхДанных.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если ИдентификаторыТоваров.Количество() > 0 Тогда
		ДанныеИтерации = Новый Структура("products", ИдентификаторыТоваров);
		УдалитьПорциюТоваров(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных, ЕстьОшибки);
	КонецЕсли;

	// Удаление неархивных товаров.
	Выборка = РезультатНеАрхивныхПозиций.Выбрать();
	Пока Выборка.Следующий() Цикл
        
        УдалениеТовараРезультат = УдалитьТоварИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon( УчетнаяЗаписьМаркетплейса, Выборка.Номенклатура, Выборка.Характеристика, Выборка.Упаковка );
        Если УдалениеТовараРезультат <> Истина Тогда
        	ЕстьОшибки = Истина;
        КонецЕсли;
		
	КонецЦикла;

	Если ЕстьОшибки Тогда
		ОписаниеОшибки.КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаУдаленияТоваров;
		ОписаниеОшибки.ОписаниеОшибки = 
		НСтр("ru = 'При удалении товаров возникли ошибки.
              |Подробности см. в журнале регистрации.'");
	КонецЕсли;

	Возврат ОписаниеОшибки;

КонецФункции

// Формирует список настроек учетной записи. 
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выполнения операции.
//  ТолькоЗагружаемые         - Булево - Признак удаления выгружаемых видов цен из результата.
// 
// Возвращаемое значение:
//  Структура - Настройки учетной записи.
//
Функция НастройкиУчетнойЗаписиСЗагружаемымиВидамиЦен(УчетнаяЗаписьМаркетплейса, ТолькоЗагружаемые = Ложь) Экспорт

	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);

	ВидыЦен = НастройкиУчетнойЗаписи.ВидыЦен;
	Если ТолькоЗагружаемые Тогда
		ВидыЦен.Очистить();
	КонецЕсли;
	ТипыЦен = ТипыЦенOzon(Ложь);
	Для каждого ТипЦены Из ТипыЦен Цикл
		ВидыЦен.Вставить(ТипЦены.Идентификатор, ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
	КонецЦикла;
    
    Возврат НастройкиУчетнойЗаписи;
КонецФункции

// Возвращает список используемых видов цен. 
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - Учетная запись для выполнения операции.
// 
// Возвращаемое значение:
//  Массив - Список используемых видов цен, исключая незаполненные.
//
Функция ИспользуемыеВидыЦен(УчетнаяЗаписьМаркетплейса) Экспорт

	НастройкиУчетнойЗаписи = НастройкиУчетнойЗаписиСЗагружаемымиВидамиЦен(УчетнаяЗаписьМаркетплейса);

	ВидыЦен = Новый Массив;
	Для каждого ВидЦены Из НастройкиУчетнойЗаписи.ВидыЦен Цикл
		Если Не ВидЦены.Значение.Пустая() Тогда
			ВидыЦен.Добавить(ВидЦены.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат ВидыЦен;

КонецФункции

// Формирует настройки по-умолчанию для вывода цен и остатков в форме публикации товаров.
//
// Возвращаемое значение:
//  Структура - Настройки отображения остатков и цен в таблице и информационных полях.
//
Функция НовыеПараметрыОтображенияОстатковЦен() Экспорт

	Результат = Новый Структура();

	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ОстатокПоУчету", Истина, Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ОстатокНаOzon", Истина, Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ОстатокFBO", Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ОстатокFBS", Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаСоСкидкой", Истина, Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаДоСкидки", Истина, Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "МинимальнаяЦена", Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаСУчетомАкцийПродавца", Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаСУчетомВсехАкций", Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "РекомендованнаяЦена", Истина);
	ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(Результат, "ЦенаПоставщика", Истина);
	
	Результат.Вставить("ОстаткиИнфоПоля", Новый Массив);
	Результат.Вставить("ОстаткиПодсказки", Новый Массив);
	Результат.Вставить("ЦеныИнфоПоля", Новый Массив);
	Результат.Вставить("ЦеныПодсказки", Новый Массив);

	Возврат Результат;

КонецФункции


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс  

Функция СопоставлениеКатегорийТоваровКоличество( УчетнаяЗапись ) Экспорт
	Результат = 0;
	ЗапросТекст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоСопоставлено
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
	|ГДЕ
	|	СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = &ВидОбъектаМаркетплейса
	|	И СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";
	
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	Запрос.УстановитьПараметр( "ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров" ) );
	ЗапросВыборка = Запрос.Выполнить().Выбрать();
	Если ЗапросВыборка.Следующий() Тогда
		Если ЗапросВыборка.КоличествоСопоставлено <> Null Тогда
			Результат = ЗапросВыборка.КоличествоСопоставлено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПояснениеДляТекстаПоКлючевымСловам(Текст)
	Пояснение = "";
	Если Найти(Текст,"OVER_MAX_OVH_NON_KGT") > 0 Тогда
		Пояснение=НСтр("ru = 'Крупногабаритный товар не может продаваться с указанного склада'");
	КонецЕсли;

	Если Найти(Текст, Пояснение) > 0 Тогда
		Пояснение="";
	КонецЕсли;

	Возврат Пояснение;
КонецФункции

Процедура ОтправитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса, СведенияОВыгруженныхДанных)

	ТекстЗапроса = "v2/products/stocks";
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаОстатковИз1С );
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина, ПараметрыКонтекст );
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаВыгрузки = ТекущаяДатаСеанса();
	Для Каждого ЭлементРезультата Из РезультатЗапроса[ "result" ] Цикл
	
		СтруктураПоиска = Новый Структура("product_id, warehouse_id", // offer_id
		// ЭлементРезультата[ "offer_id" ],
		ЭлементРезультата[ "product_id" ],
		ЭлементРезультата[ "warehouse_id" ]);
		
		РезультатПоиска = СведенияОВыгруженныхДанных.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРезультатаПоиска = РезультатПоиска[0];
		Если ЭлементРезультата[ "updated" ] Тогда
		
			МенеджерЗаписи = РегистрыСведений.ОстаткиТоваровМаркетплейсов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаРезультатаПоиска);
			МенеджерЗаписи.ДатаВыгрузкиОстатков = ДатаВыгрузки;
			МенеджерЗаписи.Записать(Истина);
			
		Иначе
		
			МассивОшибок = Новый Массив;
			Для Каждого ЭлементСпискаОшибок Из ЭлементРезультата[ "errors" ] Цикл
				ОшибкаКодИТекст = "" + ЭлементСпискаОшибок[ "code" ] + ": " + ЭлементСпискаОшибок[ "message" ];
				
				ПояснениеТекстаОшибки=ПолучитьПояснениеДляТекстаПоКлючевымСловам(ОшибкаКодИТекст);
				Если Не ПустаяСтрока(ПояснениеТекстаОшибки) Тогда
					ОшибкаКодИТекст = ОшибкаКодИТекст + " ( " + ПояснениеТекстаОшибки + " )"
				КонецЕсли;
				
				МассивОшибок.Добавить(ОшибкаКодИТекст);
			КонецЦикла;
			
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При выгрузке остатка товара %1 по складу %2 произошла ошибка:'"),
			ПредставлениеТоварнойПозиции(СтрокаРезультатаПоиска.Номенклатура, СтрокаРезультатаПоиска.Характеристика, СтрокаРезультатаПоиска.Упаковка),
			СтрокаРезультатаПоиска.Склад);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке + Символы.ПС + СтрСоединить(МассивОшибок, Символы.ПС));
			
			Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
				ЛогКомментарий = СообщениеОбОшибке + ": " + СтрСоединить(МассивОшибок, Символы.ПС);
				ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаОстатковИз1С" ) );
				ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, Истина, ЛогПараметры );
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПорциюОстатков(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса, СведенияОВыгруженныхДанных)

	ТекстЗапроса = "v3/product/info/stocks";
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ЗагрузкаОстатковВ1С );
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина, ПараметрыКонтекст );
	Если РезультатЗапроса = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ДатаЗагрузки = ТекущаяДатаСеанса();
	Для Каждого ЭлементРезультата Из РезультатЗапроса[ "result" ][ "items" ] Цикл
		СтруктураПоиска = Новый Структура("product_id", ЭлементРезультата[ "product_id" ] );
		РезультатПоиска = СведенияОВыгруженныхДанных.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРезультатаПоиска = РезультатПоиска[0];
		Для Каждого ОстаткиПоТипуСклада Из ЭлементРезультата[ "stocks" ] Цикл
			Если ОстаткиПоТипуСклада[ "type" ] = "fbo" Тогда
				СтрокаРезультатаПоиска.ОстатокFBO = СтрокаРезультатаПоиска.ОстатокFBO + ОстаткиПоТипуСклада[ "present" ];
				СтрокаРезультатаПоиска.РезервFBO = СтрокаРезультатаПоиска.РезервFBO + ОстаткиПоТипуСклада[ "reserved" ];
			ИначеЕсли ОстаткиПоТипуСклада[ "type" ] = "fbs" Тогда
				СтрокаРезультатаПоиска.ОстатокFBS = СтрокаРезультатаПоиска.ОстатокFBS + ОстаткиПоТипуСклада[ "present" ];
				СтрокаРезультатаПоиска.РезервFBS = СтрокаРезультатаПоиска.РезервFBS + ОстаткиПоТипуСклада[ "reserved" ];
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаОстатка Из СведенияОВыгруженныхДанных Цикл
			МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаОстатка);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.ОстатокFBO = СтрокаОстатка.ОстатокFBO;
				МенеджерЗаписи.РезервFBO = СтрокаОстатка.РезервFBO;
				МенеджерЗаписи.ОстатокFBS = СтрокаОстатка.ОстатокFBS;
				МенеджерЗаписи.РезервFBS = СтрокаОстатка.РезервFBS;
				МенеджерЗаписи.ДатаАктуальностиОстатковМаркетплейса = ДатаЗагрузки;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат РезультатЗапроса[ "result" ][ "last_id" ];

КонецФункции

Процедура ОтправитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса, СведенияОВыгруженныхДанных)

	ТекстЗапроса = "v1/product/import/prices";
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С );
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, Истина, ПараметрыКонтекст );
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
    // запишем результат отправки цен
	ДатаВыгрузки = ТекущаяДатаСеанса();
	Для Каждого ЭлементРезультата Из РезультатЗапроса[ "result" ] Цикл
		СтруктураПоиска = Новый Структура( "product_id", ЭлементРезультата[ "product_id" ] );
		РезультатПоиска = СведенияОВыгруженныхДанных.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРезультатаПоиска = РезультатПоиска[0];
		Если ЭлементРезультата[ "updated" ] Тогда
		
			МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаРезультатаПоиска);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.ЦенаДоСкидки = СтрокаРезультатаПоиска.ЦенаДоСкидки;
				МенеджерЗаписи.ЦенаСоСкидкой = СтрокаРезультатаПоиска.ЦенаСоСкидкой;
				МенеджерЗаписи.МинимальнаяЦена = СтрокаРезультатаПоиска.МинимальнаяЦена;
				МенеджерЗаписи.ДатаВыгрузкиЦенПродажи = ДатаВыгрузки;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
			
		Иначе
		
			МассивОшибок = Новый Массив;
			Для Каждого ЭлементСпискаОшибок Из ЭлементРезультата[ "errors" ] Цикл
			
				ТекстОшибки = "" + ЭлементСпискаОшибок[ "message" ] + " ( " + ЭлементСпискаОшибок[ "code" ] + " )";

				ТекстОшибкиДополнение = ОбменСВнешнимиСистемамиЛогирование.БазаЗнанийСовпаденияНайтиСтрокойПолучить( "Ozon: " + ТекстОшибки );
				Если Не ПустаяСтрока( ТекстОшибкиДополнение ) Тогда
					ТекстОшибки = ТекстОшибкиДополнение + " " + ТекстОшибки;
				КонецЕсли;

				МассивОшибок.Добавить( ТекстОшибки );

			КонецЦикла;
			
			СсылкаДляЛога = ?( ЗначениеЗаполнено( СтрокаРезультатаПоиска.Характеристика ),
			СтрокаРезультатаПоиска.Характеристика, СтрокаРезультатаПоиска.Номенклатура );
			
			ПредставлениеТовара = "<" + ПредставлениеТоварнойПозиции(СтрокаРезультатаПоиска.Номенклатура, СтрокаРезультатаПоиска.Характеристика, 
			СтрокаРезультатаПоиска.Упаковка) + ">, идентификатор Ozon: <" + Формат( СтрокаРезультатаПоиска.product_id, "ЧГ=0" ) + ">";
			
			СообщениеОбОшибке = СтрШаблон( НСтр("ru = 'Ошибка при выгрузке цен товара %1:'"),	ПредставлениеТовара )
			+ Символы.ПС + СтрСоединить( МассивОшибок, Символы.ПС );
			
			
			ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,, СсылкаДляЛога,
			СообщениеОбОшибке );
			
			ЛогКомментарий = СообщениеОбОшибке;
			ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаЦенИз1С" ) );
			ЛогПараметры.Вставить( "ДанныеСсылка", СсылкаДляЛога );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, Истина, ЛогПараметры );
			
			ОбщегоНазначения.СообщитьПользователю( ЛогКомментарий );
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьПорциюТоваровВАрхив(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных, ЕстьОшибки)

	ТекстЗапроса = "v1/product/archive";
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ТоварВАрхив );
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ДанныеИтерации, УчетнаяЗаписьМаркетплейса, Истина, ПараметрыКонтекст);
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса[ "result" ] = Истина Тогда
		Для Каждого КлючЗаписи Из СведенияОВыгруженныхДанных Цикл
			МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве");
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЕстьОшибки = Истина;
		ТекстСообщения = НСтр("ru = 'При помещении товаров в архив возникли ошибки.'");
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьПорциюТоваровИзАрхива(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных)
	
	ТекстЗапроса = "v1/product/unarchive";

    ВызватьИсключение "Метод API <" + ТекстЗапроса + "> c 14 июня 2023 года метод не работает.
    |Подробнее в документации Ozon: https://docs.ozon.ru/api/seller/#operation/ProductAPI_ProductUnarchiv";
	
КонецПроцедуры

Процедура УдалитьПорциюТоваров(УчетнаяЗаписьМаркетплейса, ДанныеИтерации, СведенияОВыгруженныхДанных, ЕстьОшибки)

	ТекстЗапроса = "v2/products/delete";

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить( "Результат", "status" );
	АтрибутыОтвета.Вставить( "Сообщение", "message" );
	АтрибутыОтвета.Вставить( "Код", "code" );
	АтрибутыОтвета.Вставить( "Детали", "details" );
	
	ДанныеИтерации.Вставить( "СлужебныеПараметры", Новый Структура( "ВернутьСтрокуОтвета", Истина ) );

	// 1. Если все переданные артикулы не найдены:
	//		"{"code":3,"message":"Products not found","details":[]}"
	// 
	// 2. Если хотя бы один найден:
	//		{"status":[{"offer_id":"8a95ec36-2606-402b-812b-6c3d92ac6c9e","is_deleted":false,"error":"ITEM_IS_CREATED"},
	//  	{"offer_id":"notfound1","is_deleted":false,"error":"NOT_FOUND_PRODUCT_FOR_OFFER_ID"},
	//  	{"offer_id":"notfound3","is_deleted":false,"error":"NOT_FOUND_PRODUCT_FOR_OFFER_ID"}]}
	
	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ТоварУдалить );	
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ДанныеИтерации, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина, ПараметрыКонтекст);
    
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;

	АртикулыЗапретУдаления = Новый Массив;
	
	// заполнение артикулов из ответа сервиса
	Если РезультатЗапроса.Результат = Неопределено
	И ВРЕГ( РезультатЗапроса.Сообщение ) = "PRODUCTS NOT FOUND" Тогда
		// не найдены все переданные артикулы, можно все удалить из регистра сведений 1С
		АртикулыДляУдаления = СведенияОВыгруженныхДанных.ВыгрузитьКолонку( "offer_id" );
	Иначе
	
		АртикулыДляУдаления = Новый Массив;
		Для Каждого ЭлементОтвета Из РезультатЗапроса.Результат Цикл
		    
		    АртикулИзСервиса = ЭлементОтвета[ "offer_id" ];
		    ОшибкаИзСервиса = ОбменСВнешнимиСистемамиЛогирование.ЗаменитьНедопустимыеСимволыXML( ЭлементОтвета[ "error" ] );
		    
			Если ЭлементОтвета[ "is_deleted" ] = Истина Тогда
				// успешно удален на сайте Ozon
				АртикулыДляУдаления.Добавить( АртикулИзСервиса );
			Иначе
				Если ВРЕГ( ОшибкаИзСервиса ) = "NOT_FOUND_PRODUCT_FOR_OFFER_ID" Тогда
					// на сайте Ozon такой артикул не существует, можно удалить из регистра сведений 1С
					АртикулыДляУдаления.Добавить( АртикулИзСервиса );
				Иначе
					АртикулыЗапретУдаления.Добавить( Новый Структура( "Артикул, Ошибка", АртикулИзСервиса, ОшибкаИзСервиса ) );
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// удаление из регистра сведений
	Для Каждого АртикулДляУдаления Из АртикулыДляУдаления Цикл

		СтруктураПоиска = Новый Структура( "offer_id" );
		СтруктураПоиска.offer_id = АртикулДляУдаления;
		РезультатПоиска = СведенияОВыгруженныхДанных.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРезультатаПоиска = РезультатПоиска[0];
		
		УдалениеТовараРезультат = ИнтеграцияСМаркетплейсомOzonСервер.УдалитьТоварИзРегистраСведенийСтатусыПубликацииОбъектовМаркетплейсаOzon(
		УчетнаяЗаписьМаркетплейса, СтрокаРезультатаПоиска.Номенклатура, СтрокаРезультатаПоиска.Характеристика,
		СтрокаРезультатаПоиска.Упаковка );
		
		Если УдалениеТовараРезультат <> Истина Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// логирование атрикулов, которые не получилось удалить
	Для Каждого АртикулЗапретУдаления Из АртикулыЗапретУдаления Цикл
		
		СтруктураПоиска = Новый Структура( "offer_id" );
		СтруктураПоиска.offer_id = АртикулЗапретУдаления.Артикул;
		РезультатПоиска = СведенияОВыгруженныхДанных.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРезультатаПоиска = РезультатПоиска[0];
		
		АртикулЗапретУдаленияОшибка = АртикулЗапретУдаления.Ошибка;
		
		ТекстОшибкиДополнение = ОбменСВнешнимиСистемамиЛогирование.БазаЗнанийСовпаденияНайтиСтрокойПолучить( "Ozon: " + АртикулЗапретУдаления.Ошибка );
		Если Не ПустаяСтрока( ТекстОшибкиДополнение ) Тогда
			АртикулЗапретУдаленияОшибка = ТекстОшибкиДополнение + " " + АртикулЗапретУдаленияОшибка;
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон( НСтр("ru = 'При удалении товара <%1> возникла ошибка: %2'"),
		ПредставлениеТоварнойПозиции( СтрокаРезультатаПоиска.Номенклатура, СтрокаРезультатаПоиска.Характеристика, СтрокаРезультатаПоиска.Упаковка)
		+ " ( " + АртикулЗапретУдаления.Артикул + " )",
		АртикулЗапретУдаленияОшибка );
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстСообщения);
		
		ОбщегоНазначения.СообщитьПользователю( ТекстСообщения );
		
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстСообщения, УчетнаяЗаписьМаркетплейса, Истина );
	КонецЦикла;

КонецПроцедуры

Функция СтатусыПубликацииУстановитьИзмененыРеквизиты( Ссылка )
    
    УстановитьПривилегированныйРежим( Истина );
    
    ОтборЗначение = Неопределено;
    
	ИсточникТип = ТипЗнч( Ссылка );
	Если ИсточникТип = Тип( "СправочникСсылка.Номенклатура" ) Тогда
		ОтборИмяПоля = "Номенклатура";
		ОтборЗначение = Ссылка;
	ИначеЕсли ИсточникТип = Тип( "СправочникСсылка.НоменклатураПрисоединенныеФайлы" ) Тогда
		ОтборИмяПоля = "ОбъектПубликации";
		ОтборЗначение = Ссылка;
	ИначеЕсли ИсточникТип = Тип( "СправочникСсылка.ХарактеристикиНоменклатуры" ) Тогда
		ОтборИмяПоля = "Характеристика";
		ОтборЗначение = Ссылка;
	ИначеЕсли ИсточникТип = Тип( "СправочникСсылка.ХарактеристикиНоменклатурыПрисоединенныеФайлы" ) Тогда
		ОтборИмяПоля = "ОбъектПубликации";
		ОтборЗначение = Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено( ОтборЗначение ) Тогда
		Возврат Ложь;
	КонецЕсли;

	ВидОбъектаМаркетплейса = ПредопределенноеЗначение( "Перечисление.ВидыОбъектовМаркетплейсов.Товар" );
	
	ЗапросТекст = 
	"ВЫБРАТЬ
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
	|ГДЕ
	|	ВидОбъектаМаркетплейса = &ВидОбъектаМаркетплейса
	|	И &УсловиеОтбора";
	
	ЗапросТекст = СтрЗаменить( ЗапросТекст, "&УсловиеОтбора", "СтатусыПубликацииОбъектовМаркетплейсаOzon." + ОтборИмяПоля + " = &ОтборЗначение"  );
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "ОтборЗначение", ОтборЗначение );
	Запрос.УстановитьПараметр( "ВидОбъектаМаркетплейса", ВидОбъектаМаркетплейса );
	
	ЗапросРезультат = Запрос.Выполнить();
	Если ЗапросРезультат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросВыборка = ЗапросРезультат.Выбрать();
	Пока ЗапросВыборка.Следующий() Цикл
		СтатусыЗапись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств( СтатусыЗапись, ЗапросВыборка );
		СтатусыЗапись.Прочитать();
		Если СтатусыЗапись.Выбран() = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтатусыЗапись.ИзмененыРеквизиты = Ложь Тогда
			СтатусыЗапись.ИзмененыРеквизиты = Истина;
			СтатусыЗапись.Записать( Истина );
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим( Ложь );
	
	Возврат Истина;
КонецФункции


#Область ПодпискиНаСобытияСлужебные

Процедура ИнтеграцияСМаркетплейсомOzonПриЗаписиСправочников(Источник, Отказ) Экспорт

	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Источник.Ссылка;
	Попытка
		СтатусыПубликацииУстановитьИзмененыРеквизиты( Ссылка );
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , Ссылка, ТекстОшибки );
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти


#Область СервисныеФункции

Функция АдресСервера()

	Возврат "api-seller.ozon.ru";

КонецФункции

// Возвращает постфикс неиспользуемой категории
//
Функция ПостфиксНеиспользуемойКатегории() Экспорт

	Возврат " " + НСтр("ru = '(Не сопоставлено)'");

КонецФункции

// Возвращает данные учетной записи.
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//  Структура - данные учетной записи. 
//    * Организация   - СправочникСсылка.Организации - организация учетной записи.
//    * ИдентификаторКлиента - Строка - идентификатор клиента учетной записи.
//    * ИдентификаторУчетнойЗаписи - Строка - идентификатор учетной записи.
//
Функция ДанныеУчетнойЗаписи(УчетнаяЗаписьМаркетплейса)

	ДанныеУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗаписьМаркетплейса, "Организация, ИдентификаторКлиента");

	Если НЕ ЗначениеЗаполнено(ДанныеУчетнойЗаписи.Организация) ИЛИ НЕ ЗначениеЗаполнено(ДанныеУчетнойЗаписи.ИдентификаторКлиента) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнены данные учетной записи.'");
	КонецЕсли;

	ИдентификаторУчетнойЗаписи = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса().НастройкиСервиса + УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор();
	ДанныеУчетнойЗаписи.Вставить("ИдентификаторУчетнойЗаписи", ИдентификаторУчетнойЗаписи);

	Возврат ДанныеУчетнойЗаписи;

КонецФункции

// Возвращает данные авторизации.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//  Структура - данные авторизации. 
//    * ИдентификаторКлиента - Строка - идентификатор учетной записи.
//    * КлючAPI   - Строка - API-ключ учетной записи.
//
Функция ПолучитьДанныеАвторизации(УчетнаяЗаписьМаркетплейса)

	ДанныеАвторизации = Новый Структура;
	ДанныеАвторизации.Вставить("ИдентификаторКлиента", УчетнаяЗаписьМаркетплейса.ИдентификаторКлиента);
	Если ТипЗнч(УчетнаяЗаписьМаркетплейса) = Тип("Структура") И УчетнаяЗаписьМаркетплейса.Свойство("КлючAPI") Тогда
		ДанныеАвторизации.Вставить("КлючAPI", УчетнаяЗаписьМаркетплейса.КлючAPI);
	Иначе
		ДанныеУчетнойЗаписи = ДанныеУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
		КлючAPI = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ДанныеУчетнойЗаписи.ИдентификаторУчетнойЗаписи, "KeyAPI", Ложь);
		ДанныеАвторизации.Вставить("КлючAPI", КлючAPI);
	КонецЕсли;

	Возврат ДанныеАвторизации;

КонецФункции

Функция OzonПроверитьДанныеАвторизацииПомещеныВХранилище(УчетнаяЗаписьМаркетплейса) Экспорт
	Попытка
		ДанныеАвторизацииOzon = ПолучитьДанныеАвторизации(УчетнаяЗаписьМаркетплейса);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат ЗначениеЗаполнено( ДанныеАвторизацииOzon.КлючAPI );
КонецФункции

Функция ЯндексПроверитьДанныеАвторизацииПомещеныВХранилище(УчетнаяЗаписьМаркетплейса) Экспорт

	ПараметрыПриложенияЯндексДиск = ИнтеграцияСМаркетплейсамиСервер.ПараметрыПриложенияЯндексДиск();
	АдресВХранилище = Строка(УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор()) + "/" + ПараметрыПриложенияЯндексДиск.ИдентификаторПриложения;

	УстановитьПривилегированныйРежим(Истина);
	ЗначениеКлюча = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(АдресВХранилище, "expires_in");
	УстановитьПривилегированныйРежим(Ложь);

	Возврат (ЗначениеКлюча <> Неопределено);

КонецФункции

// Возвращает имя события журнала регистрации подсистемы Взаимодействия.
//
// Возвращаемое значение:
//  Строка - Наименование события для записей в журнале регистрации.
//
Функция СобытиеЖурналаРегистрации() Экспорт

	Возврат НСтр("ru = 'Интеграция с Ozon'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

Функция ЧислоВСтроку(Знач Значение, ВыводитьПредставлениеНуля = Ложь)

	Если Значение = Неопределено Тогда
		Значение = 0;
	КонецЕсли;

	ФорматнаяСтрока = ?(ВыводитьПредставлениеНуля, "ЧН=; ЧРД=.; ЧГ=", "ЧРД=.; ЧГ=");
	Возврат Формат(Значение, ФорматнаяСтрока);  

КонецФункции

// Преобразует строку, содержащую текст JSON, в структуру данных.
//
// Параметры:
//   СтрокаJSON                   - Строка - строка, содержащая текст в формате JSON.
//   ПрочитатьВСоответствие       - Булево - если установлено Истина, чтение объекта JSON будет выполнено в Соответствие. Если установлено
//                                    Ложь, объекты будут считываться в объект типа Структура. Значение по умолчанию: Ложь.
//	 ИменаСвойствСоЗначениямиДата - Массив, Строка, ФиксированныйМассив - массив, элементы которого содержат имена свойств JSON, для 
//                                    которых нужно вызывать восстановление даты из строки.
//                                - Неопределено - восстановление дат не производится.
//
// Возвращаемое значение:
//   Структура, Соответствие - результат преобразования строки JSON.
//
Функция JSONВДанные(СтрокаJSON, ПрочитатьВСоответствие = Ложь, ИменаСвойствСоЗначениямиДата = Неопределено)

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Результат = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие, ИменаСвойствСоЗначениямиДата);
	ЧтениеJSON.Закрыть();

	Возврат Результат;

КонецФункции

Функция ДанныеВJSON(СтруктураДанных)

	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);

	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных, НастройкиСериализации);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

// Конструктор соответствия типов данных 1С и сервиса Ozon.
// При добавлении соответствия с новым типом значения следует указать его представление в функции 
// ОпределитьПредставлениеТипа и использовать представление типа при выводе в пользовательском интерфейсе.
//
// Возвращаемое значение:
//   Соответствие - соответствие типов данных 1С и сервиса Ozon.
//
Функция СоответствиеТипов()

	// При добавлении соответствия с типом значения следует указать его представление в функции ПредставлениеТипа()
	// и использовать представление типа при выводе в пользовательском интерфейсе.

	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить("string", "Строка");
	СоответствиеТипов.Вставить("multiline", "Строка");
	СоответствиеТипов.Вставить("integer", "Число");
	СоответствиеТипов.Вставить("decimal", "Число");
	СоответствиеТипов.Вставить("data", "Дата");
	СоответствиеТипов.Вставить("boolean", "Булево");
	СоответствиеТипов.Вставить("url", "Строка");
	СоответствиеТипов.Вставить("imageurl", "Строка");

	Возврат СоответствиеТипов;

КонецФункции

Функция ПредставлениеТипа(ТипСтрокой)

	ПредставлениеТипа = ТипСтрокой;

	Если ТипСтрокой = "Строка" Тогда
		ПредставлениеТипа = НСтр("ru = 'Строка'");
	ИначеЕсли ТипСтрокой = "Строка" Тогда
		ПредставлениеТипа = НСтр("ru = 'Число'");
	ИначеЕсли ТипСтрокой = "Строка" Тогда
		ПредставлениеТипа = НСтр("ru = 'Дата'");
	ИначеЕсли ТипСтрокой = "Строка" Тогда
		ПредставлениеТипа = НСтр("ru = 'Булево'");
	КонецЕсли;

	Возврат ПредставлениеТипа;

КонецФункции

Функция ПолучитьТипыOzonДляТипа1С(ТипЗначенияСтрокой)

	ТипыOzonДляТипа1С = Новый Массив;

	СоответствиеТипов = СоответствиеТипов();
	Для Каждого СоответствиеТипа Из СоответствиеТипов Цикл
		Если СоответствиеТипа.Значение = ТипЗначенияСтрокой Тогда
			ТипыOzonДляТипа1С.Добавить(СоответствиеТипа.Ключ);
		КонецЕсли;
	КонецЦикла;

	Возврат ТипыOzonДляТипа1С;

КонецФункции

Функция ПривестиЗначениеКТипуOzon(Знач Значение, ТипЗначенияOzon)

	Результат = Значение;

	Если ТипЗначенияOzon = "integer" Или ТипЗначенияOzon = "decimal" Тогда
		Результат = ЧислоВСтроку(Значение, Истина);
	ИначеЕсли ТипЗначенияOzon = "boolean"  Тогда
		Значение = ?( ТипЗнч(Значение) = Тип( "Булево" ), Значение, Ложь );
		Результат = Формат( Значение, "БЛ=false; БИ=true" );
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ХешСуммаДвоичныхДанных(ДвоичныеДанныеФайла, ПреобразоватьВHEX = Ложь, ПеревестиВНижнийРегистр = Ложь)

	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ДвоичныеДанныеФайла);

	ХешСумма = ХешированиеДанных.ХешСумма;
	
	Если ПреобразоватьВHEX Тогда
		ХешСумма = ПолучитьHexСтрокуИзДвоичныхДанных(ХешСумма);
	КонецЕсли;

	Если ПеревестиВНижнийРегистр Тогда
		ХешСумма = НРег(ХешСумма);
	КонецЕсли;

	Возврат ХешСумма;

КонецФункции

// Возвращает служебные параметры HTTP-запроса.
// 
// Возвращаемое значение:
//  Структура - Структура, содержащая реквизиты:
//   ПодстрокаПоискаВТекстеОтвета
//   ПустойРезультат
//   ПоляТипаДата - Строка или Массив. Подробности см. в описании функции ПрочитатьJSON.
//                  Для приведения значения реквизитов, содержащих дату, к типу Дата, следует указывать их наименования
//                  в этом реквизите.
Функция СлужебныеПараметрыHTTPЗапроса()

	СлужебныеПараметры = Новый Структура;
	СлужебныеПараметры.Вставить("ПодстрокаПоискаВТекстеОтвета", "");
	СлужебныеПараметры.Вставить("ПустойРезультат", Неопределено);
	СлужебныеПараметры.Вставить("ПоляТипаДата", "");
	СлужебныеПараметры.Вставить("ВернутьКодСостояния", Ложь);
	СлужебныеПараметры.Вставить("ВернутьСтрокуОтвета", Ложь);
	СлужебныеПараметры.Вставить("ЭтоДвоичныеДанные", Ложь);
	СлужебныеПараметры.Вставить("ContentType", "application/json");
	СлужебныеПараметры.Вставить("ContentLenght", "");

	Возврат СлужебныеПараметры;

КонецФункции

Функция HTTPЗапросКСервису(УчетнаяЗаписьМаркетплейса, ТекстЗапроса, СлужебныеПараметры)

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Charset",      "UTF-8");
	Заголовки.Вставить("Accept",       "application/json");
	Заголовки.Вставить("Content-Type", СлужебныеПараметры.ContentType);
	
	Если СлужебныеПараметры.ЭтоДвоичныеДанные Тогда
		Заголовки.Вставить("Content-Lenght", СлужебныеПараметры.ContentLenght);
	КонецЕсли;

	ШаблонПредставленияКонфигурации = "%1 (%2)";
	ПредставлениеКонфигурации = СтрШаблон(ШаблонПредставленияКонфигурации, Метаданные.Синоним, Метаданные.Версия);
	Заголовки.Вставить("User-Agent",	ПредставлениеКонфигурации);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАвторизации = ПолучитьДанныеАвторизации(УчетнаяЗаписьМаркетплейса);
	УстановитьПривилегированныйРежим(Ложь);
	
	Заголовки.Вставить("Client-Id", ДанныеАвторизации.ИдентификаторКлиента);
	Заголовки.Вставить("Api-Key",   ДанныеАвторизации.КлючAPI);

	Возврат Новый HTTPЗапрос(ТекстЗапроса, Заголовки);

КонецФункции

Функция ВыполнитьЗапросКСервису(ТекстЗапроса, ЗНАЧ ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, POSTЗапрос = Истина, 
	ПараметрыКонтекст = Неопределено)

	Результат = Неопределено;

	АдресСервера = АдресСервера();
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	HTTPСоединение = Новый HTTPСоединение(АдресСервера, 443,,,, 60, ЗащищенноеСоединение);

	СлужебныеПараметры = СлужебныеПараметрыHTTPЗапроса();
	Если ПараметрыЗапроса.Свойство("СлужебныеПараметры") Тогда
		ЗаполнитьЗначенияСвойств(СлужебныеПараметры, ПараметрыЗапроса.СлужебныеПараметры);
		ПараметрыЗапроса.Удалить("СлужебныеПараметры");
	КонецЕсли;

	ПрочитатьВСоответствие = Истина;
	Если НЕ СлужебныеПараметры.Свойство("ПрочитатьВСоответствие", ПрочитатьВСоответствие) Тогда
		ПрочитатьВСоответствие = Истина;
	КонецЕсли;

	HTTPЗапрос = HTTPЗапросКСервису(УчетнаяЗаписьМаркетплейса, ТекстЗапроса, СлужебныеПараметры);

	ТоварСсылка = Неопределено;
	ТелоЗапроса = "";

	Если POSTЗапрос И ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		Если СлужебныеПараметры.ЭтоДвоичныеДанные Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыЗапроса.ДвоичныеДанные);
		Иначе
			ТелоЗапроса = ДанныеВJSON(ПараметрыЗапроса);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF8", ИспользованиеByteOrderMark.НеИспользовать);
			
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ПараметрыКонтекст_ДанныеПубликации = ПараметрыКонтекст.ДанныеПубликации;
	Исключение
		ПараметрыКонтекст_ДанныеПубликации = Неопределено;
	КонецПопытки;
	
	ТоварыКоличество = 0;
	Если ТипЗнч( ПараметрыКонтекст_ДанныеПубликации ) = Тип( "ТаблицаЗначений" ) Тогда
		ТоварыКоличество = ПараметрыКонтекст_ДанныеПубликации.Количество();
		Если ТоварыКоличество = 1 Тогда
			ТоварСсылка = ПараметрыКонтекст_ДанныеПубликации[0].Номенклатура;
		КонецЕсли;
	КонецЕсли;

	Попытка
		ПараметрыКонтекст_Действие = ПараметрыКонтекст.Действие;
	Исключение
		ПараметрыКонтекст_Действие = Неопределено;
	КонецПопытки;
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		HTTPМетод = ?(POSTЗапрос, "POST", "GET" );
		HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
		HTTPЗапросПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPЗапрос );
		ЛогКомментарий = НСтр("ru = 'HTTP: Запрос: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
		+ HTTPЗапросПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ЛогПараметры = Новый Структура;
		ЛогПараметры.Вставить( "Действие", ПараметрыКонтекст_Действие );
		ЛогПараметры.Вставить( "Сервер", HTTPСоединение.Сервер );
		ЛогПараметры.Вставить( "АдресРесурса", HTTPЗапрос.АдресРесурса );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, , ЛогПараметры );
	КонецЕсли;	
	
	Попытка
		Если POSTЗапрос Тогда
			РезультатЗапроса = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			РезультатЗапроса = HTTPСоединение.Получить(HTTPЗапрос);
		КонецЕсли;

		СтрокаОтвета = РезультатЗапроса.ПолучитьТелоКакСтроку("UTF8");
		КодСостояния = РезультатЗапроса.КодСостояния;
		
		ЛогЭтоОшибка = (КодСостояния <> 200);
		Если ЛогЭтоОшибка = Истина Или ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			HTTPСоединениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( HTTPСоединение );
			HTTPОтветПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( РезультатЗапроса );
			ЛогКомментарий = НСтр("ru = 'HTTP: Ответ: Метод:'") + " " + HTTPМетод + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков() 
			+ HTTPОтветПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ HTTPСоединениеПредставление + ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, ЛогЭтоОшибка, ЛогПараметры );
		КонецЕсли;	

		ВернутьКодСостояния = Ложь;
		Если СлужебныеПараметры.Свойство("ВернутьКодСостояния", ВернутьКодСостояния) И ВернутьКодСостояния = Истина Тогда
			Возврат КодСостояния;
		КонецЕсли;
		
		Если СлужебныеПараметры.ВернутьСтрокуОтвета Тогда
			Возврат JSONВДанные(СтрокаОтвета, ПрочитатьВСоответствие, СлужебныеПараметры.ПоляТипаДата);
		КонецЕсли;

		Если КодСостояния = 400 ИЛИ КодСостояния = 404
			И Не ПустаяСтрока(СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета)
			И СтрНайти(СтрокаОтвета, СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета) Тогда
			// При выполнении запроса получен ответ, в котором содержится заданная подстрока поиска.
			// Поэтому такой ответ не считается ошибкой - возвращается заданный пустой результат.
			Результат = СлужебныеПараметры.ПустойРезультат;
		ИначеЕсли КодСостояния <> 200 Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка выполнения запроса %1: %2'"), ТекстЗапроса, СтрокаОтвета);
			
			ЗаписатьОшибку = Истина;
			Если ТекстЗапроса = "/v2/category/attribute/values" Тогда
				Если ПараметрыЗапроса.Свойство("limit") И ПараметрыЗапроса.limit = 1 Тогда
					ЗаписатьОшибку = Ложь;// запрос для проверки возможности выбора значений атрибутов
				КонецЕсли;
			КонецЕсли;
			Если ЗаписатьОшибку = Истина Тогда
			
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
				
				ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
				
			КонецЕсли;
		Иначе
			Результат = JSONВДанные(СтрокаОтвета, ПрочитатьВСоответствие, СлужебныеПараметры.ПоляТипаДата);
		КонецЕсли;
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Отсутствует соединение с сервером %1 по причине: %2'"),
			АдресСервера,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		ЛогКомментарий = ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, Истина, ЛогПараметры );
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Возвращает результат запроса.
//
// Параметры:
//  ТекстЗапроса       - Строка - метод API.
//  ПараметрыЗапроса   - Структура - параметры запроса согласно описанию запрашиваемого метода API.
//  УчетнаяЗапись      - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//  АтрибутыРезультата - Структура - каждому ключу передается в качестве значения имя атрибута из ответа метода API, 
//                        в котором содержится необходимая информация. По ключам этого параметра заполняется
//                        возвращаемое значение.
// 
// Возвращаемое значение:
//  Структура - содержимое атрибутов результата на основании ключей параметра АтрибутыРезультата.
//
Функция ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса,
			Знач АтрибутыРезультата = Неопределено, POSTЗапрос = Истина
			, ПараметрыКонтекст = Неопределено)

	Результат = Новый Структура;

	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, POSTЗапрос, ПараметрыКонтекст);

	Если ЗначениеЗаполнено(АтрибутыРезультата) Тогда
		Для Каждого АтрибутРезультата Из АтрибутыРезультата Цикл
			Если РезультатЗапроса <> Неопределено Тогда
				ЗначениеАтрибута = РезультатЗапроса;
				КлючиРезультата = СтрРазделить(АтрибутРезультата.Значение, ".");

				Для Каждого КлючРезультата Из КлючиРезультата Цикл
					ЗначениеАтрибута = ЗначениеАтрибута[КлючРезультата];
				КонецЦикла;
			Иначе
				ЗначениеАтрибута = Неопределено;
			КонецЕсли;

			Результат.Вставить(АтрибутРезультата.Ключ, ЗначениеАтрибута);
		КонецЦикла;
	Иначе
		Результат = РезультатЗапроса;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти


#Область РегламентныеЗадания

// Выполняет выгрузку остатков товаров, используется регламентным заданием.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//
Процедура ВыгрузитьОстаткиТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса) Экспорт

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса)
		Или Не ИнтеграцияСМаркетплейсамиСервер.ИспользуетсяИнтеграцияСМаркетплейсомOzon() Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начата регламентная выгрузка остатков номенклатуры на OZON'", ОбщегоНазначения.КодОсновногоЯзыка()));

	ВыгрузитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных());

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Закончена регламентная выгрузка остатков номенклатуры на OZON'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецПроцедуры

// Выполняет справочную загрузку остатков товаров, используется регламентным заданием.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//
Процедура ЗагрузитьОстаткиТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса)

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса)
		Или Не ИнтеграцияСМаркетплейсамиСервер.ИспользуетсяИнтеграцияСМаркетплейсомOzon() Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начата регламентная загрузка остатков номенклатуры с маркетплейса OZON'", ОбщегоНазначения.КодОсновногоЯзыка()));

	ЗагрузитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных());

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Закончена регламентная загрузка остатков номенклатуры с маркетплейса OZON'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецПроцедуры

// Выполняет выгрузку цен товаров, используется регламентным заданием.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//
Процедура ВыгрузитьЦеныТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса) Экспорт

	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса)
		Или Не ИнтеграцияСМаркетплейсамиСервер.ИспользуетсяИнтеграцияСМаркетплейсомOzon() Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начата регламентная выгрузка цен номенклатуры на OZON'", ОбщегоНазначения.КодОсновногоЯзыка()));

	ВыгрузитьЦеныТоваров(УчетнаяЗаписьМаркетплейса, СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных());

	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Закончена регламентная выгрузка цен номенклатуры на OZON'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецПроцедуры

// Выполняет обновление данных по товарному каталогу, используется регламентным заданием.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//
Функция ОбновитьТоварныйКаталогРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
	Метаданные.РегламентныеЗадания.ОбновлениеТоварногоКаталогаOzon );

	Попытка
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			ЛогКомментарий = НСтр("ru = 'ОбновитьТоварныйКаталогРегламентнымЗаданием:'") + Символы.ПС
			+ НСтр("ru = 'Учетная запись:'") + Символы.ПС + ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( УчетнаяЗаписьМаркетплейса ) 
			+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ОбновлениеТоварногоКаталога" ) );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, , ЛогПараметры );
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса)
			Или Не ИнтеграцияСМаркетплейсамиСервер.ИспользуетсяИнтеграцияСМаркетплейсомOzon() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Начало выполнение регламентного задания.
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало обновления данных товарного каталога'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Шаг 1. Проверить статус загрузки товаров.
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало проверки заданий публикации товаров при обновлении данных товарного каталога'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ВыполнитьПроверкуЗаданияПубликацииТоваров(УчетнаяЗаписьМаркетплейса); 
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Окончание проверки заданий публикации товаров при обновлении данных товарного каталога'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
		
		// Шаг 2. Проверить статус загрузки изображений товаров.
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало проверки публикации изображений при обновлении данных товарного каталога'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ВыполнитьПроверкуПубликацииИзображенийТоваров(УчетнаяЗаписьМаркетплейса);
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Окончание проверки публикации изображений при обновлении данных товарного каталога'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
		
		// Шаг 3. Обновить информацию по загруженным товарам.
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало обновления информации по публикуемым товарам при обновлении данных товарного каталога'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ВыполнитьОбновлениеИнформацииПоТоварам(УчетнаяЗаписьМаркетплейса);
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Окончание обновления информации по публикуемым товарам при обновлении данных товарного каталога'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
		
		// Шаг 4. Опубликовать товары.
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало публикации товаров при обновлении данных товарного каталога'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Результат = ВыполнитьПубликациюТоваров(УчетнаяЗаписьМаркетплейса);
		Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			Шаблон = НСтр("ru = 'При обновлении данных товарного каталога обнаружены ошибки: %1'",
			ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Результат.ОписаниеОшибки);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			ТекстОшибки);
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Окончание публикации товаров при обновлении данных товарного каталога'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
		
		// Шаг 5. Опубликовать изображения товаров.
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало публикации изображений при обновлении данных товарного каталога'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ВыполнитьПубликациюИзображенийТоваров(УчетнаяЗаписьМаркетплейса);
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Окончание публикации изображений при обновлении данных товарного каталога'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
		
		// Шаг 6. Удалить файлы из сервиса хранения файлов после публикации товара.
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало удаления неактуальных публичных ссылок из сервиса хранения изображений при обновлении данных товарного каталога'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ВыполнитьУдалениеПубличныхСсылок(УчетнаяЗаписьМаркетплейса);
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Окончание удаления неактуальных публичных ссылок из сервиса хранения изображений при обновлении данных товарного каталога'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
		
		// Шаг 7. Опубликовать цены товаров.
		ВыгрузитьЦеныТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса);
		
		// Шаг 8. Загрузить остатки товаров в 1С
		ЗагрузитьОстаткиТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса);
		
		// Шаг 8. Опубликовать остатки товаров.
		ВыгрузитьОстаткиТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса);
		
		// Окончание выполнение регламентного задания.
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Окончание обновления данных товарного каталога'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Исключение
	
		ТекстОшибки = НСтр( "ru = 'Ошибка при выполнении регламентного задания ""Обновить товарный каталог"":'" ) + " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстОшибки);
		
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗаписьМаркетплейса, Истина );
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

#КонецОбласти


#Область РаботаСоСкладами

Функция СкладыСервиса(УчетнаяЗаписьМаркетплейса)
	
	МассивСкладов = Новый Массив;

	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ЗагрузкаСкладовВ1С );

	// Документация по методу: https://docs.ozon.ru/api/seller/#operation/WarehouseAPI_WarehouseList	
	ТекстЗапроса = "v1/warehouse/list";
	ДанныеЗапроса = Новый Структура();
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ДанныеЗапроса, УчетнаяЗаписьМаркетплейса, 
	Истина, ПараметрыКонтекст );

	Если РезультатЗапроса = Неопределено Тогда
		МассивСкладов = Неопределено;
	Иначе
		Для Каждого ЭлементРезультата Из РезультатЗапроса[ "result" ] Цикл
			
			// заполним список складов только со статусом "created" ( "Активный" )
			Если ЭлементРезультата[ "status" ] <> "created" Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеСклада = Новый Структура("ИдентификаторСкладаМаркетплейса, НаименованиеСкладаМаркетплейса, ЭтоRealFBS",
				XMLСтрока(ЭлементРезультата[ "warehouse_id" ] ),
				ЭлементРезультата[ "name" ],
				ЭлементРезультата[ "is_rfbs" ]);
			МассивСкладов.Добавить(ОписаниеСклада);
		КонецЦикла;
	КонецЕсли;

	Возврат МассивСкладов;

КонецФункции

Функция НоваяТаблицаСкладов()

	ТаблицаСкладов = Новый ТаблицаЗначений;
	ТаблицаСкладов.Колонки.Добавить("ИдентификаторСкладаМаркетплейса", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаСкладов.Колонки.Добавить("НаименованиеСкладаМаркетплейса", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250)));
	ТаблицаСкладов.Колонки.Добавить("ЭтоRealFBS", Новый ОписаниеТипов("Булево"));
	ТаблицаСкладов.Колонки.Добавить("Склад1С", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));

	Возврат ТаблицаСкладов;

КонецФункции

// Возвращает сопоставленные склады из данных ИБ.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//  ТолькоСсылки              - Булево - признак возврата только массива складов, иначе возвращается таблица.
//  ВыводитьПодчиненныеСклады - Булево - признак включения в ответ подчиненных складов.
// 
// Возвращаемое значение:
//  Массив, ТаблицаЗначений -  список ссылок СправочникСсылка.Склады, таблица с данными по складам.
//
Функция ПолучитьСопоставленныеСклады(УчетнаяЗаписьМаркетплейса, ТолькоСсылки = Истина, ВыводитьПодчиненныеСклады = Истина) Экспорт

	СопоставленныеСклады = Новый ТаблицаЗначений;
	СопоставленныеСклады.Колонки.Добавить("Группа", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	СопоставленныеСклады.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	СопоставленныеСклады.Колонки.Добавить("ИдентификаторСклада", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СопоставленныеСклады.Колонки.Добавить("НаименованиеСклада", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(250)));

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоответствияОбъектов.Объект1С КАК Склад,
	|	СоответствияОбъектов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторСклада,
	|	СоответствияОбъектов.НаименованиеОбъектаМаркетплейса КАК НаименованиеСклада,
	|	ЛОЖЬ КАК ЭтоГруппаСкладов
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК Склады
	|		ПО СоответствияОбъектов.Объект1С = Склады.Ссылка
	|ГДЕ
	|	СоответствияОбъектов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
	|	И СоответствияОбъектов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)"; 
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если ТолькоСсылки Тогда
			Возврат Новый Массив;
		Иначе
			ЛогКомментарий = НСтр("ru = 'ПолучитьСопоставленныеСклады: Сопоставление складов не задано.
			|Перейдите в настройки интеграции с интернет-магазином в закладку ""Обновление остатков товаров"".'");
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, Истина );
			Возврат СопоставленныеСклады;
		КонецЕсли;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ВыводитьПодчиненныеСклады И Выборка.ЭтоГруппаСкладов Тогда
			ПодчиненныеСклады = СписокПодчиненныхСкладов(Выборка.Склад);
			Для каждого Склад Из ПодчиненныеСклады Цикл
				НоваяСтрока = СопоставленныеСклады.Добавить();
				НоваяСтрока.Группа = Выборка.Склад;
				НоваяСтрока.Склад = Склад.Значение;
				НоваяСтрока.ИдентификаторСклада = Выборка.ИдентификаторСклада;
				НоваяСтрока.НаименованиеСклада = Выборка.НаименованиеСклада;
			КонецЦикла;
		Иначе
			НоваяСтрока = СопоставленныеСклады.Добавить();
			НоваяСтрока.Группа = Выборка.Склад;
			НоваяСтрока.Склад = Выборка.Склад;
			НоваяСтрока.ИдентификаторСклада = Выборка.ИдентификаторСклада;
			НоваяСтрока.НаименованиеСклада = Выборка.НаименованиеСклада;
		КонецЕсли;
	КонецЦикла;

	Если ТолькоСсылки Тогда
		СопоставленныеСклады.Свернуть("Склад");
		Возврат СопоставленныеСклады.ВыгрузитьКолонку("Склад");
	Иначе
		СопоставленныеСклады.Свернуть("Группа, Склад, ИдентификаторСклада, НаименованиеСклада");
		Возврат СопоставленныеСклады;
	КонецЕсли;

КонецФункции

// Возврат складов из сервиса.
//
// Параметры:
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//  ТолькоИзСервиса           - Булево - признак включения в ответ только данных из сервиса,
//                                       иначе выполнится дополнение данными сопоставления из ИБ,
// 
// Возвращаемое значение:
//  Структура - в состав входит таблица с информацией по складам и  описание ошибки при получении складов из сервиса.
//
Функция ПолучитьСкладыСервиса(УчетнаяЗаписьМаркетплейса, ТолькоИзСервиса = Ложь) Экспорт

	МассивСкладов = СкладыСервиса(УчетнаяЗаписьМаркетплейса);
	
	ТаблицаСкладов = НоваяТаблицаСкладов();

	СопоставленныеСклады = ПолучитьСопоставленныеСклады(УчетнаяЗаписьМаркетплейса, Ложь, Ложь);

	ОшибкаПолученияСкладовИзСервиса = Ложь;

	Если МассивСкладов = Неопределено Тогда
		ОшибкаПолученияСкладовИзСервиса = Истина;
		МассивСкладов = Новый Массив;
	КонецЕсли;

	Если МассивСкладов.Количество() > 0 Тогда
		Для Каждого ДанныеСклада Из МассивСкладов Цикл
			НоваяСтрока = ТаблицаСкладов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСклада);

			Отбор = Новый Структура("ИдентификаторСклада", ДанныеСклада.ИдентификаторСкладаМаркетплейса);
			СтрокиСопоставления = СопоставленныеСклады.НайтиСтроки(Отбор);
			Если СтрокиСопоставления.Количество() > 0 Тогда
				НоваяСтрока.Склад1С = СтрокиСопоставления[0].Склад;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Не ТолькоИзСервиса Тогда
		Для Каждого ДанныеСклада Из СопоставленныеСклады Цикл
			НоваяСтрока = ТаблицаСкладов.Добавить();
			НоваяСтрока.ИдентификаторСкладаМаркетплейса = ДанныеСклада.ИдентификаторСкладаМаркетплейса;
			НоваяСтрока.НаименованиеСкладаМаркетплейса = ДанныеСклада.НаименованиеСклада;
			НоваяСтрока.Склад1С = ДанныеСклада.Склад;
		КонецЦикла;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСкладов", ТаблицаСкладов);
	Результат.Вставить("ОшибкаПолученияСкладовИзСервиса", ОшибкаПолученияСкладовИзСервиса);

	Возврат Результат;

КонецФункции

#КонецОбласти


#Область РаботаСКатегориямиИАтрибутами

// Возвращает данные категорий.
//
// Параметры:
//  ИдентификаторКатегории: - Неопределено - данное значение указывается для получения полного списка категорий;
//							- Строка - указывается идентификатор категории.
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//  Фильтр - Строка - фильтр по характеристикам: "ALL" (по-умолчанию), "REQUIRED", "OPTIONAL".
//
// Возвращаемое значение:
//  Соответствие - данные, соответствующие идентификатору категории.
//
Функция КатегорииСервиса(ИдентификаторКатегории, УчетнаяЗапись)

	ТекстЗапроса = "/v2/category/tree";

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	ПараметрыЗапроса = Новый Структура;
	Если ИдентификаторКатегории <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("category_id", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИдентификаторКатегории));
	КонецЕсли;
	ПараметрыЗапроса.Вставить("language", "DEFAULT");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Функция - Заполнить дерево категорий
//
// Параметры:
//  ДеревоКатегорий           - ДеревоЗначений - дерево, которое необходимо заполнить,
//  УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//  ДанныеКэша                - Массив - массив данных из кэша клиентского приложения,
//                                       из переменной ПараметрыПриложения общего модуля управляемого приложения.
// 
// Возвращаемое значение:
//  Структура - структура с заполненным деревом и кэшем клиентского приложения.
//    * ДеревоКатегорий - ДеревоЗначение - заполненное дерево категорий, переданное во входящем параметре,
//    * ДанныеКэша     - Массив - кэш клиентского приложения.
//
Функция ЗаполнитьДеревоКатегорий(ДеревоКатегорий, УчетнаяЗапись, ДанныеКэша = Неопределено) Экспорт

	ЕстьДанныеВКэше = ЗначениеЗаполнено(ДанныеКэша);
	Если Не ЕстьДанныеВКэше Тогда
		ДанныеКэша = КатегорииСервиса(0, УчетнаяЗапись);
	КонецЕсли;

	ЗаполнитьДеревоКатегорийРекурсивно(ДеревоКатегорий, ДанныеКэша);
	ДеревоКатегорий.Строки.Сортировать("НаименованиеКатегорииМаркетплейса Возр", Истина);

	Результат = Новый Структура;
	Результат.Вставить("ДеревоКатегорий", ДеревоКатегорий);
	Результат.Вставить("ДанныеКэша", ДанныеКэша);

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьДеревоКатегорийРекурсивно(СтрокаРодителя, ДанныеЗаполнения, НаименованиеРодителя = "")

	Для Каждого ДанныеКатегории Из ДанныеЗаполнения Цикл
		НоваяСтрока = СтрокаРодителя.Строки.Добавить();
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = Формат(ДанныеКатегории["category_id"], "ЧГ=");
		НоваяСтрока.НаименованиеКатегорииМаркетплейса = ДанныеКатегории["title"];
		НоваяСтрока.НаименованиеРодителяКатегорииМаркетплейса = НаименованиеРодителя;
		ЗаполнитьДеревоКатегорийРекурсивно(НоваяСтрока, ДанныеКатегории["children"], НоваяСтрока.НаименованиеКатегорииМаркетплейса);

		НоваяСтрока.ЭтоГруппа = (НоваяСтрока.Строки.Количество() > 0);
		НоваяСтрока.Уровень = ?(НоваяСтрока.ЭтоГруппа, 0, 3);
	КонецЦикла;

КонецПроцедуры

Функция ДлинаСтрокиМагическоеЧисло()
	Возврат 1000;// временно до доработки хранения и заполнения строковых значений атрибутов Ozon
КонецФункции

// Возвращает новую пустую таблицу значений для данных об атрибутах категории.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//	 * ИдентификаторКатегорииМаркетплейса 		 - Строка - идентификатор категории, которой принадлежит атрибут.
//	 * ИдентификаторРодителяАтрибутаМаркетплейса - Строка - идентификатор группы атрибутов.
//	 * НаименованиеРодителяАтрибутаМаркетплейса	 - Строка - наименование группы атрибутов.
//	 * ИдентификаторАтрибутаМаркетплейса  		 - Строка - идентификатор атрибута.
//	 * НаименованиеАтрибутаМаркетплейса 		 - Строка - наименование атрибута.
//	 * ОписаниеНазначенияАтрибута 				 - Строка - описание назначения атрибута.
//	 * ОбязательныйАтрибутМаркетплейса       	 - Булево - признак обязательной атрибута.
//	 * ЯвляетсяКоллекциейЗначений       	   	 - Булево - признак того, что атрибут содержит список значений выбора.
//	 * ДоступенВыборЗначенияИзСписка             - Булево - признак наличия списка выбора значений атрибута в 1С.
//	 * ТипЗначенияАтрибута                       - Строка - тип значения характеристики.	
//	 * ТипЗначенияАтрибута1С                     - Строка - тип значения характеристики в 1С.	
//	 * ЗначениеПоУмолчанию                       - Строка, Число, Булево, Дата - значение по умолчанию.	
//	 * Реквизит1С 				       			 - Строка - путь к реквизиту 1С.
//	 * ПредставлениеРеквизита1С 				 - Строка - пользовательское представление пути к реквизиту 1С.
//	 * ИнформацияОСопоставленииЗначений 	     - Строка - представление информации о сопоставлении атрибутов.
//	 * НомерКартинкиКоллекцииТипов 				 - Число - номер картинки в коллекции ПиктограммыТиповДанных.
//	 * ЗаполненРодитель 				         - Булево - признак заполненности родителя атрибута.
//
Функция НоваяТаблицаАтрибутовКатегорииМаркетплейса()

	ОписаниеТипаСтрока			= Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока50		= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250		= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока1000		= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(ДлинаСтрокиМагическоеЧисло()));
	ОписаниеТипаБулево			= Новый ОписаниеТипов("Булево");
	ОписаниеТипаЧисло2			= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2));

	Результат = Новый ТаблицаЗначений; 
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса",                 Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторРодителяАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеРодителяАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ОписаниеНазначенияАтрибута", ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ОбязательныйАтрибут", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ЯвляетсяКоллекциейЗначений", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ДоступенВыборЗначенияИзСписка", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ТипЗначенияАтрибута", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ТипЗначенияАтрибута1С", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ЗначениеПоУмолчанию");// произвольный
	Результат.Колонки.Добавить("Реквизит1С", ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ПредставлениеРеквизита1С", ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ИнформацияОСопоставленииЗначений", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НомерКартинкиКоллекцииТипов", ОписаниеТипаЧисло2);
	Результат.Колонки.Добавить("ЗаполненРодитель", ОписаниеТипаБулево);

	Возврат Результат;

КонецФункции

Функция ПодготовитьМассивКатегорий(ИдентификаторКатегории)

	МассивКатегорий = Новый Массив;

	Если ТипЗнч(ИдентификаторКатегории) = Тип("Массив") Тогда
		Для Каждого Элемент Из ИдентификаторКатегории Цикл
			Если Не ЗначениеЗаполнено(Элемент) Тогда
				Продолжить;
			КонецЕсли;

			МассивКатегорий.Добавить(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Элемент));
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторКатегории) Тогда
		МассивКатегорий.Добавить(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИдентификаторКатегории));
	КонецЕсли;

	Возврат МассивКатегорий;

КонецФункции

// Возвращает новую пустую таблицу значений для данных о значениях атрибута категории.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//   * ИдентификаторКатегорииМаркетплейса  - Строка - идентификатор категории, которой принадлежит атрибут.
//   * ИдентификаторАтрибутаМаркетплейса   - Строка - идентификатор атрибута.
//   * ИдентификаторЗначенияАтрибута       - Строка - идентификатор значения атрибута.
//   * ЗначениеАтрибута                    - Строка, Число, Булево, Дата - значение атрибута.
//   * ОписаниеЗначенияАтрибута            - Строка - описание значения атрибута.
//   * АдресИзображенияДляЗначенияАтрибута - Строка - публичный адрес изображения для значения атрибута.
//
Функция НоваяТаблицаЗначенийАтрибутаКатегории()

	ОписаниеТипаСтрока    = Новый ОписаниеТипов("Строка"); 
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока1000 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(ДлинаСтрокиМагическоеЧисло()));

	Результат = Новый ТаблицаЗначений; 
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторЗначенияАтрибута", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ЗначениеАтрибута");// произвольный
	Результат.Колонки.Добавить("ОписаниеЗначенияАтрибута", ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("АдресИзображенияДляЗначенияАтрибута", ОписаниеТипаСтрока250);

	Возврат Результат;

КонецФункции

Функция НовыйСписокСвойствОбъединенияТоваровВОднуКарточку()

	СвойстваОбъединенияТоваровВОднуКарточку = Новый Структура; 
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ДоступноОбъединениеТоваровВОднуКарточку", Ложь);
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ИдентификаторАтрибута", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("НаименованиеАтрибута", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ОбязательныйАтрибут", Ложь);
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ТипЗначенияАтрибута", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ТипЗначенияАтрибута1С", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ОписаниеНазначенияАтрибута", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("Реквизит1С", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ПредставлениеРеквизита1С", "");
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ЗначениеРеквизита1С"); // Любая ссылка, Число, Строка, Дата, Булево
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("ИзменилсяРеквизит1С", Ложь);
	СвойстваОбъединенияТоваровВОднуКарточку.Вставить("КэшЗначениеРеквизита1С"); // Любая ссылка, Число, Строка, Дата, Булево

	Возврат СвойстваОбъединенияТоваровВОднуКарточку;

КонецФункции

// Возвращает пустой список параметров.
// 
// Возвращаемое значение:
//  Структура - список параметров.
//
Функция ПараметрыДляЗаполненияАтрибутовКатегории() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("ВариантОтображенияАтрибутов", "Все");
	Параметры.Вставить("ИдентификаторКатегорииМаркетплейса", "");
	Параметры.Вставить("ИсточникКатегорииМаркетплейса", Неопределено);
	Параметры.Вставить("ИдентификаторИсточникаКатегорииМаркетплейса", "");
	Параметры.Вставить("СоответствиеПсевдонимовМетаданных", Новый Структура);
	Параметры.Вставить("ПоляСхемыКомпоновкиДанных", Новый Массив);

	Возврат Параметры;

КонецФункции

// Заполняет атрибуты категории.
//
// Параметры:
//  Параметры       - Структура - см ПараметрыДляЗаполненияАтрибутовКатегории().
//  УчетнаяЗапись   - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//  ДеревоАтрибутов - ДеревоЗначений - 
//  ДанныеКэша      - Массив - массив данных из кэша клиентского приложения,
//                                       из переменной ПараметрыПриложения общего модуля управляемого приложения.
// 
// Возвращаемое значение:
//  Структура -
//    * СвойстваОбъединенияТоваровВОднуКарточку - Структура - см НовыйСписокСвойствОбъединенияТоваровВОднуКарточку(),
//    * ДеревоАтрибутов                         - ДеревоЗначений - заполненное дерево атрибутов,
//    * ДанныеКэша                              - Массив - кэш клиентского приложения.
//    * ТекстОшибки                             - Строка - описание ошибки.
//
Функция ЗаполнитьДанныеАтрибутовКатегории(Параметры, УчетнаяЗапись, ДеревоАтрибутов, ДанныеКэша = Неопределено) Экспорт

	ЕстьДанныеВКэше = ЗначениеЗаполнено(ДанныеКэша);
	Если Не ЕстьДанныеВКэше Тогда
		ТаблицаАтрибутов = ПолучитьАтрибутыКатегории( УчетнаяЗапись, Параметры.ИдентификаторКатегорииМаркетплейса );
		Если ЗначениеЗаполнено(ТаблицаАтрибутов) Тогда
			ДанныеКэша = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаАтрибутов);
			ТаблицаАтрибутов = Неопределено;
		Иначе
			ДанныеКэша = Новый Массив;
		КонецЕсли;
	КонецЕсли;

	// Данные из регистра сведений "Соответствия атрибутов маркетплейса".
	ДанныеСоответствияАтрибутовКатегории = ПолучитьДанныеСоответствияАтрибутовКатегории(Параметры.ИдентификаторКатегорииМаркетплейса,
			Параметры.ИсточникКатегорииМаркетплейса, УчетнаяЗапись);

	ТекстыОшибок = Новый Массив;

	Если НЕ ЗначениеЗаполнено(ДанныеКэша) Тогда
		ДанныеАтрибутов = ДанныеСоответствияАтрибутовКатегории;
		ТекстыОшибок.Добавить(НСтр("ru = 'Не удалось получить атрибуты выбранной категории из сервиса по причине: ошибка выполнения запроса. Подробнее см. журнал регистрации.'"));
	Иначе
		ДанныеАтрибутов = ДанныеКэша;
	КонецЕсли;

	СоответствиеТипов = СоответствиеТипов();
	СвойстваОбъединенияТоваровВОднуКарточку = НовыйСписокСвойствОбъединенияТоваровВОднуКарточку();

	ПутьКРеквизитам1СПоУмолчанию = ПутьКРеквизитам1СПоУмолчанию();

	// Получение данных по доступным полям компоновщика, из которых был выбран реквизит 1С.
	Результат = СоздатьСхемуКомпоновкиДанныхДляВыбораРеквизита(Параметры.ПоляСхемыКомпоновкиДанных, Новый УникальныйИдентификатор());
	АдресСхемыАтрибутов = Результат.АдресСхемы;

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыАтрибутов));
	ДоступныеПоляВыбора = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора;
	УдалитьИзВременногоХранилища(АдресСхемыАтрибутов);

	ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута = (ДеревоАтрибутов.Колонки.Найти("КоличествоЗначений1СВсего") <> Неопределено);

	// Заполнение дерева атрибутов категории.
	Для Каждого ДанныеАтрибута Из ДанныеАтрибутов Цикл

		Если Параметры.ВариантОтображенияАтрибутов = "Основные"
			И Не ДанныеАтрибута.ОбязательныйАтрибут
			Или Параметры.ВариантОтображенияАтрибутов = "Дополнительные"
			И ДанныеАтрибута.ОбязательныйАтрибут Тогда 
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса) Тогда
			Родитель = ДеревоАтрибутов.Строки.Найти(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса,
					"ИдентификаторАтрибутаМаркетплейса", Ложь);

			Если Родитель = Неопределено Тогда
				Родитель = ДеревоАтрибутов.Строки.Добавить();
				Родитель.ИдентификаторКатегорииМаркетплейса = ДанныеАтрибута.ИдентификаторКатегорииМаркетплейса;
				Родитель.ИдентификаторАтрибутаМаркетплейса = ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса;
				Родитель.НаименованиеАтрибутаМаркетплейса = ДанныеАтрибута.НаименованиеРодителяАтрибутаМаркетплейса;
				Родитель.НомерКартинкиКоллекцииТипов = 99;
				Родитель.Уровень = 0;
			КонецЕсли;
		Иначе
			Родитель = ДеревоАтрибутов;
		КонецЕсли;

		НоваяСтрока = Родитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеАтрибута);
		НоваяСтрока.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
		НоваяСтрока.Уровень = 3;

		Если НоваяСтрока.ЯвляетсяКоллекциейЗначений И НоваяСтрока.НомерКартинкиКоллекцииТипов = 9 Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = НСтр("ru = '<Коллекция значений из списка>'");
			НоваяСтрока.ПредставлениеТипаЗначенияПоУмолчанию  = НСтр("ru = '<Значение из списка>'");
		ИначеЕсли НоваяСтрока.ЯвляетсяКоллекциейЗначений Тогда
			НоваяСтрока.ПредставлениеТипаЗначенияПоУмолчанию =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '<Коллекция значений типа %1>'"), ПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С));
		ИначеЕсли НоваяСтрока.НомерКартинкиКоллекцииТипов = 9 Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = НСтр("ru = '<Значение из списка>'");
			НоваяСтрока.ПредставлениеТипаЗначенияПоУмолчанию  = НСтр("ru = '<Значение из списка>'");
		Иначе
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = "<" + ПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С) + ">";
			НоваяСтрока.ПредставлениеТипаЗначенияПоУмолчанию  = "<" + ПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С) + ">";
		КонецЕсли;

		ЗаписьСоответствия =
				ДанныеСоответствияАтрибутовКатегории.Найти(НоваяСтрока.ИдентификаторАтрибутаМаркетплейса, "ИдентификаторАтрибутаМаркетплейса");

		Если ЗаписьСоответствия <> Неопределено Тогда
			ЗаписьСоответствия.Используется = Истина;

			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьСоответствия, , "ТипЗначенияАтрибута");
			
			СообщениеОбОшибке =
					ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПроверитьДублированиеДополнительногоРеквизита(ЗаписьСоответствия.Реквизит1С,
							ЗаписьСоответствия.ПредставлениеРеквизита1С, ДоступныеПоляВыбора);

			Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
				ТекстыОшибок.Добавить(СообщениеОбОшибке + " "
						+ НСтр("ru = 'Реквизит не используется при заполнении атрибутов товара. Необходимо выбрать другой реквизит или переименовать текущий в форме списка дополнительных реквизитов / сведений и перевыбрать его.'"));
			КонецЕсли;
		ИначеЕсли ПутьКРеквизитам1СПоУмолчанию.Свойство("Атрибут_" + ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, ЗаписьСоответствия) Тогда
			ПорядокСортировки = 0;
			ЗаписьСоответствия.Свойство("ПорядокСортировки", ПорядокСортировки);
			НоваяСтрока.ПорядокСортировки = ?(ПорядокСортировки = 0, НоваяСтрока.ПорядокСортировки, ПорядокСортировки);
			ЗаписьСоответствия.Свойство("Реквизит1С", НоваяСтрока.Реквизит1С);
			ЗаписьСоответствия.Свойство("ПредставлениеРеквизита1С", НоваяСтрока.ПредставлениеРеквизита1С);
			ЗаписьСоответствия.Свойство("ИдентификаторОбъектаМетаданных1С", НоваяСтрока.ИдентификаторОбъектаМетаданных1С);
			ЗаписьСоответствия.Свойство("ИдентификаторЗначенияПоУмолчанию", НоваяСтрока.ЗначениеПоУмолчаниюИдентификатор);
			ЗаписьСоответствия.Свойство("ЗначениеПоУмолчанию", НоваяСтрока.ЗначениеПоУмолчанию);

			// Добавление записи в регистр соответствия атрибутов.
			МенеджерЗаписи = РегистрыСведений.СоответствияАтрибутовМаркетплейсов.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НоваяСтрока); 
			
			МенеджерЗаписи.Категория1С = Параметры.ИсточникКатегорииМаркетплейса;
			МенеджерЗаписи.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
			МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
			МенеджерЗаписи.ПолныйПутьКРеквизиту1С = НоваяСтрока.Реквизит1С;
			МенеджерЗаписи.ИдентификаторЗначенияПоУмолчанию = НоваяСтрока.ЗначениеПоУмолчаниюИдентификатор;
			МенеджерЗаписи.ДатаАктуальности = ТекущаяДатаСеанса();
			МенеджерЗаписи.Записать();
		ИначеЕсли НоваяСтрока.ОбязательныйАтрибут Тогда
			// Добавление записи в регистр соответствия атрибутов.
			МенеджерЗаписи = РегистрыСведений.СоответствияАтрибутовМаркетплейсов.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НоваяСтрока);
			
			МенеджерЗаписи.Категория1С = Параметры.ИсточникКатегорииМаркетплейса;
			МенеджерЗаписи.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
			МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
			МенеджерЗаписи.ДатаАктуальности = ТекущаяДатаСеанса();
			МенеджерЗаписи.Записать();
		КонецЕсли;

		Если ЗначениеЗаполнено(НоваяСтрока.Реквизит1С) Тогда
			ПолеПоРеквизиту1С = ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(НоваяСтрока.Реквизит1С));

			Если ПолеПоРеквизиту1С <> Неопределено Тогда
				НоваяСтрока.ТипЗначенияРеквизита1С = ПолеПоРеквизиту1С.ТипЗначения;
			КонецЕсли;
		КонецЕсли;

		Если ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута Тогда
			ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута(НоваяСтрока, УчетнаяЗапись, Параметры.СоответствиеПсевдонимовМетаданных);
		КонецЕсли;
	КонецЦикла;

	// Удаление атрибутов, отсутствующих в ответе метода API.
	Отбор = Новый Структура;
	Отбор.Вставить("Используется", Ложь);
	Если Параметры.ВариантОтображенияАтрибутов = "Основные" Тогда
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
	ИначеЕсли Параметры.ВариантОтображенияАтрибутов = "Дополнительные" Тогда
		Отбор.Вставить("ОбязательныйАтрибут", Ложь);
	КонецЕсли;

	УдаляемыеЗаписиСоответствия = ДанныеСоответствияАтрибутовКатегории.НайтиСтроки(Отбор);
	Для Каждого СтрокаСоответствия Из УдаляемыеЗаписиСоответствия Цикл 
		МенеджерЗаписи = РегистрыСведений.СоответствияАтрибутовМаркетплейсов.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаСоответствия, "ИдентификаторКатегорииМаркетплейса, ИдентификаторАтрибутаМаркетплейса");
		
		МенеджерЗаписи.Категория1С = Параметры.ИсточникКатегорииМаркетплейса;
		МенеджерЗаписи.ИдентификаторКатегории1С = Параметры.ИдентификаторИсточникаКатегорииМаркетплейса;
		МенеджерЗаписи.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
		МенеджерЗаписи.Удалить();
	КонецЦикла;

	ДеревоАтрибутов.Строки.Сортировать("Уровень, ОбязательныйАтрибут Убыв, ПорядокСортировки, НаименованиеАтрибутаМаркетплейса", Истина);

	Если НЕ ЗначениеЗаполнено(ДанныеКэша) И ДеревоАтрибутов.Строки.Количество() > 0 Тогда
		ТекстыОшибок.Добавить(НСтр("ru = 'Заполнение атрибутов выполнено из сохраненных настроек.'"));
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("СвойстваОбъединенияТоваровВОднуКарточку", СвойстваОбъединенияТоваровВОднуКарточку);
	Результат.Вставить("ДеревоАтрибутов", ДеревоАтрибутов);
	Результат.Вставить("ДанныеКэша", ДанныеКэша);
	Результат.Вставить("ТекстОшибки", СтрСоединить(ТекстыОшибок, Символы.ПС));

	Возврат Результат;

КонецФункции

// Функция - Заполнить информацию по атрибутам категории
//
// Параметры:
//  Параметры     - Структура - параметры ИдентификаторКатегорииМаркетплейса,
//                              НаименованиеКатегорииМаркетплейса,
//                              НаименованиеРодителяКатегорииМаркетплейса.
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//  ДанныеКэша    - Массив - массив данных из кэша клиентского приложения,
//                           из переменной ПараметрыПриложения общего модуля управляемого приложения.
//
// Возвращаемое значение:
//  Структура -
//    * ТабличныйДокумент                     - ТабличныйДокумент - Описание атрибутов категории,
//    * ИнформацияОСопоставленныхКатегориях1С - Строка - список сопоставленных категорий 1С.
//    * ДанныеКэша                            - Массив - кэш клиентского приложения.
//
Функция ЗаполнитьИнформациюПоАтрибутамКатегории(Параметры, УчетнаяЗапись, ДанныеКэша = Неопределено) Экспорт

	ЕстьДанныеВКэше = ЗначениеЗаполнено(ДанныеКэша);
	Если Не ЕстьДанныеВКэше Тогда
		ТаблицаАтрибутов = ПолучитьАтрибутыКатегории( УчетнаяЗапись, Параметры.ИдентификаторКатегорииМаркетплейса );
		ТаблицаАтрибутов.Сортировать("ЗаполненРодитель УБЫВ, НаименованиеРодителяАтрибутаМаркетплейса ВОЗР,
				|ОбязательныйАтрибут УБЫВ, НаименованиеАтрибутаМаркетплейса ВОЗР");

		Если ЗначениеЗаполнено(ТаблицаАтрибутов) Тогда
			ДанныеКэша = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаАтрибутов);
			ТаблицаАтрибутов = Неопределено;
		Иначе
			ДанныеКэша = Новый Массив;
		КонецЕсли;
	КонецЕсли;

	// Заполнение дерева атрибутов в табличном документе.
	ТабличныйДокумент = Новый ТабличныйДокумент;

	Макет = Справочники.УчетныеЗаписиМаркетплейсов.ПолучитьМакет("ПФ_MXL_КарточкаКатегории");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьГруппаАтрибутов = Макет.ПолучитьОбласть("ГруппаАтрибутов");
	ОбластьУровень1_ОбязательныйАтрибут = Макет.ПолучитьОбласть("Уровень1_ОбязательныйАтрибут");
	ОбластьУровень1_Атрибут = Макет.ПолучитьОбласть("Уровень1_Атрибут");
	ОбластьУровень2_ОбязательныйАтрибут = Макет.ПолучитьОбласть("Уровень2_ОбязательныйАтрибут");
	ОбластьУровень2_Атрибут = Макет.ПолучитьОбласть("Уровень2_Атрибут");
	ОбластьОписаниеАтрибута = Макет.ПолучитьОбласть("ОписаниеАтрибута");
	ОбластьОписаниеАтрибутаСтрокой = Макет.ПолучитьОбласть("ОписаниеАтрибутаСтрокой");

	ОбластьШапка.Параметры.НаименованиеКатегории = Параметры.НаименованиеКатегорииМаркетплейса +
			" (" + Параметры.ИдентификаторКатегорииМаркетплейса + ")";
	ОбластьШапка.Параметры.НаименованиеРодителя = Параметры.НаименованиеРодителяКатегорииМаркетплейса;
	ТабличныйДокумент.Вывести(ОбластьШапка);

	СоответствиеТипов = СоответствиеТипов();

	ТекущийРодитель = "";

	Для Каждого ДанныеАтрибута Из ДанныеКэша Цикл
		Если ЗначениеЗаполнено(ТекущийРодитель) И ТекущийРодитель <> ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса Тогда
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			ТекущийРодитель = "";
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса) Тогда
			Если Не ЗначениеЗаполнено(ТекущийРодитель) Тогда
				ТекущийРодитель = ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса;

				ОбластьГруппаАтрибутов.Параметры.ГруппаАтрибутов = ДанныеАтрибута.НаименованиеРодителяАтрибутаМаркетплейса;
				ТабличныйДокумент.Вывести(ОбластьГруппаАтрибутов);

				ТабличныйДокумент.НачатьГруппуСтрок(, Истина);
			КонецЕсли;
		КонецЕсли;

		Если ДанныеАтрибута.ОбязательныйАтрибут И ЗначениеЗаполнено(ТекущийРодитель) Тогда
			ОбластьАтрибута = ОбластьУровень2_ОбязательныйАтрибут;
		ИначеЕсли ДанныеАтрибута.ОбязательныйАтрибут Тогда
			ОбластьАтрибута = ОбластьУровень1_ОбязательныйАтрибут;
		ИначеЕсли ЗначениеЗаполнено(ТекущийРодитель) Тогда
			ОбластьАтрибута = ОбластьУровень2_Атрибут;
		Иначе
			ОбластьАтрибута = ОбластьУровень1_Атрибут;
		КонецЕсли;

		ОбластьАтрибута.Параметры.Атрибут = ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса;
		ТабличныйДокумент.Вывести(ОбластьАтрибута);

		ТабличныйДокумент.НачатьГруппуСтрок(, Ложь);

		ОбластьОписаниеАтрибута.Параметры.Заголовок = НСтр("ru = 'Описание назначения атрибута'");
		ОбластьОписаниеАтрибута.Параметры.ОписаниеАтрибута = ДанныеАтрибута.ОписаниеНазначенияАтрибута;
		ТабличныйДокумент.Вывести(ОбластьОписаниеАтрибута);

		ОбластьОписаниеАтрибута.Параметры.Заголовок = НСтр("ru = 'Тип значения атрибута'");
		ОбластьОписаниеАтрибута.Параметры.ОписаниеАтрибута = "" + СоответствиеТипов.Получить(ДанныеАтрибута.ТипЗначенияАтрибута)
		 + " (" + ДанныеАтрибута.ТипЗначенияАтрибута + ")";
		ТабличныйДокумент.Вывести(ОбластьОписаниеАтрибута);

		ОбластьОписаниеАтрибута.Параметры.Заголовок = НСтр("ru = 'ID атрибута'");
		ОбластьОписаниеАтрибута.Параметры.ОписаниеАтрибута = ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса;
		ТабличныйДокумент.Вывести(ОбластьОписаниеАтрибута);

		Если ДанныеАтрибута.ДоступенВыборЗначенияИзСписка И ДанныеАтрибута.ЯвляетсяКоллекциейЗначений Тогда
			ОписаниеАтрибута =
					НСтр("ru = 'Для атрибута может быть выбрано несколько значений из предложенного списка.'");
		ИначеЕсли ДанныеАтрибута.ДоступенВыборЗначенияИзСписка Тогда
			ОписаниеАтрибута =
					НСтр("ru = 'Для атрибута может быть выбрано одно значение из предложенного списка.'");
		ИначеЕсли ДанныеАтрибута.ЯвляетсяКоллекциейЗначений Тогда
			ОписаниеАтрибута =
					НСтр("ru = 'Для атрибута может быть указано одно значение.'");
		Иначе
			ОписаниеАтрибута =
					НСтр("ru = 'Для атрибута может быть указано одновременно несколько значений.'");
		КонецЕсли;

		Если ДанныеАтрибута.ОбязательныйАтрибут Тогда
			ОписаниеАтрибута = ОписаниеАтрибута +  Символы.ПС
						+ НСтр("ru = 'Атрибут является обязательным для заполнения.'");
		Иначе
			ОписаниеАтрибута = ОписаниеАтрибута +  Символы.ПС
						+ НСтр("ru = 'Атрибут не является обязательным для заполнения.'");
		КонецЕсли;

		ОбластьОписаниеАтрибутаСтрокой.Параметры.ОписаниеАтрибута = ОписаниеАтрибута;
		ТабличныйДокумент.Вывести(ОбластьОписаниеАтрибутаСтрокой);

		ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЦикла;

	Если ЗначениеЗаполнено(ТекущийРодитель) Тогда
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
		ТекущийРодитель = "";
	КонецЕсли;

	МассивКатегорий1С = СопоставленныеКатегории1С(Параметры.ИдентификаторКатегорииМаркетплейса, УчетнаяЗапись);
	ИнформацияОСопоставленныхКатегориях1С = СтрСоединить(МассивКатегорий1С, Символы.ПС);

	Результат = Новый Структура;
	Результат.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	Результат.Вставить("ДанныеКэша", ДанныеКэша);
	Результат.Вставить("ИнформацияОСопоставленныхКатегориях1С", ИнформацияОСопоставленныхКатегориях1С);

	Возврат Результат;

КонецФункции

Функция СопоставленныеКатегории1С(ИдентификаторКатегорииМаркетплейса, УчетнаяЗапись)

	МассивКатегорий1С = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ИдентификаторКатегорииМаркетплейса", ИдентификаторКатегорииМаркетплейса);
	Запрос.Текст =
	  "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	  |	СоответствияОбъектовМаркетплейсов.Объект1С КАК Категория1С
	  |ИЗ
	  |	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
	  |ГДЕ
	  |	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
	  |	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров)
	  |	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса = &ИдентификаторКатегорииМаркетплейса";
	ВыборкаКатегорий1С = Запрос.Выполнить().Выбрать();
	Пока ВыборкаКатегорий1С.Следующий() Цикл
		МассивКатегорий1С.Добавить(ВыборкаКатегорий1С.Категория1С);
	КонецЦикла;

	Если МассивКатегорий1С.Количество() = 0 Тогда
		МассивКатегорий1С.Добавить(НСтр("ru = 'Нет данных сопоставления'"));
	КонецЕсли;

	Возврат МассивКатегорий1С;

КонецФункции

Функция ПолучитьДанныеСоответствияАтрибутовКатегории(ИдентификаторКатегории, Категория1С, УчетнаяЗапись)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ИдентификаторКатегории", ИдентификаторКатегории);
	Запрос.УстановитьПараметр("Категория1С", Категория1С);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегории1С КАК ИдентификаторКатегории1С,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторОбъектаМетаданных1С КАК ИдентификаторОбъектаМетаданных1С,
		|	СоответствияАтрибутовМаркетплейсов.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
		|	СоответствияАтрибутовМаркетплейсов.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
		|	СоответствияАтрибутовМаркетплейсов.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
		|	СоответствияАтрибутовМаркетплейсов.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
		|	СоответствияАтрибутовМаркетплейсов.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута,
		|	СоответствияАтрибутовМаркетплейсов.ПолныйПутьКРеквизиту1С КАК Реквизит1С,
		|	СоответствияАтрибутовМаркетплейсов.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию КАК ЗначениеПоУмолчаниюИдентификатор,
		|	СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчаниюСтрокаНеограниченная КАК ЗначениеПоУмолчаниюСтрокаНеограниченная,
		|	СоответствияАтрибутовМаркетплейсов.ПорядокСортировки КАК ПорядокСортировки
		|ИЗ
		|	РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
		|ГДЕ
		|	СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса = &ИдентификаторКатегории
		|	И СоответствияАтрибутовМаркетплейсов.Категория1С = &Категория1С
		|	И СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись";

	ДанныеСоответствияАтрибутовКатегории = Запрос.Выполнить().Выгрузить();
	
	// Подменим тип на произвольный для ЗначениеПоУмолчанию и заполним из ЗначениеПоУмолчаниюСтрокаНеограниченная 
	ДанныеСоответствияАтрибутовКатегории.Колонки.Добавить( "ЗначениеПоУмолчаниюНовое" );
	Для Каждого Элемент Из ДанныеСоответствияАтрибутовКатегории Цикл
		
		Элемент.ЗначениеПоУмолчаниюНовое = Элемент.ЗначениеПоУмолчанию;
		
		Если Не ПустаяСтрока( Элемент.ЗначениеПоУмолчаниюСтрокаНеограниченная ) 
		И ТипЗнч( Элемент.ЗначениеПоУмолчаниюНовое ) = Тип( "Строка" ) 
		И СтрДлина( Элемент.ЗначениеПоУмолчаниюНовое ) < СтрДлина( Элемент.ЗначениеПоУмолчаниюСтрокаНеограниченная )
		Тогда
			Элемент.ЗначениеПоУмолчаниюНовое = Элемент.ЗначениеПоУмолчаниюСтрокаНеограниченная;
		КонецЕсли;
		
	КонецЦикла;
	ДанныеСоответствияАтрибутовКатегории.Колонки.Удалить( "ЗначениеПоУмолчанию" );
	ДанныеСоответствияАтрибутовКатегории.Колонки[ "ЗначениеПоУмолчаниюНовое" ].Имя = "ЗначениеПоУмолчанию";
	
	
	ДанныеСоответствияАтрибутовКатегории.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ДанныеСоответствияАтрибутовКатегории.Индексы.Добавить("ИдентификаторАтрибутаМаркетплейса");

	Возврат ДанныеСоответствияАтрибутовКатегории;

КонецФункции

Функция ЗаполнитьДанныеЗначенийАтрибутаКатегории(ТаблицаСоответствияЗначенийАтрибута, Параметры, УчетнаяЗапись, ДанныеКэша = Неопределено) Экспорт

	ЗаполнитьСоответствияЗначенийАтрибута(ТаблицаСоответствияЗначенийАтрибута, Параметры, УчетнаяЗапись);

	Возврат ТаблицаСоответствияЗначенийАтрибута;

КонецФункции

// Возвращает список выбора по заданным параметрам.
//
// Параметры:
//  Параметры                - Структура - см. НовыеПараметрыЗапросаЗначенийАтрибута()
//  УчетнаяЗапись            - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//  ВариантПолученияЗначений - Строка - доступны варианты:
//                                      "ТипыСоответствияТребованиям",
//                                      "ЗначенияАтрибутов".
//  ДанныеКэша               - Массив - массив данных из кэша клиентского приложения,
//                                       из переменной ПараметрыПриложения общего модуля управляемого приложения.
// 
// Возвращаемое значение:
//  Структура -
//    * ТаблицаЗначенийВыбора - ТаблицаЗначений - таблица с данными по списку выбора,
//    * ДанныеКэша            - Массив - кэш клиентского приложения.
//
Функция ДоступныеЗначенияВыбора(Параметры, УчетнаяЗапись, ВариантПолученияЗначений, ДанныеКэша = Неопределено) Экспорт

	ЕстьДанныеВКэше = ЗначениеЗаполнено(ДанныеКэша);
	Если Не ЕстьДанныеВКэше Тогда
		ТаблицаЗначенийВыбора = ПолучитьЗначенияАтрибутаКатегории(УчетнаяЗапись, Параметры);

		Если ТаблицаЗначенийВыбора <> Неопределено Тогда
			ТаблицаЗначенийВыбора.Сортировать("ЗначениеАтрибута");

			ДанныеКэша = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаЗначенийВыбора);
		КонецЕсли;
	Иначе
		ТаблицаЗначенийВыбора = МассивВТаблицуЗначений(ДанныеКэша);
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаЗначенийВыбора", ТаблицаЗначенийВыбора);
	Результат.Вставить("ДанныеКэша", ДанныеКэша);

	Возврат Результат;

КонецФункции

Функция ДанныеДляФормированияЗапросаЗначенийАтрибутовТекстЗапроса()
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК НаборСвойств
	|ПОМЕСТИТЬ НаборыСвойств
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора = &ИмяПредопределенногоНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.Ссылка КАК ДополнительноеСвойство,
	|	ПРЕДСТАВЛЕНИЕ(Данные.Ссылка) КАК ПредставлениеСвойства,
	|	ЛОЖЬ КАК ТочноеСовпадение
	|ПОМЕСТИТЬ ДополнительныеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборыСвойств КАК НаборыСвойств
	|		ПО Данные.НаборСвойств.Родитель = НаборыСвойств.НаборСвойств
	|ГДЕ
	|	Данные.Заголовок = &ЗаголовокСвойства
	|	И Данные.НаборСвойств <> ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Данные.Ссылка),
	|	ИСТИНА
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборыСвойств КАК НаборыСвойств
	|		ПО Данные.НаборСвойств.Родитель = НаборыСвойств.НаборСвойств
	|ГДЕ
	|	Данные.Ссылка.Заголовок = &ПредставлениеСвойства
	|	И Данные.Ссылка.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеРеквизиты.Свойство,
	|	ПРЕДСТАВЛЕНИЕ(ДополнительныеРеквизиты.Свойство),
	|	ЛОЖЬ
	|ИЗ
	|	НаборыСвойств КАК НаборыСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ПО НаборыСвойств.НаборСвойств = ДополнительныеРеквизиты.Ссылка.Родитель
	|ГДЕ
	|	ДополнительныеРеквизиты.Свойство.Заголовок = &ЗаголовокСвойства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеРеквизиты.Свойство,
	|	ПРЕДСТАВЛЕНИЕ(ДополнительныеРеквизиты.Свойство),
	|	ИСТИНА
	|ИЗ
	|	НаборыСвойств КАК НаборыСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ПО НаборыСвойств.НаборСвойств = ДополнительныеРеквизиты.Ссылка.Родитель
	|ГДЕ
	|	ДополнительныеРеквизиты.Свойство.Заголовок = &ПредставлениеСвойства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НаборыСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Данные.ДополнительноеСвойство КАК ДополнительноеСвойство,
	|	Данные.ПредставлениеСвойства КАК ПредставлениеСвойства,
	|	Данные.ДополнительноеСвойство.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
	|	Данные.ДополнительноеСвойство.ТипЗначения КАК ТипЗначения,
	|	Данные.ТочноеСовпадение КАК ТочноеСовпадение
	|ИЗ
	|	ДополнительныеСвойства КАК Данные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТочноеСовпадение УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДополнительныеСвойства";
	Возврат ТекстЗапроса;	
КонецФункции

Функция ДанныеДляФормированияЗапросаЗначенийАтрибутов(ПутьКПолю, ТипПоля, СоответствиеПсевдонимовМетаданных)

	ДанныеДляФормированияЗапроса = Новый Соответствие;

	Если Не ЗначениеЗаполнено(ПутьКПолю) Тогда
		Возврат ДанныеДляФормированияЗапроса;
	КонецЕсли;

	ЧастиПути = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ЧастиПутиКПолю(ПутьКПолю);
	КоличествоЧастейПути = ЧастиПути.Количество();

	Если КоличествоЧастейПути = 1 Тогда
		// Выбран элемент верхнего уровня.
		// В текущей задаче элементы верхнего уровня - это ссылочные типы.
		ЧастиПути.Добавить("Ссылка");
		КоличествоЧастейПути = 2;
	КонецЕсли;

	МассивПростыхТипов = ПростыеТипы();
	СоответствиеПолныхИменМетаданных = Новый Соответствие;

	ТаблицаДополнительныхСвойств = ТаблицаДополнительныхСвойств();

	Счетчик = 1;
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		Если Счетчик = 1 Тогда
			ИмяМетаданных = "";
			СоответствиеПсевдонимовМетаданных.Свойство(ЧастьПути, ИмяМетаданных);

			Если Не ЗначениеЗаполнено(ИмяМетаданных) Тогда
				Прервать;
			КонецЕсли;

			СоответствиеПолныхИменМетаданных.Вставить(ИмяМетаданных, Новый Структура);
		Иначе
			НовоеСоответствиеПолныхИменМетаданных = Новый Соответствие;

			ПредставлениеСвойства = СтрЗаменить(ЧастьПути, "[", "");
			ПредставлениеСвойства = СтрЗаменить(ПредставлениеСвойства, "]", "");

			Отбор = Новый Структура("Представление", ПредставлениеСвойства);
			ДополнительныеСведения = ТаблицаДополнительныхСвойств.НайтиСтроки(Отбор);
			ЭтоДополнительноеСвойство = (ДополнительныеСведения.Количество() > 0);

			Для Каждого ПолноеИмяМетаданных Из СоответствиеПолныхИменМетаданных Цикл

				ТипРеквизита = Неопределено;
				ДополнительноеСвойство = Неопределено;
				ЭтоДополнительноеСведение = Ложь;

				Если ЭтоДополнительноеСвойство Тогда
					ИмяПредопределенногоНабора = СтрЗаменить(ПолноеИмяМетаданных.Ключ, ".", "_");

					ПозицияПоиска = 1;
					Пока Истина Цикл
						РезультатПоиска = СтрНайти(ПредставлениеСвойства, "(", , ПозицияПоиска);

						Если РезультатПоиска = 0 Тогда
							Прервать;
						КонецЕсли;

						ПозицияПоиска = РезультатПоиска + 1;
					КонецЦикла;

					ЗаголовокСвойства = СтрЗаменить(СокрЛП(Лев(ПредставлениеСвойства, ПозицияПоиска - 2)), "[", "");

					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("ИмяПредопределенногоНабора", ИмяПредопределенногоНабора);
					Запрос.УстановитьПараметр("ЗаголовокСвойства", ЗаголовокСвойства);
					Запрос.УстановитьПараметр("ПредставлениеСвойства", ПредставлениеСвойства);
					Запрос.Текст = ДанныеДляФормированияЗапросаЗначенийАтрибутовТекстЗапроса();

					ВыборкаСвойств = Запрос.Выполнить().Выбрать();
					Пока ВыборкаСвойств.Следующий() Цикл
						Если ВыборкаСвойств.ТочноеСовпадение
							ИЛИ Не ВыборкаСвойств.ТочноеСовпадение И ВыборкаСвойств.ПредставлениеСвойства = ПредставлениеСвойства Тогда
							ТипРеквизита = ВыборкаСвойств.ТипЗначения;
							ДополнительноеСвойство = ВыборкаСвойств.ДополнительноеСвойство;
							ЭтоДополнительноеСведение = ВыборкаСвойств.ЭтоДополнительноеСведение;
							Прервать;
						КонецЕсли;
					КонецЦикла;

				ИначеЕсли Счетчик <> КоличествоЧастейПути Тогда

					ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных.Ключ);
					Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
						Если Реквизит.Имя = ЧастьПути Тогда
							ТипРеквизита = Реквизит.Тип;
							Прервать;
						КонецЕсли;
					КонецЦикла;

					Если ТипРеквизита = Неопределено Тогда
						Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
							Если Реквизит.Имя = ЧастьПути Тогда
								ТипРеквизита = Реквизит.Тип;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;

				КонецЕсли;

				Если Счетчик = КоличествоЧастейПути И ТипПоля <> Неопределено Тогда
					Для Каждого ТипЗначенияПоля Из ТипПоля.Типы() Цикл
						Данные = Новый Структура;
						Данные.Вставить("ТипЗначенияРеквизита", ТипЗначенияПоля);

						Если ОбщегоНазначения.ЭтоСсылка(ТипЗначенияПоля) Тогда
							Данные.Вставить("ПутьКРеквизиту", "Ссылка"); 

							МетаданныеПоТипу = Метаданные.НайтиПоТипу(ТипЗначенияПоля);

							Если ЗначениеЗаполнено(ДополнительноеСвойство) И МетаданныеПоТипу.Владельцы.Количество() > 0 Тогда
								ПараметрыЗапроса = Новый Структура("ДополнительноеСвойство", ДополнительноеСвойство);
								Данные.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
								Данные.Вставить("УсловиеЗапроса", "Владелец = &ДополнительноеСвойство");
							КонецЕсли;

							ДанныеДляФормированияЗапроса.Вставить(МетаданныеПоТипу.ПолноеИмя(), Данные);
						ИначеЕсли МассивПростыхТипов.Найти(ТипЗначенияПоля) <> Неопределено Тогда
							Если ЭтоДополнительноеСвойство Тогда
								ПараметрыЗапроса = Новый Структура("ДополнительноеСвойство", ДополнительноеСвойство);
								Данные.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);

								Если ЭтоДополнительноеСведение Тогда
									Данные.Вставить("ПутьКРеквизиту", "Значение");
									Данные.Вставить("УсловиеЗапроса", "ТИПЗНАЧЕНИЯ(Объект) = ТИП(" + ПолноеИмяМетаданных.Ключ + ") И Свойство = &ДополнительноеСвойство");
									ДанныеДляФормированияЗапроса.Вставить("РегистрСведений.ДополнительныеСведения", Данные);
								Иначе
									Данные.Вставить("ПутьКРеквизиту", "Значение");
									Данные.Вставить("УсловиеЗапроса", "Свойство = &ДополнительноеСвойство");
									ДанныеДляФормированияЗапроса.Вставить(ПолноеИмяМетаданных.Ключ + ".ДополнительныеРеквизиты", Данные);
								КонецЕсли;
							Иначе
								ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных.Ключ);
								
								Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(ЧастьПути, ОбъектМетаданных)
									И Не ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ЧастьПути) Тогда
									Продолжить;
								КонецЕсли;

								Если ПолноеИмяМетаданных.Значение.Количество() > 0 Тогда 
									Данные = ОбщегоНазначения.СкопироватьРекурсивно(ПолноеИмяМетаданных.Значение);
									Данные.Вставить("ТипЗначенияРеквизита", ТипЗначенияПоля);
								КонецЕсли;

								Данные.Вставить("ПутьКРеквизиту", "" + ЧастьПути);
								ДанныеДляФормированияЗапроса.Вставить(ПолноеИмяМетаданных.Ключ, Данные);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипРеквизита <> Неопределено Тогда
					Для Каждого ТипЗначенияПоля Из ТипРеквизита.Типы() Цикл
						Данные = Новый Структура;
						Данные.Вставить("ТипЗначенияРеквизита", ТипЗначенияПоля);

						Если ЭтоДополнительноеСвойство Тогда
							МетаданныеПоТипу = Метаданные.НайтиПоТипу(ТипЗначенияПоля);
							
							Если МетаданныеПоТипу.Владельцы.Количество() > 0 Тогда
								ПараметрыЗапроса = Новый Структура("ДополнительноеСвойство", ДополнительноеСвойство);
								Данные.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
								Данные.Вставить("УсловиеЗапроса", "Владелец = &ДополнительноеСвойство");
							КонецЕсли;
						КонецЕсли;

						НовоеСоответствиеПолныхИменМетаданных.Вставить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Новый(ТипЗначенияПоля)), Данные);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;

			СоответствиеПолныхИменМетаданных = НовоеСоответствиеПолныхИменМетаданных;
		КонецЕсли;

		Счетчик = Счетчик + 1;
	КонецЦикла;

	Возврат ДанныеДляФормированияЗапроса;

КонецФункции

Функция СобратьТекстЗапросаДляПолученияТаблицыИсточникаРеквизитов(ДанныеДляФормированияЗапроса)

	ТекстЗапросаДанных = "";

	ШаблонТекстаЗапросаПростыхТиповИСсылок =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	&ПутьКРеквизиту КАК ЗначениеРеквизита
		|ПОМЕСТИТЬ ИсточникДанных
		|ИЗ
		|	&ИсточникДанных КАК ИсточникДанных
		|ГДЕ
		|	&УсловиеЗапроса";

	ШаблонТекстаЗапросаТипаБулево =
		"ВЫБРАТЬ
		|	ИСТИНА КАК ЗначениеРеквизита
		|ПОМЕСТИТЬ ИсточникДанных
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК ЗначениеРеквизита";

	ОбъединениеТекстаЗапроса = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";

	ТипБулево = Тип("Булево");

	АтрибутыЗапроса = Новый Структура("ПутьКРеквизиту, ТипЗначенияРеквизита");
	АтрибутыЗапроса.Вставить("УсловиеЗапроса", "Истина");
	АтрибутыЗапроса.Вставить("ПараметрыЗапроса", Новый Структура);

	Для Каждого ЧастьДанныхДляФормированияЗапроса Из ДанныеДляФормированияЗапроса Цикл
		ИсточникДанных = ЧастьДанныхДляФормированияЗапроса.Ключ;
		ЗаполнитьЗначенияСвойств(АтрибутыЗапроса, ЧастьДанныхДляФормированияЗапроса.Значение);

		ДополнительноеУсловиеЗапроса = "";

		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИсточникДанных);
		Если ОбъектМетаданных <> Неопределено Тогда
			СвойстваПроверки = Новый Структура("Иерархический, ВидИерархии", Ложь);
			ЗаполнитьЗначенияСвойств(СвойстваПроверки, ОбъектМетаданных);
			Если СвойстваПроверки.Иерархический
				И СвойстваПроверки.ВидИерархии =  Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				ДополнительноеУсловиеЗапроса = Символы.ПС + "И НЕ ИсточникДанных.ЭтоГруппа";
			КонецЕсли;
		КонецЕсли;

		Если АтрибутыЗапроса.ТипЗначенияРеквизита = ТипБулево Тогда
			ТекстЧастиЗапроса = ШаблонТекстаЗапросаТипаБулево;
		Иначе
			ТекстЧастиЗапроса = СтрЗаменить(ШаблонТекстаЗапросаПростыхТиповИСсылок, "&ИсточникДанных", ИсточникДанных);
			Если АтрибутыЗапроса.ТипЗначенияРеквизита = Тип("Строка") Тогда
				ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "&ПутьКРеквизиту", "ВЫРАЗИТЬ(" + АтрибутыЗапроса.ПутьКРеквизиту + " КАК Строка(1024))");
			Иначе
				ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "&ПутьКРеквизиту", АтрибутыЗапроса.ПутьКРеквизиту);
			КонецЕсли;

			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "&УсловиеЗапроса", АтрибутыЗапроса.УсловиеЗапроса + ДополнительноеУсловиеЗапроса);
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекстЗапросаДанных) Тогда
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "РАЗРЕШЕННЫЕ", "");
			ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "ПОМЕСТИТЬ ИсточникДанных", "");
			ТекстЗапросаДанных = ТекстЗапросаДанных + ОбъединениеТекстаЗапроса + ТекстЧастиЗапроса;
		Иначе
			ТекстЗапросаДанных = ТекстЧастиЗапроса;
		КонецЕсли;
	КонецЦикла;

	Результат = Новый Структура("ТекстЗапросаДанных, ПараметрыЗапроса", ТекстЗапросаДанных, АтрибутыЗапроса.ПараметрыЗапроса);
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьИнформациюОСопоставленииЗначенийАтрибута(ДанныеДляЗаполнения, УчетнаяЗапись, СоответствиеПсевдонимовМетаданных) Экспорт

	ДанныеДляЗаполнения.КоличествоЗначений1СВсего = 0;
	ДанныеДляЗаполнения.КоличествоСопоставленныхЗначений = 0;
	ДанныеДляЗаполнения.ИнформацияОСопоставленииЗначений = НСтр("ru = 'Не обнаружены значения 1С'");

	ШаблонСоответствия = НСтр("ru = 'Сопоставлено %1 из %2'");

	ДанныеДляФормированияЗапроса = ДанныеДляФормированияЗапросаЗначенийАтрибутов(
			ДанныеДляЗаполнения.Реквизит1С, ДанныеДляЗаполнения.ТипЗначенияРеквизита1С, СоответствиеПсевдонимовМетаданных);

	Если ЗначениеЗаполнено(ДанныеДляФормированияЗапроса) Тогда
		Результат = СобратьТекстЗапросаДляПолученияТаблицыИсточникаРеквизитов(ДанныеДляФормированияЗапроса);
		ТекстЗапросаДанных = Результат.ТекстЗапросаДанных;

		ТекстЗапросаДанных = ТекстЗапросаДанных + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|" +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсточникДанных.ЗначениеРеквизита) КАК КоличествоЗначений1С,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствияОбъектовМаркетплейсов.Объект1С) КАК КоличествоСоответствий
			|ИЗ
			|	ИсточникДанных КАК ИсточникДанных
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
			|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ЗначениеАтрибутаКатегорииТоваров))
			|			И (СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса = &ИдентификаторВладельцаОбъектаМаркетплейса)
			|			И ИсточникДанных.ЗначениеРеквизита = СоответствияОбъектовМаркетплейсов.Объект1С
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ИсточникДанных";

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.УстановитьПараметр("ИдентификаторВладельцаОбъектаМаркетплейса",
				ДанныеДляЗаполнения.ИдентификаторКатегории1С +
				"/" + ДанныеДляЗаполнения.ИдентификаторКатегорииМаркетплейса +
				"/" + ДанныеДляЗаполнения.ИдентификаторАтрибутаМаркетплейса);

		Для Каждого ПараметрЗапроса Из Результат.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;

		Запрос.Текст = ТекстЗапросаДанных;

		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		Если ВыборкаДанных.Следующий() Тогда
			ДанныеДляЗаполнения.КоличествоЗначений1СВсего = ВыборкаДанных.КоличествоЗначений1С;
			ДанныеДляЗаполнения.КоличествоСопоставленныхЗначений = ВыборкаДанных.КоличествоСоответствий;

			Если ДанныеДляЗаполнения.КоличествоЗначений1СВсего <> 0 Тогда
				ДанныеДляЗаполнения.ИнформацияОСопоставленииЗначений = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСоответствия,
						ВыборкаДанных.КоличествоСоответствий, ВыборкаДанных.КоличествоЗначений1С); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСоответствияЗначенийАтрибута(ТаблицаСоответствияЗначенийАтрибута, Параметры, УчетнаяЗапись)

	ТаблицаСоответствияЗначенийАтрибута.Колонки.Добавить("ПредставлениеЗначенияРеквизита1С", Новый ОписаниеТипов("Строка"));
	ПараметрыАтрибута = Параметры.ПараметрыАтрибута;

	ДанныеДляФормированияЗапроса = ДанныеДляФормированияЗапросаЗначенийАтрибутов(
			Параметры.Реквизит1С, Параметры.ТипЗначенияРеквизита1С, Параметры.СоответствиеПсевдонимовМетаданных);

	Если ЗначениеЗаполнено(ДанныеДляФормированияЗапроса) Тогда
		Результат = СобратьТекстЗапросаДляПолученияТаблицыИсточникаРеквизитов(ДанныеДляФормированияЗапроса);
		ТекстЗапросаДанных = Результат.ТекстЗапросаДанных;

		ТекстЗапросаДанных = ТекстЗапросаДанных + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|" +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.ЗначениеРеквизита) КАК ПредставлениеЗначенияРеквизита1С,
			|	ИсточникДанных.ЗначениеРеквизита КАК ЗначениеРеквизита1С,
			|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторЗначенияАтрибутаМаркетплейса,
			|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеЗначенияАтрибутаМаркетплейса
			|ИЗ
			|	ИсточникДанных КАК ИсточникДанных
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
			|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ЗначениеАтрибутаКатегорииТоваров))
			|			И (СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса = &ИдентификаторВладельцаОбъектаМаркетплейса)
			|			И ИсточникДанных.ЗначениеРеквизита = СоответствияОбъектовМаркетплейсов.Объект1С
			|
			|УПОРЯДОЧИТЬ ПО
			|	НаименованиеЗначенияАтрибутаМаркетплейса
			|ИТОГИ ПО
			|	ЗначениеРеквизита1С
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ИсточникДанных";

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.УстановитьПараметр("ИдентификаторВладельцаОбъектаМаркетплейса",
				ПараметрыАтрибута.ИдентификаторКатегории1С +
				"/" + ПараметрыАтрибута.ИдентификаторКатегорииМаркетплейса +
				"/" + ПараметрыАтрибута.ИдентификаторАтрибутаМаркетплейса);

		Для Каждого ПараметрЗапроса Из Результат.ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;

		Запрос.Текст = ТекстЗапросаДанных;

		ВыборкаЗначенийРеквизита1С = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗначенийРеквизита1С.Следующий() Цикл
			ВыборкаДанных = ВыборкаЗначенийРеквизита1С.Выбрать();
			НоваяСтрока = ТаблицаСоответствияЗначенийАтрибута.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗначенийРеквизита1С);
			НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыАтрибута.ИдентификаторКатегорииМаркетплейса;
			НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = ПараметрыАтрибута.ИдентификаторАтрибутаМаркетплейса;

			Если Параметры.МножественныйВыбор Тогда
				СписокЗначений = Новый СписокЗначений;
				Пока ВыборкаДанных.Следующий() Цикл
					Если ЗначениеЗаполнено(ВыборкаДанных.ИдентификаторЗначенияАтрибутаМаркетплейса) Тогда
						СписокЗначений.Добавить(ВыборкаДанных.ИдентификаторЗначенияАтрибутаМаркетплейса, ВыборкаДанных.НаименованиеЗначенияАтрибутаМаркетплейса);
					КонецЕсли;
				КонецЦикла;
				НоваяСтрока.ЗначенияАтрибута = СписокЗначений;

				Если СписокЗначений.Количество() > 0 Тогда
					НоваяСтрока.ЗначениеУстановлено = Истина;
					НоваяСтрока.ЗаданоСоответствие = Истина;
				КонецЕсли;
			Иначе
				Если ВыборкаДанных.Следующий() Тогда
					НоваяСтрока.НаименованиеЗначенияАтрибута = ВыборкаДанных.НаименованиеЗначенияАтрибутаМаркетплейса;
					НоваяСтрока.ИдентификаторЗначенияАтрибута = ВыборкаДанных.ИдентификаторЗначенияАтрибутаМаркетплейса;

					Если ЗначениеЗаполнено(НоваяСтрока.ИдентификаторЗначенияАтрибута) Тогда
						НоваяСтрока.ЗначениеУстановлено = Истина;
						НоваяСтрока.ЗаданоСоответствие = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ТаблицаСоответствияЗначенийАтрибута.Сортировать("ПредставлениеЗначенияРеквизита1С, НаименованиеЗначенияАтрибута");
	ТаблицаСоответствияЗначенийАтрибута.Колонки.Удалить("ПредставлениеЗначенияРеквизита1С");

КонецПроцедуры

// Возвращает идентификаторы служебных атрибутов.
// 
// Возвращаемое значение:
//  Массив - идентификаторы служебных атрибутов.
//
Функция СлужебныеАтрибуты()

	МассивСлужебныхАтрибутов = Новый Массив;
	МассивСлужебныхАтрибутов.Добавить("weight_unit");
	МассивСлужебныхАтрибутов.Добавить("weight");
	МассивСлужебныхАтрибутов.Добавить("dimension_unit");
	МассивСлужебныхАтрибутов.Добавить("depth");
	МассивСлужебныхАтрибутов.Добавить("height");
	МассивСлужебныхАтрибутов.Добавить("width"); 

	Возврат МассивСлужебныхАтрибутов;

КонецФункции

// Возвращает соответствие атрибутов реквизитам 1С, заданным по умолчанию.
// В ключе следует указывать префикс "Атрибут_" для поиска значения при условии,
// когда искомый идентификатор атрибута состоит только из цифр.
// ПорядокСортировки заполняется для сортировки в дереве значений, не обязателен к заполнению.
//
Функция ПутьКРеквизитам1СПоУмолчанию()

	ПутьКРеквизитам1СПоУмолчанию = Новый Структура;

	ИдентификаторОбъектаМетаданных1С_Упаковка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("СправочникСсылка.ЕдиницыИзмерения"), Ложь);

	РеквизитыУпаковки = Метаданные.Справочники.Номенклатура.Реквизиты;

	// Вес
	ДанныеАтрибута = Новый Структура;
	ДанныеАтрибута.Вставить("ПорядокСортировки", 11);
	ДанныеАтрибута.Вставить("Реквизит1С", "Номенклатура.Вес");
	ДанныеАтрибута.Вставить("ПредставлениеРеквизита1С", НСтр("ru = 'Номенклатура'") + "." + РеквизитыУпаковки[ "Вес" ].Представление());
	ДанныеАтрибута.Вставить("ИдентификаторОбъектаМетаданных1С", ИдентификаторОбъектаМетаданных1С_Упаковка);
	ДанныеАтрибута.Вставить("ИдентификаторЕдиницыИзмерения", "Атрибут_weight_unit");
	ПутьКРеквизитам1СПоУмолчанию.Вставить("Атрибут_weight", ДанныеАтрибута);

	// Глубина
	ДанныеАтрибута = Новый Структура;
	ДанныеАтрибута.Вставить("ПорядокСортировки", 21);
	ДанныеАтрибута.Вставить("Реквизит1С", "Номенклатура.Длина");
	ДанныеАтрибута.Вставить("ПредставлениеРеквизита1С", НСтр("ru = 'Номенклатура'") + "." + РеквизитыУпаковки[ "Длина" ].Представление());
	ДанныеАтрибута.Вставить("ИдентификаторОбъектаМетаданных1С", ИдентификаторОбъектаМетаданных1С_Упаковка);
	ДанныеАтрибута.Вставить("ИдентификаторЕдиницыИзмерения", "Атрибут_dimension_unit");
	ПутьКРеквизитам1СПоУмолчанию.Вставить("Атрибут_depth", ДанныеАтрибута);

	// Высота
	ДанныеАтрибута = Новый Структура;
	ДанныеАтрибута.Вставить("ПорядокСортировки", 21);
	ДанныеАтрибута.Вставить("Реквизит1С", "Номенклатура.Высота");
	ДанныеАтрибута.Вставить("ПредставлениеРеквизита1С", НСтр("ru = 'Номенклатура'") + "." + РеквизитыУпаковки[ "Высота" ].Представление());
	ДанныеАтрибута.Вставить("ИдентификаторОбъектаМетаданных1С", ИдентификаторОбъектаМетаданных1С_Упаковка);
	ДанныеАтрибута.Вставить("ИдентификаторЕдиницыИзмерения", "Атрибут_dimension_unit");
	ПутьКРеквизитам1СПоУмолчанию.Вставить("Атрибут_height", ДанныеАтрибута);

	// Ширина
	ДанныеАтрибута = Новый Структура;
	ДанныеАтрибута.Вставить("ПорядокСортировки", 21);
	ДанныеАтрибута.Вставить("Реквизит1С", "Номенклатура.Ширина");
	ДанныеАтрибута.Вставить("ПредставлениеРеквизита1С", НСтр("ru = 'Номенклатура'") + "." + РеквизитыУпаковки[ "Ширина" ].Представление());
	ДанныеАтрибута.Вставить("ИдентификаторОбъектаМетаданных1С", ИдентификаторОбъектаМетаданных1С_Упаковка);
	ДанныеАтрибута.Вставить("ИдентификаторЕдиницыИзмерения", "Атрибут_dimension_unit");
	ПутьКРеквизитам1СПоУмолчанию.Вставить("Атрибут_width", ДанныеАтрибута);

	Возврат ПутьКРеквизитам1СПоУмолчанию;

КонецФункции

#КонецОбласти

#Область АлгоритмыЗаполненияАтрибутовТовара

// Возвращает новую пустую таблицу значений для данных о публикуемых товарах.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//	 * УчетнаяЗаписьМаркетплейса			- СправочникСсылка.УчетнаяЗаписьМаркетплейса - учетная запись маркетплейса.
//	 * Номенклатура							- СправочникСсылка.Номенклатура - номенклатура.
//	 * Характеристика						- СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры.
//	 * Упаковка 							- СправочникСсылка.ЕдиницыИзмерения - упаковка.
//	 * ИсточникКатегории					- ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категории,
//											колонка заполняется автоматически.
//	 * ОпубликоватьТовар					- Булево - признак необходимости публикации товара.
//	 * ИдентификаторПубликации				- Строка - уникальный идентификатор, созданный для сочетания полей Номенклатура, Характеристика, Упаковка;
//											колонка заполняется автоматически.
//	 * ИдентификаторОбъектаМаркетплейса		- Строка - идентификатор товара на маркетплейсе;
//											колонка заполняется автоматически.
//	 * Категория1С							- см. ОписаниеТипаКатегории1С() - категория 1С из номенклатуры;
//											колонка заполняется автоматически.
//	 * ИсточникКатегорииМаркетплейса		- см. ОписаниеТипаКатегории1С() - категория-источник,
//											по которой найдены правила заполнения атрибутов.
//	 * ИдентификаторКатегорииМаркетплейса	- Строка - идентификатор категории маркетплейса,
//											заполняется только при необходимости обновления значений атрибутов, при перезаполнении атрибутов не заполняется.
//	 * ДанныеОбъекта 						- ТаблицаЗначений - см. НоваяТаблицаЗначенийРеквизитов();
//											колонка заполняется автоматически.
//	 * ДанныеОбъектаПереданы				- Булево - признак того, что реквизиты товара переданы, актуально для проверки заполнения или перезаполнения.
//	 * ДанныеДляПубликации					- Структура - см. НовыйСписокДанныхОТоваре();
//											колонка заполняется автоматически.
//	 * ОбъектыПубликации					- ТаблицаЗначений - см. НоваяТаблицаОбъектовПубликации();
//											колонка заполняется автоматически.
//	 * ЕстьКритичныеОшибки					- Булево - признак наличия ошибок, из-за которых публикация товара невозможна;
//											колонка заполняется автоматически.
//	 * КодОшибки							- Строка - код ошибки заполнения атрибутов;
//											колонка заполняется автоматически.
//	 * ОписаниеОшибки						- Строка - описание ошибок заполнения атрибутов;
//											колонка заполняется автоматически.
//
Функция НоваяТаблицаПубликацииТоваров() Экспорт

	ОписаниеТипаСтрока          = Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока50        = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаБулево          = Новый ОписаниеТипов("Булево");
	ОписаниеТипаТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");
	ОписаниеТипаСтруктура       = Новый ОписаниеТипов("Структура");

	ТаблицаПубликацииТоваров = Новый ТаблицаЗначений; 
	ТаблицаПубликацииТоваров.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИсточникКатегории", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса"));
	ТаблицаПубликацииТоваров.Колонки.Добавить("ОпубликоватьТовар", ОписаниеТипаБулево);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИдентификаторПубликации", ОписаниеТипаСтрока50);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаПубликацииТоваров.Колонки.Добавить("Категория1С", ОписаниеТипаКатегории1С());
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИсточникКатегорииМаркетплейса", ОписаниеТипаКатегории1С());
	ТаблицаПубликацииТоваров.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ДанныеОбъекта", ОписаниеТипаТаблицаЗначений);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ДанныеОбъектаПереданы", ОписаниеТипаБулево);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ДанныеДляПубликации", ОписаниеТипаСтруктура);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ОбъектыПубликации", ОписаниеТипаТаблицаЗначений);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ЕстьКритичныеОшибки", ОписаниеТипаБулево);
	ТаблицаПубликацииТоваров.Колонки.Добавить("КодОшибки", ОписаниеТипаСтрока);
	ТаблицаПубликацииТоваров.Колонки.Добавить("ОписаниеОшибки", ОписаниеТипаСтрока);

	Возврат ТаблицаПубликацииТоваров;

КонецФункции

// Возвращает новую пустую таблицу значений для заполнения данных по реквизитам публикуемых товаров.
// См. СтатусыПубликацииОбъектовМаркетплейсаOzon.Формы.ФормаЗаписи.ДанныеОбъекта.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//	 * Номенклатура 		          			   - СправочникСсылка.Номенклатура - номенклатура.
//	 * Характеристика    			               - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры.
//	 * Упаковка 		             			   - СправочникСсылка.ЕдиницыИзмерения - упаковка.
//	 * Категория1С 		             			   - см. ОписаниеТипаКатегории1С() - категория 1С из номенклатуры.
//	 * ИсточникКатегорииМаркетплейса 			   - см. ОписаниеТипаКатегории1С() - категория 1С, 
//															для которой задано соответствие категории маркетплейса, может быть указан элемент или группа элементов.
//	 * ИдентификаторИсточникаКатегорииМаркетплейса - Строка - идентификатор источника категории маркетплейса.
//	 * ИдентификаторКатегорииМаркетплейса		   - Строка - идентификатор категории маркетплейса.
//	 * ИдентификаторРодителяАтрибутаМаркетплейса   - Строка - идентификатор родителя атрибута маркетплейса.
//	 * НаименованиеРодителяАтрибутаМаркетплейса    - Строка - наименование родителя атрибута маркетплейса.
//	 * ИдентификаторАтрибутаМаркетплейса 		   - Строка - идентификатор атрибута маркетплейса.
//	 * НаименованиеАтрибутаМаркетплейса  		   - Строка - наименование атрибута.
//	 * ПолныйПутьКРеквизиту1С 			 		   - Строка - путь к реквизиту из регистра сведений СоответствияАтрибутовМаркетплейсов.
//	 * ОбязательныйАтрибут				   		   - Булево - признак обязательного атрибута.
//	 * ЯвляетсяКоллекциейЗначений 		 		   - Булево - признак того, что атрибут содержит список значений выбора.
//	 * ДоступенВыборЗначенияИзСписка  	  		   - Булево - признак наличия списка выбора значений атрибута в 1С.
//	 * ТипЗначенияАтрибута                		   - Строка - тип значения характеристики.
//	 * ЗначениеПоУмолчанию                		   - Строка, Число, Булево, Дата - значение по умолчанию.
//	 * ИдентификаторЗначенияПоУмолчанию  		   - Строка - идентификатор значения по умолчанию при выборе значения из списка.
//	 * ЗначениеРеквизита1С 				  		   - ЛюбаяСсылка, Строка, Число, Булево, Дата - значение реквизита 1С.
//	 * ЗначениеАтрибутаМаркетплейса 	  		   - Строка, Число, Булево, Дата - значение для маркетплейса.
//	 * ИдентификаторЗначенияАтрибутаМаркетплейса   - Строка - идентификатор значения для маркетплейса при выборе значения из списка.
//   * НеЗаполненРеквизит1С 				       - Булево - признак незаполненного реквизита 1С.
//	 * НеЗаполненоСоответствиеАтрибута	           - Булево - признак незаполненного соответствия атрибуту маркетплейса.
//	 * НеЗаполненАтрибут			 			   - Булево - признак незаполненного обязательного атрибута маркетплейса.
//	 * УстановленоЗначениеПоУмолчанию			   - Булево - признак установки значения по умолчанию из-за незаполненного реквизита 1С.
//															или незаполненного соответствия атрибуту маркетплейса.
//	 * ЗначениеАтрибутаЗаданоПользователем         - Булево - признак установки значения пользователем.
//
Функция НоваяТаблицаЗначенийРеквизитов(Знач РеквизитыДляСравнения = Ложь) Экспорт

	ОписаниеТипаСтрока50    = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока500   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500));
	ОписаниеТипаБулево      = Новый ОписаниеТипов("Булево");
	ОписаниеТипаКатегории1С = ОписаниеТипаКатегории1С();

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	Результат.Колонки.Добавить("Категория1С", ОписаниеТипаКатегории1С);
	Результат.Колонки.Добавить("ИсточникКатегорииМаркетплейса", ОписаниеТипаКатегории1С);
	Результат.Колонки.Добавить("ИдентификаторИсточникаКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеКатегорииМаркетплейса", ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ИдентификаторРодителяАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеРодителяАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ПолныйПутьКРеквизиту1С", ОписаниеТипаСтрока500);
	Результат.Колонки.Добавить("ПредставлениеРеквизита1С", ОписаниеТипаСтрока500);
	Результат.Колонки.Добавить("ОбязательныйАтрибут", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ЯвляетсяКоллекциейЗначений", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ДоступенВыборЗначенияИзСписка", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ТипЗначенияАтрибута", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ЗначениеПоУмолчанию");// произвольный
	Результат.Колонки.Добавить("ЗначениеПоУмолчаниюСтрокаНеограниченная");// произвольный
	Результат.Колонки.Добавить("ИдентификаторЗначенияПоУмолчанию", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ЗначениеРеквизита1С"); // Любая ссылка и простые типы.
	Результат.Колонки.Добавить("ЗначениеАтрибутаМаркетплейса" ); // произвольный
	Результат.Колонки.Добавить("ИдентификаторЗначенияАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НеЗаполненРеквизит1С", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("НеЗаполненоСоответствиеАтрибута", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("НеЗаполненАтрибут", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("НеЗаполненПутьКРеквизиту1С", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("УстановленоЗначениеПоУмолчанию", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ЗначениеАтрибутаЗаданоПользователем", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ОписаниеНазначенияАтрибута", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИзменилсяРеквизит1С", ОписаниеТипаБулево);
	Результат.Колонки.Добавить("НовоеЗначениеРеквизита1С"); // Любая ссылка и простые типы.

	Если РеквизитыДляСравнения Тогда
		Результат.Колонки.Добавить("ЕстьРазличия",  								   ОписаниеТипаБулево);
		Результат.Колонки.Добавить("ТолькоТекущее", 								   ОписаниеТипаБулево);
		Результат.Колонки.Добавить("ТекущееОбязательныйАтрибут",                       ОписаниеТипаБулево);
		Результат.Колонки.Добавить("ТекущееЯвляетсяКоллекциейЗначений",                ОписаниеТипаБулево);
		Результат.Колонки.Добавить("ТекущееДоступенВыборЗначенияИзСписка",             ОписаниеТипаБулево);
		Результат.Колонки.Добавить("ТекущееТипЗначенияАтрибута",                       ОписаниеТипаСтрока50);
		Результат.Колонки.Добавить("ТекущееЗначениеАтрибутаМаркетплейса",              Новый ОписаниеТипов(ПростыеТипы()));
		Результат.Колонки.Добавить("ТекущееНеЗаполненАтрибут", 						   ОписаниеТипаБулево);
		Результат.Колонки.Добавить("ТекущееИдентификаторЗначенияАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция НоваяТаблицаОбъектовПубликации()

	МассивТиповОбъектаПубликации = Новый Массив; 
	МассивТиповОбъектаПубликации.Добавить(Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	МассивТиповОбъектаПубликации.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатурыПрисоединенныеФайлы"));

	ОписаниеТипаСтрока		= Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока50	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));

	ТаблицаОбъектовПубликации = Новый ТаблицаЗначений;
	ТаблицаОбъектовПубликации.Колонки.Добавить("ВидОбъектаМаркетплейса", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовМаркетплейсов"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("ОбъектПубликации", Новый ОписаниеТипов(МассивТиповОбъектаПубликации));
	ТаблицаОбъектовПубликации.Колонки.Добавить("НаименованиеОбъектаМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса", ОписаниеТипаСтрока250);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ИдентификаторПубликации", ОписаниеТипаСтрока50);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ДанныеОбъекта", Новый ОписаниеТипов("Структура"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбъектовМаркетплейсаOzon"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("ЭтоОсновнойОбъект", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("ИзмененыРеквизиты", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовПубликации.Колонки.Добавить("КодОшибки", ОписаниеТипаСтрока);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ОписаниеОшибки", ОписаниеТипаСтрока);
	ТаблицаОбъектовПубликации.Колонки.Добавить("Состояние", ОписаниеТипаСтрока);
	ТаблицаОбъектовПубликации.Колонки.Добавить("ОписаниеСостояния", ОписаниеТипаСтрока);

	Возврат ТаблицаОбъектовПубликации;

КонецФункции

Функция НоваяТаблицаДанныхВесогабаритов()

	ОписаниеТипаСтрока3   = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3));
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаЧисло  	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 5, ДопустимыйЗнак.Неотрицательный));

	ТаблицаДанныхВесогабаритов = Новый ТаблицаЗначений;
	ТаблицаДанныхВесогабаритов.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ТаблицаДанныхВесогабаритов.Колонки.Добавить("ИдентификаторЕдиницыИзмерения", ОписаниеТипаСтрока50);
	ТаблицаДанныхВесогабаритов.Колонки.Добавить("ИдентификаторЗначенияПоУмолчанию", ОписаниеТипаСтрока50);
	ТаблицаДанныхВесогабаритов.Колонки.Добавить("МеждународноеСокращение", ОписаниеТипаСтрока3);
	ТаблицаДанныхВесогабаритов.Колонки.Добавить("Числитель", ОписаниеТипаЧисло);
	ТаблицаДанныхВесогабаритов.Колонки.Добавить("Знаменатель", ОписаниеТипаЧисло);

	Возврат ТаблицаДанныхВесогабаритов;

КонецФункции

Функция НовыйСписокДанныхОТоваре()

	СтруктураДанныхЗаписи = Новый Структура;
	СтруктураДанныхЗаписи.Вставить("НаименованиеОбъектаМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("ПредставлениеОбъектаМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("ИдентификаторПубликации", "");
	СтруктураДанныхЗаписи.Вставить("ОписаниеОбъектаМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("ИсточникКатегорииМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("ИдентификаторКатегорииМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("НаименованиеКатегорииМаркетплейса", "");
	СтруктураДанныхЗаписи.Вставить("НеактивнаяКатегорияМаркетплейса", Ложь);
	СтруктураДанныхЗаписи.Вставить("ИспользуютсяКодыАктивации", Ложь);
	СтруктураДанныхЗаписи.Вставить("ОбъединяетсяВОднуКарточку", Ложь);
	СтруктураДанныхЗаписи.Вставить("ЗначениеОбъединенияВОднуКарточку", "");
	СтруктураДанныхЗаписи.Вставить("ИдентификаторАтрибутаОбъединенияВОднуКарточку", "");
	СтруктураДанныхЗаписи.Вставить("Валюта", "");
	СтруктураДанныхЗаписи.Вставить("КодВалюты", "");
	СтруктураДанныхЗаписи.Вставить("СтавкаНДС", 0);
	СтруктураДанныхЗаписи.Вставить("ВесогабаритыУпаковки", НовыйСписокАтрибутовВесогабаритовУпаковки());
	СтруктураДанныхЗаписи.Вставить("ОбъединятьТоварыВОднуКарточкуСвойства", НовыйСписокСвойствОбъединенияТоваровВОднуКарточку());
	СтруктураДанныхЗаписи.Вставить("ВидыЦенУчетнойЗаписи", Новый Структура); 
	СтруктураДанныхЗаписи.Вставить("Цены", Новый Структура);
	СтруктураДанныхЗаписи.Вставить("Штрихкод", "");

	Возврат СтруктураДанныхЗаписи;

КонецФункции

Функция НовыйСписокАтрибутовВесогабаритовУпаковки()

	СтруктураВесогабаритовУпаковки = Новый Структура; 
	СтруктураВесогабаритовУпаковки.Вставить("ЕдиницаВеса", "");
	СтруктураВесогабаритовУпаковки.Вставить("ВесТовараВУпаковке", 0);
	СтруктураВесогабаритовУпаковки.Вставить("ЕдиницаГабаритов", "");
	СтруктураВесогабаритовУпаковки.Вставить("Глубина", 0);
	СтруктураВесогабаритовУпаковки.Вставить("Высота", 0);
	СтруктураВесогабаритовУпаковки.Вставить("Ширина", 0);

	Возврат СтруктураВесогабаритовУпаковки;

КонецФункции

// Возвращает список параметров, используемых при заполнении данных публикуемого товара.
//
// Возвращаемое значение:
//  ПолучитьАтрибуты   	- Булево - признак получения сохраненных атрибутов для товаров маркетплейса.
//  ДляПубликации		- Булево - признак подготовки данных для отправки методом API маркетплейса.
//  ПолучитьИзображения	- Булево - признак подготовки данных для изображений.
//  ОбновитьДанные     	- Булево - признак обновления атрибутов для товаров маркетплейса, если ПолучитьАтрибуты = Истина,
//								   признак обновления данных по изображениям,
//								   если ПолучитьИзображения = Истина.
//
Функция СписокПараметровПодготовкиДанныхПубликуемыхТоваров() Экспорт

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("ПолучитьАтрибуты", Ложь);
	СписокПараметров.Вставить("ДляПубликации", Ложь);
	СписокПараметров.Вставить("ПроверятьСоставАтрибутов", Ложь);
	СписокПараметров.Вставить("ПолучитьИзображения", Ложь);
	СписокПараметров.Вставить("ОбновитьДанные", Ложь);
	СписокПараметров.Вставить("ОбновитьКатегориюМаркетплейса", Ложь);
	СписокПараметров.Вставить("ПроверитьОшибкиЗаполнения", Ложь);

	Возврат СписокПараметров;

КонецФункции

Функция НоменклатураПолучитьСтавкуНДСЧислом( Номенклатура )
	ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта( Номенклатура, "ВидСтавкиНДС" );
	СтавкаНДССсылка = Справочники.СтавкиНДС.СтавкаНДС( ВидСтавкиНДС );
	Если ЗначениеЗаполнено( СтавкаНДССсылка ) Тогда
		СтавкаНДСЧислом = СтавкаНДССсылка.Ставка;
	Иначе
		СтавкаНДСЧислом = 0;
	КонецЕсли;
	Возврат СтавкаНДСЧислом;
КонецФункции

Процедура СлужебнаяДанныеОбъектаДозаполнить( ДанныеОбъекта, ПараметрыЗаполненияДанныхОбъекта )
	
	Если ТипЗнч( ДанныеОбъекта ) <> Тип( "ТаблицаЗначений" ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбъекта.Колонки.Найти( "УчетнаяЗаписьМаркетплейса" ) = Неопределено Тогда
		ДанныеОбъекта.Колонки.Добавить( "УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов" ) );
	КонецЕсли;
	
	ВыборкаУпаковок = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( ПараметрыЗаполненияДанныхОбъекта, "ВыборкаУпаковок", Неопределено );
	Если ВыборкаУпаковок <> Неопределено Тогда
		Для Каждого ДанныеОбъектаСтрока Из ДанныеОбъекта Цикл
			
			Если Не ЗначениеЗаполнено( ДанныеОбъектаСтрока.УчетнаяЗаписьМаркетплейса ) Тогда
				ДанныеОбъектаСтрока.УчетнаяЗаписьМаркетплейса = ВыборкаУпаковок.УчетнаяЗаписьМаркетплейса;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено( ДанныеОбъектаСтрока.Номенклатура ) Тогда
				ДанныеОбъектаСтрока.Номенклатура = ВыборкаУпаковок.Номенклатура;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено( ДанныеОбъектаСтрока.Характеристика ) Тогда
				ДанныеОбъектаСтрока.Характеристика = ВыборкаУпаковок.Характеристика;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено( ДанныеОбъектаСтрока.Упаковка ) Тогда
				ДанныеОбъектаСтрока.Упаковка = ВыборкаУпаковок.Упаковка;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено( ДанныеОбъектаСтрока.Категория1С ) Тогда
				ДанныеОбъектаСтрока.Категория1С = ВыборкаУпаковок.Категория1С;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено( ДанныеОбъектаСтрока.ИсточникКатегорииМаркетплейса ) Тогда
				ДанныеОбъектаСтрока.ИсточникКатегорииМаркетплейса = ВыборкаУпаковок.ИсточникКатегорииМаркетплейса;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено( ДанныеОбъектаСтрока.ИдентификаторИсточникаКатегорииМаркетплейса ) Тогда
				ДанныеОбъектаСтрока.ИдентификаторИсточникаКатегорииМаркетплейса = ВыборкаУпаковок.ИдентификаторИсточникаКатегорииМаркетплейса;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат;
КонецПроцедуры

// Функция - Подготовить данные публикуемых товаров
//  Выполняет заполнение атрибутов товаров согласно установленным пользователем правилам соответствия реквизитов 1С
//  атрибутам маркетплейса.
//
// Параметры:
//  ДанныеПубликации    - ИсточникДанныхТоваров - см. НоваяТаблицаПубликацииТоваров();
//						- МенеджерВременныхТаблиц - менеджер временных таблиц с таблицей:
//							* Номенклатура      - СправочникСсылка.Номенклатура,
//							* Характеристика    - СправочникСсылка.ХарактеристикиНоменклатуры,
//							* Упаковка          - СправочникСсылка.УпаковкиИЕдиницыИзмерения,
//							* ИдентификаторКатегорииМаркетплейса - Строка.
//  УчетнаяЗапись       - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//	ПараметрыЗаполнения - Структура - список параметров, используемых при заполнении данных публикуемого товара,
//									  см. СписокПараметровПодготовкиДанныхПубликуемыхТоваров().
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. НоваяТаблицаПубликацииТоваров().
//
Функция ПодготовитьДанныеПубликуемыхТоваров(ИсточникДанныхТоваров, ПараметрыЗаполнения, ПараметрыКонтекст = Неопределено) Экспорт

	ДляПубликации = ПараметрыЗаполнения.ДляПубликации;

	ПроверятьСоставАтрибутов = ПараметрыЗаполнения.ПроверятьСоставАтрибутов;
	ПолучитьАтрибуты = ПараметрыЗаполнения.ПолучитьАтрибуты;
	ПолучитьИзображения = ПараметрыЗаполнения.ПолучитьИзображения;
	ОбновитьДанные = ПараметрыЗаполнения.ОбновитьДанные;
	ОбновитьКатегориюМаркетплейса = ПараметрыЗаполнения.ОбновитьКатегориюМаркетплейса;
	ПроверитьОшибкиЗаполнения = ПараметрыЗаполнения.ПроверитьОшибкиЗаполнения;

	СоздаватьЗаписиВДанныхПубликации = Ложь;
	ЕстьКолонкаУчетнаяЗаписьМаркетплейса = Ложь;

	Если ТипЗнч(ИсточникДанныхТоваров) = Тип("ТаблицаЗначений") Тогда
		ДанныеПубликации = ИсточникДанныхТоваров;
		ЕстьКолонкаУчетнаяЗаписьМаркетплейса = ИсточникДанныхТоваров.Колонки.Найти("УчетнаяЗаписьМаркетплейса") <> Неопределено;
	ИначеЕсли ТипЗнч(ИсточникДанныхТоваров) = Тип("МенеджерВременныхТаблиц") Тогда
		ДанныеПубликации = НоваяТаблицаПубликацииТоваров();
		СоздаватьЗаписиВДанныхПубликации = Истина;
		ЕстьКолонкаУчетнаяЗаписьМаркетплейса =
				(ИсточникДанныхТоваров.Таблицы.Получить("ДанныеПубликации").Колонки.Найти("УчетнаяЗаписьМаркетплейса") <> Неопределено);
	Иначе
		Возврат НоваяТаблицаПубликацииТоваров();
	КонецЕсли;

	ДанныеПубликации.Индексы.Добавить("УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");

	ЗаполненаТаблицаАтрибутов = Истина;

	Если ОбновитьДанные Тогда
		ТаблицаДанныхАтрибутов = ПолучитьДанныеЗначенийАтрибутов(ИсточникДанныхТоваров, ПараметрыКонтекст );

		Если ТаблицаДанныхАтрибутов = Неопределено Тогда
			ЗаполненаТаблицаАтрибутов = Ложь;

			Если ТипЗнч(ИсточникДанныхТоваров) = Тип("МенеджерВременныхТаблиц") Тогда
				ВыборкаДанныхПубликации = ИсточникДанныхТоваров.Таблицы.Получить("ДанныеПубликации").ПолучитьДанные().Выбрать();
				Пока ВыборкаДанныхПубликации.Следующий() Цикл
					СтрокаТовара = ДанныеПубликации.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТовара, ВыборкаДанныхПубликации);
				КонецЦикла; 
				
				СоздаватьЗаписиВДанныхПубликации = Ложь;
			КонецЕсли;

			ТаблицаДанныхАтрибутов = ДанныеПубликации;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИсточникДанныхТоваров) = Тип("ТаблицаЗначений") Тогда
		ТаблицаДанныхАтрибутов =
				ИсточникДанныхТоваров.Скопировать(, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка, ИсточникКатегории");
	Иначе // МенеджерВременныхТаблиц
		ТаблицаДанныхАтрибутов = Неопределено;
	КонецЕсли;
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено() Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ПодготовитьДанныеПубликуемыхТоваров:'") + " " + Символы.ПС
		+ "ПроверятьСоставАтрибутов: " + ПроверятьСоставАтрибутов + Символы.ПС
		+ "ПолучитьАтрибуты: " + ПолучитьАтрибуты + Символы.ПС
		+ "ПолучитьИзображения: " + ПолучитьИзображения + Символы.ПС
		+ "ОбновитьДанные: " + ОбновитьДанные + Символы.ПС
		+ "ОбновитьКатегориюМаркетплейса: " + ОбновитьКатегориюМаркетплейса + Символы.ПС
		+ "ПроверитьОшибкиЗаполнения: " + ПроверитьОшибкиЗаполнения + Символы.ПС
		+ "СоздаватьЗаписиВДанныхПубликации: " + СоздаватьЗаписиВДанныхПубликации + Символы.ПС
	
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, , , ПараметрыКонтекст );
	КонецЕсли;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ОбновитьКатегориюМаркетплейса", ОбновитьКатегориюМаркетплейса);

	Если ПолучитьАтрибуты Тогда
		Запрос.УстановитьПараметр("БазоваяВалюта", БазоваяВалютаПоУмолчанию());
	КонецЕсли;

	// Подготовка текста запроса.
	ТекстыЗапроса = Новый Массив;

	Если ТаблицаДанныхАтрибутов = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = ИсточникДанныхТоваров;
	Иначе
		ЧастьТекстаЗапроса = ТекстЗапросаВыборкиДанныхТаблицыИсточника(ПолучитьАтрибуты, ОбновитьДанные И ЗаполненаТаблицаАтрибутов, ПолучитьИзображения);
		ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);
		Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанныхАтрибутов);
	КонецЕсли;

	Если ПолучитьАтрибуты Тогда
		// Подготовка выборки штрихкодов.
		Если ОбновитьДанные Тогда
			ЧастьТекстаЗапроса = ТекстЗапросаВыборкиШтрихКодов();
			ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);
		КонецЕсли;

		ЧастьТекстаЗапроса = ТекстЗапросаВыборкиДанныхПоТоварамПубликации(ПолучитьАтрибуты, ОбновитьДанные И ЗаполненаТаблицаАтрибутов);
		ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);
	КонецЕсли;

	// Подготовка данных для конвертации единиц весогабаритов.
	Если ПолучитьАтрибуты И ОбновитьДанные И ЗаполненаТаблицаАтрибутов Тогда
		ЧастьТекстаЗапроса = ТекстЗапросаКоэффициентовКонвертацииЕдиницВесогабаритов();
		ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);

		ТипыЧисло = ПолучитьТипыOzonДляТипа1С("Число");
		Запрос.УстановитьПараметр("ТипыЧисло", ТипыЧисло);

		ТаблицаДанныхВесогабаритов = ПодготовитьТаблицуДанныхВесогабаритов();
		Запрос.УстановитьПараметр("ТаблицаВесогабаритов", ТаблицаДанныхВесогабаритов);
	КонецЕсли;

	// Подготовка выборки итоговых данных.
	ЧастьТекстаЗапроса = ТекстЗапросаВыборкиИтоговыхДанныхПоАтрибутам(ПолучитьАтрибуты, ОбновитьДанные И ЗаполненаТаблицаАтрибутов);
	ТекстыЗапроса.Добавить(ЧастьТекстаЗапроса);

	РазделительПакетаЗапросов = ОбщегоНазначения.РазделительПакетаЗапросов();
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, РазделительПакетаЗапросов);
	Запрос.Текст = ТекстЗапроса;
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаУчетныхЗаписей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);

	ВидыЦенУчетнойЗаписи = Новый Соответствие;
	ВыборкаЦен = Неопределено;
	ВыборкаШтрихкодов = Неопределено;
	ВыборкаИзображений = Неопределено;

	Если ПолучитьАтрибуты Тогда
		// Подготовка выборки цен товаров.
		ТекстЗапроса = ТекстЗапросаВыборкиЦен(ОбновитьДанные);

		Запрос.Текст = ТекстЗапроса;
		ЦеныРезультатЗапроса = Запрос.Выполнить();
		ВыборкаЦен = ЦеныРезультатЗапроса.Выбрать();
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено() Тогда
			ЦеныПредставлениеСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ЦеныРезультатЗапроса.Выгрузить() );
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			ЛогКомментарий = НСтр("ru = 'ПодготовитьДанныеПубликуемыхТоваров:'") + Символы.ПС
			+ "Цены:" + Символы.ПС + ЦеныПредставлениеСтр 
			+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.Прочее" ) );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, , , ЛогПараметры );
		КонецЕсли;
		

		Если ДляПубликации Тогда
			// Подготовка данных для сбора информации по упаковке.
			СоответствиеАтрибутовВесогабаритовУпаковки = СоответствиеАтрибутовВесогабаритовУпаковки();
		КонецЕсли;
	КонецЕсли;

	// Подготовка данных для выборки изображений.
	Если ПолучитьИзображения Тогда
		ИмяТаблицыТоваров = "ДанныеПубликации";
		ТекстЗапросаОчистка = "";

		Если ОбновитьДанные Тогда
			Запрос.Текст = ТекстЗапросаПодготовкиВременнойТаблицыДляПолученияОбъектовПубликации(ПолучитьАтрибуты);
			Запрос.Выполнить();
			
			ИмяТаблицыТоваров = "ТаблицаРазличныхДанныхПубликации";
			ТекстЗапросаОчистка = "УНИЧТОЖИТЬ ТаблицаРазличныхДанныхПубликации";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаВыборкиИзображений(ИмяТаблицыТоваров);
		Запрос.УстановитьПараметр("РасширенияИзображенийТоваров", РасширенияИзображений());
		
		Запрос.Текст = ТекстЗапроса;
		УстановитьПривилегированныйРежим(Истина);
		ИзображенияРезультатЗапроса = Запрос.Выполнить();
		ВыборкаИзображений = ИзображенияРезультатЗапроса.Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено() Тогда
			ИзображенияПредставлениеСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ИзображенияРезультатЗапроса.Выгрузить() );
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			ЛогКомментарий = НСтр("ru = 'ПодготовитьДанныеПубликуемыхТоваров:'") + Символы.ПС
			+ "Изображения:" + Символы.ПС + ИзображенияПредставлениеСтр 
			+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.Прочее" ) );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, , , ЛогПараметры );
		КонецЕсли;
		

		Если ОбновитьДанные Тогда
			Запрос.Текст = ТекстЗапросаОчистка;
			Запрос.Выполнить();
		КонецЕсли;
	КонецЕсли;

	Если ПолучитьАтрибуты Тогда
		ТекстЗапроса = "УНИЧТОЖИТЬ ТаблицаДанныхПубликации";

		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;

	МенеджерВременныхТаблиц = Неопределено;

	// Получение данных из запроса и заполнение атрибутов публикуемых товаров.

	ШаблонОшибкиЗаполненияКатегории1С =
			НСтр("ru = 'Для номенклатуры <%1> не заполнен реквизит <%2>. Категория для сопоставления атрибутов неопределена.'");
	ШаблонОшибкиПравилЗаполнения = НСтр("ru = 'Для категории <%1> не настроены соответствия атрибутов маркетплейса реквизитам 1С.'");

	СоответствиеТипов = СоответствиеТипов();
	АтрибутыКатегорийСервиса = Новый Соответствие;
	Пока ВыборкаУчетныхЗаписей.Следующий() Цикл 
		
		Если ПолучитьАтрибуты Тогда
			// Подготовка видов цен учетной записи.
			ВидыЦенУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.ВидыЦенУчетнойЗаписи(ВыборкаУчетныхЗаписей.УчетнаяЗаписьМаркетплейса);
		КонецЕсли;

		ВыборкаНоменклатуры = ВыборкаУчетныхЗаписей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатуры.Следующий() Цикл

			СтавкаНДС = НоменклатураПолучитьСтавкуНДСЧислом( ВыборкаНоменклатуры.Номенклатура );

			ВыборкаХарактеристик = ВыборкаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристик.Следующий() Цикл

				ВыборкаУпаковок = ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаУпаковок.Следующий() Цикл

					Если СоздаватьЗаписиВДанныхПубликации Тогда
						СтрокаЗаполненияРеквизитовТовара = ДанныеПубликации.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаЗаполненияРеквизитовТовара, ВыборкаУпаковок,
								"УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
					Иначе
						СтрокаЗаполненияРеквизитовТовара = Неопределено;

						Отбор = Новый Структура;
						Отбор.Вставить("УчетнаяЗаписьМаркетплейса", Справочники.УчетныеЗаписиМаркетплейсов.ПустаяСсылка());
						Отбор.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
						Отбор.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
						Отбор.Вставить("Упаковка", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
						
						ЗаполнитьЗначенияСвойств(Отбор, ВыборкаУпаковок);
						СтрокиПубликации = ДанныеПубликации.НайтиСтроки(Отбор);

						МассивСтрокДублейКУдалению = Новый Массив;
						Для Каждого СтрокаПубликации Из СтрокиПубликации Цикл
							Если СтрокаЗаполненияРеквизитовТовара = Неопределено Тогда
								СтрокаЗаполненияРеквизитовТовара = СтрокаПубликации;
							Иначе
								МассивСтрокДублейКУдалению.Добавить(СтрокаПубликации);
							КонецЕсли;
						КонецЦикла;

						Для Каждого СтрокаУдаления Из МассивСтрокДублейКУдалению Цикл
							ДанныеПубликации.Удалить(СтрокаУдаления);
						КонецЦикла;

						Если СтрокаЗаполненияРеквизитовТовара = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					СтрокаЗаполненияРеквизитовТовара.ИсточникКатегории = ВыборкаУпаковок.ИсточникКатегории;
					СтрокаЗаполненияРеквизитовТовара.ОпубликоватьТовар = ПолучитьАтрибуты И ОбновитьДанные;

					ТаблицаОбъектовПубликации = НоваяТаблицаОбъектовПубликации();
					ТаблицаЗначенийРеквизитов = НоваяТаблицаЗначенийРеквизитов();
					СтруктураДанныхЗаписи = НовыйСписокДанныхОТоваре();

					Если ПолучитьАтрибуты Тогда
						СвойстваОбъединенияТоваровВОднуКарточку = НовыйСписокСвойствОбъединенияТоваровВОднуКарточку();

						Если ДляПубликации Тогда
							СтруктураВесогабаритовУпаковки = НовыйСписокАтрибутовВесогабаритовУпаковки();
						КонецЕсли;

						СтруктураДанныхЗаписи.Валюта = ВыборкаНоменклатуры.КодВалюты;
						СтруктураДанныхЗаписи.КодВалюты = ВыборкаНоменклатуры.КодВалюты;
						СтруктураДанныхЗаписи.СтавкаНДС = СтавкаНДС;
						СтруктураДанныхЗаписи.Штрихкод = Строка(ВыборкаУпаковок.Штрихкод);

						Если Не ЗначениеЗаполнено(ВыборкаУпаковок.ИдентификаторПубликации) Тогда
							СтрокаЗаполненияРеквизитовТовара.ИдентификаторПубликации = Новый УникальныйИдентификатор();
						Иначе
							СтрокаЗаполненияРеквизитовТовара.ИдентификаторПубликации = ВыборкаУпаковок.ИдентификаторПубликации;
						КонецЕсли;

						СтрокаЗаполненияРеквизитовТовара.ИдентификаторОбъектаМаркетплейса = ВыборкаУпаковок.ИдентификаторОбъектаМаркетплейса;
						
						Если ЗначениеЗаполнено( ВыборкаУпаковок.НаименованиеОбъектаМаркетплейса ) Тогда
							НаименованиеОбъектаМаркетплейса = ВыборкаУпаковок.НаименованиеОбъектаМаркетплейса;
							СтруктураДанныхЗаписи.НаименованиеОбъектаМаркетплейса = НаименованиеОбъектаМаркетплейса;
						Иначе
							НаименованиеОбъектаМаркетплейса = ПредставлениеТоварнойПозиции(ВыборкаУпаковок.Номенклатура, ВыборкаУпаковок.Характеристика, ВыборкаУпаковок.Упаковка);
						КонецЕсли;

						Если Не ЗначениеЗаполнено(ВыборкаУпаковок.Категория1С) Тогда
							Если ВыборкаУпаковок.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
								ПредставлениеРеквизитаИсточникаКатегории = Метаданные.Справочники.Номенклатура.Реквизиты.КатегорияНоменклатуры.Представление();
							Иначе
								ПредставлениеРеквизитаИсточникаКатегории = НСтр("ru = 'Ссылка'");
							КонецЕсли;

							СтрокаЗаполненияРеквизитовТовара.ДанныеДляПубликации = СтруктураДанныхЗаписи;
							СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта = ТаблицаЗначенийРеквизитов;
							СтрокаЗаполненияРеквизитовТовара.ОбъектыПубликации = ТаблицаОбъектовПубликации;
							СтрокаЗаполненияРеквизитовТовара.ЕстьКритичныеОшибки = Истина;
								СтрокаЗаполненияРеквизитовТовара.ОписаниеОшибки =
										СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиЗаполненияКатегории1С,
												ВыборкаУпаковок.Номенклатура,
												ПредставлениеРеквизитаИсточникаКатегории);
						Иначе
							СтрокаЗаполненияРеквизитовТовара.Категория1С = ВыборкаУпаковок.Категория1С;
							СтруктураДанныхЗаписи.ИсточникКатегорииМаркетплейса = ВыборкаУпаковок.ИсточникКатегорииМаркетплейса;
						КонецЕсли;
					КонецЕсли;

					Если ПолучитьАтрибуты И ОбновитьДанные И ВыборкаУпаковок.СчетчикРеквизитов = 0 Тогда
						СтрокаЗаполненияРеквизитовТовара.ДанныеДляПубликации = СтруктураДанныхЗаписи;
						СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта = ТаблицаЗначенийРеквизитов;
						СтрокаЗаполненияРеквизитовТовара.ОбъектыПубликации = ТаблицаОбъектовПубликации;
						СтрокаЗаполненияРеквизитовТовара.ЕстьКритичныеОшибки = Истина;
							СтрокаЗаполненияРеквизитовТовара.ОписаниеОшибки =
									СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиПравилЗаполнения, ВыборкаУпаковок.Категория1С);
					КонецЕсли;

					ИсточникДанныхЗаполнения = Новый Структура("УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
					ЗаполнитьЗначенияСвойств(ИсточникДанныхЗаполнения, ВыборкаУпаковок);

					// Получение таблицы атрибутов категории из сервиса для корректировки состава атрибутов при публикации.
					ТаблицаАтрибутовКатегорииИзСервиса = Неопределено;

					Если ПроверятьСоставАтрибутов Тогда
						ИдентификаторКатегорииМаркетплейса = ВыборкаУпаковок.ИдентификаторКатегорииМаркетплейса;
						Если Не ПустаяСтрока(ИдентификаторКатегорииМаркетплейса) Тогда
							ТаблицаАтрибутовКатегорииИзСервиса = АтрибутыКатегорийСервиса[ИдентификаторКатегорииМаркетплейса];
							Если ТаблицаАтрибутовКатегорииИзСервиса = Неопределено Тогда
								ТаблицаАтрибутовКатегорииИзСервиса = ПолучитьАтрибутыКатегории( ВыборкаУпаковок.УчетнаяЗаписьМаркетплейса, ИдентификаторКатегорииМаркетплейса );
								ТаблицаАтрибутовКатегорииИзСервиса.Индексы.Добавить("ИдентификаторАтрибутаМаркетплейса");
								АтрибутыКатегорийСервиса.Вставить(ИдентификаторКатегорииМаркетплейса, ТаблицаАтрибутовКатегорииИзСервиса);
							КонецЕсли;
						КонецЕсли;

						Если ТаблицаАтрибутовКатегорииИзСервиса = Неопределено Тогда
							ТаблицаАтрибутовКатегорииИзСервиса = НоваяТаблицаАтрибутовКатегорииМаркетплейса();
						КонецЕсли;

						Если ТаблицаАтрибутовКатегорииИзСервиса.Колонки.Найти("Используется") = Неопределено Тогда
							ТаблицаАтрибутовКатегорииИзСервиса.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
						КонецЕсли;
					КонецЕсли;

					ЗаполнитьОсновныеДанныеТовара = ПолучитьАтрибуты;

					Если ПолучитьАтрибуты И ОбновитьДанные Тогда

						// Заполнение таблицы значений реквизитов.

						ТаблицаЗначенийРеквизитовВХранилище = Неопределено;
						ЕстьКэш = Ложь;

						// Получение кэша значений атрибутов.
						Если СтрокаЗаполненияРеквизитовТовара.ДанныеОбъектаПереданы 
							И ТипЗнч(СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта) = Тип("ТаблицаЗначений")
							И СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта.Количество() > 0 Тогда
							
							
							ПараметрыЗаполненияДанныхОбъекта = Новый Структура( "ВыборкаУпаковок", ВыборкаУпаковок );
							СлужебнаяДанныеОбъектаДозаполнить( СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта, ПараметрыЗаполненияДанныхОбъекта );
							
							ТаблицаЗначенийРеквизитовВХранилище = СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта;
							ТаблицаЗначенийРеквизитовВХранилище.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
							
							ЕстьКэш = (ТаблицаЗначенийРеквизитовВХранилище.Количество() > 0);
						КонецЕсли;

						Если ВыборкаУпаковок.СчетчикРеквизитов > 0 Тогда
							ВыборкаЗначенийРеквизитов = ВыборкаУпаковок.Выбрать();
							Пока ВыборкаЗначенийРеквизитов.Следующий() Цикл
								// Проверка наличия атрибута в списке атрибутов категории в сервисе при публикации.
								Если ПроверятьСоставАтрибутов Тогда
									ОтборАтрибута = Новый Структура("ИдентификаторАтрибутаМаркетплейса", ВыборкаЗначенийРеквизитов.ИдентификаторАтрибутаМаркетплейса);
									СтрокиАтрибутовКатегорииИзСервиса = ТаблицаАтрибутовКатегорииИзСервиса.НайтиСтроки(ОтборАтрибута);
									Если СтрокиАтрибутовКатегорииИзСервиса.Количество() = 0 Тогда
										Продолжить; // Атрибут больше не используется.
									Иначе
										Для Каждого СтрокаАтрибутаИзСервиса Из СтрокиАтрибутовКатегорииИзСервиса Цикл
											СтрокаАтрибутаИзСервиса.Используется = Истина;
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;

								// Значение атрибута маркетплейса	// 00-00537447
								ЗначениеАтрибутаМаркетплейса = ВыборкаЗначенийРеквизитов.ЗначениеАтрибутаМаркетплейса;
								Если ЗначениеАтрибутаМаркетплейса = Null Или ЗначениеАтрибутаМаркетплейса = Неопределено Тогда
									Если ВыборкаЗначенийРеквизитов.ДоступенВыборЗначенияИзСписка
										 ИЛИ ВыборкаЗначенийРеквизитов.НеЗаполненРеквизит1С Тогда
										ЗначениеАтрибутаМаркетплейса = ВыборкаЗначенийРеквизитов.ЗначениеПоУмолчанию;
									Иначе
										ЗначениеАтрибутаМаркетплейса = ВыборкаЗначенийРеквизитов.ЗначениеРеквизита1С;
									КонецЕсли;
								КонецЕсли;
								
								Если ДляПубликации Тогда	
									// Заполнение весогабаритов упаковки.
									ИмяПоляВесогабарита = СоответствиеАтрибутовВесогабаритовУпаковки.Получить(ВыборкаЗначенийРеквизитов.ИдентификаторАтрибутаМаркетплейса);
									Если ЗначениеЗаполнено(ИмяПоляВесогабарита) Тогда
										СтруктураВесогабаритовУпаковки[ИмяПоляВесогабарита] =
										?(ЗначениеЗаполнено(ВыборкаЗначенийРеквизитов.ИдентификаторЗначенияАтрибутаМаркетплейса),
										ВыборкаЗначенийРеквизитов.ИдентификаторЗначенияАтрибутаМаркетплейса,
										ЗначениеАтрибутаМаркетплейса);	// 00-00537447
									КонецЕсли;
								КонецЕсли;
								
								Если ТаблицаЗначенийРеквизитовВХранилище = Неопределено Тогда
									ЗаполнитьЗначенияСвойств(ИсточникДанныхЗаполнения, ВыборкаЗначенийРеквизитов);
									
									// Получение кэша значений атрибутов.
									ТаблицаЗначенийРеквизитовВХранилище = ТаблицаЗначенийРеквизитов(ВыборкаЗначенийРеквизитов.ДанныеОбъекта);
									ТаблицаЗначенийРеквизитовВХранилище.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
									ЕстьКэш = (ТаблицаЗначенийРеквизитовВХранилище.Количество() > 0);
								КонецЕсли;
								
								Если ЗаполнитьОсновныеДанныеТовара Тогда
									// Заполнение основных данных товара из первой строки выборки.
									СтруктураДанныхЗаписи.НаименованиеОбъектаМаркетплейса = НаименованиеОбъектаМаркетплейса;
									СтруктураДанныхЗаписи.ПредставлениеОбъектаМаркетплейса = НаименованиеОбъектаМаркетплейса;
									СтруктураДанныхЗаписи.ОписаниеОбъектаМаркетплейса = ВыборкаЗначенийРеквизитов.ОписаниеОбъектаМаркетплейса;
									СтруктураДанныхЗаписи.ИдентификаторПубликации = СтрокаЗаполненияРеквизитовТовара.ИдентификаторПубликации;
									СтруктураДанныхЗаписи.ИдентификаторКатегорииМаркетплейса = ВыборкаЗначенийРеквизитов.ИдентификаторКатегорииМаркетплейса;
									СтруктураДанныхЗаписи.НаименованиеКатегорииМаркетплейса = ВыборкаЗначенийРеквизитов.НаименованиеКатегорииМаркетплейса;
									СтруктураДанныхЗаписи.НеактивнаяКатегорияМаркетплейса = ВыборкаЗначенийРеквизитов.НеактивнаяКатегорияМаркетплейса;
									
									ЗаполнитьОсновныеДанныеТовара = Ложь;
								КонецЕсли;
								
								НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
								
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗначенийРеквизитов);
								
								НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ЗначениеАтрибутаМаркетплейса;	// 00-00537447
								
								// Преобразование значения маркетплейса к требуемому типу.
								Если ЗначениеЗаполнено(НоваяСтрока.ТипЗначенияАтрибута) Тогда
									ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(НоваяСтрока.ТипЗначенияАтрибута);
									ОписаниеТипа = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТипЗначенияАтрибута1С, НоваяСтрока.ТипЗначенияАтрибута);
									НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ОписаниеТипа.ПривестиЗначение(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
								КонецЕсли;
								
								// Если ЗначениеАтрибутаМаркетплейса не заполнено, то заполним из ЗначениеПоУмолчанию 
								Если Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса) И ЗначениеЗаполнено(НоваяСтрока.ЗначениеПоУмолчанию) Тогда
									
									НоваяСтрока.ЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеПоУмолчанию;
									НоваяСтрока.ИдентификаторЗначенияАтрибутаМаркетплейса = НоваяСтрока.ИдентификаторЗначенияПоУмолчанию;
									
									// подменим ЗначениеАтрибутаМаркетплейса из ЗначениеПоУмолчаниюСтрокаНеограниченная 
									Если Не ПустаяСтрока( НоваяСтрока.ЗначениеПоУмолчаниюСтрокаНеограниченная ) 
										И ТипЗнч( НоваяСтрока.ЗначениеАтрибутаМаркетплейса ) = Тип( "Строка" ) 
										И СтрДлина( НоваяСтрока.ЗначениеАтрибутаМаркетплейса ) < СтрДлина( НоваяСтрока.ЗначениеПоУмолчаниюСтрокаНеограниченная )
										Тогда
										НоваяСтрока.ЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеПоУмолчаниюСтрокаНеограниченная;
									КонецЕсли;									
								КонецЕсли;
								
								// Заполнение признаков атрибута.
								НоваяСтрока.НеЗаполненАтрибут = Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
								
								НоваяСтрока.УстановленоЗначениеПоУмолчанию = Не НоваяСтрока.НеЗаполненоСоответствиеАтрибута
								И ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса)
								И НоваяСтрока.ЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеПоУмолчанию;
								
								НоваяСтрока.ЗначениеАтрибутаЗаданоПользователем = Ложь;
								
								// Отбор строк из кэша.
								Если ЕстьКэш Тогда
									Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка, Категория1С, ИдентификаторАтрибутаМаркетплейса");
									
									ЗаполнитьЗначенияСвойств(Отбор, ВыборкаЗначенийРеквизитов);
									
									Отбор.Вставить("ЗначениеАтрибутаЗаданоПользователем", Истина);
									СтрокиКэша = ТаблицаЗначенийРеквизитовВХранилище.НайтиСтроки(Отбор);
									
									ПредЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеАтрибутаМаркетплейса;	// 00-00537447
									
									// Попытка заполнения пустого атрибута из сохраненных данных на случай, когда ранее атрибут был заполнен пользователем вручную.
									
									ДозаполнениеСтроки = Истина;

									Для Каждого СтрокаКэша Из СтрокиКэша Цикл
										СтрокаКэша.Обработана = Истина;

										Если ДозаполнениеСтроки Тогда
											ДозаполнениеСтроки = Ложь;
										ИначеЕсли ВыборкаЗначенийРеквизитов.ИдентификаторКатегорииМаркетплейса = СтрокаКэша.ИдентификаторКатегорииМаркетплейса Тогда
											НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗначенийРеквизитов);
											НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ЗначениеАтрибутаМаркетплейса;	// 00-00537447
										Иначе
											Продолжить;
										КонецЕсли;

										ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКэша, "ЗначениеАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибутаМаркетплейса");

										// Заполнение признаков атрибута.
										НоваяСтрока.НеЗаполненАтрибут = Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
										НоваяСтрока.УстановленоЗначениеПоУмолчанию = Не НоваяСтрока.НеЗаполненоСоответствиеАтрибута
												И ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса)
												И НоваяСтрока.ЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеПоУмолчанию;
										НоваяСтрока.ЗначениеАтрибутаЗаданоПользователем = ПредЗначениеАтрибутаМаркетплейса <> НоваяСтрока.ЗначениеАтрибутаМаркетплейса;
										
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;

						// Заполнение таблицы атрибутами, добавленными пользователем вручную.
						Если ЕстьКэш Тогда
							// Отбор строк из кэша.
							Отбор = Новый Структура("Номенклатура, Характеристика, Упаковка, Категория1С");
							ЗаполнитьЗначенияСвойств(Отбор, ВыборкаУпаковок);
							Отбор.Вставить("Обработана", Ложь);
							Отбор.Вставить("ЗначениеАтрибутаЗаданоПользователем", Истина);
							СтрокиКэша = ТаблицаЗначенийРеквизитовВХранилище.НайтиСтроки(Отбор);

							Для Каждого СтрокаКэша Из СтрокиКэша Цикл
								Если ТаблицаЗначенийРеквизитов.Найти(СтрокаКэша.ИдентификаторАтрибутаМаркетплейса, "ИдентификаторАтрибутаМаркетплейса") <> Неопределено Тогда
									Продолжить;
								КонецЕсли;

								СтрокаКэша.Обработана = Истина;

								Если ВыборкаУпаковок.ИдентификаторКатегорииМаркетплейса = СтрокаКэша.ИдентификаторКатегорииМаркетплейса Тогда
									НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКэша);

									// Заполнение признаков атрибута.
									НоваяСтрока.НеЗаполненАтрибут = Не ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
									НоваяСтрока.УстановленоЗначениеПоУмолчанию = Не НоваяСтрока.НеЗаполненоСоответствиеАтрибута
											И ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса)
											И НоваяСтрока.ЗначениеАтрибутаМаркетплейса = НоваяСтрока.ЗначениеПоУмолчанию;
									НоваяСтрока.ЗначениеАтрибутаЗаданоПользователем = ЗначениеАтрибутаМаркетплейса <> НоваяСтрока.ЗначениеАтрибутаМаркетплейса;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;

					ИначеЕсли ПолучитьАтрибуты И Не ОбновитьДанные Тогда

						// Получение таблицы значений реквизитов из кэша.
						Если СтрокаЗаполненияРеквизитовТовара.ДанныеОбъектаПереданы Тогда
							// Кэш из переданной таблицы данных объекта.
							ТаблицаЗначенийРеквизитов = СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта;
						Иначе
							// Кэш из хранилища значений.
							ТаблицаЗначенийРеквизитов = ТаблицаЗначенийРеквизитов(ВыборкаУпаковок.ДанныеОбъекта);
						КонецЕсли;

						Если ДляПубликации Или ПроверятьСоставАтрибутов Тогда
							МассивУдаляемыхСтрокРеквизитов = Новый Массив;
							Для Каждого СтрокаЗначенияРеквизита Из ТаблицаЗначенийРеквизитов Цикл
								// Заполнение весогабаритов упаковки.
								Если ДляПубликации Тогда
									ИмяПоляВесогабарита = СоответствиеАтрибутовВесогабаритовУпаковки.Получить(СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса);
									Если ЗначениеЗаполнено(ИмяПоляВесогабарита) Тогда
										СтруктураВесогабаритовУпаковки[ИмяПоляВесогабарита] =
										?(ЗначениеЗаполнено(СтрокаЗначенияРеквизита.ИдентификаторЗначенияАтрибутаМаркетплейса),
										СтрокаЗначенияРеквизита.ИдентификаторЗначенияАтрибутаМаркетплейса,
										СтрокаЗначенияРеквизита.ЗначениеАтрибутаМаркетплейса);
									КонецЕсли;
								КонецЕсли;

								// Проверка наличия атрибута в списке атрибутов категории в сервисе при публикации.
								Если ПроверятьСоставАтрибутов Тогда
									ОтборАтрибута = Новый Структура("ИдентификаторАтрибутаМаркетплейса", СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса);
									СтрокиАтрибутовКатегорииИзСервиса = ТаблицаАтрибутовКатегорииИзСервиса.НайтиСтроки(ОтборАтрибута);
									
									Если СтрокиАтрибутовКатегорииИзСервиса.Количество() = 0 Тогда
										МассивУдаляемыхСтрокРеквизитов.Добавить(СтрокаЗначенияРеквизита);
									Иначе
										Для Каждого СтрокаАтрибутаИзСервиса Из СтрокиАтрибутовКатегорииИзСервиса Цикл
											СтрокаАтрибутаИзСервиса.Используется = Истина;
										КонецЦикла;
									КонецЕсли;
								КонецЕсли
							КонецЦикла;

							// Удаление атрибутов, отсутствующих в списке атрибутов категории в сервисе при публикации.
							Для Каждого СтрокаУдаления Из МассивУдаляемыхСтрокРеквизитов Цикл
								ТаблицаЗначенийРеквизитов.Удалить(СтрокаУдаления);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;

					Если ЗаполнитьОсновныеДанныеТовара Тогда
						// Заполнение основных данных товара.
						СтруктураДанныхЗаписи.НаименованиеОбъектаМаркетплейса = НаименованиеОбъектаМаркетплейса;
						СтруктураДанныхЗаписи.ПредставлениеОбъектаМаркетплейса = НаименованиеОбъектаМаркетплейса;
						СтруктураДанныхЗаписи.ОписаниеОбъектаМаркетплейса = ВыборкаУпаковок.ОписаниеОбъектаМаркетплейса;
						СтруктураДанныхЗаписи.ИдентификаторПубликации = СтрокаЗаполненияРеквизитовТовара.ИдентификаторПубликации;
						СтруктураДанныхЗаписи.ИдентификаторКатегорииМаркетплейса = ВыборкаУпаковок.ИдентификаторКатегорииМаркетплейса;
						СтруктураДанныхЗаписи.НаименованиеКатегорииМаркетплейса = ВыборкаУпаковок.НаименованиеКатегорииМаркетплейса;
						СтруктураДанныхЗаписи.НеактивнаяКатегорияМаркетплейса = ВыборкаУпаковок.НеактивнаяКатегорияМаркетплейса;
			
						ЗаполнитьОсновныеДанныеТовара = Ложь;
					КонецЕсли;

					Если ПроверятьСоставАтрибутов Тогда
						// Добавление обязательных атрибутов из сервиса.
						ОтборАтрибута = Новый Структура("Используется, ОбязательныйАтрибут", Ложь, Истина);
						СтрокиАтрибутовКатегорииИзСервиса = ТаблицаАтрибутовКатегорииИзСервиса.НайтиСтроки(ОтборАтрибута);
						Для Каждого СтрокаАтрибутаИзСервиса Из СтрокиАтрибутовКатегорииИзСервиса Цикл
							НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗаполненияРеквизитовТовара);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанныхЗаписи);
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАтрибутаИзСервиса);

							// Преобразование значения маркетплейса к требуемому типу.
							Если ЗначениеЗаполнено(НоваяСтрока.ТипЗначенияАтрибута) Тогда
								ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(НоваяСтрока.ТипЗначенияАтрибута);
								ОписаниеТипа = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТипЗначенияАтрибута1С, НоваяСтрока.ТипЗначенияАтрибута);
								НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ОписаниеТипа.ПривестиЗначение(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
							КонецЕсли;

							// Заполнение признаков атрибута.
							НоваяСтрока.НеЗаполненРеквизит1С = Истина;
							НоваяСтрока.НеЗаполненАтрибут = Истина;
							НоваяСтрока.УстановленоЗначениеПоУмолчанию = Ложь;
							НоваяСтрока.ЗначениеАтрибутаЗаданоПользователем = Ложь;
						КонецЦикла;
					КонецЕсли;
					
					Если ДляПубликации Тогда
						СтруктураДанныхЗаписи.Вставить("ВесогабаритыУпаковки", СтруктураВесогабаритовУпаковки);
					КонецЕсли;

					СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта = ТаблицаЗначенийРеквизитов;

					// Заполнение данных по изображениям.
					ЗаполнитьИнформациюПоИзображениям(ТаблицаОбъектовПубликации, ИсточникДанныхЗаполнения, ВыборкаИзображений, ОбновитьДанные);

					// Заполнение данных по ценам.
					ЗаполнитьИнформациюПоЦенам(СтруктураДанныхЗаписи, ИсточникДанныхЗаполнения, ВидыЦенУчетнойЗаписи, ВыборкаЦен);

					СтрокаЗаполненияРеквизитовТовара.ДанныеДляПубликации = СтруктураДанныхЗаписи;
					СтрокаЗаполненияРеквизитовТовара.ОбъектыПубликации = ТаблицаОбъектовПубликации;

					// Проверка наличия ошибок.
					Если ПроверитьОшибкиЗаполнения Тогда
						СписокПараметровДляПроверки = СписокСвойствТовараДляКарточкиТовара();
						ЗаполнитьЗначенияСвойств(СписокПараметровДляПроверки, СтрокаЗаполненияРеквизитовТовара);
						СписокПараметровДляПроверки.НаименованиеКатегорииМаркетплейса = СтруктураДанныхЗаписи.НаименованиеКатегорииМаркетплейса;
						СписокПараметровДляПроверки.Цены = СтруктураДанныхЗаписи.Цены;

						РезультатПроверки = ПроверитьЗаполнениеКарточкиТовара(СтрокаЗаполненияРеквизитовТовара.ДанныеОбъекта,
								СписокПараметровДляПроверки, СтрокаЗаполненияРеквизитовТовара.ОбъектыПубликации);
						СтрокаЗаполненияРеквизитовТовара.ЕстьКритичныеОшибки = РезультатПроверки.ЕстьКритичныеОшибки;
						СтрокаЗаполненияРеквизитовТовара.КодОшибки = РезультатПроверки.КодОшибки;
						СтрокаЗаполненияРеквизитовТовара.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
					КонецЕсли;

				КонецЦикла; // ВыборкаУпаковок

			КонецЦикла; //ВыборкаХарактеристик

		КонецЦикла; // ВыборкаНоменклатуры
		
	КонецЦикла; // ВыборкаУчетныхЗаписей

	Возврат ДанныеПубликации;

КонецФункции

// 00-00537447
Процедура ИсправитьЗапросВНаборахДанныхДляСтроковыхДополнительныхЗначений(НаборДанных)

	Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
		Для каждого ВложенныйНаборДанных Из НаборДанных.Элементы Цикл
			ИсправитьЗапросВНаборахДанныхДляСтроковыхДополнительныхЗначений(ВложенныйНаборДанных);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросМакетаКомпоновкиДанных") Тогда
		ТекстЗапроса = СтрЗаменить(НаборДанных.Запрос, Символы.ПС, " ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Символы.Таб, " ");
		СтрокаПоиска = ВРег(".ДополнительныеРеквизиты КАК ");
	
		Пока Истина Цикл
			Индекс = СтрНайти(ВРег(ТекстЗапроса), СтрокаПоиска);
			Если Индекс = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Псевдоним = Сред(ТекстЗапроса, Индекс + СтрДлина(СтрокаПоиска));
			ТекстЗапроса    = Псевдоним;
			Индекс    = СтрНайти(Псевдоним, " ");
			Если Индекс > 0 Тогда
				Псевдоним = Сред(Псевдоним, 1, Индекс - 1);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Псевдоним) Тогда
				Индекс = СтрНайти(ВРег(НаборДанных.Запрос), ВРег(Псевдоним + ".Значение КАК СТРОКА)"));
				Если Индекс > 0 Тогда
					НаборДанных.Запрос = Сред(НаборДанных.Запрос, 1, Индекс - 1)
						+ Псевдоним + ".ТекстоваяСтрока КАК СТРОКА)"
						+ Сред(НаборДанных.Запрос, Индекс + СтрДлина(Псевдоним + ".Значение КАК СТРОКА)"));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеЗначенийАтрибутов(ИсточникДанныхТоваров, ПараметрыКонтекст = Неопределено)

	// Таблица для сохранения псевдонимов полей.
	ТаблицаИменПолей = Новый ТаблицаЗначений;
	ТаблицаИменПолей.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов("Строка"));
	ТаблицаИменПолей.Колонки.Добавить("ПолныйПутьКРеквизиту1С", Новый ОписаниеТипов("Строка"));
	ТаблицаИменПолей.Колонки.Добавить("ДобавляемаяКолонка", Новый ОписаниеТипов("Булево"));

	// Подготовка схемы компоновки данных и компоновщика настроек для получения значений реквизитов.
	Поля = ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов(Истина);
	Результат = СоздатьСхемуКомпоновкиДанныхДляВыбораРеквизита(Поля);

	СхемаКомпоновкиДанных = Результат.СхемаКомпоновкиДанных;
	СоответствиеПсевдонимовМетаданных = Результат.СоответствиеПсевдонимовМетаданных;

	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;

	// Получение таблицы значений реквизитов по установленным настройкам для атрибутов категорий 1С.
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));

	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
	НастройкиКомпоновщика.Структура.Очистить();

	ГруппировкаПолей = НастройкиКомпоновщика.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));

	ВыводРеквизитов = ГруппировкаПолей.ПараметрыВывода.Элементы.Найти("РасположениеРеквизитов");
	Если Не ВыводРеквизитов.Использование Тогда
		ВыводРеквизитов.Значение = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
		ВыводРеквизитов.Использование = Истина;
	КонецЕсли;

	Для Каждого ДанныеПоля Из Поля Цикл
		Поле = ДанныеПоля.Значение;

		СтрокаИмениПоля = ТаблицаИменПолей.Найти(Поле.ПолеКомпоновкиДанных, "ПолныйПутьКРеквизиту1С");
		Если СтрокаИмениПоля = Неопределено Тогда
			ВыбранноеПоле = ГруппировкаПолей.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Поле.ПолеКомпоновкиДанных);
			ВыбранноеПоле.Заголовок = Поле.ПутьКДанным;

			// Добавление записей в таблицу псевдонимов полей.
			СтрокаИмениПоля = ТаблицаИменПолей.Добавить();
			СтрокаИмениПоля.ИмяПоля = Поле.ПутьКДанным;
			СтрокаИмениПоля.ПолныйПутьКРеквизиту1С = Поле.ПолеКомпоновкиДанных;
		КонецЕсли;
	КонецЦикла;

	// Получение таблицы установленных настроек для атрибутов категорий 1С.
	ЧастиТекстаЗапроса = СоставныеЧастиТекстаЗапросаПолученияНастроекСоответствияАтрибутов();

	Запрос = Новый Запрос;

	Если ТипЗнч(ИсточникДанныхТоваров) = Тип("ТаблицаЗначений") Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ДанныеПубликации", ИсточникДанныхТоваров);
		ДанныеПубликации = ИсточникДанныхТоваров;
	Иначе // МенеджерВременныхТаблиц
		Запрос.МенеджерВременныхТаблиц = ИсточникДанныхТоваров;
		ЧастиТекстаЗапроса.Пролог = СтрЗаменить(ЧастиТекстаЗапроса.Пролог, "&ДанныеПубликации", "ДанныеПубликации");
		ДанныеПубликации = ИсточникДанныхТоваров.Таблицы.Найти("ДанныеПубликации").ПолучитьДанные().Выгрузить();
	КонецЕсли;
	
	Если ДанныеПубликации.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запрос.Текст = ЧастиТекстаЗапроса.Пролог + ЧастиТекстаЗапроса.Разделитель + ЧастиТекстаЗапроса.Рефрен;

	УстановитьПривилегированныйРежим(Истина);

	Инд = 2;
	Пока Истина Цикл
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		Если ВыборкаДанных.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;

		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
				"ТаблицаАнализа" + Формат(Инд, "ЧГ="),
				"ТаблицаАнализа" + Формат(Инд + 1, "ЧГ="));
		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
				"ТаблицаАнализа" + Формат(Инд - 1, "ЧГ="),
				"ТаблицаАнализа" + Формат(Инд, "ЧГ="));
		Запрос.Текст = ЧастиТекстаЗапроса.Рефрен;

		Инд = Инд + 1;
	КонецЦикла;

	ЧастиТекстаЗапроса.Эпилог = СтрЗаменить(ЧастиТекстаЗапроса.Эпилог, "ТаблицаАнализа2", "ТаблицаАнализа" + Формат(Инд, "ЧГ="));
	Запрос.Текст = ЧастиТекстаЗапроса.Эпилог;

	ТаблицаНастроекПолейКатегорий1С = Запрос.Выполнить().Выгрузить();

	// 00-00537447
	ТаблицаНастроекПолейКатегорий1С.Колонки.Добавить("ЗначениеПоУмолчанию", Новый ОписаниеТипов(ПростыеТипы()));
	Для каждого СтрокаТаблицыЗначений Из ТаблицаНастроекПолейКатегорий1С Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеПоУмолчаниюСтрокаНеограниченная) Тогда
			СтрокаТаблицыЗначений.ЗначениеПоУмолчанию = СтрокаТаблицыЗначений.ЗначениеПоУмолчаниюСтрокаНеограниченная;
		Иначе
			СтрокаТаблицыЗначений.ЗначениеПоУмолчанию = СтрокаТаблицыЗначений.ЗначениеПоУмолчаниюИзЗапроса;
		КонецЕсли;
	КонецЦикла;

	ТаблицаНастроекПолейКатегорий1С.Индексы.Добавить("ПолныйПутьКРеквизиту1С, Категория1С");
	ТаблицаНастроекПолейКатегорий1С.Индексы.Добавить("ПолныйПутьКРеквизиту1С, Категория1С, ИдентификаторКатегорииМаркетплейса");

	УстановитьПривилегированныйРежим(Ложь);

	Если ТаблицаНастроекПолейКатегорий1С.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Заполнение таблицы псевдонимов полей и дополнение компоновщика настроек полями из установленных настроек для
	// атрибутов категорий 1С.
	ИндПоля = 1;
	МассивНезаполненныхСопоставлений = Новый Массив;
	МассивДублейПолей = Новый Массив;

	Для Каждого СтрокаПоляКатегории1С Из ТаблицаНастроекПолейКатегорий1С Цикл

		Если ПустаяСтрока(СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С) Тогда
			МассивНезаполненныхСопоставлений.Добавить(СтрокаПоляКатегории1С);
			Продолжить;
		КонецЕсли;
	
		СтрокаИмениПоля = ТаблицаИменПолей.Найти(СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С, "ПолныйПутьКРеквизиту1С");
		Если СтрокаИмениПоля = Неопределено Тогда

			СтрокаИмениПоля = ТаблицаИменПолей.Добавить();
			СтрокаИмениПоля.ИмяПоля = "Значение1С_" + ИндПоля;
			СтрокаИмениПоля.ПолныйПутьКРеквизиту1С = СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С;
			СтрокаИмениПоля.ДобавляемаяКолонка = Истина;

			СообщениеОДубле =
					ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПроверитьДублированиеДополнительногоРеквизита(СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С,
							СтрокаПоляКатегории1С.ПредставлениеРеквизита1С, НастройкиКомпоновщика.ДоступныеПоляВыбора);

			Если Не ПустаяСтрока(СообщениеОДубле) Тогда
				МассивДублейПолей.Добавить(СтрокаИмениПоля.ИмяПоля);
			Иначе
				ВыбранноеПоле = ГруппировкаПолей.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(СтрокаПоляКатегории1С.ПолныйПутьКРеквизиту1С);
				ВыбранноеПоле.Заголовок = СтрокаИмениПоля.ИмяПоля;
			КонецЕсли;

			ИндПоля = ИндПоля + 1;
		КонецЕсли;
	КонецЦикла;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    Попытка
		МакетКомпоновки =
			КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка получения значений атрибутов товаров, возможно, поменялось наименование дополнительного реквизита:'" )
		 + " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, , Истина );
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;

	// 00-00537447
	Для каждого НаборДанных Из МакетКомпоновки.НаборыДанных Цикл
		ИсправитьЗапросВНаборахДанныхДляСтроковыхДополнительныхЗначений(НаборДанных);
	КонецЦикла;


	ВнешниеНаборы = Новый Структура("ДанныеПубликации", ДанныеПубликации);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы);

	ТаблицаЗначенийРеквизитов = Новый ТаблицаЗначений;

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначенийРеквизитов);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	// Замена имен колонок таблицы значений реквизитов на псевдонимы из таблицы псевдонимов полей.
	ЯчейкиМакета = Новый Массив;
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
		ЯчейкиМакета = Макет.Макет.Ячейки;
		Прервать;
	КонецЦикла;

	Для Каждого ЯчейкаМакета Из ЯчейкиМакета Цикл
		СтрокаИмениПоля = ТаблицаИменПолей.Найти(ЯчейкаМакета.Заголовок, "ИмяПоля");
		Если СтрокаИмениПоля <> Неопределено Тогда
			КолонкаТаблицы = ТаблицаЗначенийРеквизитов.Колонки[ЯчейкаМакета.Имя];
			КолонкаТаблицы.Имя = ЯчейкаМакета.Заголовок;
			КолонкаТаблицы.Заголовок = СтрокаИмениПоля.ПолныйПутьКРеквизиту1С;
		КонецЕсли;
	КонецЦикла;

	Для Каждого ИсключенноеПоле Из МассивДублейПолей Цикл
		СтрокаИмениПоля = ТаблицаИменПолей.Найти(ИсключенноеПоле, "ИмяПоля");
		Если СтрокаИмениПоля <> Неопределено Тогда
			ТаблицаЗначенийРеквизитов.Колонки.Добавить(ИсключенноеПоле,, СтрокаИмениПоля.ПолныйПутьКРеквизиту1С);
		КонецЕсли;
	КонецЦикла;

	ТаблицаЗначенийРеквизитов.Колонки.Добавить("СтрокаОбработана", Новый ОписаниеТипов("Булево"));

	// Подготовка таблицы для получения соответствия значений реквизитов 1С значениям атрибутов маркетплейса.
	ТаблицаДанныхАтрибутов = ТаблицаНастроекПолейКатегорий1С.СкопироватьКолонки();

	МассивТипов = ПростыеТипы();
	Для Каждого Колонка Из ТаблицаЗначенийРеквизитов.Колонки Цикл
		Для Каждого ТипКолонки Из Колонка.ТипЗначения.Типы() Цикл
			Если ТипКолонки = Тип("Null") Тогда
				Продолжить;
			КонецЕсли;

			МассивТипов.Добавить(ТипКолонки);
		КонецЦикла;
	КонецЦикла;

	КолонкаЗначениеРеквизита1СТип = Новый ОписаниеТипов(МассивТипов);
	ТаблицаДанныхАтрибутов.Колонки.Добавить("ЗначениеРеквизита1С", КолонкаЗначениеРеквизита1СТип);
	ТаблицаДанныхАтрибутов.Колонки.Добавить("ЗначениеРеквизитаОбъект1С", Новый ОписаниеТипов(МассивТипов,,
	Новый КвалификаторыСтроки(ДлинаСтрокиМагическоеЧисло())));
	
	ДобавленныеОсновныеПоля = Новый Соответствие;
	Для Каждого ДанныеПоля Из Поля Цикл
		Поле = ДанныеПоля.Значение;
		Если ТаблицаДанныхАтрибутов.Колонки.Найти(Поле.ПутьКДанным) = Неопределено Тогда
			ТаблицаДанныхАтрибутов.Колонки.Добавить(Поле.ПутьКДанным, Поле.ТипЗначенияПоля);
			ДобавленныеОсновныеПоля.Вставить(Поле.ПутьКДанным, Поле.ПолеКомпоновкиДанных);
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаДанных Из ТаблицаЗначенийРеквизитов Цикл
		Для Каждого Колонка Из ТаблицаЗначенийРеквизитов.Колонки Цикл
			Если ПустаяСтрока(Колонка.Заголовок) Тогда
				Продолжить;
			КонецЕсли;

			Отбор = Новый Структура("ПолныйПутьКРеквизиту1С", Колонка.Заголовок); 

			ИмяКолонкиКатегории = "Категория1С_" + ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаДанных.ИсточникКатегории);
			ДобавленноеПоле = ДобавленныеОсновныеПоля.Получить(ИмяКолонкиКатегории);
			Если ДобавленноеПоле <> Неопределено Тогда
				СтрокаИмениПоля = ТаблицаИменПолей.Найти(ДобавленноеПоле, "ПолныйПутьКРеквизиту1С");
				Если СтрокаИмениПоля <> Неопределено Тогда
					ИмяКолонкиКатегории = СтрокаИмениПоля.ИмяПоля;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Отбор.Вставить("Категория1С", СтрокаДанных[ИмяКолонкиКатегории]);

			Если Не ПустаяСтрока(СтрокаДанных.ИдентификаторКатегорииМаркетплейса) Тогда
				Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", СтрокаДанных.ИдентификаторКатегорииМаркетплейса);
			КонецЕсли;

			СтрокиПолейКатегории1С = ТаблицаНастроекПолейКатегорий1С.НайтиСтроки(Отбор);

			Если СтрокиПолейКатегории1С.Количество() > 0 Тогда
				СтрокаДанных.СтрокаОбработана = Истина;

				Для Каждого СтрокаПолейКатегории1С Из СтрокиПолейКатегории1С Цикл
					НоваяСтрока = ТаблицаДанныхАтрибутов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолейКатегории1С);
					
					Если ДобавленныеОсновныеПоля.Количество() > 0 Тогда
						Для Каждого Поле Из ДобавленныеОсновныеПоля Цикл
							СтрокаИмениПоля = ТаблицаИменПолей.Найти(Поле.Значение, "ПолныйПутьКРеквизиту1С");
							Если СтрокаИмениПоля <> Неопределено Тогда
								НоваяСтрока[Поле.Ключ] = СтрокаДанных[СтрокаИмениПоля.ИмяПоля];
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;

					НоваяСтрока.ЗначениеРеквизита1С = СтрокаДанных[Колонка.Имя];
					НоваяСтрока.ЗначениеРеквизитаОбъект1С = НоваяСтрока.ЗначениеРеквизита1С;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Отбор = Новый Структура("СтрокаОбработана", Ложь);
	СтрокиБезПравилСопоставления = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
	Для Каждого СтрокаДанных Из СтрокиБезПравилСопоставления Цикл
		НоваяСтрока = ТаблицаДанныхАтрибутов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		
		НоваяСтрока.ИдентификаторИсточникаКатегорииМаркетплейса = "";
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = "";
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = "";
		НоваяСтрока.ИдентификаторЗначенияПоУмолчанию = "";
		НоваяСтрока.НаименованиеАтрибутаМаркетплейса = "";
		НоваяСтрока.ПолныйПутьКРеквизиту1С = "";
		НоваяСтрока.ПредставлениеРеквизита1С = "";
		НоваяСтрока.ОбязательныйАтрибут = Ложь;
		НоваяСтрока.ЯвляетсяКоллекциейЗначений = Ложь;
		НоваяСтрока.ДоступенВыборЗначенияИзСписка = Ложь;
	КонецЦикла;

	Если МассивНезаполненныхСопоставлений.Количество() > 0 Тогда
		ИменаКолонок = "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка, ИсточникКатегории, Категория1С, ИсточникКатегорииМаркетплейса, ИдентификаторКатегорииМаркетплейса";
		ТаблицаПубликуемыхТоваров = ТаблицаДанныхАтрибутов.Скопировать(, ИменаКолонок);
		ТаблицаПубликуемыхТоваров.Свернуть(ИменаКолонок);
		ТаблицаПубликуемыхТоваров.Индексы.Добавить("УчетнаяЗаписьМаркетплейса, Категория1С, ИсточникКатегорииМаркетплейса");

		Для Каждого СтрокаДанных Из МассивНезаполненныхСопоставлений Цикл
			Отбор = Новый Структура("УчетнаяЗаписьМаркетплейса, Категория1С, ИсточникКатегорииМаркетплейса");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаДанных);
			СтрокиПубликации = ТаблицаПубликуемыхТоваров.НайтиСтроки(Отбор);

			Для Каждого СтрокаПубликации Из СтрокиПубликации Цикл
				Если Не ПустаяСтрока(СтрокаПубликации.ИдентификаторКатегорииМаркетплейса)
					И СтрокаПубликации.ИдентификаторКатегорииМаркетплейса <> СтрокаДанных.ИдентификаторКатегорииМаркетплейса Тогда
					Продолжить;
				КонецЕсли;

				НоваяСтрока = ТаблицаДанныхАтрибутов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПубликации);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаДанныхАтрибутов;

КонецФункции

Функция ТаблицаЗначенийРеквизитов(ДанныеОбъекта)

	ТаблицаЗначенийРеквизитовВХранилище = Неопределено;

	Если ДанныеОбъекта <> Неопределено Тогда
		ТаблицаЗначенийРеквизитовВХранилище = ДанныеОбъекта.Получить();
	КонецЕсли;

	Если ТипЗнч(ТаблицаЗначенийРеквизитовВХранилище) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаЗначенийРеквизитовВХранилище = НоваяТаблицаЗначенийРеквизитов();
	КонецЕсли;

	Возврат ТаблицаЗначенийРеквизитовВХранилище;

КонецФункции

Функция СоставныеЧастиТекстаЗапросаПолученияНастроекСоответствияАтрибутов()

	ЧастиТекстаЗапроса = Новый Структура;

	ЧастиТекстаЗапроса.Вставить("Пролог",
		"ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВЫРАЗИТЬ(ТаблицаДанных.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории
		|ПОМЕСТИТЬ ВыборкаДанныхПубликации
		|ИЗ
		|	&ДанныеПубликации КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ВЫБОР
		|		КОГДА ТаблицаДанных.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|			ТОГДА ТаблицаДанных.Номенклатура
		|		КОГДА ТаблицаДанных.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|			ТОГДА ТаблицаДанных.Номенклатура.КатегорияНоменклатуры
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Категория1С
		|ПОМЕСТИТЬ ТаблицаДанных
		|ИЗ
		|	ВыборкаДанныхПубликации КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВыборкаДанныхПубликации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейсаТаблицы КАК ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ТаблицаДанных.Категория1С КАК Категория1С,
		|	ТаблицаДанных.Категория1С КАК РодительКатегории1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегории1С, """") КАК ИдентификаторКатегории1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса, """") КАК ИдентификаторКатегорииМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторРодителяАтрибутаМаркетплейса, """") КАК ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.НаименованиеРодителяАтрибутаМаркетплейса, """") КАК НаименованиеРодителяАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса, """") КАК ИдентификаторАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.НаименованиеАтрибутаМаркетплейса, """") КАК НаименованиеАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПолныйПутьКРеквизиту1С, """") КАК ПолныйПутьКРеквизиту1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПредставлениеРеквизита1С, """") КАК ПредставлениеРеквизита1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ОбязательныйАтрибут, ЛОЖЬ) КАК ОбязательныйАтрибут,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЯвляетсяКоллекциейЗначений, ЛОЖЬ) КАК ЯвляетсяКоллекциейЗначений,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ДоступенВыборЗначенияИзСписка, ЛОЖЬ) КАК ДоступенВыборЗначенияИзСписка,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ТипЗначенияАтрибута, """") КАК ТипЗначенияАтрибута,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК ЗначениеПоУмолчаниюИзЗапроса,	// 00-00537447
		|	СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчаниюСтрокаНеограниченная КАК ЗначениеПоУмолчаниюСтрокаНеограниченная,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК ИдентификаторЗначенияПоУмолчанию,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПорядокСортировки, 0) КАК ПорядокСортировки,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ОписаниеНазначенияАтрибута, """") КАК ОписаниеНазначенияАтрибута
		|ПОМЕСТИТЬ ТаблицаАнализа1
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
		|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса
		|			И ТаблицаДанных.Категория1С = СоответствияАтрибутовМаркетплейсов.Категория1С
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаДанных");

	ЧастиТекстаЗапроса.Вставить("Разделитель",	"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");

	ЧастиТекстаЗапроса.Вставить("Рефрен",
		"ВЫБРАТЬ
		|	ТаблицаАнализа.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаАнализа.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы КАК ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ТаблицаАнализа.Категория1С КАК Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С.Родитель КАК РодительКатегории1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегории1С, """") КАК ИдентификаторКатегории1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса, """") КАК ИдентификаторКатегорииМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторРодителяАтрибутаМаркетплейса, """") КАК ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.НаименованиеРодителяАтрибутаМаркетплейса, """") КАК НаименованиеРодителяАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса, """") КАК ИдентификаторАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.НаименованиеАтрибутаМаркетплейса, """") КАК НаименованиеАтрибутаМаркетплейса,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПолныйПутьКРеквизиту1С, """") КАК ПолныйПутьКРеквизиту1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПредставлениеРеквизита1С, """") КАК ПредставлениеРеквизита1С,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ОбязательныйАтрибут, ЛОЖЬ) КАК ОбязательныйАтрибут,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЯвляетсяКоллекциейЗначений, ЛОЖЬ) КАК ЯвляетсяКоллекциейЗначений,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ДоступенВыборЗначенияИзСписка, ЛОЖЬ) КАК ДоступенВыборЗначенияИзСписка,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ТипЗначенияАтрибута, ЛОЖЬ) КАК ТипЗначенияАтрибута,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК ЗначениеПоУмолчаниюИзЗапроса,    // 00-00537447
		|	СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчаниюСтрокаНеограниченная КАК ЗначениеПоУмолчаниюСтрокаНеограниченная,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК ИдентификаторЗначенияПоУмолчанию,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ПорядокСортировки, 0) КАК ПорядокСортировки,
		|	ЕСТЬNULL(СоответствияАтрибутовМаркетплейсов.ОписаниеНазначенияАтрибута, """") КАК ОписаниеНазначенияАтрибута
		|ПОМЕСТИТЬ ТаблицаАнализа2
		|ИЗ
		|	ТаблицаАнализа1 КАК ТаблицаАнализа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
		|		ПО (ТаблицаАнализа.УчетнаяЗаписьМаркетплейса = СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса)
		|			И ТаблицаАнализа.РодительКатегории1С.Родитель = СоответствияАтрибутовМаркетплейсов.Категория1С
		|ГДЕ
		|	ТаблицаАнализа.РодительКатегории1С.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса = """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаАнализа.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаАнализа.ИсточникКатегории,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы,
		|	ТаблицаАнализа.Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С,
		|	ТаблицаАнализа.ИдентификаторКатегории1С,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ПолныйПутьКРеквизиту1С,
		|	ТаблицаАнализа.ПредставлениеРеквизита1С,
		|	ТаблицаАнализа.ОбязательныйАтрибут,
		|	ТаблицаАнализа.ЯвляетсяКоллекциейЗначений,
		|	ТаблицаАнализа.ДоступенВыборЗначенияИзСписка,
		|	ТаблицаАнализа.ТипЗначенияАтрибута,
		|	ТаблицаАнализа.ЗначениеПоУмолчаниюИзЗапроса,    // 00-00537447
		|	ТаблицаАнализа.ЗначениеПоУмолчаниюСтрокаНеограниченная,
		|	ТаблицаАнализа.ИдентификаторЗначенияПоУмолчанию,
		|	ТаблицаАнализа.ПорядокСортировки,
		|	ТаблицаАнализа.ОписаниеНазначенияАтрибута
		|ИЗ
		|	ТаблицаАнализа1 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаАнализа1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАнализа.Категория1С КАК Категория1С
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.РодительКатегории1С.Родитель <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса = """"");

	ЧастиТекстаЗапроса.Вставить("Эпилог",
		"ВЫБРАТЬ
		|	ТаблицаАнализа.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаАнализа.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаАнализа.Категория1С КАК Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С КАК ИсточникКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторКатегории1С КАК ИдентификаторИсточникаКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ПолныйПутьКРеквизиту1С КАК ПолныйПутьКРеквизиту1С,
		|	ТаблицаАнализа.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
		|	ТаблицаАнализа.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
		|	ТаблицаАнализа.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
		|	ТаблицаАнализа.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
		|	ТаблицаАнализа.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
		|	ТаблицаАнализа.ЗначениеПоУмолчаниюИзЗапроса,    // 00-00537447
		|	ТаблицаАнализа.ЗначениеПоУмолчаниюСтрокаНеограниченная КАК ЗначениеПоУмолчаниюСтрокаНеограниченная,
		|	ТаблицаАнализа.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
		|	ТаблицаАнализа.ПорядокСортировки КАК ПорядокСортировки,
		|	ТаблицаАнализа.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы <> """"
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса <> """"
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса = ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаАнализа.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаАнализа.ИсточникКатегории,
		|	ТаблицаАнализа.Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С,
		|	ТаблицаАнализа.ИдентификаторКатегории1С,
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеРодителяАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеАтрибутаМаркетплейса,
		|	ТаблицаАнализа.ПолныйПутьКРеквизиту1С,
		|	ТаблицаАнализа.ПредставлениеРеквизита1С,
		|	ТаблицаАнализа.ОбязательныйАтрибут,
		|	ТаблицаАнализа.ЯвляетсяКоллекциейЗначений,
		|	ТаблицаАнализа.ДоступенВыборЗначенияИзСписка,
		|	ТаблицаАнализа.ТипЗначенияАтрибута,
		|	ТаблицаАнализа.ЗначениеПоУмолчаниюИзЗапроса,    // 00-00537447
		|	ТаблицаАнализа.ЗначениеПоУмолчаниюСтрокаНеограниченная,
		|	ТаблицаАнализа.ИдентификаторЗначенияПоУмолчанию,
		|	ТаблицаАнализа.ПорядокСортировки,
		|	ТаблицаАнализа.ОписаниеНазначенияАтрибута
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияКатегорий
		|		ПО ТаблицаАнализа.УчетнаяЗаписьМаркетплейса = СоответствияКатегорий.УчетнаяЗаписьМаркетплейса
		|			И (СоответствияКатегорий.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров))
		|			И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса = СоответствияКатегорий.ИдентификаторОбъектаМаркетплейса
		|			И ТаблицаАнализа.РодительКатегории1С = СоответствияКатегорий.Объект1С
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторКатегорииМаркетплейсаТаблицы = """"
		|	И ТаблицаАнализа.ИдентификаторКатегорииМаркетплейса <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаАнализа2");

	Возврат ЧастиТекстаЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиДанныхТаблицыИсточника(ПолучитьАтрибуты, ОбновитьАтрибуты, ПолучитьОбъектыПубликации)

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	&ДополнительныеПоляВыборки
		|ПОМЕСТИТЬ ДанныеПубликации
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных";

	Если ОбновитьАтрибуты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	ТаблицаДанных.Категория1С КАК Категория1С,
				|	ТаблицаДанных.ИсточникКатегорииМаркетплейса КАК ИсточникКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторИсточникаКатегорииМаркетплейса КАК ИдентификаторИсточникаКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
				|	ТаблицаДанных.ПолныйПутьКРеквизиту1С КАК ПолныйПутьКРеквизиту1С,
				|	ТаблицаДанных.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
				|	ТаблицаДанных.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
				|	ТаблицаДанных.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
				|	ТаблицаДанных.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
				|	ТаблицаДанных.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
				|	ТаблицаДанных.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
				|	ТаблицаДанных.ЗначениеПоУмолчаниюСтрокаНеограниченная КАК ЗначениеПоУмолчаниюСтрокаНеограниченная,
				|	ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
				|	ТаблицаДанных.ЗначениеРеквизита1С КАК ЗначениеРеквизита1С,
				|	ТаблицаДанных.ЗначениеРеквизитаОбъект1С КАК ЗначениеРеквизитаОбъект1С,	// 00-00537447
				|	ВЫБОР
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(СТРОКА)
				|			ТОГДА ТаблицаДанных.ЗначениеРеквизитаОбъект1С = """"
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ЧИСЛО)
				|			ТОГДА ТаблицаДанных.ЗначениеРеквизитаОбъект1С = 0
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ДАТА)
				|			ТОГДА ТаблицаДанных.ЗначениеРеквизитаОбъект1С = ДАТАВРЕМЯ(1, 1, 1)
				|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(БУЛЕВО)
				|			ТОГДА ЛОЖЬ
				|		КОГДА ТаблицаДанных.ЗначениеРеквизитаОбъект1С = НЕОПРЕДЕЛЕНО
				|			ТОГДА ИСТИНА
				|		КОГДА ТаблицаДанных.ЗначениеРеквизитаОбъект1С ЕСТЬ NULL
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК НеЗаполненРеквизит1С,	// 00-00537447
				|	ТаблицаДанных.ПорядокСортировки КАК ПорядокСортировки,
				|	ТаблицаДанных.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута");
	ИначеЕсли ПолучитьАтрибуты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Категория1С,
				|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК ИсточникКатегорииМаркетплейса,
				|	"""" КАК ИдентификаторКатегорииМаркетплейса");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "ИСТИНА");
	КонецЕсли;

	Если ПолучитьАтрибуты И ПолучитьОбъектыПубликации Тогда
		ТекстЗапроса = ТекстЗапроса + "
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Характеристика,
				|	Упаковка";
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаПодготовкиВременнойТаблицыДляПолученияОбъектовПубликации(ПолучитьАтрибуты)

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаРазличныхДанныхПубликации
		|ИЗ
		|	ДанныеПубликации КАК ТаблицаДанных
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка";
	
	Если ПолучитьАтрибуты Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеПубликации", "ТаблицаДанныхПубликации");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиДанныхПоТоварамПубликации(ПолучитьАтрибуты, ОбновитьАтрибуты)

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА &ОбновитьКатегориюМаркетплейса
		|			ТОГДА ТаблицаДанных.ИдентификаторКатегорииМаркетплейса
		|		ИНАЧЕ ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса, ТаблицаДанных.ИдентификаторКатегорииМаркетплейса)
		|	КОНЕЦ КАК ИдентификаторКатегорииМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеКатегорииМаркетплейса, """") КАК НаименованиеКатегорииМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации, """") КАК ИдентификаторПубликации,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта, НЕОПРЕДЕЛЕНО) КАК ДанныеОбъекта,
		|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеОбъектаМаркетплейса,
		|	&ДополнительныеПоляВыборки
		|ПОМЕСТИТЬ ТаблицаДанныхПубликации
		|ИЗ
		|	ДанныеПубликации КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ТаблицаДанных.Номенклатура = СправНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса
		|			И ТаблицаДанных.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура
		|			И ТаблицаДанных.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика
		|			И ТаблицаДанных.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (&УсловиеСоединения)";

	Если ОбновитьАтрибуты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	СправНоменклатура.НаименованиеПолное КАК ОписаниеОбъектаМаркетплейса,
				|	ВЫБОР
				|		КОГДА &ОбновитьКатегориюМаркетплейса
				|			ТОГДА ТаблицаДанных.Категория1С
				|		ИНАЧЕ ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.Категория, ТаблицаДанных.Категория1С)
				|	КОНЕЦ КАК Категория1С,
				|	ВЫБОР
				|		КОГДА &ОбновитьКатегориюМаркетплейса
				|			ТОГДА ТаблицаДанных.ИсточникКатегорииМаркетплейса
				|		ИНАЧЕ ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса, ТаблицаДанных.ИсточникКатегорииМаркетплейса)
				|	КОНЕЦ КАК ИсточникКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторИсточникаКатегорииМаркетплейса КАК ИдентификаторИсточникаКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
				|	ТаблицаДанных.ПолныйПутьКРеквизиту1С КАК ПолныйПутьКРеквизиту1С,
				|	ТаблицаДанных.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
				|	ТаблицаДанных.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
				|	ТаблицаДанных.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
				|	ТаблицаДанных.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
				|	ТаблицаДанных.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
				|	ТаблицаДанных.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
				|	ТаблицаДанных.ЗначениеПоУмолчаниюСтрокаНеограниченная КАК ЗначениеПоУмолчаниюСтрокаНеограниченная,
				|	ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
				|	ТаблицаДанных.ЗначениеРеквизита1С КАК ЗначениеРеквизита1С,
				|	ТаблицаДанных.ЗначениеРеквизитаОбъект1С КАК ЗначениеРеквизитаОбъект1С,	// 00-00537447
				|	ТаблицаДанных.НеЗаполненРеквизит1С КАК НеЗаполненРеквизит1С,	// 00-00537447
				|	ТаблицаДанных.ПорядокСортировки КАК ПорядокСортировки,
				|	ТаблицаДанных.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута,
				|	ЕСТЬNULL(ТаблицаШтрихкодов.Штрихкод, """") КАК Штрихкод");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&УсловиеСоединения)", "ИСТИНА
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
		|		ПО ТаблицаДанных.Номенклатура = ТаблицаШтрихкодов.Номенклатура
		|			И ТаблицаДанных.Характеристика = ТаблицаШтрихкодов.Характеристика
		|			И ТаблицаДанных.Упаковка = ТаблицаШтрихкодов.Упаковка");
	ИначеЕсли ПолучитьАтрибуты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ОписаниеОбъектаМаркетплейса, """") = """"
				|			ТОГДА СправНоменклатура.НаименованиеПолное
				|		ИНАЧЕ СтатусыПубликацииОбъектовМаркетплейсаOzon.ОписаниеОбъектаМаркетплейса
				|	КОНЕЦ КАК ОписаниеОбъектаМаркетплейса,
				|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.Категория, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Категория1С,
				|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ИсточникКатегорииМаркетплейса,
				|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.Штрихкод, """") КАК Штрихкод");

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&УсловиеСоединения)", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&УсловиеСоединения)", "ИСТИНА");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиИтоговыхДанныхПоАтрибутам(ПолучитьАтрибуты, ОбновитьАтрибуты)

	Если ПолучитьАтрибуты Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
			|	ЕСТЬNULL(СправВалюты.Наименование, """") КАК КодВалюты,
			|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
			|	ТаблицаДанных.Номенклатура КАК Номенклатура,
			|	ТаблицаДанных.Характеристика КАК Характеристика,
			|	ТаблицаДанных.Упаковка КАК Упаковка,
			|	ТаблицаДанных.Категория1С КАК Категория1С,
			|	ТаблицаДанных.ИсточникКатегорииМаркетплейса КАК ИсточникКатегорииМаркетплейса,
			|	ЕСТЬNULL(СоответствияКатегорий.НаименованиеОбъектаМаркетплейса, ТаблицаДанных.НаименованиеКатегорииМаркетплейса) КАК НаименованиеКатегорииМаркетплейса,
			|	(СоответствияКатегорий.НаименованиеОбъектаМаркетплейса ЕСТЬ NULL) КАК НеактивнаяКатегорияМаркетплейса,
			|	ТаблицаДанных.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
			|	ТаблицаДанных.ИдентификаторПубликации КАК ИдентификаторПубликации,
			|	ТаблицаДанных.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
			|	ТаблицаДанных.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса,
			|	ТаблицаДанных.ОписаниеОбъектаМаркетплейса КАК ОписаниеОбъектаМаркетплейса,
			|	ТаблицаДанных.Штрихкод КАК Штрихкод,
			|	ТаблицаДанных.ДанныеОбъекта КАК ДанныеОбъекта,
			|	0 КАК СчетчикРеквизитов,
			|	&ДополнительныеПоляВыборки
			|ИЗ
			|	ТаблицаДанныхПубликации КАК ТаблицаДанных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК СправУчетныеЗаписиМаркетплейсов
			|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СправУчетныеЗаписиМаркетплейсов.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК СправВалюты
			|		ПО СправУчетныеЗаписиМаркетплейсов.ВалютаУчета = СправВалюты.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияКатегорий
			|		ПО ТаблицаДанных.ИсточникКатегорииМаркетплейса = СоответствияКатегорий.Объект1С
			|			И ТаблицаДанных.ИдентификаторКатегорииМаркетплейса = СоответствияКатегорий.ИдентификаторОбъектаМаркетплейса
			|			И ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СоответствияКатегорий.УчетнаяЗаписьМаркетплейса
			|			И СоответствияКатегорий.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров)
			|			И (&СоединениеРезультирующейТаблицы)
			|
			|ИТОГИ
			|	МИНИМУМ(Упаковка),
			|	МИНИМУМ(ИдентификаторПубликации),
			|	МИНИМУМ(ИдентификаторОбъектаМаркетплейса),
			|	МИНИМУМ(НаименованиеОбъектаМаркетплейса),
			|	МИНИМУМ(ИсточникКатегории),
			|	МИНИМУМ(Категория1С),
			|	МИНИМУМ(КодВалюты),
			|	МИНИМУМ(ИсточникКатегорииМаркетплейса),
			|	МИНИМУМ(ИдентификаторКатегорииМаркетплейса),
			|	СУММА(СчетчикРеквизитов),
			|	МИНИМУМ(Штрихкод)
			|ПО
			|	УчетнаяЗаписьМаркетплейса,
			|	Номенклатура,
			|	Характеристика";

		Если ОбновитьАтрибуты Тогда
			// Дополнение полей раздела ИТОГИ ПО.
			ТекстЗапроса = ТекстЗапроса + ",
					|	Упаковка";

			// Уничтожение временной таблицы.
			ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "УНИЧТОЖИТЬ ЕдиницыИзмеренияВесогабаритов";

			// Добавление вычисления счетчика реквизитов товара.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК СчетчикРеквизитов", "ВЫБОР
				|		КОГДА ТаблицаДанных.ПолныйПутьКРеквизиту1С = """"
				|			ТОГДА 0
				|		ИНАЧЕ ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
				|	КОНЕЦ КАК СчетчикРеквизитов");

			// Добавление полей выборки.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "
				|	ТаблицаДанных.ИдентификаторИсточникаКатегорииМаркетплейса КАК ИдентификаторИсточникаКатегорииМаркетплейса,
				|	ТаблицаДанных.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
				|	ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
				|	ТаблицаДанных.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
				|	ТаблицаДанных.ПолныйПутьКРеквизиту1С КАК ПолныйПутьКРеквизиту1С,
				|	ТаблицаДанных.ПредставлениеРеквизита1С КАК ПредставлениеРеквизита1С,
				|	ТаблицаДанных.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
				|	ТаблицаДанных.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
				|	ТаблицаДанных.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
				|	ТаблицаДанных.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
				|	ТаблицаДанных.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
				|	ТаблицаДанных.ЗначениеПоУмолчаниюСтрокаНеограниченная КАК ЗначениеПоУмолчаниюСтрокаНеограниченная,
				|	ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
				|	ТаблицаДанных.ЗначениеРеквизита1С КАК ЗначениеРеквизита1С,
				|	ТаблицаДанных.ПорядокСортировки КАК ПорядокСортировки,
				|	ТаблицаДанных.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута,
				|	ВЫБОР
				|		КОГДА ТаблицаДанных.ИдентификаторРодителяАтрибутаМаркетплейса = """"
				|			ТОГДА 3
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК Уровень,
				|	ВЫБОР
				|		КОГДА ТаблицаДанных.ДоступенВыборЗначенияИзСписка
				|			ТОГДА ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, NULL)		// 00-00537447
				|		КОГДА ТаблицаДанных.ТипЗначенияАтрибута В (&ТипыЧисло) И ТИПЗНАЧЕНИЯ(ТаблицаДанных.ЗначениеРеквизита1С) = ТИП(ЧИСЛО)
				|			ТОГДА ВЫРАЗИТЬ(ТаблицаДанных.ЗначениеРеквизита1С КАК ЧИСЛО)
				|		ИНАЧЕ 
				|			Неопределено	// 00-00537447
				|	КОНЕЦ КАК ЗначениеАтрибутаМаркетплейса,
				|	ВЫБОР
				|		КОГДА ТаблицаДанных.ДоступенВыборЗначенияИзСписка
				|			ТОГДА ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию)
				|		КОГДА ТаблицаДанных.НеЗаполненРеквизит1С	// 00-00537447
				|			ТОГДА ТаблицаДанных.ИдентификаторЗначенияПоУмолчанию
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ИдентификаторЗначенияАтрибутаМаркетплейса,
				|	ТаблицаДанных.НеЗаполненРеквизит1С КАК НеЗаполненРеквизит1С,	// 00-00537447	
				|	НЕ ТаблицаДанных.НеЗаполненРеквизит1С	// 00-00537447	
				|		И ТаблицаДанных.ДоступенВыборЗначенияИзСписка
				|		И СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса ЕСТЬ NULL КАК НеЗаполненоСоответствиеАтрибута,
				|	ТаблицаДанных.ПолныйПутьКРеквизиту1С = """" КАК НеЗаполненПутьКРеквизиту1С,
				|	ЛОЖЬ КАК ЗначениеАтрибутаЗаданоПользователем");

			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&СоединениеРезультирующейТаблицы)", "ИСТИНА
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
				|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса
				|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.ЗначениеАтрибутаКатегорииТоваров))
				|			И (ТаблицаДанных.ИдентификаторИсточникаКатегорииМаркетплейса + ""/"" + ТаблицаДанных.ИдентификаторКатегорииМаркетплейса + ""/"" + ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса = СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса)
				|			И ТаблицаДанных.ЗначениеРеквизитаОбъект1С = СоответствияОбъектовМаркетплейсов.Объект1С	// 00-00537447
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ ЕдиницыИзмеренияВесогабаритов КАК ЕдиницыИзмеренияВесогабаритов
				|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = ЕдиницыИзмеренияВесогабаритов.УчетнаяЗаписьМаркетплейса
				|			И ТаблицаДанных.Номенклатура = ЕдиницыИзмеренияВесогабаритов.Номенклатура
				|			И ТаблицаДанных.Характеристика = ЕдиницыИзмеренияВесогабаритов.Характеристика
				|			И ТаблицаДанных.Упаковка = ЕдиницыИзмеренияВесогабаритов.Упаковка
				|			И ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса = ЕдиницыИзмеренияВесогабаритов.ИдентификаторАтрибутаМаркетплейса
				|
				|УПОРЯДОЧИТЬ ПО
				|	Уровень,
				|	ОбязательныйАтрибут УБЫВ,
				|	НаименованиеРодителяАтрибутаМаркетплейса,
				|	ПорядокСортировки,
				|	НаименованиеАтрибутаМаркетплейса");
		Иначе
			// Замена неиспользованных параметров.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеПоляВыборки", "ИСТИНА");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&СоединениеРезультирующейТаблицы)", "ИСТИНА");
		КонецЕсли;
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
			|	ТаблицаДанных.ИсточникКатегории КАК ИсточникКатегории,
			|	ТаблицаДанных.Номенклатура КАК Номенклатура,
			|	ТаблицаДанных.Характеристика КАК Характеристика,
			|	ТаблицаДанных.Упаковка КАК Упаковка
			|ИЗ
			|	ДанныеПубликации КАК ТаблицаДанных
			|
			|ИТОГИ
			|	МИНИМУМ(Упаковка),
			|	МИНИМУМ(ИсточникКатегории)
			|ПО 
			|	УчетнаяЗаписьМаркетплейса,
			|	Номенклатура,
			|	Характеристика";
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиЦен(ОбновитьАтрибуты) Экспорт

	РазделительПакетаЗапросов = ОбщегоНазначения.РазделительПакетаЗапросов();

	ИмяТаблицыТоваров = "ТаблицаДанныхПубликации";
	ТекстЗапроса = "";

	Если ОбновитьАтрибуты Тогда
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
			|	ТаблицаДанных.Номенклатура КАК Номенклатура,
			|	ТаблицаДанных.Характеристика КАК Характеристика,
			|	ТаблицаДанных.Упаковка КАК Упаковка
			|ПОМЕСТИТЬ ТаблицаРазличныхДанныхПубликацииДляЦен
			|ИЗ
			|	ТаблицаДанныхПубликации КАК ТаблицаДанных
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	УчетнаяЗаписьМаркетплейса,
			|	Номенклатура,
			|	Упаковка";
		ТекстЗапроса = ТекстЗапроса + РазделительПакетаЗапросов;

		ИмяТаблицыТоваров = "ТаблицаРазличныхДанныхПубликацииДляЦен";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиМаркетплейсовВидыЦен.Ссылка КАК УчетнаяЗаписьМаркетплейса,
		|	УчетныеЗаписиМаркетплейсовВидыЦен.Ссылка.ВалютаУчета КАК ВалютаУчета,
		|	УчетныеЗаписиМаркетплейсовВидыЦен.ИмяНастройки КАК ИмяНастройки,
		|	УчетныеЗаписиМаркетплейсовВидыЦен.ВидЦены КАК ВидЦены
		|ПОМЕСТИТЬ ВидыЦен
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаРазличныхДанныхПубликацииДляЦен
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов.ВидыЦен КАК УчетныеЗаписиМаркетплейсовВидыЦен
		|		ПО ТаблицаРазличныхДанныхПубликацииДляЦен.УчетнаяЗаписьМаркетплейса = УчетныеЗаписиМаркетплейсовВидыЦен.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ВидыЦен.ВалютаУчета КАК ВалютаУчета,
		|	ВидыЦен.ВидЦены КАК ВидЦены,
		|	ВидыЦен.ИмяНастройки КАК ИмяНастройки,
		|	ИСТИНА КАК Поле1
		|ПОМЕСТИТЬ ПодготовленнаяТаблицаВидовЦен
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииНоменклатуры КАК ВидыНоменклатуры
		|		ПО ТаблицаДанных.Номенклатура.КатегорияНоменклатуры = ВидыНоменклатуры.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыЦен КАК ВидыЦен
		|		ПО ТаблицаДанных.УчетнаяЗаписьМаркетплейса = ВидыЦен.УчетнаяЗаписьМаркетплейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВидыЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.ЕдиницаИзмерения КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦен КАК ВидЦен,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент, 1) КАК Цена
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ),
		|			(ВидЦен, Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					Товары.ВидЦены,
		|					Товары.Номенклатура,
		|					Товары.Характеристика
		|				ИЗ
		|					ПодготовленнаяТаблицаВидовЦен КАК Товары)) КАК ЦеныНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ЦеныНоменклатуры.Номенклатура = СправНоменклатура.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодготовленнаяТаблицаВидовЦен КАК ТаблицаДанных
		|		ПО (&УсловиеСоединенияЦеныНоменклатурыСрезПоследних)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.ВидЦены КАК ВидЦены,
		|	ТаблицаДанных.ИмяНастройки КАК ИмяНастройки,
		|	ЦеныНоменклатуры.Цена КАК Цена
		|ИЗ
		|	ПодготовленнаяТаблицаВидовЦен КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО (&УсловиеСоединенияЦеныНоменклатурыСрезПоследних)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ТаблицаДанных.Номенклатура = СправНоменклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПодготовленнаяТаблицаВидовЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныНоменклатуры";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДанных", ИмяТаблицыТоваров);


	ТекстЗапросаРегистрСведенийЦеныНоменклатуры = 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИсточникЦенНоменклатуры",	ТекстЗапросаРегистрСведенийЦеныНоменклатуры);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
	"&УсловиеСоединенияЦеныНоменклатурыСрезПоследних",
	ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
	"ТаблицаДанных", "ЦеныНоменклатуры", "&ИсточникТоваров.ВидЦены"));


	Если ОбновитьАтрибуты Тогда
		ТекстЗапроса = ТекстЗапроса + РазделительПакетаЗапросов +
			"УНИЧТОЖИТЬ ТаблицаРазличныхДанныхПубликацииДляЦен";
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВыборкиШтрихкодов()

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаРазличныхДанныхПубликацииДляЦен
		|ИЗ
		|	ДанныеПубликации КАК ТаблицаДанных
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК Порядок,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ТаблицаТоваров.Упаковка КАК Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ШтрихкодыНоменклатуры
		|ИЗ
		|	ТаблицаРазличныхДанныхПубликацииДляЦен КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ТаблицаТоваров.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И ТаблицаТоваров.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И ТаблицаТоваров.Упаковка = ШтрихкодыНоменклатуры.ЕдиницаИзмерения
		|ГДЕ
		|	ТаблицаТоваров.Упаковка <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2,
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.Характеристика,
		|	ТаблицаТоваров.Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод
		|ИЗ
		|	ТаблицаРазличныхДанныхПубликацииДляЦен КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ТаблицаТоваров.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И ТаблицаТоваров.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И (ШтрихкодыНоменклатуры.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаРазличныхДанныхПубликацииДляЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
		|	МИНИМУМ(ШтрихкодыНоменклатуры.Порядок) КАК Порядок
		|ПОМЕСТИТЬ МинимальныйПорядокШтрихкодов
		|ИЗ
		|	ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	ШтрихкодыНоменклатуры.Упаковка,
		|	ШтрихкодыНоменклатуры.Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
		|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод
		|ПОМЕСТИТЬ ТаблицаШтрихкодов
		|ИЗ
		|	МинимальныйПорядокШтрихкодов КАК МинимальныйПорядокШтрихкодов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО МинимальныйПорядокШтрихкодов.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И МинимальныйПорядокШтрихкодов.Характеристика = ШтрихкодыНоменклатуры.Характеристика
		|			И МинимальныйПорядокШтрихкодов.Упаковка = ШтрихкодыНоменклатуры.Упаковка
		|			И МинимальныйПорядокШтрихкодов.Порядок = ШтрихкодыНоменклатуры.Порядок
		|
		|СГРУППИРОВАТЬ ПО
		|	ШтрихкодыНоменклатуры.Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ШтрихкодыНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ МинимальныйПорядокШтрихкодов";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыборкиИзображений(ИмяТаблицыТоваров)
    
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК Номенклатура,
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
	|	НоменклатураПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	|	НоменклатураПрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	|	НоменклатураПрисоединенныеФайлы.Расширение КАК Расширение
	|ПОМЕСТИТЬ ВТПрисоединенныеФайлы
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИсточникДанных КАК ТаблицаИсточникДанных
	|		ПО НоменклатураПрисоединенныеФайлы.ВладелецФайла = ТаблицаИсточникДанных.Номенклатура
	|ГДЕ
	|	НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
	|	И НоменклатураПрисоединенныеФайлы.Расширение В(&РасширенияИзображенийТоваров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.Ссылка,
	|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.ВладелецФайла.Владелец,
	|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.ВладелецФайла,
	|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.ДатаСоздания,
	|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.ДатаМодификацииУниверсальная,
	|	ХарактеристикиНоменклатурыПрисоединенныеФайлы.Расширение
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатурыПрисоединенныеФайлы КАК ХарактеристикиНоменклатурыПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИсточникДанных КАК ТаблицаИсточникДанных
	|		ПО ХарактеристикиНоменклатурыПрисоединенныеФайлы.ВладелецФайла = ТаблицаИсточникДанных.Характеристика
	|ГДЕ
	|	НЕ ХарактеристикиНоменклатурыПрисоединенныеФайлы.ПометкаУдаления
	|	И ХарактеристикиНоменклатурыПрисоединенныеФайлы.Расширение В(&РасширенияИзображенийТоваров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ВТПрисоединенныеФайлы.Номенклатура КАК Номенклатура,
	|	ВТПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
	|	ЕСТЬNULL(СортировкаФайловДляСайта.Сортировка, 9999) КАК Сортировка,
	|	ЕСТЬNULL(СортировкаФайловДляСайта.ВыгружатьНаСайт, ИСТИНА) КАК ВыгружатьНаСайт,
	|	ВТПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	|	ВТПрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	|	ВТПрисоединенныеФайлы.Расширение КАК Расширение
	|ПОМЕСТИТЬ ВТПрисоединенныеФайлыСортировка
	|ИЗ
	|	ВТПрисоединенныеФайлы КАК ВТПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СортировкаФайловДляСайта КАК СортировкаФайловДляСайта
	|		ПО (СортировкаФайловДляСайта.Файл = ВТПрисоединенныеФайлы.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновноеИзображение.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТОсновноеИзображение
	|ИЗ
	|	ВТПрисоединенныеФайлыСортировка КАК ОсновноеИзображение
	|ГДЕ
	|	ОсновноеИзображение.ВыгружатьНаСайт = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеИзображение.Сортировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ТаблицаДанных.Характеристика КАК Характеристика,
	|	ВТПрисоединенныеФайлыСортировка.ВладелецФайла КАК ВладелецФайла,
	|	ТаблицаДанных.Упаковка КАК Упаковка,
	|	ВТПрисоединенныеФайлыСортировка.Ссылка КАК ОбъектПубликации,
	|	ПРЕДСТАВЛЕНИЕ(ВТПрисоединенныеФайлыСортировка.Ссылка) КАК НаименованиеОбъектаМаркетплейса,
	|	ВТПрисоединенныеФайлыСортировка.Сортировка КАК Сортировка,
	|	ВЫБОР
	|		КОГДА ВТОсновноеИзображение.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоОсновноеИзображение,
	|	ВТПрисоединенныеФайлыСортировка.ВыгружатьНаСайт КАК ВыгружатьНаСайт
	|ПОМЕСТИТЬ Изображения
	|ИЗ
	|	ТаблицаИсточникДанных КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрисоединенныеФайлыСортировка КАК ВТПрисоединенныеФайлыСортировка
	|		ПО ТаблицаДанных.Номенклатура = ВТПрисоединенныеФайлыСортировка.Номенклатура
	|			И (ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ВТПрисоединенныеФайлыСортировка.ВладелецФайла) = ТИП(Справочник.Номенклатура)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаДанных.Характеристика = ВТПрисоединенныеФайлыСортировка.ВладелецФайла
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновноеИзображение КАК ВТОсновноеИзображение
	|		ПО (ВТПрисоединенныеФайлыСортировка.Ссылка = ВТОсновноеИзображение.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Изображения.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	Изображения.Номенклатура КАК Номенклатура,
	|	Изображения.Характеристика КАК Характеристика,
	|	Изображения.ВладелецФайла КАК ВладелецФайла,
	|	Изображения.Упаковка КАК Упаковка,
	|	Изображения.ОбъектПубликации КАК ОбъектПубликации,
	|	Изображения.ЭтоОсновноеИзображение КАК ЭтоОсновноеИзображение,
	|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации, """") КАК ИдентификаторПубликации,
	|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеОбъектаМаркетплейса, Изображения.НаименованиеОбъектаМаркетплейса) КАК НаименованиеОбъектаМаркетплейса,
	|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса, """") КАК ПредставлениеОбъектаМаркетплейса,
	|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта, НЕОПРЕДЕЛЕНО) КАК ДанныеОбъекта,
	|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)) КАК ТекущийСтатус,
	|	ВЫБОР
	|		КОГДА Изображения.ВыгружатьНаСайт = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется)
	|	КОНЕЦ КАК УстанавливаемыйСтатус,
	|	ИСТИНА КАК ДействующееИзображение,
	|	Изображения.Сортировка КАК Сортировка
	|ИЗ
	|	Изображения КАК Изображения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
	|		ПО Изображения.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура
	|			И Изображения.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика
	|			И Изображения.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка
	|			И Изображения.ОбъектПубликации = СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации
	|			И Изображения.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса
	|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Изображения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПрисоединенныеФайлы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПрисоединенныеФайлыСортировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОсновноеИзображение";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаИсточникДанных", ИмяТаблицыТоваров);

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаКоэффициентовКонвертацииЕдиницВесогабаритов()

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаВесогабаритов.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаВесогабаритов.ИдентификаторЕдиницыИзмерения КАК ИдентификаторЕдиницыИзмерения,
		|	ТаблицаВесогабаритов.ИдентификаторЗначенияПоУмолчанию КАК ИдентификаторЗначенияПоУмолчанию,
		|	ТаблицаВесогабаритов.МеждународноеСокращение КАК МеждународноеСокращение,
		|	ТаблицаВесогабаритов.Числитель КАК Числитель,
		|	ТаблицаВесогабаритов.Знаменатель КАК Знаменатель
		|ПОМЕСТИТЬ ТаблицаВесогабаритовПодготовленная
		|ИЗ
		|	&ТаблицаВесогабаритов КАК ТаблицаВесогабаритов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаВесогабаритов.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	ТаблицаВесогабаритов.ИдентификаторЕдиницыИзмерения КАК ИдентификаторЕдиницыИзмерения,
		|	ТаблицаВесогабаритов.МеждународноеСокращение КАК МеждународноеСокращение,
		|	ТаблицаВесогабаритов.Числитель КАК Числитель,
		|	ТаблицаВесогабаритов.Знаменатель КАК Знаменатель
		|ПОМЕСТИТЬ ТаблицаВесогабаритов
		|ИЗ
		|	ТаблицаВесогабаритовПодготовленная КАК ТаблицаВесогабаритов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
		|		ПО ТаблицаВесогабаритов.ИдентификаторЕдиницыИзмерения = СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса
		|			И ТаблицаВесогабаритов.ИдентификаторЗначенияПоУмолчанию = СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаВесогабаритовПодготовленная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДанных.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаДанных.Номенклатура КАК Номенклатура,
		|	ТаблицаДанных.Характеристика КАК Характеристика,
		|	ТаблицаДанных.Упаковка КАК Упаковка,
		|	ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
		|	1 КАК КоэффициентПересчета
		|ПОМЕСТИТЬ ЕдиницыИзмеренияВесогабаритов
		|ИЗ
		|	ТаблицаДанныхПубликации КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВесогабаритов КАК ТаблицаВесогабаритов
		|		ПО ТаблицаДанных.ИдентификаторАтрибутаМаркетплейса = ТаблицаВесогабаритов.ИдентификаторАтрибутаМаркетплейса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК СправУпаковкиЕдиницыИзмерения
		|		ПО ((ВЫРАЗИТЬ(ТаблицаДанных.ЗначениеРеквизита1С КАК Справочник.ЕдиницыИзмерения)) = СправУпаковкиЕдиницыИзмерения.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаВесогабаритов";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПодготовитьТаблицуДанныхВесогабаритов()

	ТаблицаДанныхВесогабаритов = НоваяТаблицаДанныхВесогабаритов();
	КэшЗначений = Новый Структура;

	ПутьКРеквизитам1СПоУмолчанию = ПутьКРеквизитам1СПоУмолчанию();
	Для Каждого ПутьКРеквизиту Из ПутьКРеквизитам1СПоУмолчанию Цикл
		ИдентификаторЕдиницыИзмерения = Неопределено;
		Если ПутьКРеквизиту.Значение.Свойство("ИдентификаторЕдиницыИзмерения", ИдентификаторЕдиницыИзмерения) Тогда
			ДанныеЕдиницыИзмерения = Неопределено;
			КэшЗначений.Свойство(ИдентификаторЕдиницыИзмерения, ДанныеЕдиницыИзмерения);
			Если ДанныеЕдиницыИзмерения = Неопределено 
				И ПутьКРеквизитам1СПоУмолчанию.Свойство(ИдентификаторЕдиницыИзмерения, ДанныеЕдиницыИзмерения) Тогда
				КэшЗначений.Вставить(ИдентификаторЕдиницыИзмерения, ДанныеЕдиницыИзмерения);
			Иначе
				Продолжить;
			КонецЕсли;

			СписокВыбора = Неопределено;
			ДанныеЕдиницыИзмерения.Свойство("СписокВыбора", СписокВыбора);
			Если СписокВыбора = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Для Каждого ЗначениеВыбора Из СписокВыбора Цикл
				НоваяСтрока = ТаблицаДанныхВесогабаритов.Добавить(); 
				НоваяСтрока.ИдентификаторАтрибутаМаркетплейса = СтрЗаменить(ПутьКРеквизиту.Ключ, "Атрибут_", "");
				НоваяСтрока.ИдентификаторЕдиницыИзмерения = СтрЗаменить(ИдентификаторЕдиницыИзмерения, "Атрибут_", "");
				НоваяСтрока.ИдентификаторЗначенияПоУмолчанию = ЗначениеВыбора.ИдентификаторЗначенияАтрибутаМаркетплейса;
				НоваяСтрока.МеждународноеСокращение = ЗначениеВыбора.МеждународноеСокращение;
				НоваяСтрока.Числитель = ЗначениеВыбора.Числитель;
				НоваяСтрока.Знаменатель = ЗначениеВыбора.Знаменатель;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаДанныхВесогабаритов;

КонецФункции

Функция СоответствиеАтрибутовВесогабаритовУпаковки()

	СоответствиеАтрибутовВесогабаритовУпаковки = Новый Соответствие; 
	СоответствиеАтрибутовВесогабаритовУпаковки.Вставить("weight_unit", "ЕдиницаВеса");
	СоответствиеАтрибутовВесогабаритовУпаковки.Вставить("weight", "ВесТовараВУпаковке");
	СоответствиеАтрибутовВесогабаритовУпаковки.Вставить("dimension_unit", "ЕдиницаГабаритов");
	СоответствиеАтрибутовВесогабаритовУпаковки.Вставить("depth", "Глубина");
	СоответствиеАтрибутовВесогабаритовУпаковки.Вставить("height", "Высота");
	СоответствиеАтрибутовВесогабаритовУпаковки.Вставить("width", "Ширина");

	Возврат СоответствиеАтрибутовВесогабаритовУпаковки;

КонецФункции

Процедура ЗаполнитьДанныеПубликацииИзображения(Запись, ИсточникДанных, ИдентификаторОбъектаПубликации = Неопределено, ПолучитьДанные = Ложь)

	Если Не ЗначениеЗаполнено(ИдентификаторОбъектаПубликации) Тогда
		ИдентификаторОбъектаПубликации = ЧислоВСтроку(ХешСуммаПрисоединенногоФайла(ИсточникДанных.ОбъектПубликации));
	КонецЕсли;

	Если ИсточникДанных.ИдентификаторПубликации <> ИдентификаторОбъектаПубликации Или ПолучитьДанные Тогда
		Запись.ИдентификаторПубликации = ИдентификаторОбъектаПубликации;

		ДанныеОбъекта = Неопределено;
		КэшДанныеОбъекта = Новый Структура;

		Если ИсточникДанных.ДанныеОбъекта <> Неопределено Тогда
			ДанныеОбъекта = ИсточникДанных.ДанныеОбъекта.Получить();
			КэшДанныеОбъекта = ИсточникДанных.ДанныеОбъекта.Получить();
		КонецЕсли;

		Если ТипЗнч(ДанныеОбъекта) <> Тип("Структура") Тогда
			ДанныеОбъекта = НовыйСписокАтрибутовИзображения();
		КонецЕсли;

		СтруктураПроверки = Новый Структура("ЭтоОсновноеИзображение");
		ЗаполнитьЗначенияСвойств(СтруктураПроверки, ИсточникДанных);
		Если ЗначениеЗаполнено(СтруктураПроверки.ЭтоОсновноеИзображение) Тогда
			ДанныеОбъекта.Вставить("ЭтоОсновноеИзображение", СтруктураПроверки.ЭтоОсновноеИзображение);
		КонецЕсли;

		Если (ИсточникДанных.ИдентификаторПубликации <> ИдентификаторОбъектаПубликации
			Или ИсточникДанных.УстанавливаемыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется"))
			И Не ПустаяСтрока(ИсточникДанных.ПредставлениеОбъектаМаркетплейса) Тогда

			Если Не ДанныеОбъекта.Свойство("УдаляемыеСсылки") Тогда
				ДанныеОбъекта.Вставить("УдаляемыеСсылки", Новый Соответствие);
			КонецЕсли;

			Если Не ДанныеОбъекта.Свойство("СсылкаНаФайлВСервисеПубличныхСсылок") Тогда
				ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", "");
			КонецЕсли;

			Если Не ЗначениеЗаполнено(ДанныеОбъекта.УдаляемыеСсылки.Получить(ИсточникДанных.ПредставлениеОбъектаМаркетплейса)) Тогда
				ДанныеОбъекта.УдаляемыеСсылки.Вставить(ИсточникДанных.ПредставлениеОбъектаМаркетплейса, ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок);
			КонецЕсли;

			Запись.ПредставлениеОбъектаМаркетплейса = "";
			Запись.ИзмененыРеквизиты = Истина;
			ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок = "";
		КонецЕсли;

		Если ПолучитьДанные И (ИсточникДанных.ИдентификаторПубликации <> ИдентификаторОбъектаПубликации
			Или Не ИдентичныКоллекцииСКлючами(КэшДанныеОбъекта, ДанныеОбъекта, "УдаляемыеСсылки")) Тогда
			Запись.ЕстьИзменения = Истина;
		КонецЕсли;

		Если ПолучитьДанные Тогда
			Запись.ДанныеОбъекта = ДанныеОбъекта;
		Иначе
			Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъекта);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюПоИзображениям(ТаблицаОбъектовПубликации, ИсточникДанныхЗаполнения, ВыборкаИзображений, ОбновитьДанные = Ложь)

	Если ВыборкаИзображений <> Неопределено Тогда
		ВыборкаИзображений.Сбросить();

		ТаблицаОбъектовПубликации.Колонки.Добавить("ЕстьИзменения", Новый ОписаниеТипов("Булево"));
		ТаблицаОбъектовПубликации.Колонки.Добавить("ТекущийСтатус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбъектовМаркетплейсаOzon"));
		БезИзмененияАктивностиИзображений = Истина;

		Отбор = Новый Структура;
		Отбор.Вставить("УчетнаяЗаписьМаркетплейса", ИсточникДанныхЗаполнения.УчетнаяЗаписьМаркетплейса);
		Отбор.Вставить("Номенклатура", ИсточникДанныхЗаполнения.Номенклатура);
		Отбор.Вставить("Характеристика", ИсточникДанныхЗаполнения.Характеристика);
		Отбор.Вставить("Упаковка", ИсточникДанныхЗаполнения.Упаковка); 

		ВидОбъектаИзображение = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение");
		СтатусНеИспользуется = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется");

		Счетчик = 0;
		Пока ВыборкаИзображений.НайтиСледующий(Отбор) Цикл
			НоваяСтрокаОбъектаПубликации = ТаблицаОбъектовПубликации.Добавить();
			НоваяСтрокаОбъектаПубликации.ВидОбъектаМаркетплейса = ВидОбъектаИзображение;
			НоваяСтрокаОбъектаПубликации.ПредставлениеОбъектаМаркетплейса = ВыборкаИзображений.ПредставлениеОбъектаМаркетплейса;

			Если ОбновитьДанные Тогда
				НоваяСтрокаОбъектаПубликации.ОбъектПубликации = ВыборкаИзображений.ОбъектПубликации;
				НоваяСтрокаОбъектаПубликации.НаименованиеОбъектаМаркетплейса = ВыборкаИзображений.НаименованиеОбъектаМаркетплейса;
			Иначе
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОбъектаПубликации, ВыборкаИзображений);
			КонецЕсли;

			НоваяСтрокаОбъектаПубликации.ТекущийСтатус = ВыборкаИзображений.ТекущийСтатус;

			Если ВыборкаИзображений.ДействующееИзображение И Счетчик >= 15 Тогда
				НоваяСтрокаОбъектаПубликации.Статус = СтатусНеИспользуется;
			Иначе
				НоваяСтрокаОбъектаПубликации.Статус = ВыборкаИзображений.УстанавливаемыйСтатус;
			КонецЕсли;

			Если НоваяСтрокаОбъектаПубликации.ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется")
				Или НоваяСтрокаОбъектаПубликации.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется")
				И НоваяСтрокаОбъектаПубликации.ТекущийСтатус <> НоваяСтрокаОбъектаПубликации.Статус Тогда
				БезИзмененияАктивностиИзображений = Ложь;
			КонецЕсли;

			Если ВыборкаИзображений.ДействующееИзображение Тогда
				Счетчик = Счетчик + 1;
			КонецЕсли;

			ИдентификаторПубликации =
					?(НоваяСтрокаОбъектаПубликации.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется"),
					"", ВыборкаИзображений.ИдентификаторПубликации);

			ЗаполнитьДанныеПубликацииИзображения(НоваяСтрокаОбъектаПубликации, ВыборкаИзображений, ИдентификаторПубликации, Истина);

			НоваяСтрокаОбъектаПубликации.ЭтоОсновнойОбъект = НоваяСтрокаОбъектаПубликации.ДанныеОбъекта.ЭтоОсновноеИзображение;
		КонецЦикла;

		Если ОбновитьДанные И БезИзмененияАктивностиИзображений Тогда
			Отбор = Новый Структура("Статус, ЕстьИзменения", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации"), Ложь);
			СтрокиБезИзменений = ТаблицаОбъектовПубликации.НайтиСтроки(Отбор);
			Если СтрокиБезИзменений.Количество() > 0 Тогда
				Отбор = Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации"));
				СтрокиКПубликации = ТаблицаОбъектовПубликации.НайтиСтроки(Отбор);
				Если СтрокиКПубликации.Количество() = СтрокиБезИзменений.Количество() Тогда
					Для Каждого СтрокаБезИзменений Из СтрокиБезИзменений Цикл
						СтрокаБезИзменений.Статус = СтрокаБезИзменений.ТекущийСтатус;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ТаблицаОбъектовПубликации.Колонки.Удалить("ЕстьИзменения");
		ТаблицаОбъектовПубликации.Колонки.Удалить("ТекущийСтатус");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюПоЦенам(ДанныеТовара, ИсточникДанныхЗаполнения, Знач ВидыЦенУчетнойЗаписи, ВыборкаЦен)

	Цены = Новый Структура;

	Если ВыборкаЦен <> Неопределено Тогда
		ВыборкаЦен.Сбросить();

		Пока ВыборкаЦен.НайтиСледующий(ИсточникДанныхЗаполнения) Цикл
			ДанныеВидаЦен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВидыЦенУчетнойЗаписи, ВыборкаЦен.ИмяНастройки, Неопределено);
			ВидЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен, "ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
			ТребуетсяПроверкаЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен, "ПроверкаЗаполнения", Ложь);
			ПредставлениеВидаЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен, "ПредставлениеВидаЦены", Ложь);

			СтруктураЦены = Новый Структура;
			СтруктураЦены.Вставить("ВидЦены", ВидЦены);
			СтруктураЦены.Вставить("ПредставлениеВидаЦены", ПредставлениеВидаЦены);
			СтруктураЦены.Вставить("ПроверкаЗаполнения", ТребуетсяПроверкаЗаполнения);
			СтруктураЦены.Вставить("Цена", ВыборкаЦен.Цена);

			Цены.Вставить(ВыборкаЦен.ИмяНастройки, СтруктураЦены);

			ВидыЦенУчетнойЗаписи.Удалить(ВыборкаЦен.ИмяНастройки);
		КонецЦикла;
	КонецЕсли;

	Для Каждого ДанныеВидаЦен Из ВидыЦенУчетнойЗаписи Цикл
		ВидЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен.Значение, "ВидЦены", Справочники.ВидыЦен.ПустаяСсылка());
		ТребуетсяПроверкаЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен.Значение, "ПроверкаЗаполнения", Ложь);
		ПредставлениеВидаЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеВидаЦен.Значение, "ПредставлениеВидаЦены", Ложь);

		СтруктураЦены = Новый Структура;
		СтруктураЦены.Вставить("ВидЦены", ВидЦены);
		СтруктураЦены.Вставить("ПредставлениеВидаЦены", ПредставлениеВидаЦены);
		СтруктураЦены.Вставить("ПроверкаЗаполнения", ТребуетсяПроверкаЗаполнения);
		СтруктураЦены.Вставить("Цена", 0);

		Цены.Вставить(ДанныеВидаЦен.Ключ, СтруктураЦены);
	КонецЦикла;

	ДанныеТовара.Вставить("Цены", Цены);

КонецПроцедуры

#КонецОбласти


#Область ЗаполнениеКарточкиТовара

Функция НовоеДеревоАтрибутов()

	ОписаниеТипаСтрока			= Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока50		= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250		= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаБулево			= Новый ОписаниеТипов("Булево");
	ОписаниеТипаЧисло2			= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2));
	ОписаниеТипаСтрока1000		= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(ДлинаСтрокиМагическоеЧисло()));

	ДеревоАтрибутов = Новый ДеревоЗначений;
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторКатегории1С", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторРодителяАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("НаименованиеРодителяАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("НаименованиеАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	ДеревоАтрибутов.Колонки.Добавить("ОписаниеНазначенияАтрибута", ОписаниеТипаСтрока);
	ДеревоАтрибутов.Колонки.Добавить("ОбязательныйАтрибут", ОписаниеТипаБулево);
	ДеревоАтрибутов.Колонки.Добавить("ЯвляетсяКоллекциейЗначений", ОписаниеТипаБулево);
	ДеревоАтрибутов.Колонки.Добавить("ДоступенВыборЗначенияИзСписка", ОписаниеТипаБулево);
	ДеревоАтрибутов.Колонки.Добавить("ТипЗначенияАтрибута", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ТипЗначенияАтрибута1С", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ЗначениеПоУмолчанию"); // произвольный
	ДеревоАтрибутов.Колонки.Добавить("ЗначениеПоУмолчаниюИдентификатор", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("Реквизит1С", ОписаниеТипаСтрока250);
	ДеревоАтрибутов.Колонки.Добавить("ПредставлениеРеквизита1С", ОписаниеТипаСтрока250);
	ДеревоАтрибутов.Колонки.Добавить("ПредставлениеТипаСоответствияЗначений", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ПредставлениеТипаЗначенияПоУмолчанию", ОписаниеТипаСтрока50);
	ДеревоАтрибутов.Колонки.Добавить("ИдентификаторОбъектаМетаданных1С", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ДеревоАтрибутов.Колонки.Добавить("ТипЗначенияРеквизита1С", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ДеревоАтрибутов.Колонки.Добавить("НомерКартинкиКоллекцииТипов", ОписаниеТипаЧисло2);
	ДеревоАтрибутов.Колонки.Добавить("Уровень", ОписаниеТипаЧисло2);
	ДеревоАтрибутов.Колонки.Добавить("ПорядокСортировки", ОписаниеТипаЧисло2);

	Возврат ДеревоАтрибутов;

КонецФункции

Функция НовоеДеревоРеквизитов(Знач РеквизитыДляСравнения = Ложь)

	ОписаниеТипаСтрока50	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока500	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500));
	ОписаниеТипаБулево		= Новый ОписаниеТипов("Булево");
	ОписаниеТипаЧисло2		= Новый ОписаниеТипов("Число", ,, Новый КвалификаторыЧисла(2));

	ДеревоРеквизитов = Новый ДеревоЗначений;
	ДеревоРеквизитов.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("ИдентификаторАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("НаименованиеАтрибутаМаркетплейса", ОписаниеТипаСтрока250);
	ДеревоРеквизитов.Колонки.Добавить("ПредставлениеРеквизита1С", ОписаниеТипаСтрока500);
	ДеревоРеквизитов.Колонки.Добавить("ОбязательныйАтрибут", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ЯвляетсяКоллекциейЗначений", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ДоступенВыборЗначенияИзСписка", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ТипЗначенияАтрибута", ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("ТипЗначенияАтрибута1С", ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("ОписаниеНазначенияАтрибута", Новый ОписаниеТипов("Строка"));
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеРеквизита1С"); // Любая ссылка и простые типы.
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеАтрибутаМаркетплейса", Новый ОписаниеТипов(ПростыеТипы()));
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеАтрибутаМаркетплейсаБулево", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ИдентификаторЗначенияАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("ЗначенияАтрибутаМаркетплейса", Новый ОписаниеТипов("СписокЗначений"));
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеАтрибутаЗаполнено", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ЗначениеАтрибутаЗаданоПользователем", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("НеЗаполненРеквизит1С", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("НеЗаполненАтрибут", ОписаниеТипаБулево);
	ДеревоРеквизитов.Колонки.Добавить("ПредставлениеТипаСоответствияЗначений", ОписаниеТипаСтрока50);
	ДеревоРеквизитов.Колонки.Добавить("НомерКартинкиКоллекцииТипов", ОписаниеТипаЧисло2);
	ДеревоРеквизитов.Колонки.Добавить("Уровень", ОписаниеТипаЧисло2);
	ДеревоРеквизитов.Колонки.Добавить("ПорядокСортировки", ОписаниеТипаЧисло2);
	ДеревоРеквизитов.Колонки.Добавить("АдресХранилищаДоступныхЗначений", ОписаниеТипаСтрока500);
	ДеревоРеквизитов.Колонки.Добавить("ИзменилсяРеквизит1С", ОписаниеТипаБулево); // Любая ссылка и простые типы.
	ДеревоРеквизитов.Колонки.Добавить("КэшЗначениеРеквизита1С"); // Любая ссылка и простые типы.

	Если РеквизитыДляСравнения Тогда
		ДеревоРеквизитов.Колонки.Добавить("ОсновныеПоказатели",  							  ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ЦеновыеПоказатели",  							  ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ЕстьРазличия",  								      ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееОбязательныйАтрибут",                       ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееЯвляетсяКоллекциейЗначений",                ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееДоступенВыборЗначенияИзСписка",             ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееТипЗначенияАтрибута",                       ОписаниеТипаСтрока50);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееТипЗначенияАтрибута1С",                     ОписаниеТипаСтрока50);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееЗначениеАтрибутаМаркетплейса",              Новый ОписаниеТипов(ПростыеТипы()));
		ДеревоРеквизитов.Колонки.Добавить("ТекущееИдентификаторЗначенияАтрибутаМаркетплейса", ОписаниеТипаСтрока50);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееЗначениеАтрибутаМаркетплейсаБулево",        ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееЗначенияАтрибутаМаркетплейса",              Новый ОписаниеТипов("СписокЗначений"));
		ДеревоРеквизитов.Колонки.Добавить("ТекущееЗначениеАтрибутаЗаполнено",                 ОписаниеТипаБулево);
		ДеревоРеквизитов.Колонки.Добавить("ТекущееНомерКартинкиКоллекцииТипов",               ОписаниеТипаЧисло2);
	КонецЕсли;

	Возврат ДеревоРеквизитов;

КонецФункции

// Возвращает пустой список свойств для заполнения карточки товара.
// 
// Возвращаемое значение:
//  Структура - свойства для заполнения карточки товара.
//
Функция СписокСвойствТовараДляКарточкиТовара() Экспорт

	ОписаниеТипаСтрока50 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока200 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200));

	СписокСвойствТовар = Новый Структура;
	СписокСвойствТовар.Вставить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СписокСвойствТовар.Вставить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СписокСвойствТовар.Вставить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	СписокСвойствТовар.Вставить("ПредставлениеОбъектаМаркетплейса", ОписаниеТипаСтрока250);
	СписокСвойствТовар.Вставить("ИдентификаторПубликации", ОписаниеТипаСтрока50);
	СписокСвойствТовар.Вставить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	СписокСвойствТовар.Вставить("Категория1С", ОписаниеТипаКатегории1С());
	СписокСвойствТовар.Вставить("ИсточникКатегорииМаркетплейса", ОписаниеТипаКатегории1С());
	СписокСвойствТовар.Вставить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	СписокСвойствТовар.Вставить("НаименованиеКатегорииМаркетплейса", ОписаниеТипаСтрока250);
	СписокСвойствТовар.Вставить("Валюта", ОписаниеТипаСтрока50);
	СписокСвойствТовар.Вставить("Цены", Новый ОписаниеТипов("Структура"));
	СписокСвойствТовар.Вставить("СтавкаНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(4,1)));
	СписокСвойствТовар.Вставить("Штрихкод", ОписаниеТипаСтрока200);

	Возврат СписокСвойствТовар;

КонецФункции

// Возвращает в зависимости от ожидаемых действий таблицу реквизитов, описание свойств товара, изображения,
// дерево реквизитов, дерево атрибутов, описание ошибок заполнения карточки товара.
//
// Параметры:
//	Параметры - Структура - структура с ключами:
//								ОписаниеТовара - Структура - см. СписокСвойствТовараДляКарточкиТовара(),
//								ДанныеОбъекта - Структура - см. НоваяТаблицаЗначенийРеквизитов(),
//								ПараметрыЗаполненияДереваАтрибутов - Структура - 
//															см. ПараметрыДляЗаполненияАтрибутовКатегории(),
//								ОтображаетсяДеревоАтрибутов - Булево - признак отображения дерева атрибутов в карточке товара.
//	УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись маркетплейса.
//	ПараметрыДействий - Структура - структура с действиями, которые ожидается выполнить,
//								см. ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара().
// 
// Возвращаемое значение:
//	Структура:
//			* Категория1С - .
//			* ДанныеДляПубликации - .
//			* ДанныеОбъекта - .
//			* ОбъектыПубликации - .
//			* ДеревоРеквизитов - .
//			* ДанныеКэша - .
//			* ОписаниеДанныхТовара - .
//			* КодОшибки - .
//			* ОписаниеОшибки - .
//
Функция ЗаполнитьДанныеКарточкиТовара(Параметры, УчетнаяЗапись, Знач ПараметрыДействий, ПараметрыКонтекст = Неопределено) Экспорт

	Результат = Новый Структура;

	Событие							= ПараметрыДействий.Событие;
	ПолучитьДанныеТовара			= ПараметрыДействий.ПолучитьДанныеТовара;
	ОбновитьДанныеТовара			= ПараметрыДействий.ОбновитьДанныеТовара;
	ОбновитьКатегориюМаркетплейса	= ПараметрыДействий.ОбновитьКатегориюМаркетплейса;
	ЗаполнитьДеревоРеквизитов		= ПараметрыДействий.ЗаполнитьДеревоРеквизитов;
	ЗаполнитьДеревоАтрибутов		= ПараметрыДействий.ЗаполнитьДеревоАтрибутов;
	ПолучитьОписаниеТовара			= ПараметрыДействий.ПолучитьОписаниеТовара;
	ПроверитьОшибки					= ПараметрыДействий.ПроверитьОшибки;
	ПолучитьОбъектыПубликации		= ПараметрыДействий.ПолучитьОбъектыПубликации
			Или (ПроверитьОшибки И Не ПараметрыДействий.ПолучитьОбъектыПубликации И Не Параметры.Свойство("ОбъектыПубликации"));
	ОбновитьОбъектыПубликации		= ПараметрыДействий.ОбновитьОбъектыПубликации;

	ОписаниеТовара = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОписаниеТовара", Неопределено);
	ДанныеОбъекта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ДанныеОбъекта", Неопределено);
	ОбъектыПубликации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОбъектыПубликации", Неопределено);
	ОтображаетсяДеревоАтрибутов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОтображаетсяДеревоАтрибутов", Ложь);
	ПараметрыЗаполненияДереваАтрибутов =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПараметрыЗаполненияДереваАтрибутов", Неопределено);
    
	Если ПолучитьДанныеТовара Или ОбновитьДанныеТовара Или ПолучитьОбъектыПубликации Тогда

		Если ОписаниеТовара <> Неопределено Тогда
			ТаблицаПубликацииТоваров = НоваяТаблицаПубликацииТоваров();

			СтрокаСОписаниемТовара = ТаблицаПубликацииТоваров.Добавить();
			СтрокаСОписаниемТовара.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
			
			ЗаполнитьЗначенияСвойств(СтрокаСОписаниемТовара, ОписаниеТовара);
			
			СтрокаСОписаниемТовара.ДанныеОбъекта = ДанныеОбъекта;
			СтрокаСОписаниемТовара.ДанныеОбъектаПереданы = (Событие <> "ПриОткрытии");

			Если ЗначениеЗаполнено(СтрокаСОписаниемТовара.ИсточникКатегорииМаркетплейса) Тогда
				Если ТипЗнч(СтрокаСОписаниемТовара.ИсточникКатегорииМаркетплейса) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
					СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры");
				ИначеЕсли ТипЗнч(СтрокаСОписаниемТовара.ИсточникКатегорииМаркетплейса) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры");
				Иначе
					СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ПустаяСсылка");
				КонецЕсли;
			Иначе
				СтрокаСОписаниемТовара.ИсточникКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ИсточникКатегории");
			КонецЕсли;

			Если ОбновитьКатегориюМаркетплейса Тогда
				СтрокаСОписаниемТовара.ИдентификаторКатегорииМаркетплейса = "";
				
				Если СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
					СтрокаСОписаниемТовара.Категория1С = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСОписаниемТовара.Номенклатура, "КатегорияНоменклатуры");
				ИначеЕсли СтрокаСОписаниемТовара.ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры") Тогда
					СтрокаСОписаниемТовара.Категория1С = СтрокаСОписаниемТовара.Номенклатура;
				Иначе
					СтрокаСОписаниемТовара.Категория1С = Неопределено;
				КонецЕсли;
				
			КонецЕсли;

			СписокПараметров = СписокПараметровПодготовкиДанныхПубликуемыхТоваров();
			СписокПараметров.ПолучитьАтрибуты = ПолучитьДанныеТовара;
			СписокПараметров.ОбновитьДанные = ОбновитьДанныеТовара Или ОбновитьОбъектыПубликации;
			СписокПараметров.ОбновитьКатегориюМаркетплейса = ОбновитьКатегориюМаркетплейса;
			СписокПараметров.ПолучитьИзображения = ПолучитьОбъектыПубликации;

			ТаблицаТоваров = ПодготовитьДанныеПубликуемыхТоваров(ТаблицаПубликацииТоваров, СписокПараметров, ПараметрыКонтекст);

			СтрокаСНовымОписаниемТовара = ТаблицаТоваров[0];
			ТаблицаПубликацииТоваров = Неопределено;
			ТаблицаТоваров = Неопределено;

			Если ПолучитьДанныеТовара Или ОбновитьДанныеТовара Тогда
				ОписаниеТовара.Валюта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаСНовымОписаниемТовара.ДанныеДляПубликации, "Валюта", "");
				ОписаниеТовара.Цены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаСНовымОписаниемТовара.ДанныеДляПубликации, "Цены", Новый Структура);
				ОписаниеТовара.СтавкаНДС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаСНовымОписаниемТовара.ДанныеДляПубликации, "СтавкаНДС", 0);

				ДанныеОбъекта = СтрокаСНовымОписаниемТовара.ДанныеОбъекта;

				Результат.Вставить("Категория1С", СтрокаСНовымОписаниемТовара.Категория1С);
				Результат.Вставить("ДанныеДляПубликации", СтрокаСНовымОписаниемТовара.ДанныеДляПубликации);
				Результат.Вставить("ДанныеОбъекта", ДанныеОбъекта);

				Если Результат.ДанныеДляПубликации.Количество() = 0 Тогда
					Результат.ДанныеДляПубликации = НовыйСписокДанныхОТоваре();
				КонецЕсли;

				Результат.ДанныеДляПубликации.Свойство("НаименованиеКатегорииМаркетплейса", ОписаниеТовара.НаименованиеКатегорииМаркетплейса);

				Если ОписаниеТовара.Категория1С <> Результат.Категория1С
					Или Результат.ДанныеДляПубликации.ИсточникКатегорииМаркетплейса <> ОписаниеТовара.ИсточникКатегорииМаркетплейса
					Или Результат.ДанныеДляПубликации.ИдентификаторКатегорииМаркетплейса <> ОписаниеТовара.ИдентификаторКатегорииМаркетплейса Тогда
					ОписаниеТовара.Категория1С = Результат.Категория1С;

					СтрокаСвойствЗаполнения = "ИсточникКатегорииМаркетплейса, ИдентификаторПубликации,
							|ИдентификаторКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса";
					ЗаполнитьЗначенияСвойств(ОписаниеТовара, Результат.ДанныеДляПубликации, СтрокаСвойствЗаполнения);

					Если ЗначениеЗаполнено(ОписаниеТовара.ИсточникКатегорииМаркетплейса) Тогда
						ОписаниеТовара.Вставить("ИдентификаторИсточникаКатегорииМаркетплейса",
								СтрЗаменить(ОписаниеТовара.ИсточникКатегорииМаркетплейса.УникальныйИдентификатор(), "-", "_"));
					КонецЕсли;

					Если ОтображаетсяДеревоАтрибутов Тогда
						ЗаполнитьДеревоАтрибутов = Истина;

						Если ПараметрыЗаполненияДереваАтрибутов.Свойство("ДанныеКэша") Тогда
							ПараметрыЗаполненияДереваАтрибутов.ДанныеКэша = Неопределено;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ОбъектыПубликации = СтрокаСНовымОписаниемТовара.ОбъектыПубликации;
			Если ПараметрыДействий.ПолучитьОбъектыПубликации Тогда
				Результат.Вставить("ОбъектыПубликации", ОбъектыПубликации);
			КонецЕсли;
		Иначе
			ДанныеОбъекта = НоваяТаблицаЗначенийРеквизитов();
		КонецЕсли;
	КонецЕсли;

	Если ЗаполнитьДеревоРеквизитов Тогда
		ДеревоРеквизитов = ПодготовитьДеревоРеквизитовТовара(ДанныеОбъекта);
		Результат.Вставить("ДеревоРеквизитов", ДеревоРеквизитов);
	КонецЕсли;

	Если ЗаполнитьДеревоАтрибутов Тогда
		ДанныеКэша = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполненияДереваАтрибутов, "ДанныеКэша", Неопределено);

		ДеревоАтрибутов = НовоеДеревоАтрибутов();
		ЗаполнитьДанныеАтрибутовКатегории(ПараметрыЗаполненияДереваАтрибутов, УчетнаяЗапись, ДеревоАтрибутов, ДанныеКэша);

		Результат.Вставить("ДеревоАтрибутов", ДеревоАтрибутов);
		Результат.Вставить("ДанныеКэша", ДанныеКэша);
	КонецЕсли;

	Если ПолучитьОписаниеТовара Тогда
		Если ДанныеОбъекта = Неопределено Тогда
			ДанныеОбъекта = НоваяТаблицаЗначенийРеквизитов();
		КонецЕсли;

		ОписаниеДанныхТовара = ПолучитьОписаниеТовараМаркетплейса(ДанныеОбъекта, ОписаниеТовара);
		Результат.Вставить("ОписаниеДанныхТовара", ОписаниеДанныхТовара);
	КонецЕсли;

	Если ПроверитьОшибки Тогда
		Результат.Вставить("ЕстьКритичныеОшибки", Ложь);
		Результат.Вставить("КодОшибки", "");
		Результат.Вставить("ОписаниеОшибки", "");

		РезультатПроверки = ПроверитьЗаполнениеКарточкиТовара(ДанныеОбъекта, ОписаниеТовара, ОбъектыПубликации);
		ЗаполнитьЗначенияСвойств(Результат, РезультатПроверки);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выполняет проверку заполнения данных карточки товара.
//
// Параметры:
//   * ТаблицаЗначенийРеквизитов - ТаблицаЗначений - см. НоваяТаблицаЗначенийРеквизитов().
//   * Параметры - Структура - параметры для проверки
//   * ОбъектыПубликации - ТаблицаЗначений - см. НоваяТаблицаОбъектовПубликации().
// 
// Возвращаемое значение:
//	Структура:  
//    * ЕстьКритичныеОшибки - Булево - признак наличия ошибок, критичных для публикации товара.
//    * КодОшибки - Строка - код ошибки.
//    * ОписаниеОшибки - Строка - текст с описанием всех ошибок.
//
Функция ПроверитьЗаполнениеКарточкиТовара(ТаблицаЗначенийРеквизитов, Параметры = Неопределено, ОбъектыПубликации = Неопределено)

	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЕстьКритичныеОшибки", Ложь);
	РезультатПроверки.Вставить("КодОшибки", "");
	РезультатПроверки.Вставить("ОписаниеОшибки", "");

	ЕстьКритичныеОшибки = Ложь;

	ШаблонОшибкиЗаполненияВсехАтрибутов = НСтр("ru = 'Не заполнены все атрибуты товара.'");
	ШаблонОшибкиОтсутствияАтрибутов = НСтр("ru = 'Отсутствуют данные об атрибутах товара.'");
	ШаблонОшибкиЗаполненияНеобязательныхАтрибутов = НСтр("ru = 'Не заполнены некоторые необязательные атрибуты товара.'");
	ШаблонОшибкиЗаполненияОбязательныхАтрибутов = НСтр("ru = 'Обнаружены ошибки заполнения обязательных атрибутов товара: %1'");
	ШаблонНезаполненногоРеквизита1С = НСтр("ru = '- для атрибута <%1> не заполнен реквизит 1С <%2>'");
	ШаблонНезаполненногоПутиКРеквизиту1С =
			НСтр("ru = '- для атрибута <%1> в настройках категории не указан путь к реквизиту 1С - требуется настройка соответствия для категории <%2>'");
	ШаблонОтсутствующегоСоответствия = НСтр("ru = '- для атрибута <%1> не задано соответствие для значения <%2> реквизита 1С <%3>'");
	ШаблонОтсутствующегоЗначения = НСтр("ru = '- для атрибута <%1> не задано значение'");

	КодОшибки = НСтр("ru = 'Ошибка заполнения в 1С'");

	МассивОшибок = Новый Массив;
	
	Если ТаблицаЗначенийРеквизитов.Количество() > 0 Тогда

		// Проверка заполнения пути к реквизиту 1С для обязательных атрибутов.
		Отбор = Новый Структура;
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		Отбор.Вставить("НеЗаполненАтрибут", Истина); 
		Отбор.Вставить("НеЗаполненПутьКРеквизиту1С", Истина);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаСОшибкой Из СтрокиСОшибками Цикл 
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНезаполненногоПутиКРеквизиту1С,
					СтрокаСОшибкой.НаименованиеАтрибутаМаркетплейса + " (" + СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса + ")",
					СтрокаСОшибкой.ИсточникКатегорииМаркетплейса));
		КонецЦикла;

		// Проверка заполнения реквизита 1С для обязательных атрибутов.
		Отбор = Новый Структура;
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		Отбор.Вставить("НеЗаполненАтрибут", Истина);
		Отбор.Вставить("НеЗаполненРеквизит1С", Истина);
		Отбор.Вставить("НеЗаполненПутьКРеквизиту1С", Ложь);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаСОшибкой Из СтрокиСОшибками Цикл 
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНезаполненногоРеквизита1С,
					СтрокаСОшибкой.НаименованиеАтрибутаМаркетплейса + " (" + СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса + ")",
					СтрокаСОшибкой.ПредставлениеРеквизита1С));
		КонецЦикла;

		// Проверка отсутствия соответствия для обязательного атрибута.
		Отбор = Новый Структура;
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		Отбор.Вставить("НеЗаполненАтрибут", Истина);
		Отбор.Вставить("НеЗаполненоСоответствиеАтрибута", Истина);
		Отбор.Вставить("УстановленоЗначениеПоУмолчанию", Ложь);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаСОшибкой Из СтрокиСОшибками Цикл 
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОтсутствующегоСоответствия,
					СтрокаСОшибкой.НаименованиеАтрибутаМаркетплейса + " (" + СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса + ")",
					СтрокаСОшибкой.ЗначениеРеквизита1С,
					СтрокаСОшибкой.ПредставлениеРеквизита1С));
		КонецЦикла;

		// Проверка заполнения для обязательных атрибутов, значения которых отредактированы пользователем вручную.
		Отбор = Новый Структура;
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		Отбор.Вставить("НеЗаполненАтрибут", Истина);
		Отбор.Вставить("ЗначениеАтрибутаЗаданоПользователем", Истина);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Для Каждого СтрокаСОшибкой Из СтрокиСОшибками Цикл
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОтсутствующегоЗначения,
					СтрокаСОшибкой.НаименованиеАтрибутаМаркетплейса + " (" + СтрокаСОшибкой.ИдентификаторАтрибутаМаркетплейса + ")"));
		КонецЦикла;

		// Проверка наличия хотя бы одного заполненного атрибута.
		ВсеАтрибутыНеЗаполнены = Ложь;
		Отбор = Новый Структура;
		Отбор.Вставить("НеЗаполненАтрибут", Истина);
		СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Если СтрокиСОшибками.Количество() = ТаблицаЗначенийРеквизитов.Количество() Тогда
			МассивОшибок.Добавить(ШаблонОшибкиЗаполненияВсехАтрибутов);
			ВсеАтрибутыНеЗаполнены = Истина;
		КонецЕсли;

		// Проверка наличия хотя бы одного незаполненного атрибута.
		Если Не ВсеАтрибутыНеЗаполнены Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("НеЗаполненАтрибут", Истина);
			Отбор.Вставить("ОбязательныйАтрибут", Ложь);
			СтрокиСОшибками = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
			Если СтрокиСОшибками.Количество() > 0 Тогда
				Если МассивОшибок.Количество() > 0 Тогда
					МассивОшибок.Добавить(ШаблонОшибкиЗаполненияНеобязательныхАтрибутов);
				Иначе
					РезультатПроверки.ОписаниеОшибки = ШаблонОшибкиЗаполненияНеобязательныхАтрибутов;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Заполнение описания ошибки.
		Если МассивОшибок.Количество() > 0 Тогда
			ЕстьКритичныеОшибки = Истина;
		КонецЕсли;
	Иначе
		РезультатПроверки.ЕстьКритичныеОшибки = Истина;
		РезультатПроверки.КодОшибки = КодОшибки; 
		РезультатПроверки.ОписаниеОшибки = ШаблонОшибкиОтсутствияАтрибутов;

		Если ТипЗнч( Параметры ) = Тип( "Структура" ) И Параметры.Свойство( "ИсточникКатегорииМаркетплейса" ) И Не ЗначениеЗаполнено( Параметры.ИсточникКатегорииМаркетплейса ) Тогда
			РезультатПроверки.ОписаниеОшибки = НСтр( "ru = 'Не заполнено соответствие категории 1С и маркетплейса. Настройка в ""Категории, атрибуты категорий и их значения"".'" );
			МассивОшибок.Добавить( ШаблонОшибкиОтсутствияАтрибутов );
			ЕстьКритичныеОшибки = Истина;
		КонецЕсли;

		ЕстьКритичныеОшибки = Истина;
	КонецЕсли;

	Если Параметры <> Неопределено Тогда
		
		// проверим заполнение характеристики
       	НоменклатураРеквизитыЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта( Параметры.Номенклатура, "ИспользоватьХарактеристики, ПроверятьЗаполнениеХарактеристики" );
        
        Если НоменклатураРеквизитыЗначения.ИспользоватьХарактеристики = Истина Тогда
        	Если НоменклатураРеквизитыЗначения.ПроверятьЗаполнениеХарактеристики = Истина Тогда
        		Если Не ЗначениеЗаполнено( Параметры.Характеристика ) Тогда
        			// Обязательное заполнение характеристики
        		
        			ЕстьКритичныеОшибки = Истина;
        			
        			Шаблон = НСтр( "ru = 'Для товара <%1> необходимо заполнить характеристику. Для данного товара в справочнике номенклатура включен признак ""Обязательное заполнение характеристики"".'" );
        			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметры.Номенклатура);
        			МассивОшибок.Добавить(СообщениеОбОшибке);
        			
        		КонецЕсли;
        	КонецЕсли;
        Иначе
        	Если ЗначениеЗаполнено(Параметры.Характеристика) Тогда
					// характеристика должна быть пустой
					
        			ЕстьКритичныеОшибки = Истина;
        			Шаблон = НСтр("ru = 'Для товара <%1> заполнена характеристика. Для данного товара в справочнике номенклатура не включен признак ""Использовать характеристики"".'");
        			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметры.Номенклатура);
        			МассивОшибок.Добавить(СообщениеОбОшибке);
        			
        	КонецЕсли; 
        КонецЕсли;

		// Проверка цен.
		Цены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Цены", Неопределено);
		Если Цены <> Неопределено Тогда
			Шаблон1 = НСтр("ru = 'Для вида цены <%1> необходимо установить цену товара.'");
			Шаблон2 = НСтр("ru = 'Не заполнена настройка синхронизации для вида цены выгрузки на площадку маркетплейса <%1>. Необходимо заполнить настройки синхронизации и установить цену для товара по виду цен, указанному в настройках синхронизации.'");

			Для Каждого ДанныеПоВидуЦены Из Цены Цикл
				ДанныеПоЦене = ДанныеПоВидуЦены.Значение;
				Если ДанныеПоЦене.ПроверкаЗаполнения И Не ЗначениеЗаполнено(ДанныеПоЦене.Цена) Тогда
					Если ЗначениеЗаполнено(ДанныеПоЦене.ВидЦены) Тогда
						СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон1,
								ДанныеПоЦене.ВидЦены);
					Иначе
						СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон2,
								ДанныеПоВидуЦены.Значение.ПредставлениеВидаЦены); 
					КонецЕсли;

					МассивОшибок.Добавить(СообщениеОбОшибке);
				КонецЕсли;
			КонецЦикла;

			ЕстьКритичныеОшибки = Истина;
		КонецЕсли;

		// Проверка изображений
		Если ОбъектыПубликации <> Неопределено Тогда
			// Проверка изображений.  
			Если ОбъектыПубликации.Колонки.Найти("ВидОбъектаМаркетплейса") <> Неопределено Тогда
				Отбор = Новый Структура("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение"));
				СтрокиИзображений = ОбъектыПубликации.НайтиСтроки(Отбор);  
			Иначе 
				СтрокиИзображений = Новый Массив;
			КонецЕсли;
		
			Если СтрокиИзображений.Количество() = 0 Тогда
				Шаблон = НСтр("ru = 'Необходимо настроить изображения товаров в форме ""Состав и сортировка для сайта"" для номенклатуры <%1>. Требуемый формат файлов: %2.'");
				
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,	Параметры.Номенклатура, СтрСоединить(РасширенияИзображений(), ", "));
				МассивОшибок.Добавить(СообщениеОбОшибке);

				ЕстьКритичныеОшибки = Истина;
			КонецЕсли;
                                  
		КонецЕсли;

		// Обработка массива ошибок.
		Если МассивОшибок.Количество() > 0 Тогда
			ОшибкиПроверкиДанныхТовара = СтрСоединить(МассивОшибок, Символы.ПС);

			РезультатПроверки.ЕстьКритичныеОшибки = ЕстьКритичныеОшибки;
			РезультатПроверки.КодОшибки = ?(ЕстьКритичныеОшибки, КодОшибки, ""); // Для некритичных ошибок код ошибки не заполняется.
			РезультатПроверки.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки
					+ ?(ПустаяСтрока(РезультатПроверки.ОписаниеОшибки), "", Символы.ПС) + ОшибкиПроверкиДанныхТовара;
		КонецЕсли;
	КонецЕсли;

	Возврат РезультатПроверки;

КонецФункции

Функция ПодготовитьДеревоРеквизитовТовара(ТаблицаРеквизитов, Знач РеквизитыДляСравнения = Ложь)

	ДеревоРеквизитов = НовоеДеревоРеквизитов(РеквизитыДляСравнения);

	ПутьКРеквизитам1СПоУмолчанию = ПутьКРеквизитам1СПоУмолчанию();
	СоответствиеТипов = СоответствиеТипов();

	Для Каждого ДанныеАтрибута Из ТаблицаРеквизитов Цикл

		Если ЗначениеЗаполнено(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса) Тогда
			Родитель = ДеревоРеквизитов.Строки.Найти(ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса,
					"ИдентификаторАтрибутаМаркетплейса", Ложь);

			Если Родитель = Неопределено Тогда
				Родитель = ДеревоРеквизитов.Строки.Добавить();
				Родитель.ИдентификаторКатегорииМаркетплейса = ДанныеАтрибута.ИдентификаторКатегорииМаркетплейса;
				Родитель.ИдентификаторАтрибутаМаркетплейса = ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса;
				Родитель.НаименованиеАтрибутаМаркетплейса = ДанныеАтрибута.НаименованиеРодителяАтрибутаМаркетплейса;
				Родитель.НомерКартинкиКоллекцииТипов = 99;
				Родитель.Уровень = 0;
				Если РеквизитыДляСравнения Тогда
					Родитель.ТекущееНомерКартинкиКоллекцииТипов = 99;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Родитель = ДеревоРеквизитов;
		КонецЕсли;

		СтрокаРеквизитовЗначенияАтрибута = "ЗначениеАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибутаМаркетплейса";
		Если РеквизитыДляСравнения Тогда
			СтрокаРеквизитовЗначенияАтрибута = СтрокаРеквизитовЗначенияАтрибута
											   + ", ТекущееЗначениеАтрибутаМаркетплейса, ТекущееИдентификаторЗначенияАтрибутаМаркетплейса";
		КонецЕсли;
		
		ЭтоСуществующаяСтрока = Ложь;
		НоваяСтрока           = Неопределено;

		Если ДанныеАтрибута.ЯвляетсяКоллекциейЗначений Тогда
			НоваяСтрока = Родитель.Строки.Найти(ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, "ИдентификаторАтрибутаМаркетплейса");

			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = Родитель.Строки.Добавить();
			Иначе
				ЭтоСуществующаяСтрока = Истина;
			КонецЕсли;

			Если ЗначениеЗаполнено(ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса) Тогда
				Если ДанныеАтрибута.ДоступенВыборЗначенияИзСписка Тогда
					НоваяСтрока.ЗначенияАтрибутаМаркетплейса.Добавить(ДанныеАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса, ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса);
				Иначе
					НоваяСтрока.ЗначенияАтрибутаМаркетплейса.Добавить(ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса);
				КонецЕсли;

				НоваяСтрока.ЗначениеАтрибутаЗаполнено = (НоваяСтрока.ЗначенияАтрибутаМаркетплейса.Количество() > 0);
			КонецЕсли;
			
			Если РеквизитыДляСравнения И НЕ ДанныеАтрибута.ТекущееЯвляетсяКоллекциейЗначений Тогда
				НоваяСтрока.ТекущееЗначениеАтрибутаМаркетплейса              = ДанныеАтрибута.ТекущееЗначениеАтрибутаМаркетплейса;
				НоваяСтрока.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = ДанныеАтрибута.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса;
				НоваяСтрока.ТекущееЗначениеАтрибутаЗаполнено 				 = ЗначениеЗаполнено(НоваяСтрока.ТекущееЗначениеАтрибутаМаркетплейса);
			КонецЕсли;
		КонецЕсли;
		
		Если РеквизитыДляСравнения И ДанныеАтрибута.ТекущееЯвляетсяКоллекциейЗначений Тогда
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = Родитель.Строки.Найти(ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, "ИдентификаторАтрибутаМаркетплейса");

				Если НоваяСтрока = Неопределено Тогда
					НоваяСтрока = Родитель.Строки.Добавить();
				Иначе
					ЭтоСуществующаяСтрока = Истина;
				КонецЕсли;
			КонецЕсли;

			НоваяСтрока.ЕстьРазличия = НоваяСтрока.ЕстьРазличия ИЛИ ДанныеАтрибута.ЕстьРазличия;
			
			Если ЗначениеЗаполнено(ДанныеАтрибута.ТекущееЗначениеАтрибутаМаркетплейса) Тогда
				Если ДанныеАтрибута.ТекущееДоступенВыборЗначенияИзСписка Тогда
					НоваяСтрока.ТекущееЗначенияАтрибутаМаркетплейса.Добавить(ДанныеАтрибута.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса, ДанныеАтрибута.ТекущееЗначениеАтрибутаМаркетплейса);
				Иначе
					НоваяСтрока.ТекущееЗначенияАтрибутаМаркетплейса.Добавить(ДанныеАтрибута.ТекущееЗначениеАтрибутаМаркетплейса);
				КонецЕсли;

				НоваяСтрока.ТекущееЗначениеАтрибутаЗаполнено = (НоваяСтрока.ТекущееЗначенияАтрибутаМаркетплейса.Количество() > 0);
			КонецЕсли;
			
			Если НЕ ДанныеАтрибута.ЯвляетсяКоллекциейЗначений Тогда
				НоваяСтрока.ЗначениеАтрибутаМаркетплейса              = ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса;
				НоваяСтрока.ИдентификаторЗначенияАтрибутаМаркетплейса = ДанныеАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса;
				НоваяСтрока.ЗначениеАтрибутаЗаполнено 				  = ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
			КонецЕсли;
		КонецЕсли;

		Если ЭтоСуществующаяСтрока Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = Родитель.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеАтрибута, СтрокаРеквизитовЗначенияАтрибута);
			НоваяСтрока.ЗначениеАтрибутаЗаполнено = ЗначениеЗаполнено(НоваяСтрока.ЗначениеАтрибутаМаркетплейса);
			Если РеквизитыДляСравнения Тогда
				НоваяСтрока.ТекущееЗначениеАтрибутаЗаполнено = ЗначениеЗаполнено(НоваяСтрока.ТекущееЗначениеАтрибутаМаркетплейса);
			КонецЕсли;
		КонецЕсли;		
		
		// Заполнение новой строки
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеАтрибута, , СтрокаРеквизитовЗначенияАтрибута);
		НоваяСтрока.ТипЗначенияАтрибута1С = СоответствиеТипов.Получить(ДанныеАтрибута.ТипЗначенияАтрибута);
		Если РеквизитыДляСравнения  Тогда
			НоваяСтрока.ТекущееТипЗначенияАтрибута1С = СоответствиеТипов.Получить(ДанныеАтрибута.ТекущееТипЗначенияАтрибута);
		КонецЕсли;

		Если НоваяСтрока.ТипЗначенияАтрибута1С = "Булево" Тогда
			НоваяСтрока.ЗначениеАтрибутаМаркетплейсаБулево = НоваяСтрока.ЗначениеАтрибутаМаркетплейса;
		КонецЕсли;
		Если РеквизитыДляСравнения И НоваяСтрока.ТекущееТипЗначенияАтрибута1С = "Булево"  Тогда
			НоваяСтрока.ТекущееЗначениеАтрибутаМаркетплейсаБулево = НоваяСтрока.ТекущееЗначениеАтрибутаМаркетплейса;
		КонецЕсли;

		Если НоваяСтрока.ИзменилсяРеквизит1С Тогда
			НоваяСтрока.КэшЗначениеРеквизита1С = ДанныеАтрибута.ЗначениеРеквизита1С;
			НоваяСтрока.ЗначениеРеквизита1С = ДанныеАтрибута.НовоеЗначениеРеквизита1С;
		КонецЕсли;

		НоваяСтрока.Уровень = 3;

		НоваяСтрока.НомерКартинкиКоллекцииТипов = ОпределитьНомерКартинкиКоллекцииТипов(ДанныеАтрибута.ТипЗначенияАтрибута, НоваяСтрока.ТипЗначенияАтрибута1С,
				НоваяСтрока.ЯвляетсяКоллекциейЗначений, НоваяСтрока.ДоступенВыборЗначенияИзСписка);
		Если РеквизитыДляСравнения Тогда
			НоваяСтрока.ТекущееНомерКартинкиКоллекцииТипов = ОпределитьНомерКартинкиКоллекцииТипов(ДанныеАтрибута.ТекущееТипЗначенияАтрибута, НоваяСтрока.ТекущееТипЗначенияАтрибута1С,
					НоваяСтрока.ТекущееЯвляетсяКоллекциейЗначений, НоваяСтрока.ТекущееДоступенВыборЗначенияИзСписка);
		КонецЕсли;

		Если НоваяСтрока.ЯвляетсяКоллекциейЗначений И НоваяСтрока.НомерКартинкиКоллекцииТипов = 9 Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = НСтр("ru = '<Коллекция значений из списка>'");
		ИначеЕсли НоваяСтрока.ЯвляетсяКоллекциейЗначений Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '<Коллекция значений типа %1>'"),
				ОпределитьПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С));
		ИначеЕсли НоваяСтрока.НомерКартинкиКоллекцииТипов = 9 Тогда
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = НСтр("ru = '<Значение из списка>'");
		Иначе
			НоваяСтрока.ПредставлениеТипаСоответствияЗначений = "<" + ОпределитьПредставлениеТипа(НоваяСтрока.ТипЗначенияАтрибута1С) + ">";
		КонецЕсли;

		РеквизитыЗаполнения = Неопределено;
		Если ПутьКРеквизитам1СПоУмолчанию.Свойство("Атрибут_" + ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса, РеквизитыЗаполнения) Тогда
			ПорядокСортировки = 0;
			РеквизитыЗаполнения.Свойство("ПорядокСортировки", ПорядокСортировки);
			НоваяСтрока.ПорядокСортировки = ПорядокСортировки;
		КонецЕсли;
	КонецЦикла;

	ДеревоРеквизитов.Строки.Сортировать("Уровень Возр, ОбязательныйАтрибут Убыв, ПорядокСортировки, НаименованиеАтрибутаМаркетплейса Возр", Истина);
	ДеревоРеквизитов.Колонки.Удалить("ПорядокСортировки");

	Возврат ДеревоРеквизитов;

КонецФункции

// Определяет индекс картинки в коллекции БиблиотекаКартинок.ПиктограммыТиповДанных в соответствии с указанными параметрами.
//
// Параметры:
//   ТипЗначенияАтрибута           - Строка - тип значения характеристики (атрибута) маркетплейса.
//   ТипЗначенияАтрибута1С         - Строка - тип значения характеристики (атрибута) в 1С.
//   ЯвляетсяКоллекциейЗначений    - Булево - признак, что атрибут содержит список значений выбора.
//   ДоступенВыборЗначенияИзСписка - Булево - признак наличия списка выбора значений атрибута в 1С.
//
// Возвращаемое значение:
//   Число - индекс картинки соответствующей описанию типа данных.
//
Функция ОпределитьНомерКартинкиКоллекцииТипов(ТипЗначенияАтрибута, ТипЗначенияАтрибута1С, ЯвляетсяКоллекциейЗначений = Ложь, 
			ДоступенВыборЗначенияИзСписка = Ложь)
	
	Результат = 99;
	
	Если ЯвляетсяКоллекциейЗначений ИЛИ ДоступенВыборЗначенияИзСписка Тогда
		Результат = 9;
	ИначеЕсли ТипЗначенияАтрибута = "url"
		Или ТипЗначенияАтрибута = "imageurl" Тогда
		Результат = 7;
	ИначеЕсли ТипЗначенияАтрибута1С = "Строка" Тогда
		Результат = 8;
	ИначеЕсли ТипЗначенияАтрибута1С = "Булево" Тогда
		Результат = 0;
	ИначеЕсли ТипЗначенияАтрибута1С = "Дата" Тогда
		Результат = 2;
	ИначеЕсли ТипЗначенияАтрибута1С = "Число" Тогда
		Результат = 13;
	ИначеЕсли ЗначениеЗаполнено(ТипЗначенияАтрибута) Тогда
		Результат = 18;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПолучитьОписаниеТовараМаркетплейса(ДанныеОбъекта, ПараметрыЗаполнения)

	ОписаниеДанныхТовара = "";

	Если ДанныеОбъекта = Неопределено
		Или ТипЗнч( ДанныеОбъекта ) <> Тип( "ТаблицаЗначений" )
		Или Не ЗначениеЗаполнено(ПараметрыЗаполнения.ИдентификаторПубликации) И ДанныеОбъекта.Количество() = 0 Тогда
		Возврат ПолучитьОписаниеНовогоТовараМаркетплейса();
	КонецЕсли;

	ДанныеОбъектаДляОписания = ДанныеОбъекта.Скопировать();
	ДанныеОбъектаДляОписания.Сортировать( "НаименованиеРодителяАтрибутаМаркетплейса,НаименованиеАтрибутаМаркетплейса" );

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокументАтрибутов = Новый ТабличныйДокумент;

	Макет = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ПолучитьМакет("ПФ_MXL_ОписаниеТовара");

	ОбластьЗаголовка = Макет.ПолучитьОбласть("ЗаголовокГруппыДанных");

	ОбластьМаркера = Макет.ПолучитьОбласть("Маркер|ОбластьМаркера");
	ОбластьПустогоМаркера = Макет.ПолучитьОбласть("СтрокаСвойства|ОбластьМаркера");

	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");

	ОбластьСвойствоЗаголовок         = Макет.ПолучитьОбласть("СтрокаСвойства|ОбластьЗаголовок");
	ОбластьСвойствоЗначениеЗаполнено = Макет.ПолучитьОбласть("СтрокаСвойства|ОбластьЗначение");
	ОбластьСвойствоПустоеЗначение    = Макет.ПолучитьОбласть("СтрокаСвойстваПустоеЗначение|ОбластьЗначение");
	ОбластьСвойствоПримечание        = Макет.ПолучитьОбласть("СтрокаСвойства|ОбластьПримечание");

	ОбластьГруппаАтрибутов = Макет.ПолучитьОбласть("СтрокаГруппыАтрибутов");
	
	ОбластьАтрибутГруппыОбязательныйЗаголовок   = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппы|ОбластьЗаголовок");
	ОбластьАтрибутГруппыНеобязательныйЗаголовок = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппыНеобязательного|ОбластьЗаголовок");
	ОбластьАтрибутОбязательныйЗаголовок         = Макет.ПолучитьОбласть("СтрокаАтрибута|ОбластьЗаголовок");
	ОбластьАтрибутНеобязательныйЗаголовок       = Макет.ПолучитьОбласть("СтрокаАтрибутаНеобязательного|ОбластьЗаголовок");
	
	ОбластьАтрибутЗначениеЗаполнено = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппы|ОбластьЗначение");
	ОбластьАтрибутПустоеЗначение    = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппыНеобязательного|ОбластьЗначение");
	ОбластьАтрибутПримечание        = Макет.ПолучитьОбласть("СтрокаАтрибутаГруппы|ОбластьПримечание");

	// Основные данные.
	ОбластьЗаголовка.Параметры.Заголовок = НСтр("ru = 'Основные данные'");
	ТабличныйДокумент.Вывести(ОбластьЗаголовка);

	// Представление товара.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Представление товара на площадке маркетплейса'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.ПредставлениеОбъектаМаркетплейса);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не задано представление товара'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);
	
	// Штрихкод.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Штрихкод'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.Штрихкод);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не задан штрихкод'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено ;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);
	
	// Ставка НДС.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Ставка НДС (из номенклатуры)'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.СтавкаНДС);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не задана ставка НДС'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Значение = Значение + " %";
		Область = ОбластьСвойствоЗначениеЗаполнено ;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	// Категория 1С.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Категория 1С'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.Категория1С);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не определена категория 1С'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	// Источник категории маркетплейса.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Категория 1С, являющаяся источником категории маркетплейса (по настройкам соответствия)'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = Строка(ПараметрыЗаполнения.ИсточникКатегорииМаркетплейса);
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не определен источник категории маркетплейса'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	// Категория маркетплейса.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Категория маркетплейса'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = ПараметрыЗаполнения.НаименованиеКатегорииМаркетплейса;
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Не определена категория маркетплейса'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Если Не ПустаяСтрока(ПараметрыЗаполнения.ИдентификаторКатегорииМаркетплейса) Тогда
		Значение = Значение + " (id " + ПараметрыЗаполнения.ИдентификаторКатегорииМаркетплейса + ")";
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	// Идентификатор публикации - идентификатор товара в 1С.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Идентификатор публикации (артикул на площадке маркетплейса)'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	ОбластьСвойствоЗначениеЗаполнено.Параметры.Значение = ПараметрыЗаполнения.ИдентификаторПубликации;
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗначениеЗаполнено);

	// Идентификатор товара на маркетплейсе.
	ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);
	ОбластьСвойствоЗаголовок.Параметры.Заголовок = НСтр("ru = 'Идентификатор товара на маркетплейсе'");
	ТабличныйДокумент.Присоединить(ОбластьСвойствоЗаголовок);
	Значение = ПараметрыЗаполнения.ИдентификаторОбъектаМаркетплейса;
	Если ПустаяСтрока(Значение) Тогда
		Значение = НСтр("ru = 'Товар не прошел модерацию'");
		Область = ОбластьСвойствоПустоеЗначение;
	Иначе
		Область = ОбластьСвойствоЗначениеЗаполнено;
	КонецЕсли;
	Область.Параметры.Значение = Значение;
	ТабличныйДокумент.Присоединить(Область);

	Если ДанныеОбъектаДляОписания.Количество() > 0 Тогда
		СлужебныеАтрибуты = СлужебныеАтрибуты();

		ТабличныйДокументАтрибутов.Вывести(ОбластьРазделитель);
		ОбластьЗаголовка.Параметры.Заголовок = НСтр("ru = 'Атрибуты товара'");
		ТабличныйДокументАтрибутов.Вывести(ОбластьЗаголовка);

		ТекущийРодитель = "";

		Для Каждого ДанныеАтрибута Из ДанныеОбъектаДляОписания Цикл

			МассивЧастейСтрокиОписания = Новый Массив;

			Если ТекущийРодитель <> ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса Тогда
				ТекущийРодитель = ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса;

				// Вывод группы атрибутов.
				Если ЗначениеЗаполнено(ТекущийРодитель) Тогда
					ОбластьГруппаАтрибутов.Параметры.Заголовок = ДанныеАтрибута.НаименованиеРодителяАтрибутаМаркетплейса;
					Если СлужебныеАтрибуты.Найти(ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса) = Неопределено Тогда
						ОбластьГруппаАтрибутов.Параметры.Заголовок =  ОбластьГруппаАтрибутов.Параметры.Заголовок
								+ " (id " + ДанныеАтрибута.ИдентификаторРодителяАтрибутаМаркетплейса + ")";
					КонецЕсли;
					ТабличныйДокументАтрибутов.Вывести(ОбластьГруппаАтрибутов);
				КонецЕсли;
			КонецЕсли;

			// Вывод атрибута.
			Если ЗначениеЗаполнено(ТекущийРодитель) Тогда
				Если ДанныеАтрибута.ОбязательныйАтрибут Тогда
					ИспользуемаяОбластьЗаголовок = ОбластьАтрибутГруппыОбязательныйЗаголовок;
				Иначе
					ИспользуемаяОбластьЗаголовок = ОбластьАтрибутГруппыНеобязательныйЗаголовок;
				КонецЕсли;
			Иначе
				Если ДанныеАтрибута.ОбязательныйАтрибут Тогда
					ИспользуемаяОбластьЗаголовок = ОбластьАтрибутОбязательныйЗаголовок;
				Иначе
					ИспользуемаяОбластьЗаголовок = ОбластьАтрибутНеобязательныйЗаголовок;
				КонецЕсли;
			КонецЕсли;

			Если ДанныеАтрибута.ИзменилсяРеквизит1С Тогда
				ТабличныйДокументАтрибутов.Вывести(ОбластьМаркера);
			Иначе
				ТабличныйДокументАтрибутов.Вывести(ОбластьПустогоМаркера);
			КонецЕсли;

			ИспользуемаяОбластьЗаголовок.Параметры.Заголовок = ДанныеАтрибута.НаименованиеАтрибутаМаркетплейса;
			Если СлужебныеАтрибуты.Найти(ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса) = Неопределено Тогда
				ИспользуемаяОбластьЗаголовок.Параметры.Заголовок = ИспользуемаяОбластьЗаголовок.Параметры.Заголовок
						+ " (id " + ДанныеАтрибута.ИдентификаторАтрибутаМаркетплейса + ")";
			КонецЕсли;
			ТабличныйДокументАтрибутов.Присоединить(ИспользуемаяОбластьЗаголовок);

			МассивПримечаний = Новый Массив;
			Если ЗначениеЗаполнено(ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса) Тогда
				ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение = ДанныеАтрибута.ЗначениеАтрибутаМаркетплейса;
				Если Не ПустаяСтрока(ДанныеАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса) Тогда
					ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение = ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение
							+ " (id " + ДанныеАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса + ")";
				КонецЕсли;
				ТабличныйДокументАтрибутов.Присоединить(ОбластьАтрибутЗначениеЗаполнено);

				Если ДанныеАтрибута.ЗначениеАтрибутаЗаданоПользователем Тогда
					МассивПримечаний.Добавить(НСтр("ru = 'Значение заполнено / изменено пользователем'"));
				ИначеЕсли ДанныеАтрибута.УстановленоЗначениеПоУмолчанию Тогда
					МассивПримечаний.Добавить(НСтр("ru = 'Установлено значение по умолчанию'"));
				КонецЕсли;
			Иначе
				Если ДанныеАтрибута.ОбязательныйАтрибут Тогда
					ОбластьАтрибутПустоеЗначение.Параметры.Значение = НСтр("ru = 'Не заполнен обязательный атрибут'");
				Иначе
					ОбластьАтрибутПустоеЗначение.Параметры.Значение = НСтр("ru = 'Не заполнен атрибут'");
				КонецЕсли;
				ТабличныйДокументАтрибутов.Присоединить(ОбластьАтрибутПустоеЗначение);

				Значение = "";
				Если ДанныеАтрибута.НеЗаполненПутьКРеквизиту1С Тогда
					Значение = НСтр("ru = 'не указан путь к реквизиту 1С'");
				ИначеЕсли ДанныеАтрибута.НеЗаполненРеквизит1С Тогда
					Шаблон = НСтр("ru = 'не заполнен реквизит 1С <%1>'");
					Значение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеАтрибута.ПредставлениеРеквизита1С);
				ИначеЕсли ДанныеАтрибута.НеЗаполненоСоответствиеАтрибута Тогда
					Шаблон = НСтр("ru = 'не заполнено соответствие для значения <%1>'");
					Значение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеАтрибута.ЗначениеРеквизита1С);
				КонецЕсли;

				МассивПримечаний.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Причина: %1'"), Значение));
			КонецЕсли;

			Если ДанныеАтрибута.ИзменилсяРеквизит1С Тогда
				Шаблон = НСтр("ru = 'Изменено значение реквизита 1С - новое значение <%1>'");
				МассивПримечаний.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеАтрибута.НовоеЗначениеРеквизита1С));
			КонецЕсли;

			ОбластьАтрибутПримечание.Параметры.Примечание = СтрСоединить(МассивПримечаний, Символы.ПС);
			ТабличныйДокументАтрибутов.Присоединить(ОбластьАтрибутПримечание);

		КонецЦикла;
	Иначе
		ТабличныйДокументАтрибутов.Вывести(ОбластьРазделитель);
		ОбластьЗаголовка.Параметры.Заголовок = НСтр("ru = 'Не обнаружены сохраненные данные по атрибутам.'") + Символы.ПС
				+ НСтр("ru = 'Необходимо заполнить атрибуты товара.'");
		ТабличныйДокументАтрибутов.Вывести(ОбластьЗаголовка);
	КонецЕсли;

	ТабличныйДокумент.Вывести(ТабличныйДокументАтрибутов);
	
	Если ПараметрыЗаполнения.Цены.Количество() > 0 Тогда
		ТабличныйДокумент.Вывести(ОбластьРазделитель);
		ОбластьЗаголовка.Параметры.Заголовок = НСтр("ru = 'Цены товара'");
		ТабличныйДокумент.Вывести(ОбластьЗаголовка);

		Для Каждого ДанныеЦены Из ПараметрыЗаполнения.Цены Цикл
			ТабличныйДокумент.Вывести(ОбластьПустогоМаркера);

			ДанныеЦены = ДанныеЦены.Значение;

			Если ДанныеЦены.ПроверкаЗаполнения Тогда
				ИспользуемаяОбластьЗаголовок = ОбластьАтрибутОбязательныйЗаголовок;
			Иначе
				ИспользуемаяОбластьЗаголовок = ОбластьАтрибутНеобязательныйЗаголовок;
			КонецЕсли;

			Значение = ДанныеЦены.ВидЦены;
			Если Не ЗначениеЗаполнено(Значение) Тогда
				Значение = НСтр("ru = '<Не задан вид цены>'");
			КонецЕсли;
			ИспользуемаяОбластьЗаголовок.Параметры.Заголовок = Значение;
			ТабличныйДокумент.Присоединить(ИспользуемаяОбластьЗаголовок);

			Если ЗначениеЗаполнено(ДанныеЦены.Цена) Тогда
				ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение = Формат(ДанныеЦены.Цена, "ЧДЦ=2; ЧН=; ЧГ=") + " " + ПараметрыЗаполнения.Валюта;
				ТабличныйДокумент.Присоединить(ОбластьАтрибутЗначениеЗаполнено);
			ИначеЕсли ДанныеЦены.ПроверкаЗаполнения Тогда
				ОбластьАтрибутПустоеЗначение.Параметры.Значение = НСтр("ru = 'Не задана цена'");
				ТабличныйДокумент.Присоединить(ОбластьАтрибутПустоеЗначение);
			Иначе
				ОбластьАтрибутЗначениеЗаполнено.Параметры.Значение = НСтр("ru = 'Не задана цена'");
				ТабличныйДокумент.Присоединить(ОбластьАтрибутЗначениеЗаполнено);
			КонецЕсли;

			ОбластьАтрибутПримечание.Параметры.Примечание = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вид цены маркетплейса: <%1>'"),
							ДанныеЦены.ПредставлениеВидаЦены);
			ТабличныйДокумент.Присоединить(ОбластьАтрибутПримечание);
		КонецЦикла;
	КонецЕсли;

	Возврат ТабличныйДокумент;

КонецФункции

// Возвращает сообщение об отсутствии атрибутов.
// 
// Возвращаемое значение:
//  Строка - форматированная строка.
//
Функция ПолучитьОписаниеНовогоТовараМаркетплейса()

	Значение = НСтр("ru = 'Для нового товара еще не заполнены атрибуты'");
	ОписаниеДанныхТовара = Новый ФорматированнаяСтрока(Значение, Новый Шрифт(, 12, Истина), ЦветаСтиля.ПоясняющийТекст);

	Возврат ОписаниеДанныхТовара;

КонецФункции

// Процедура - Обработка выбора подбор
//
// Параметры:
//  ТаблицаТоваров             - ТаблицаЗначений - см. НоваяТаблицаПубликацииТоваров()
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ОбработкаВыбораПодбор(ТаблицаТоваров, УчетнаяЗапись) Экспорт

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&УчетнаяЗапись КАК УчетнаяЗаписьМаркетплейса,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса, """") КАК ИдентификаторКатегорииМаркетплейса,
	|	ВЫБОР
	|		КОГДА СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса ЕСТЬ NULL
	|			ТОГДА СправУчетныеЗаписи.ИсточникКатегории
	|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
	|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.КатегорииНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
	|		ИНАЧЕ СправУчетныеЗаписи.ИсточникКатегории
	|	КОНЕЦ КАК ИсточникКатегории
	|ПОМЕСТИТЬ ДанныеПубликации
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК СправУчетныеЗаписи
	|		ПО ТаблицаТоваров.УчетнаяЗаписьМаркетплейса = СправУчетныеЗаписи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
	|		ПО ТаблицаТоваров.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура
	|			И ТаблицаТоваров.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика
	|			И ТаблицаТоваров.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка
	|			И ТаблицаТоваров.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса
	|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
	|ГДЕ
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТоваров";

	Запрос.Выполнить();

	ПараметрыЗаполненияТоваров = СписокПараметровПодготовкиДанныхПубликуемыхТоваров();
	ПараметрыЗаполненияТоваров.ПолучитьАтрибуты = Истина;
	ПараметрыЗаполненияТоваров.ПолучитьИзображения = Истина;
	ПараметрыЗаполненияТоваров.ОбновитьДанные = Истина;
	ПараметрыЗаполненияТоваров.ПроверитьОшибкиЗаполнения = Истина;
	
    ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПодборТоваров );
    
	ДанныеПубликации = ПодготовитьДанныеПубликуемыхТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполненияТоваров, ПараметрыКонтекст);

	СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon(ДанныеПубликации, ПараметрыКонтекст);

КонецПроцедуры

#КонецОбласти


#Область ПубликацияОбъектов

Функция СостоянияПубликации()

	СостоянияПубликации = Новый Структура;

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Ложь);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'Отправлен на модерацию'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар отправлен на модерацию, получен номер задания публикации'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Отправлен на модерацию'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект отправлен на модерацию вместе с товаром, получен номер задания публикации'"));
	СостоянияПубликации.Вставить("ОтправленНаМодерацию", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Ложь);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'На модерации'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар проходит модерацию'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("НаМодерации", ДанныеСостояния); 

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Истина);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'Не создан на витрине'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар не продается, т.к. не прошел модерацию'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("НеСоздан", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Истина);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'Не обновлен'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар продается, но не обновлен'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("НеОбновлен", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Истина);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'Готов к продаже'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар готов к продаже'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("ГотовКПродаже", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Истина);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'На модерации'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар проходит модерацию'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Отправлен на модерацию'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект отправлен на модерацию'"));
	СостоянияПубликации.Вставить("ОбъектПубликацииНаМодерации", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Истина);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'Не обновлен'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар продается, но не обновлен'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Не загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект не загружен'"));
	СостоянияПубликации.Вставить("ОбъектПубликацииЗагруженСОшибкой", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации", Истина);
	ДанныеСостояния.Вставить("Состояние", НСтр("ru = 'Готов к продаже'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния", НСтр("ru = 'Товар готов к продаже'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации", НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен'"));
	СостоянияПубликации.Вставить("ОбъектПубликацииЗагружен", ДанныеСостояния);

	ДанныеСостояния = Новый Структура;
	ДанныеСостояния.Вставить("Статус",                             ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками"));
	ДанныеСостояния.Вставить("ОчищатьЗаданиеПубликации",           Истина);
	ДанныеСостояния.Вставить("Состояние",                          НСтр("ru = 'Не продается'"));
	ДанныеСостояния.Вставить("ОписаниеСостояния",                  НСтр("ru = 'Товар не продается из-за нарушений правил площадки'"));
	ДанныеСостояния.Вставить("СтатусОбъектаПубликации",            ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен"));
	ДанныеСостояния.Вставить("СостояниеОбъектаПубликации",         НСтр("ru = 'Загружен'"));
	ДанныеСостояния.Вставить("ОписаниеСостоянияОбъектаПубликации", НСтр("ru = 'Объект загружен вместе с товаром'"));
	СостоянияПубликации.Вставить("НеПродается", ДанныеСостояния);

	Возврат СостоянияПубликации;

КонецФункции

// Определяет данные соответствия состояний публикации.
//
// Возвращаемое значение:
//   Соответствие - данные о соответствии состояний публикации. Ключ определяет тип статуса публикации, значение - состояние публикации,
//     см. ИнтеграцияСМаркетплейсомOzonСервер.СостоянияПубликации.
//
Функция СоответствиеСостоянийПубликации()

	СостоянияПубликации             = СостоянияПубликации();
	СоответствиеСостоянийПубликации = Новый Соответствие;

	// Статус при проверке номера задания публикации товаров.
	СоответствиеСостоянийПубликации.Вставить("pending",  СостоянияПубликации.ОтправленНаМодерацию);
	СоответствиеСостоянийПубликации.Вставить("failed",   СостоянияПубликации.НеСоздан);
	СоответствиеСостоянийПубликации.Вставить("imported", СостоянияПубликации.НаМодерации);

	// Статус при проверке статуса загрузки изображения.
	СоответствиеСостоянийПубликации.Вставить("imported_object", СостоянияПубликации.ОбъектПубликацииНаМодерации);
	СоответствиеСостоянийПубликации.Вставить("uploaded_object", СостоянияПубликации.ОбъектПубликацииЗагружен);
	СоответствиеСостоянийПубликации.Вставить("failed_object",   СостоянияПубликации.ОбъектПубликацииЗагруженСОшибкой);

	// Статус при получении информации о товаре.
	СоответствиеСостоянийПубликации.Вставить("обновляем_товар",                  СостоянияПубликации.НаМодерации);
	СоответствиеСостоянийПубликации.Вставить("создаем_товар",                    СостоянияПубликации.НаМодерации);
	СоответствиеСостоянийПубликации.Вставить("на_модерации",                     СостоянияПубликации.НаМодерации);
	СоответствиеСостоянийПубликации.Вставить("не_обновлен",                      СостоянияПубликации.НеОбновлен);
	СоответствиеСостоянийПубликации.Вставить("обновление_отклонено_модератором", СостоянияПубликации.НеОбновлен);
	СоответствиеСостоянийПубликации.Вставить("нет_на_складе",                    СостоянияПубликации.ГотовКПродаже);
	СоответствиеСостоянийПубликации.Вставить("не_создан",                        СостоянияПубликации.НеСоздан);
	СоответствиеСостоянийПубликации.Вставить("не_прошел_модерацию",              СостоянияПубликации.НеСоздан);
	СоответствиеСостоянийПубликации.Вставить("продается",                        СостоянияПубликации.ГотовКПродаже);
	СоответствиеСостоянийПубликации.Вставить("не_продается",                     СостоянияПубликации.НеПродается);
	СоответствиеСостоянийПубликации.Вставить("убран_из_продажи",                 СостоянияПубликации.НеПродается);

	Возврат СоответствиеСостоянийПубликации;

КонецФункции

Функция НовыйСписокСвойствТовараДляПубликации()

	ДанныеПоАтрибутам = Новый Структура;

	// Основные свойства товара.
	ДанныеПоАтрибутам.Вставить("offer_id", "");
	ДанныеПоАтрибутам.Вставить("name", "");

	ДанныеПоАтрибутам.Вставить("vat", "");
	ДанныеПоАтрибутам.Вставить("currency_code", "");
	ДанныеПоАтрибутам.Вставить("category_id", 0);

	ДанныеПоАтрибутам.Вставить("barcode", "");
	ДанныеПоАтрибутам.Вставить("service_type", "IS_CODE_SERVICE");

	// Данные по упаковке.
	ДанныеПоАтрибутам.Вставить("weight_unit", "");
	ДанныеПоАтрибутам.Вставить("weight", 0);
	ДанныеПоАтрибутам.Вставить("dimension_unit", "");
	ДанныеПоАтрибутам.Вставить("depth", 0);
	ДанныеПоАтрибутам.Вставить("height", 0);
	ДанныеПоАтрибутам.Вставить("width", 0);

	// Список атрибутов
	ДанныеПоАтрибутам.Вставить("attributes", Новый Массив);
	ДанныеПоАтрибутам.Вставить("complex_attributes", Новый Массив);

	// Изображения
	ДанныеПоАтрибутам.Вставить("primary_image", "");
	ДанныеПоАтрибутам.Вставить("images", Новый Массив);

	// Цены
	ДанныеПоАтрибутам.Вставить("old_price", "");
	ДанныеПоАтрибутам.Вставить("price", "");
	ДанныеПоАтрибутам.Вставить("min_price", "");
	ДанныеПоАтрибутам.Вставить("premium_price", "");

	Возврат ДанныеПоАтрибутам;

КонецФункции

Функция АтрибутыТовараДляПубликации(ДанныеТовара, УчетнаяЗапись, ТокенДоступа = "")

	ДанныеДляПубликации = ДанныеТовара.ДанныеДляПубликации;

	ДанныеПоАтрибутам = НовыйСписокСвойствТовараДляПубликации();

	// Основные свойства товара.
	ДанныеПоАтрибутам.offer_id = ДанныеДляПубликации.ИдентификаторПубликации;
	ДанныеПоАтрибутам.name = ДанныеДляПубликации.НаименованиеОбъектаМаркетплейса;

	ДанныеПоАтрибутам.vat = ЧислоВСтроку(ДанныеДляПубликации.СтавкаНДС / 100, Истина);
	ДанныеПоАтрибутам.currency_code = ДанныеДляПубликации.КодВалюты;
	ДанныеПоАтрибутам.category_id = ДанныеДляПубликации.ИдентификаторКатегорииМаркетплейса;

	ДанныеПоАтрибутам.barcode = ДанныеТовара.ДанныеДляПубликации.Штрихкод;
	ДанныеПоАтрибутам.service_type = "IS_CODE_SERVICE";

	// Данные по упаковке.
	ДанныеПоАтрибутам.weight_unit = ДанныеДляПубликации.ВесогабаритыУпаковки.ЕдиницаВеса;
	ДанныеПоАтрибутам.weight = ДанныеДляПубликации.ВесогабаритыУпаковки.ВесТовараВУпаковке;
	ДанныеПоАтрибутам.dimension_unit = ДанныеДляПубликации.ВесогабаритыУпаковки.ЕдиницаГабаритов;
	ДанныеПоАтрибутам.depth = ДанныеДляПубликации.ВесогабаритыУпаковки.Глубина;
	ДанныеПоАтрибутам.height = ДанныеДляПубликации.ВесогабаритыУпаковки.Высота;
	ДанныеПоАтрибутам.width = ДанныеДляПубликации.ВесогабаритыУпаковки.Ширина;

	// Заполнение атрибутов товара.
	МассивДанныхПоАтрибутам = Новый Массив;
	МассивДанныхПоКомплекснымАтрибутам = Новый Массив;

	ИдентификаторАтрибута = "";
	КомплексныйАтрибут = Ложь;

	СлужебныеАтрибуты = СлужебныеАтрибуты();

	СтруктураАтрибута = Новый Структура;

	Для Каждого СтрокаЗначенияРеквизита Из ДанныеТовара.ДанныеОбъекта Цикл
		Если СлужебныеАтрибуты.Найти(СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса <> ИдентификаторАтрибута Тогда
			Если ЗначениеЗаполнено(ИдентификаторАтрибута) Тогда
				МассивДанныхПоАтрибутам.Добавить(СтруктураАтрибута);

				Если КомплексныйАтрибут Тогда
					МассивДанныхПоКомплекснымАтрибутам.Добавить(СтруктураАтрибута);
				КонецЕсли;
			КонецЕсли;

			СтруктураАтрибута = Новый Структура;
			СтруктураАтрибута.Вставить("complex_id",
					СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаЗначенияРеквизита.ИдентификаторРодителяАтрибутаМаркетплейса));
			СтруктураАтрибута.Вставить("id",
					СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса));
			СтруктураАтрибута.Вставить("values", Новый Массив);

			ИдентификаторАтрибута = СтрокаЗначенияРеквизита.ИдентификаторАтрибутаМаркетплейса;
			КомплексныйАтрибут = ЗначениеЗаполнено(СтрокаЗначенияРеквизита.ИдентификаторРодителяАтрибутаМаркетплейса);
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаЗначенияРеквизита.ЗначениеАтрибутаМаркетплейса) Тогда 
			СтруктураЗначенияАтрибута = Новый Структура;
			СтруктураЗначенияАтрибута.Вставить("dictionary_value_id",
					СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаЗначенияРеквизита.ИдентификаторЗначенияАтрибутаМаркетплейса));

			ЗначениеАтрибутаМаркетплейса =
					ПривестиЗначениеКТипуOzon(СтрокаЗначенияРеквизита.ЗначениеАтрибутаМаркетплейса, СтрокаЗначенияРеквизита.ТипЗначенияАтрибута);
			СтруктураЗначенияАтрибута.Вставить("value", ЗначениеАтрибутаМаркетплейса);

			СтруктураАтрибута.values.Добавить(СтруктураЗначенияАтрибута);
		КонецЕсли
	КонецЦикла;

	Если ЗначениеЗаполнено(ИдентификаторАтрибута) Тогда
		МассивДанныхПоАтрибутам.Добавить(СтруктураАтрибута);

		Если КомплексныйАтрибут Тогда
			МассивДанныхПоКомплекснымАтрибутам.Добавить(СтруктураАтрибута);
		КонецЕсли;
	КонецЕсли;

	ДанныеПоАтрибутам.attributes = МассивДанныхПоАтрибутам;
	ДанныеПоАтрибутам.complex_attributes = МассивДанныхПоКомплекснымАтрибутам;

	// Изображения товара.
	ОсновноеИзображение = "";
	ПерваяПубличнаяСсылка = "";
	МассивИзображений = Новый Массив;

	Отбор = Новый Структура("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение"));
	СтрокиИзображений = ДанныеТовара.ОбъектыПубликации.НайтиСтроки(Отбор);

	ОтбиратьОсновноеИзображение = (СтрокиИзображений.Количество() > 1);
	
	СтатусКПубликации = ПредопределенноеЗначение( "Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации" );
	Для Каждого СтрокаИзображения Из СтрокиИзображений Цикл
	
		ПубличнаяСсылка = СтрокаИзображения.ПредставлениеОбъектаМаркетплейса;
		
		Если СтрокаИзображения.Статус <> СтатусКПубликации Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ПубличнаяСсылка) Тогда
		
			// Генерация ссылки URL на Яндекс.Диск .
			Если ПустаяСтрока(ТокенДоступа) Тогда
				ТокенДоступа = ИнтеграцияСМаркетплейсамиСервер.ПолучитьТокенДоступаЯндексДиск(УчетнаяЗапись);
			КонецЕсли;

			ДанныеПубличнойСсылки = ИнтеграцияСМаркетплейсамиСервер.ЗагрузитьФайлНаСервис(ТокенДоступа, СтрокаИзображения.ОбъектПубликации);
			
			Если ДанныеПубличнойСсылки.Отказ = Истина Тогда
				// файл не загружен в Яндекс диск
				Продолжить;
			КонецЕсли;
			
			ПубличнаяСсылка = ДанныеПубличнойСсылки.ПубличнаяСсылка;
			СтрокаИзображения.ПредставлениеОбъектаМаркетплейса = ПубличнаяСсылка;
			СтрокаИзображения.ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", ДанныеПубличнойСсылки.ПутьКФайлуНаЯДиске);
			
		КонецЕсли;

		Если Не ПустаяСтрока(ПубличнаяСсылка) Тогда
			Если ПустаяСтрока(ПерваяПубличнаяСсылка) Тогда
				ПерваяПубличнаяСсылка = ПубличнаяСсылка;
			КонецЕсли;

			Если ОтбиратьОсновноеИзображение И ПустаяСтрока(ОсновноеИзображение)
				И СтрокаИзображения.ДанныеОбъекта.ЭтоОсновноеИзображение Тогда
				ОсновноеИзображение = ПубличнаяСсылка;
			ИначеЕсли Не ОтбиратьОсновноеИзображение Тогда
				ОсновноеИзображение = ПубличнаяСсылка;
			Иначе
				МассивИзображений.Добавить(ПубличнаяСсылка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Если ПустаяСтрока(ОсновноеИзображение) И Не ПустаяСтрока(ПерваяПубличнаяСсылка) Тогда
		ОсновноеИзображение = ПерваяПубличнаяСсылка;
		ИндексОсновногоИзображения = МассивИзображений.Найти(ПерваяПубличнаяСсылка);
		МассивИзображений.Удалить(ИндексОсновногоИзображения);
	ИначеЕсли ПустаяСтрока(ОсновноеИзображение) Тогда
		Шаблон = НСтр("ru = 'Не удалось получить публичную ссылку на основное изображение товара %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ДанныеТовара.Номенклатура);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);

		Возврат НовыйСписокСвойствТовараДляПубликации();
	КонецЕсли;

	ДанныеПоАтрибутам.primary_image = ОсновноеИзображение;
	ДанныеПоАтрибутам.images = МассивИзображений;

	// Цены товара.
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");

	ИнформацияЦеныДоСкидок = Неопределено;
	ИнформацияЦеныСУчетомСкидок = Неопределено;
	ИнформацияЦеныМинимальная = Неопределено;
	ИнформацияЦеныПремиум = Неопределено;

	ДанныеДляПубликации.Цены.Свойство("ВидЦеныДоСкидок", ИнформацияЦеныДоСкидок);
	ДанныеДляПубликации.Цены.Свойство("ВидЦеныСУчетомСкидок", ИнформацияЦеныСУчетомСкидок);
	ДанныеДляПубликации.Цены.Свойство("ВидЦеныМинимальныхЦен", ИнформацияЦеныМинимальная);
	ДанныеДляПубликации.Цены.Свойство("ВидЦеныПремиум", ИнформацияЦеныПремиум);

	Цена_old_price = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныДоСкидок, "Цена", 0);
	Цена_price = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныСУчетомСкидок, "Цена", 0);
	Цена_min_price = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныМинимальная, "Цена", 0);
	Цена_premium_price = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныПремиум, "Цена", 0);

	ДанныеПоАтрибутам.old_price = ЧислоВСтроку(Цена_old_price, Истина);
	ДанныеПоАтрибутам.price = ЧислоВСтроку(Цена_price, Истина);
	ДанныеПоАтрибутам.min_price = ЧислоВСтроку(Цена_min_price, Истина);
	ДанныеПоАтрибутам.premium_price = ЧислоВСтроку(Цена_premium_price, Истина);

	Возврат ДанныеПоАтрибутам;

КонецФункции

Процедура СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon(ДанныеПубликации, ПараметрыКонтекст = Неопределено) Экспорт

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено() Тогда
		ДанныеПубликацииСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ДанныеПубликации );
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon: Начало:'") + Символы.ПС
		+ НСтр("ru = 'Данные публикации:'") + Символы.ПС + ДанныеПубликацииСтр
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ЛогПараметры = ПараметрыКонтекст;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, , , ЛогПараметры );
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировкиДанных.ИсточникДанных = ДанныеПубликации;
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("УчетнаяЗаписьМаркетплейса", "УчетнаяЗаписьМаркетплейса");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Упаковка", "Упаковка");
		БлокировкаДанных.Заблокировать();

		ВидОбъекта = Неопределено;
		ОбъектПубликации = Неопределено;
        
        СтатусКПубликации = ПредопределенноеЗначение( "Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации" );
        
		Для Каждого ДанныеТовара Из ДанныеПубликации Цикл
		
			// Создание записи по товару
			Если ДанныеТовара.ОпубликоватьТовар Тогда
				ВидОбъекта = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");
				ОбъектПубликации = ДанныеТовара.Номенклатура;

				Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи(); 
				Запись.ВидОбъектаМаркетплейса = ВидОбъекта;
				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
				Запись.ОбъектПубликации = Неопределено;
				Запись.Прочитать();

				Если Запись.Выбран() Тогда
					Запись.ДатаОбновления = ТекущаяДатаСеанса();
				Иначе
					Запись.ДатаСоздания = ТекущаяДатаСеанса();
					Запись.ВидОбъектаМаркетплейса = ВидОбъекта;
					Запись.ПредставлениеОбъектаМаркетплейса = ДанныеТовара.ДанныеДляПубликации.НаименованиеОбъектаМаркетплейса;
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара);
				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара.ДанныеДляПубликации);
				Запись.Категория = ДанныеТовара.Категория1С;
				Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
				Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеТовара.ДанныеОбъекта);
                
                Если Не Запись.Выбран() Тогда
                	ИнтеграцияСМаркетплейсомOzonСервер.ЗаполнитьНастройкиВидовДанныхДляВыгрузкиПоНастройкеУчетнойЗаписи( Запись );
                КонецЕсли;
                
				Запись.Записать();
			КонецЕсли;

			// Создание записей по изображениям
			ИндексИзображенияВКоллекции = 0;
			Для Каждого ДанныеОбъектаПубликации Из ДанныеТовара.ОбъектыПубликации Цикл
				ОбъектПубликации = ДанныеТовара.Номенклатура;

				Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
				ЗаполнитьЗначенияСвойств(Запись, ДанныеОбъектаПубликации);
				Запись.Прочитать();
				
				Если Не Запись.Выбран() Тогда
					Запись.ДатаСоздания = ТекущаяДатаСеанса();
				Иначе
					Запись.ДатаОбновления = ТекущаяДатаСеанса();
					Запись.Состояние = "";
					Запись.ОписаниеСостояния = "";
					Запись.ЗаданиеПубликации = "";
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(Запись, ДанныеТовара, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
				ЗаполнитьЗначенияСвойств(Запись, ДанныеОбъектаПубликации);
				Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъектаПубликации.ДанныеОбъекта);
                
                
                Если ДанныеОбъектаПубликации.Статус = СтатусКПубликации Тогда
                	ИндексИзображенияВКоллекцииСтрока = ЧислоВСтроку(ИндексИзображенияВКоллекции, Истина);
                	// ИдентификаторОбъектаМаркетплейса = Индекс изображения (сортировка) строка, начинается с "0" по
                	Запись.ИдентификаторОбъектаМаркетплейса = ИндексИзображенияВКоллекцииСтрока; 
                	
                	ИндексИзображенияВКоллекции = ИндексИзображенияВКоллекции + 1;
                КонецЕсли;
                
				Запись.Записать();
			КонецЦикла;
		КонецЦикла;

		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено() Тогда
			ЛогКомментарий = НСтр("ru = 'СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon: Окончание'");
			ЛогПараметры = ПараметрыКонтекст;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, , , ЛогПараметры );
		КонецЕсли;

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();

		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонОшибки = НСтр("ru = 'Не удалось записать %1 ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				ВидОбъекта, ОбъектПубликации);
				
		ТекстОшибки = ТекстОшибки + ":" + ПодробноеПредставлениеОшибки;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено() Тогда
			ЛогКомментарий = НСтр("ru = 'СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon: Ошибка:'") + " " + ТекстОшибки;
			ЛогПараметры = ПараметрыКонтекст;
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, , Истина, ЛогПараметры );
		КонецЕсли;
		
	КонецПопытки;

КонецПроцедуры

Функция ВыполнитьПубликациюТоваровВСервисе(МассивДанныхПубликации, УчетнаяЗапись, ПараметрыКонтекст = Неопределено )

	ТекстЗапроса = "/v2/product/import";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("items", МассивДанныхПубликации);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаТоваровИз1С );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, , ПараметрыКонтекст);

	Возврат РезультатЗапроса.Результат;

КонецФункции

Функция ВыполнитьПубликациюТоваров(УчетнаяЗаписьМаркетплейса, ИдентификаторыПубликации = Неопределено, Знач ЛимитПозицийНаИтерацию = 100) Экспорт

	ПараметрыКонтекст = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаТоваровИз1С" ) );
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
		ИдентификаторыПубликацииСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ИдентификаторыПубликации );
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьПубликациюТоваров: Отправка на модерацию:'") + Символы.ПС
		+ НСтр("ru = 'Идентификаторы публикации:'") + Символы.ПС + ИдентификаторыПубликацииСтр 
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ЛогПараметры = ПараметрыКонтекст;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса, , ЛогПараметры );
	КонецЕсли;

	Если ЛимитПозицийНаИтерацию > 100 Тогда
		ЛимитПозицийНаИтерацию = 100;
	КонецЕсли;

	Результат = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();

	ДанныеСчетчикаВыгрузки = ПолучитьСчетчикВыгрузки(УчетнаяЗаписьМаркетплейса);
	ОстатокЗаписей = ДанныеСчетчикаВыгрузки.Остаток;

	Если ОстатокЗаписей = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Превышен лимит публикации товаров в сутки.'");
		Результат.КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПубликацииТоваров;
		Результат.ОписаниеОшибки = ТекстОшибки;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗаписьМаркетплейса, Истина );
		Возврат Результат;
	КонецЕсли;

	ТаблицаПроверенныхПозиций = Новый ТаблицаЗначений;
	ТаблицаПроверенныхПозиций.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	ТаблицаПроверенныхПозиций.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПроверенныхПозиций.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПроверенныхПозиций.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаПроверенныхПозиций.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПроверенныхПозиций.Номенклатура КАК Номенклатура,
		|	ТаблицаПроверенныхПозиций.Характеристика КАК Характеристика,
		|	ТаблицаПроверенныхПозиций.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ТаблицаПроверенныхПозиций
		|ИЗ
		|	&ТаблицаПроверенныхПозиций КАК ТаблицаПроверенныхПозиций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликацииОбъектовМаркетплейсаOzon.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.КатегорииНоменклатуры)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|		ИНАЧЕ СправУчетныеЗаписи.ИсточникКатегории
		|	КОНЕЦ КАК ИсточникКатегории
		|ПОМЕСТИТЬ ДанныеПубликации
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК СправУчетныеЗаписи
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = СправУчетныеЗаписи.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПроверенныхПозиций КАК ТаблицаПроверенныхПозиций
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = ТаблицаПроверенныхПозиций.УчетнаяЗаписьМаркетплейса
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = ТаблицаПроверенныхПозиций.Номенклатура
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = ТаблицаПроверенныхПозиций.Характеристика
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = ТаблицаПроверенныхПозиций.Упаковка
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И ТаблицаПроверенныхПозиций.Номенклатура ЕСТЬ NULL
		|	И ВЫБОР
		|			КОГДА СтатусыПубликацииОбъектовМаркетплейсаOzon.ВыгружатьПоНастройкамУчетнойЗаписи
		|				ТОГДА СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса.ВыгружатьОписаниеТовара
		|			ИНАЧЕ СтатусыПубликацииОбъектовМаркетплейсаOzon.ВыгружатьОписаниеТовара
		|		КОНЕЦ
		|	И &УсловиеПоИдентификаторамПубликации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ДанныеПубликации.Номенклатура КАК Номенклатура,
		|	ДанныеПубликации.Характеристика КАК Характеристика,
		|	ДанныеПубликации.Упаковка КАК Упаковка
		|ИЗ
		|	ДанныеПубликации КАК ДанныеПубликации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПроверенныхПозиций";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "100", Формат(ЛимитПозицийНаИтерацию, "ЧГ="));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьМаркетплейса);

	ПроверятьСоставАтрибутов = Ложь;

	Если ТипЗнч(ИдентификаторыПубликации) = Тип("Массив") И ИдентификаторыПубликации.Количество() > 0 Тогда
		ПроверятьСоставАтрибутов = Ложь;
		ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "&УсловиеПоИдентификаторамПубликации",
				"СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации В (&ИдентификаторыПубликации)");
		Запрос.УстановитьПараметр("ИдентификаторыПубликации", ИдентификаторыПубликации);
	Иначе
		ТекстЗапроса = СтрЗаменить( ТекстЗапроса, "&УсловиеПоИдентификаторамПубликации", "ИСТИНА" );
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;

	КоличествоОпубликованныхТоваров = 0;
	ЕстьЗаписиКПубликации = Ложь;

	СостоянияПубликации = СостоянияПубликации();

	ВидОбъектаМаркетплейсаТовар = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");
	ВидОбъектаМаркетплейсаИзображение = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение");
	СтатусЗначениеНеИспользуется = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется");

	ТокенДоступа = ИнтеграцияСМаркетплейсамиСервер.ПолучитьТокенДоступаЯндексДиск(УчетнаяЗаписьМаркетплейса);
    
    КоличествоПубликуемыхЭлементов = 0;
    
	Пока ОстатокЗаписей > 0 Цикл
		Если ОстатокЗаписей < ЛимитПозицийНаИтерацию Тогда
			ЛимитПозицийНаИтерацию = ОстатокЗаписей;
		КонецЕсли;

		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаПроверенныхПозиций", ТаблицаПроверенныхПозиций);

		НачатьТранзакцию();
		Попытка
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);

			Если РезультатЗапроса.Пустой()Тогда
				ОтменитьТранзакцию();
				Прервать;
			Иначе
				ВыборкаДанных = РезультатЗапроса.Выбрать();
				Если ВыборкаДанных.Количество() = 0 Тогда
					ОтменитьТранзакцию();
					Прервать;
				Иначе
					ОстатокЗаписей = ОстатокЗаписей - ВыборкаДанных.Количество();
					ЕстьЗаписиКПубликации = Истина;
				КонецЕсли;
			КонецЕсли;

			// Блокировка изменения публикуемых товаров.
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВидОбъектаМаркетплейсаТовар);
			ЭлементБлокировкиДанных.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("УчетнаяЗаписьМаркетплейса", "УчетнаяЗаписьМаркетплейса");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
			ЭлементБлокировкиДанных.ИспользоватьИзИсточникаДанных("Упаковка", "Упаковка");
			БлокировкаДанных.Заблокировать();

			СписокПараметров = СписокПараметровПодготовкиДанныхПубликуемыхТоваров();
			СписокПараметров.ПолучитьАтрибуты = Истина;
			СписокПараметров.ДляПубликации = Истина;
			СписокПараметров.ПроверятьСоставАтрибутов = ПроверятьСоставАтрибутов;
			СписокПараметров.ПолучитьИзображения = Истина;
			СписокПараметров.ПроверитьОшибкиЗаполнения = Истина;

			ДанныеПубликации = ПодготовитьДанныеПубликуемыхТоваров(МенеджерВременныхТаблиц, СписокПараметров, ПараметрыКонтекст);

			МассивДанныхПубликации = Новый Массив;
			КоличествоПубликуемыхЭлементов = 0;
			
			Для Каждого СтрокаПубликации Из ДанныеПубликации Цикл
				НоваяСтрока = ТаблицаПроверенныхПозиций.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПубликации);

				Если СтрокаПубликации.ЕстьКритичныеОшибки Тогда
					Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
					Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар;
					ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
					Запись.ОбъектПубликации = Неопределено;
					Запись.Прочитать();

					Если Запись.Выбран() И Запись.ОписаниеОшибки <> СтрокаПубликации.ОписаниеОшибки Тогда
						ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "КодОшибки, ОписаниеОшибки");
						Запись.Записать();
					КонецЕсли;
				Иначе
					АтрибутыТовара = АтрибутыТовараДляПубликации(СтрокаПубликации, УчетнаяЗаписьМаркетплейса, ТокенДоступа);

					Если АтрибутыТовара.Свойство("ОписаниеОшибки") Тогда
						Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
						Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар; 
						ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
						Запись.ОбъектПубликации = Неопределено;
						Запись.Прочитать();

						Если Запись.Выбран() И Не ПустаяСтрока(АтрибутыТовара.ОписаниеОшибки)
							И Запись.ОписаниеОшибки <> АтрибутыТовара.ОписаниеОшибки Тогда
							Запись.КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаЗаполненияДанных;
							Запись.ОписаниеОшибки = АтрибутыТовара.ОписаниеОшибки;
							Запись.Записать();

							Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + ?(ПустаяСтрока(Результат.ОписаниеОшибки), "", Символы.ПС)
									+ АтрибутыТовара.ОписаниеОшибки;
						КонецЕсли;
					ИначеЕсли Не ПустаяСтрока(АтрибутыТовара.offer_id) Тогда
						МассивДанныхПубликации.Добавить(АтрибутыТовара);
						КоличествоПубликуемыхЭлементов = КоличествоПубликуемыхЭлементов + 1;
					КонецЕсли;

					Если КоличествоПубликуемыхЭлементов >= ЛимитПозицийНаИтерацию Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Если КоличествоПубликуемыхЭлементов > 0 Тогда
				Ответ = ВыполнитьПубликациюТоваровВСервисе(МассивДанныхПубликации, УчетнаяЗаписьМаркетплейса);

				Если Ответ <> Неопределено Тогда
					НомерЗаданияПубликации = Ответ[ "task_id" ];
					НомерЗаданияПубликацииСтрокой = ЧислоВСтроку( НомерЗаданияПубликации );

					КоличествоОпубликованныхТоваров = КоличествоОпубликованныхТоваров + ДанныеПубликации.Количество();

					СостояниеТовара = СостоянияПубликации.ОтправленНаМодерацию;
					ДатаОбновления = ТекущаяДатаСеанса();

					Отбор = Новый Структура("ЕстьКритичныеОшибки", Ложь);
					СтрокиИзмененияСтатуса = ДанныеПубликации.НайтиСтроки(Отбор);
					Для Каждого СтрокаПубликации Из СтрокиИзмененияСтатуса Цикл
					
						ИзображенияСоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzonПоНоменклатуре( СтрокаПубликации.Номенклатура );
					
						Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
						Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар; 
						ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
						Запись.ОбъектПубликации = Неопределено;
						Запись.Прочитать();

						Если Запись.Выбран() Тогда
							Запись.ЗаданиеПубликации = НомерЗаданияПубликацииСтрокой;

							Запись.КодОшибки = "";
							Запись.ОписаниеОшибки = "";
							Запись.Статус = СостояниеТовара.Статус;
							Запись.Состояние = СостояниеТовара.Состояние;
							Запись.ОписаниеСостояния = СостояниеТовара.ОписаниеСостояния; 

							ИнформацияЦеныДоСкидок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаПубликации.ДанныеДляПубликации.Цены, "ВидЦеныДоСкидок", ИнформацияЦеныДоСкидок);
							ИнформацияЦеныСУчетомСкидок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаПубликации.ДанныеДляПубликации.Цены, "ВидЦеныСУчетомСкидок", ИнформацияЦеныСУчетомСкидок);
							ИнформацияЦеныМинимальная = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаПубликации.ДанныеДляПубликации.Цены, "ВидЦеныМинимальныхЦен", ИнформацияЦеныМинимальная);

							Запись.ЦенаДоСкидки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныДоСкидок, "Цена", 0);
							Запись.ЦенаСоСкидкой = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныСУчетомСкидок, "Цена", 0);
							Запись.МинимальнаяЦена = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияЦеныМинимальная, "Цена", 0);
							Запись.ДатаВыгрузкиЦенПродажи = ДатаОбновления;

							Запись.Записать();
						КонецЕсли;

						Отбор = Новый Структура("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение"));
						СтрокиИзображений = СтрокаПубликации.ОбъектыПубликации.НайтиСтроки(Отбор);
						// запись статусов Изображений
						Для Каждого СтрокаИзображения Из СтрокиИзображений Цикл 
							Если СтрокаИзображения.Статус = СтатусЗначениеНеИспользуется Тогда
								Продолжить;
							КонецЕсли;
							
							Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
							Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаИзображение;
							ЗаполнитьЗначенияСвойств(Запись, СтрокаПубликации, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
							Запись.ОбъектПубликации = СтрокаИзображения.ОбъектПубликации;
							Запись.Прочитать();

							Если Запись.Выбран() Тогда
								ЗаполнитьПубличнуюСсылкуИзображений = (Запись.ПредставлениеОбъектаМаркетплейса <> СтрокаИзображения.ПредставлениеОбъектаМаркетплейса);

								Если Не ЗаполнитьПубличнуюСсылкуИзображений Тогда
									// Запись статуса для изображения конкретного товара.
									Запись.ДанныеОбъекта = Новый ХранилищеЗначения(СтрокаИзображения.ДанныеОбъекта);
									Запись.ЗаданиеПубликации = НомерЗаданияПубликацииСтрокой;
									
									Запись.Статус = СостояниеТовара.СтатусОбъектаПубликации;
									Запись.Состояние = СостояниеТовара.СостояниеОбъектаПубликации;
									Запись.ОписаниеСостояния = СостояниеТовара.ОписаниеСостоянияОбъектаПубликации;
									
									Запись.Записать();
								Иначе
									// Запись публичной ссылки URL изображения для всех товаров с этим изображением.
									БлокировкаДанных = Новый БлокировкаДанных;
									ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
									ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
									ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВидОбъектаМаркетплейсаИзображение);
									ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", СтрокаПубликации.Номенклатура);
									ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", СтрокаИзображения.ОбъектПубликации);
									БлокировкаДанных.Заблокировать();

									НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
									НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗаписьМаркетплейса);
									НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВидОбъектаМаркетплейсаИзображение);
									НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаПубликации.Номенклатура);
									НаборЗаписей.Отбор.ОбъектПубликации.Установить(СтрокаИзображения.ОбъектПубликации);
									НаборЗаписей.Прочитать();

									Для Каждого Запись Из НаборЗаписей Цикл
										Запись.ПредставлениеОбъектаМаркетплейса = СтрокаИзображения.ПредставлениеОбъектаМаркетплейса;//URL

										Если Запись.Характеристика = СтрокаПубликации.Характеристика
											И Запись.Упаковка = СтрокаПубликации.Упаковка Тогда
											// Запись статуса для изображения конкретного товара.
											Запись.ЗаданиеПубликации = НомерЗаданияПубликацииСтрокой;

											Запись.Статус = СостояниеТовара.СтатусОбъектаПубликации;
											Запись.Состояние = СостояниеТовара.СостояниеОбъектаПубликации;
											Запись.ОписаниеСостояния = СостояниеТовара.ОписаниеСостоянияОбъектаПубликации;

											Запись.ДанныеОбъекта = Новый ХранилищеЗначения(СтрокаИзображения.ДанныеОбъекта);
										Иначе
											ДанныеОбъекта = Запись.ДанныеОбъекта.Получить();
											ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", СтрокаИзображения.ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок);
											Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъекта);
										КонецЕсли;
									КонецЦикла;

									НаборЗаписей.Записать();
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Прервать;
			
		КонецПопытки;

		Если КоличествоПубликуемыхЭлементов >= ЛимитПозицийНаИтерацию Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЕстьЗаписиКПубликации И КоличествоОпубликованныхТоваров = 0 Тогда
		Результат.КодОшибки = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПубликацииТоваров;
		Результат.ОписаниеОшибки =
				НСтр("ru = 'Не найдены товары, доступные для публикации. Необходимо проверить наличие ошибок в товарах к публикации.'");
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция СобратьОписаниеОшибокСтатусаДобавления(ДанныеОбОшибках)

	ОписаниеОшибок = Новый Структура("КодОшибки, ОписаниеОшибки");

	Если ЗначениеЗаполнено(ДанныеОбОшибках) Тогда
		ШаблонОшибки1 = НСтр("ru = 'Для значения из атрибута <%1> отсутствует действующий сертификат бренда - необходимо добавить сертификат бренда в личном кабинете. Ошибка: %2 (Техническое описание ошибки: %3. Код ошибки: %4 (%5), состояние товара <%6>).'");
		ШаблонОшибки2 = НСтр("ru = 'Обнаружена ошибка в атрибуте <%1>: %2 (Техническое описание ошибки: %3. Код ошибки: %4 (%5), состояние товара <%6>).'");
		ШаблонОшибки3 = НСтр("ru = 'Обнаружена ошибка заполнения данных: %2 (Техническое описание ошибки: %3. Код ошибки: %4 (%5), состояние товара <%6>).'");
		ШаблонОшибки4 = НСтр("ru = 'Обнаружена ошибка в атрибуте <%1>: %2 (Код ошибки: %4 (%5), состояние товара <%6>).'");
		ШаблонОшибки5 = НСтр("ru = 'Обнаружена ошибка заполнения данных: %2 (Код ошибки: %4 (%5), состояние товара <%6>).'");

		МассивКодовОшибок = Новый Массив;
		МассивОписанийОшибок = Новый Массив;

		Для Каждого ДанныеОбОшибке Из ДанныеОбОшибках Цикл
			СтруктураДанныхОбОшибке = Новый Структура;
			СтруктураДанныхОбОшибке.Вставить("code", "");
			СтруктураДанныхОбОшибке.Вставить("message", "");
			СтруктураДанныхОбОшибке.Вставить("attribute_name", "");
			СтруктураДанныхОбОшибке.Вставить("description", "");
			СтруктураДанныхОбОшибке.Вставить("level", "");
			СтруктураДанныхОбОшибке.Вставить("state", "");
			ЗаполнитьЗначенияСвойствИзСервиса(СтруктураДанныхОбОшибке, ДанныеОбОшибке);

			МассивКодовОшибок.Добавить(СтруктураДанныхОбОшибке.code);
			
			ТехническоеОписаниеОшибки = Неопределено;
			СтруктураДанныхОбОшибке.Свойство("message", ТехническоеОписаниеОшибки);

			Если СтрНайти(СтруктураДанныхОбОшибке.code, "brand_in_stop_list") Тогда
				ШаблонОшибки = ШаблонОшибки1;
			ИначеЕсли Не ЗначениеЗаполнено(ТехническоеОписаниеОшибки) Тогда
				ШаблонОшибки = ?(ПустаяСтрока(СтруктураДанныхОбОшибке.attribute_name), ШаблонОшибки5, ШаблонОшибки4);
			Иначе
				ШаблонОшибки = ?(ПустаяСтрока(СтруктураДанныхОбОшибке.attribute_name), ШаблонОшибки3, ШаблонОшибки2);
			КонецЕсли;

			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					СтруктураДанныхОбОшибке.attribute_name,
					СтруктураДанныхОбОшибке.description,
					ТехническоеОписаниеОшибки,
					СтруктураДанныхОбОшибке.code,
					СтруктураДанныхОбОшибке.level,
					СтруктураДанныхОбОшибке.state);

			МассивОписанийОшибок.Добавить(ОписаниеОшибки);
		КонецЦикла;

		ОписаниеОшибок.КодОшибки = СтрСоединить(МассивКодовОшибок, ", ");
		ОписаниеОшибок.ОписаниеОшибки = СтрСоединить(МассивОписанийОшибок, Символы.ПС);
	КонецЕсли;

	Возврат ОписаниеОшибок;

КонецФункции

Функция ВыполнитьПроверкуЗаданияПубликацииТоваровВСервисе(ЗаданиеПубликации, УчетнаяЗаписьМаркетплейса)

	ТекстЗапроса = "/v1/product/import/info";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить( "task_id", ЗаданиеПубликации );

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	
	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПроверкаСтатусаПубликации );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета
	, , ПараметрыКонтекст);

	Возврат РезультатЗапроса.Результат;

КонецФункции

Процедура ВыполнитьПроверкуЗаданияПубликацииТоваров(УчетнаяЗаписьМаркетплейса, ИдентификаторыПубликации = Неопределено)

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗаписьМаркетплейса ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьПроверкуЗаданияПубликацииТоваров:'") + Символы.ПС
		+ НСтр("ru = 'Учетная запись:'") + Символы.ПС + ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( УчетнаяЗаписьМаркетплейса ) 
		+ НСтр("ru = 'Идентификаторы публикации:'") + Символы.ПС + ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ИдентификаторыПубликации ) 
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗаписьМаркетплейса );
	КонецЕсли;

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ЗаданиеПубликации КАК ЗаданиеПубликации
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ЗаданиеПубликации <> """"
		|	И ИСТИНА
		|ИТОГИ ПО
		|	ЗаданиеПубликации";

	Если ТипЗнч(ИдентификаторыПубликации) = Тип("Массив") И ИдентификаторыПубликации.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ИСТИНА",
				"И СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации В (&ИдентификаторыПубликации)");
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗаписьМаркетплейса);
	Запрос.Текст = ТекстЗапроса;

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();  
	
	ВидОбъектаМаркетплейсаТовар = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");

	ВыборкаЗаданийПубликации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаданийПубликации.Следующий() Цикл
		Ответ = ВыполнитьПроверкуЗаданияПубликацииТоваровВСервисе(ВыборкаЗаданийПубликации.ЗаданиеПубликации, УчетнаяЗаписьМаркетплейса);

		Если Ответ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОтветИзСервисаТовары = Ответ[ "items" ];
		
		Если Не ЗначениеЗаполнено( ОтветИзСервисаТовары ) Тогда
			Возврат;
		КонецЕсли;
		
		ВыборкаТоваров = ВыборкаЗаданийПубликации.Выбрать();
		
		Для Каждого ДанныеТовара Из ОтветИзСервисаТовары Цикл
			
			ОтветИзСервисаТоварыStatus = ДанныеТовара[ "status" ];
			ОтветИзСервисаТоварыOffer_id = ДанныеТовара[ "offer_id" ];
			ОтветИзСервисаТоварыProduct_id = ДанныеТовара[ "product_id" ];
			ОтветИзСервисаТоварыErrors = ДанныеТовара[ "errors" ];
			
			ТекущееСостояние = СоответствиеСостоянийПубликации[ ОтветИзСервисаТоварыStatus ];
			
			Если ТекущееСостояние = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаТоваров.Сбросить();
			
			Отбор = Новый Структура("ИдентификаторПубликации", ОтветИзСервисаТоварыOffer_id );
			Если ВыборкаТоваров.НайтиСледующий(Отбор) Тогда 
				ОписаниеОшибок = СобратьОписаниеОшибокСтатусаДобавления( ОтветИзСервисаТоварыErrors );
				
				Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
				Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗаписьМаркетплейса;
				Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар;
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаТоваров, "Номенклатура, Характеристика, Упаковка"); 
				Запись.ОбъектПубликации = Неопределено;
				Запись.Прочитать();
				
				Если Запись.Выбран() Тогда
					Запись.Статус = ТекущееСостояние.Статус;
					Запись.Состояние = ТекущееСостояние.Состояние;
					Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостояния;
					Запись.КодОшибки = ОписаниеОшибок.КодОшибки;
					Запись.ОписаниеОшибки = ОписаниеОшибок.ОписаниеОшибки;
					
					Если ЗначениеЗаполнено( ОтветИзСервисаТоварыProduct_id ) Тогда
						Запись.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку( ОтветИзСервисаТоварыProduct_id );
					КонецЕсли;
					
					Если ТекущееСостояние.ОчищатьЗаданиеПубликации Тогда
						Запись.ЗаданиеПубликации = "";
					КонецЕсли;
					
					Запись.Записать();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция НовыйСписокПараметровТовараДляПолученияОписания()

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("ИдентификаторПубликации", "");
	СписокПараметров.Вставить("ИдентификаторОбъектаМаркетплейса", "");
	СписокПараметров.Вставить("ИдентификаторSKU", "");

	Возврат СписокПараметров;

КонецФункции

Функция ПолучитьИнформациюОТовареВСервисе(ПараметрыТовара, УчетнаяЗапись)

	ТекстЗапроса = "/v2/product/info";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("offer_id", ПараметрыТовара.ИдентификаторПубликации);
	ПараметрыЗапроса.Вставить("product_id", ПараметрыТовара.ИдентификаторОбъектаМаркетплейса);
	ПараметрыЗапроса.Вставить("sku", ПараметрыТовара.ИдентификаторSKU);

	МассивПолейТипаДата = Новый Массив;
	МассивПолейТипаДата.Добавить("created_at");
	МассивПолейТипаДата.Добавить("state_updated_at");

	СлужебныеПараметры = СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата = МассивПолейТипаДата;
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ЗагрузкаТоваровВ1С );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, , ПараметрыКонтекст);

	Возврат РезультатЗапроса.Результат;

КонецФункции

Функция ПолучитьОписаниеТовараВСервисе(ПараметрыТовара, УчетнаяЗапись)

	ТекстЗапроса = "/v1/product/info/description";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("offer_id", ПараметрыТовара.ИдентификаторПубликации);
	ПараметрыЗапроса.Вставить("product_id", ПараметрыТовара.ИдентификаторОбъектаМаркетплейса);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.Прочее );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, , ПараметрыКонтекст);

	Возврат РезультатЗапроса.Результат;

КонецФункции

Процедура ВыполнитьОбновлениеИнформацииПоТоварам(УчетнаяЗапись)

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьОбновлениеИнформацииПоТоварам:'") + Символы.ПС
		+ НСтр("ru = 'Учетная запись:'") + Символы.ПС + ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( УчетнаяЗапись ) 
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись );
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ВЫБОР
		|		КОГДА СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторFBOSKU = """"
		|			ТОГДА СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторFBSSKU
		|		ИНАЧЕ СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторFBOSKU
		|	КОНЕЦ КАК ИдентификаторSKU
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации))
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса <> """"";

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();

	ВидОбъектаМаркетплейсаТовар = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");

	ВыборкаТоваров = Запрос.Выполнить().Выбрать();
	Пока ВыборкаТоваров.Следующий() Цикл
		СписокПараметров = НовыйСписокПараметровТовараДляПолученияОписания();
		СписокПараметров.ИдентификаторПубликации = ВыборкаТоваров.ИдентификаторПубликации;
		СписокПараметров.ИдентификаторОбъектаМаркетплейса = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ВыборкаТоваров.ИдентификаторОбъектаМаркетплейса);
		СписокПараметров.ИдентификаторSKU = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ВыборкаТоваров.ИдентификаторSKU);

		ИнформацияОТоваре = ПолучитьИнформациюОТовареВСервисе(СписокПараметров, УчетнаяЗапись);

		ОписаниеТовара = ПолучитьОписаниеТовараВСервисе(СписокПараметров, УчетнаяЗапись);

		Если ИнформацияОТоваре <> Неопределено Тогда

			СтруктураИнформацииОТоваре = Новый Структура;
			СтруктураИнформацииОТоваре.Вставить("status", Новый Структура);
			СтруктураИнформацииОТоваре.Вставить("created_at", Дата(1,1,1));
			СтруктураИнформацииОТоваре.Вставить("sku", 0);
			СтруктураИнформацииОТоваре.Вставить("fbo_sku", 0);
			СтруктураИнформацииОТоваре.Вставить("fbs_sku", 0);
			СтруктураИнформацииОТоваре.Вставить("price_index", "");
			СтруктураИнформацииОТоваре.Вставить("sources", Новый Массив);

			ЗаполнитьЗначенияСвойствИзСервиса(СтруктураИнформацииОТоваре, ИнформацияОТоваре);

			ДанныеИзСтатуса = ДанныеИзСтатуса(СтруктураИнформацииОТоваре.status, СоответствиеСостоянийПубликации);
			
			Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
			Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар;
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаТоваров, "Номенклатура, Характеристика, Упаковка");
			Запись.ОбъектПубликации = Неопределено;
			Запись.Прочитать();
			
			sku = СтруктураИнформацииОТоваре.sku;
			Если ЗначениеЗаполнено( sku ) Тогда
				sku = ЧислоВСтроку( sku );
				
				fbo_sku = sku;
				fbs_sku = sku;
			Иначе
				fbo_sku = СтруктураИнформацииОТоваре.fbo_sku;
				fbs_sku = СтруктураИнформацииОТоваре.fbs_sku;
				
				fbo_sku = ?(ЗначениеЗаполнено( fbo_sku ), ЧислоВСтроку(fbo_sku), "" );
				fbs_sku = ?(ЗначениеЗаполнено( fbs_sku ), ЧислоВСтроку(fbs_sku), "" );
			КонецЕсли;

			Если Запись.Выбран() Тогда
				ДатаСозданияНаМаркетплейсе = СтруктураИнформацииОТоваре.created_at;
				ДатаОбновленияНаМаркетплейсе = ДанныеИзСтатуса.ДатаОбновленияНаМаркетплейсе;

				Запись.КодОшибки = ДанныеИзСтатуса.КодОшибки;
				Запись.ОписаниеОшибки = ДанныеИзСтатуса.ОписаниеОшибки;

				Запись.ДатаСозданияНаМаркетплейсе = ДатаСозданияНаМаркетплейсе;
				Запись.ДатаОбновленияНаМаркетплейсе = ДатаОбновленияНаМаркетплейсе;
				Запись.ИдентификаторFBOSKU = fbo_sku;
				Запись.ИдентификаторFBSSKU = fbs_sku;
				Запись.ЦеновойИндекс = СтруктураИнформацииОТоваре.price_index;

				Запись.Статус = ДанныеИзСтатуса.ТекущееСостояние.Статус;
				Запись.Состояние = ДанныеИзСтатуса.ТекущееСостояние.Состояние;
				Запись.ОписаниеСостояния = ДанныеИзСтатуса.ТекущееСостояние.ОписаниеСостояния;

				Запись.ЦеновойИндекс = СтруктураИнформацииОТоваре.price_index;

				МассивИсточниковСхожихПредложений = Новый Массив;

				Для Каждого ИсточникПредложения Из СтруктураИнформацииОТоваре.sources Цикл
					СтруктураИсточникаПредложения = Новый Структура;
					СтруктураИсточникаПредложения.Вставить("sku", 0);
					СтруктураИсточникаПредложения.Вставить("is_enabled", Ложь);
					СтруктураИсточникаПредложения.Вставить("source", "");
					ЗаполнитьЗначенияСвойствИзСервиса(СтруктураИсточникаПредложения, ИсточникПредложения);

					ИсточникиСхожихПредложений = Новый Структура;
					ИсточникиСхожихПредложений.Вставить("УчитываетсяПриРасчетеРыночногоЗначения", СтруктураИсточникаПредложения.is_enabled);
					ИсточникиСхожихПредложений.Вставить("ИдентификаторSKU", ЧислоВСтроку(СтруктураИсточникаПредложения.sku));
					ИсточникиСхожихПредложений.Вставить("СсылкаНаТовар", СтруктураИсточникаПредложения.source);

					МассивИсточниковСхожихПредложений.Добавить(ИсточникиСхожихПредложений);
				КонецЦикла;

				Если МассивИсточниковСхожихПредложений.Количество() > 0 Тогда
					Запись.ИсточникиСхожихПредложений = Новый ХранилищеЗначения(МассивИсточниковСхожихПредложений);
				Иначе
					Запись.ИсточникиСхожихПредложений = Неопределено;
				КонецЕсли;

				Если ОписаниеТовара <> Неопределено Тогда
					СтруктураОписанияТовара = Новый Структура;
					СтруктураОписанияТовара.Вставить("name", "");
					СтруктураОписанияТовара.Вставить("description", "");
					ЗаполнитьЗначенияСвойствИзСервиса(СтруктураОписанияТовара, ОписаниеТовара);

					Описание = ?(ПустаяСтрока(СтруктураОписанияТовара.description), Запись.ОписаниеОбъектаМаркетплейса, СтруктураОписанияТовара.description);
					Запись.ОписаниеОбъектаМаркетплейса = Описание;

					Название = ?(ПустаяСтрока(СтруктураОписанияТовара.name), Запись.ПредставлениеОбъектаМаркетплейса, СтруктураОписанияТовара.name);
					Запись.ПредставлениеОбъектаМаркетплейса = Название;
				КонецЕсли;

				Если ДанныеИзСтатуса.ТекущееСостояние.ОчищатьЗаданиеПубликации Тогда
					Запись.ЗаданиеПубликации = "";
				КонецЕсли;

				Запись.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ВыполнитьПубликациюИзображенийТоваровВСервисе(ПараметрыИзображения, УчетнаяЗапись)

	ТекстЗапроса = "/v1/product/pictures/import";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("product_id", ПараметрыИзображения.ИдентификаторТовара);
	ПараметрыЗапроса.Вставить("images", ПараметрыИзображения.Изображения);
	ПараметрыЗапроса.Вставить("images360", ПараметрыИзображения.Изображения360);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result.pictures");

	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаИзображенийИз1С );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета, , ПараметрыКонтекст );

	Возврат РезультатЗапроса.Результат;

КонецФункции

Функция ВыполнитьПубликациюИзображенийТоваров(УчетнаяЗапись) Экспорт

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьПубликациюИзображенийТоваров'") + Символы.ПС
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.ВыгрузкаИзображенийИз1С" ) );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса КАК ПубличнаяСсылка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта КАК ДанныеОбъекта
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.УчетнаяЗаписьМаркетплейса
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Номенклатура
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Характеристика
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Упаковка
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен))
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ИдентификаторОбъектаМаркетплейса <> """")
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
		|	И ВЫБОР
		|			КОГДА СтатусыПубликацииОбъектовМаркетплейсаOzon.ВыгружатьПоНастройкамУчетнойЗаписи
		|				ТОГДА СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса.ВыгружатьОписаниеТовара
		|			ИНАЧЕ СтатусыПубликацииОбъектовМаркетплейсаOzon.ВыгружатьОписаниеТовара
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеОбъектаМаркетплейса
		|ИТОГИ ПО
		|	ИдентификаторОбъектаМаркетплейса";

	СоответствияПубликацииИзображений = Новый Соответствие;

	ТаблицаЗаписиИзменений = Новый ТаблицаЗначений;
	ТаблицаЗаписиИзменений.Колонки.Добавить("ИдентификаторТовара", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаЗаписиИзменений.Колонки.Добавить("ВидОбъектаМаркетплейса", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовМаркетплейсов"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("ОбъектПубликации" );
	ТаблицаЗаписиИзменений.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаписиИзменений.Колонки.Добавить("ДанныеОбъекта", Новый ОписаниеТипов("Структура"));

	ТокенДоступа = ИнтеграцияСМаркетплейсамиСервер.ПолучитьТокенДоступаЯндексДиск(УчетнаяЗапись);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	СтатусКПубликации = ПредопределенноеЗначение( "Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации" );
	
	ВыборкаИдентификаторовТоваров = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИдентификаторовТоваров.Следующий() Цикл
		МассивИзображений = Новый Массив;
		МассивИзображений360 = Новый Массив;

		ЕстьОсновноеИзображение = Ложь;
		ПерваяПубличнаяСсылка = "";

		ВыборкаИзображений = ВыборкаИдентификаторовТоваров.Выбрать();
		Пока ВыборкаИзображений.Следующий() Цикл
			ДанныеОбъекта = ВыборкаИзображений.ДанныеОбъекта.Получить();

			ПубличнаяСсылка = ВыборкаИзображений.ПубличнаяСсылка;
			
			Если ПустаяСтрока(ПубличнаяСсылка) Тогда
				// Генерация ссылки на Яндекс.Диск.
				ДанныеПубличнойСсылки = ИнтеграцияСМаркетплейсамиСервер.ЗагрузитьФайлНаСервис(ТокенДоступа, ВыборкаИзображений.ОбъектПубликации);
				ПубличнаяСсылка = ДанныеПубличнойСсылки.ПубличнаяСсылка;
				ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", ДанныеПубличнойСсылки.ПутьКФайлуНаЯДиске);
			КонецЕсли;

			Если ПустаяСтрока(ПерваяПубличнаяСсылка) Тогда
				ПерваяПубличнаяСсылка = ПубличнаяСсылка;
			КонецЕсли;

			Если ДанныеОбъекта.ЭтоИзображение360 Тогда
				МассивИзображений360.Добавить(ПубличнаяСсылка);
			Иначе
				Если ДанныеОбъекта.ЭтоОсновноеИзображение Тогда
					ЕстьОсновноеИзображение = Истина;
					МассивИзображений.Вставить(0, ПубличнаяСсылка);
				Иначе
					МассивИзображений.Добавить(ПубличнаяСсылка);
				КонецЕсли;
			КонецЕсли;

			// Сохранить данные для записи изменений в регистр статусов публикации.
			СтрокаИзменений = ТаблицаЗаписиИзменений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзменений, ВыборкаИзображений, , "ДанныеОбъекта");
			СтрокаИзменений.ИдентификаторТовара = ВыборкаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса;
			СтрокаИзменений.ПредставлениеОбъектаМаркетплейса = ПубличнаяСсылка;
			СтрокаИзменений.ДанныеОбъекта = ДанныеОбъекта;
		КонецЦикла;

		Если Не ЕстьОсновноеИзображение И Не ПустаяСтрока(ПерваяПубличнаяСсылка) Тогда
			ИндексОсновногоИзображения = МассивИзображений.Найти(ПерваяПубличнаяСсылка);
			Если ИндексОсновногоИзображения <> Неопределено Тогда
				МассивИзображений.Удалить(ИндексОсновногоИзображения);
				МассивИзображений.Вставить(0, ПерваяПубличнаяСсылка);
			КонецЕсли;
		КонецЕсли;

		// Создать соответствие для публикации.
		Если МассивИзображений.Количество() Или МассивИзображений360.Количество() > 0 Тогда
			СтруктураПубликации = Новый Структура;
			СтруктураПубликации.Вставить("Изображения", МассивИзображений);
			СтруктураПубликации.Вставить("Изображения360", МассивИзображений360);

			СоответствияПубликацииИзображений.Вставить(ВыборкаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса, СтруктураПубликации);
		КонецЕсли;
	КонецЦикла;

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();

	Для Каждого СоответствиеПубликации Из СоответствияПубликацииИзображений Цикл
		ИдентификаторТовара = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СоответствиеПубликации.Ключ);

		// Публикация изображений.
		ПараметрыИзображения = Новый Структура;
		ПараметрыИзображения.Вставить("ИдентификаторТовара", ИдентификаторТовара);
		ПараметрыИзображения.Вставить("Изображения", СоответствиеПубликации.Значение.Изображения);
		ПараметрыИзображения.Вставить("Изображения360", СоответствиеПубликации.Значение.Изображения360);

		Результат = ВыполнитьПубликациюИзображенийТоваровВСервисе(ПараметрыИзображения, УчетнаяЗапись);

		// Запись изменений в регистр статусов публикации.
		Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
			ВидОбъектаМаркетплейсаТовар = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");
			
			Для Каждого ДанныеРезультата Из Результат Цикл
				СтруктураРезультата = Новый Структура;
				СтруктураРезультата.Вставить("state", "");
				СтруктураРезультата.Вставить("url", "");
				ЗаполнитьЗначенияСвойствИзСервиса(СтруктураРезультата, ДанныеРезультата);

				ТекущееСостояние = СоответствиеСостоянийПубликации[СтруктураРезультата.state + "_object"];

				Если ТекущееСостояние = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ИндексИзображения = ЧислоВСтроку(Результат.Найти(ДанныеРезультата), Истина);

				ПубличнаяСсылка = СтруктураРезультата.url;

				УстановитьСтатусТовара = Истина;

				Отбор = Новый Структура("ИдентификаторТовара, ПредставлениеОбъектаМаркетплейса", ЧислоВСтроку(ИдентификаторТовара), ПубличнаяСсылка);
				СтрокиИзображения = ТаблицаЗаписиИзменений.НайтиСтроки(Отбор);
				Для Каждого СтрокаИзображения Из СтрокиИзображения Цикл
					Если УстановитьСтатусТовара Тогда
						Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
						Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
						Запись.ВидОбъектаМаркетплейса = ВидОбъектаМаркетплейсаТовар; 
						ЗаполнитьЗначенияСвойств(Запись, СтрокаИзображения, "Номенклатура, Характеристика, Упаковка");
						Запись.ОбъектПубликации = Неопределено;
						Запись.Прочитать();

						Запись.Статус = ТекущееСостояние.Статус;
						Запись.Состояние = ТекущееСостояние.Состояние;
						Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостояния;

						Запись.Записать();

						УстановитьСтатусТовара = Ложь;
					КонецЕсли;
			
					Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
					Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись;
					Запись.ВидОбъектаМаркетплейса = СтрокаИзображения.ВидОбъектаМаркетплейса;
					ЗаполнитьЗначенияСвойств(Запись, СтрокаИзображения, "Номенклатура, Характеристика, Упаковка");
					Запись.ОбъектПубликации = СтрокаИзображения.ОбъектПубликации;
					Запись.Прочитать();

					ЗаполнитьПубличнуюСсылкуИзображений = (Запись.ПредставлениеОбъектаМаркетплейса <> СтрокаИзображения.ПредставлениеОбъектаМаркетплейса);

					Если Не ЗаполнитьПубличнуюСсылкуИзображений Тогда
						// Запись статуса для изображения конкретного товара.
						Запись.ПредставлениеОбъектаМаркетплейса = СтрокаИзображения.ПредставлениеОбъектаМаркетплейса;
						Запись.ДанныеОбъекта = Новый ХранилищеЗначения(СтрокаИзображения.ДанныеОбъекта);

						Запись.ИдентификаторОбъектаМаркетплейса = ИндексИзображения;
						Запись.Статус = ТекущееСостояние.СтатусОбъектаПубликации;
						Запись.Состояние = ТекущееСостояние.СостояниеОбъектаПубликации;
						Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостоянияОбъектаПубликации;

						Запись.Записать();
					Иначе
						// Запись публичной ссылки изображения для всех товаров с этим изображением.
						НачатьТранзакцию();
						Попытка

							// Блокировка изменения публикуемых изображений.
							БлокировкаДанных = Новый БлокировкаДанных;
							ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
							ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
							ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
							ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", СтрокаИзображения.ВидОбъектаМаркетплейса);
							ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", СтрокаИзображения.Номенклатура);
							ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", СтрокаИзображения.ОбъектПубликации);
							БлокировкаДанных.Заблокировать();

							НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗапись);
							НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(СтрокаИзображения.ВидОбъектаМаркетплейса);
							НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаИзображения.Номенклатура);
							НаборЗаписей.Отбор.ОбъектПубликации.Установить(СтрокаИзображения.ОбъектПубликации);
							НаборЗаписей.Прочитать();

							Для Каждого Запись Из НаборЗаписей Цикл
								Запись.ПредставлениеОбъектаМаркетплейса = СтрокаИзображения.ПредставлениеОбъектаМаркетплейса;

								Если Запись.Характеристика = СтрокаИзображения.Характеристика
									И Запись.Упаковка = СтрокаИзображения.Упаковка Тогда
									// Запись статуса для изображения конкретного товара.
									Запись.ИдентификаторОбъектаМаркетплейса = ИндексИзображения;
									Запись.Статус = ТекущееСостояние.СтатусОбъектаПубликации;
									Запись.Состояние = ТекущееСостояние.СостояниеОбъектаПубликации;
									Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостоянияОбъектаПубликации;
									Запись.ДанныеОбъекта = Новый ХранилищеЗначения(СтрокаИзображения.ДанныеОбъекта);
								Иначе
									ДанныеОбъекта = Запись.ДанныеОбъекта.Получить();
									ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", СтрокаИзображения.ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок);
									Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъекта);
								КонецЕсли;
							КонецЦикла;

							НаборЗаписей.Записать();

							ЗафиксироватьТранзакцию();
						Исключение
							ОтменитьТранзакцию();

								ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Ошибка,,,
										ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция ВыполнитьПроверкуПубликацииИзображенийТоваровВСервисе(ПараметрыИзображения, УчетнаяЗапись)

	ТекстЗапроса = "/v1/product/pictures/info";

	ПараметрыЗапроса = Новый Структура;     
	ПараметрыЗапроса.Вставить("product_id", ПараметрыИзображения.ИдентификаторТовара);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result.pictures");

	// POST-запрос
	ПараметрыКонтекст = Новый Структура( "Действие", Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.ПроверкаСтатусаПубликации );
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗапись, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

Процедура ВыполнитьПроверкуПубликацииИзображенийТоваров(УчетнаяЗапись)
	
	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьПроверкуПубликацииИзображенийТоваров:'") + Символы.ПС
		+ НСтр("ru = 'Учетная запись:'") + Символы.ПС + ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( УчетнаяЗапись ) 
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись );
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторОбъектаМаркетплейса КАК ИндексИзображенияВКоллекции,
		|	"""" КАК ИдентификаторПубликации,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ДанныеОбъекта КАК ДанныеОбъекта
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары
		|		ПО СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.УчетнаяЗаписьМаркетплейса
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Номенклатура
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Характеристика
		|			И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Упаковка
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками)))
		|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon_Товары.ИдентификаторОбъектаМаркетплейса <> """")
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение)
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.НаименованиеОбъектаМаркетплейса
		|ИТОГИ ПО
		|	ИдентификаторОбъектаМаркетплейса";

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();

	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		ПубликацииСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( РезультатЗапроса.Выгрузить() );
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьПроверкуПубликацииИзображенийТоваров:'") + Символы.ПС
		+ "Публикации:" + Символы.ПС + ПубликацииСтр 
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись );
	КонецЕсли;

	ВыборкаИдентификаторовТоваров = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИдентификаторовТоваров.Следующий() Цикл
		ИдентификаторТовара = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ВыборкаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса);

		// Проверка публикации изображений.
		МассивИдентификаторов = Новый Массив;
		МассивИдентификаторов.Добавить(ИдентификаторТовара);

		ПараметрыИзображения = Новый Структура;
		ПараметрыИзображения.Вставить("ИдентификаторТовара", МассивИдентификаторов);

		Результат = ВыполнитьПроверкуПубликацииИзображенийТоваровВСервисе(ПараметрыИзображения, УчетнаяЗапись);

		Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
			ВыборкаИзображений = ВыборкаИдентификаторовТоваров.Выбрать();

			МассивЗаписанныхИдентификаторов = Новый Массив;

			Для Каждого ДанныеРезультата Из Результат Цикл
				СтруктураРезультата = Новый Структура;
				СтруктураРезультата.Вставить("state", "");
				СтруктураРезультата.Вставить("product_id", 0);
				СтруктураРезультата.Вставить("url", "");
				ЗаполнитьЗначенияСвойствИзСервиса(СтруктураРезультата, ДанныеРезультата);

				ТекущееСостояние = СоответствиеСостоянийПубликации[СтруктураРезультата.state + "_object"];

				Если ТекущееСостояние = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ИндексИзображения = ЧислоВСтроку(Результат.Найти(ДанныеРезультата), Истина);

				ИдентификаторТовара = ЧислоВСтроку(СтруктураРезультата.product_id);
				НоваяПубличнаяСсылка = СтруктураРезультата.url;

				ВыборкаИзображений.Сбросить();

				НайденыЗаписи = Ложь;

				Отбор = Новый Структура("ИдентификаторОбъектаМаркетплейса, ИндексИзображенияВКоллекции", ИдентификаторТовара, ИндексИзображения);
				Пока ВыборкаИзображений.НайтиСледующий(Отбор) Цикл
					НайденыЗаписи = Истина;

					НачатьТранзакцию();
					Попытка
						// Блокировка изменения публикуемых изображений.
						БлокировкаДанных = Новый БлокировкаДанных;
						ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
						ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
						ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
						ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВыборкаИзображений.ВидОбъектаМаркетплейса);
						ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", ВыборкаИзображений.Номенклатура); 
						ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", ВыборкаИзображений.ОбъектПубликации);
						БлокировкаДанных.Заблокировать();

						НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗапись);
						НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВыборкаИзображений.ВидОбъектаМаркетплейса);
						НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаИзображений.Номенклатура);
						НаборЗаписей.Отбор.ОбъектПубликации.Установить(ВыборкаИзображений.ОбъектПубликации);
						НаборЗаписей.Прочитать();

						Для Каждого Запись Из НаборЗаписей Цикл
							Если Запись.Характеристика = ВыборкаИзображений.Характеристика
								И Запись.Упаковка = ВыборкаИзображений.Упаковка Тогда
								Запись.Статус = ТекущееСостояние.СтатусОбъектаПубликации;
								Запись.Состояние = ТекущееСостояние.СостояниеОбъектаПубликации;
								Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостоянияОбъектаПубликации;

								ЗаполнитьДанныеПубликацииИзображения(Запись, ВыборкаИзображений);
							КонецЕсли;

							Запись.ПредставлениеОбъектаМаркетплейса = НоваяПубличнаяСсылка;
						КонецЦикла;

						Если НаборЗаписей.Количество() > 0 Тогда
							НаборЗаписей.Записать();
						КонецЕсли;

						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();

						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Ошибка,,,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЦикла;

				Если НайденыЗаписи Тогда
					МассивЗаписанныхИдентификаторов.Добавить(ИндексИзображения);
				КонецЕсли;
			КонецЦикла;

			// Запишем состояния для изображений с очисткой публичной ссылки,
			// т.к. содержимое полученной публичной ссылки Ozon не соответствует содержимому публичной ссылки записи.
			Если Результат.Количество() <> МассивЗаписанныхИдентификаторов.Количество() Тогда
				СтруктураРезультата = Новый Структура;
				СтруктураРезультата.Вставить("state", "");
				СтруктураРезультата.Вставить("product_id", 0);
				СтруктураРезультата.Вставить("url", "");
				ЗаполнитьЗначенияСвойствИзСервиса(СтруктураРезультата, Результат[0]);

				ИдентификаторТовара = ЧислоВСтроку(СтруктураРезультата.product_id);
				ТекущееСостояние = СоответствиеСостоянийПубликации[СтруктураРезультата.state + "_object"];

				Если ТекущееСостояние <> Неопределено Тогда
					ВыборкаИзображений.Сбросить();

					Отбор = Новый Структура("ИдентификаторОбъектаМаркетплейса", ИдентификаторТовара);
					Пока ВыборкаИзображений.НайтиСледующий(Отбор) Цикл
						Если МассивЗаписанныхИдентификаторов.Найти(ВыборкаИзображений.ИндексИзображенияВКоллекции) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;

						НачатьТранзакцию();
						Попытка
							// Блокировка изменения публикуемых изображений.
							БлокировкаДанных = Новый БлокировкаДанных;
							ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
							ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
							ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
							ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВыборкаИзображений.ВидОбъектаМаркетплейса);
							ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", ВыборкаИзображений.Номенклатура); 
							ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", ВыборкаИзображений.ОбъектПубликации);
							БлокировкаДанных.Заблокировать();

							НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(УчетнаяЗапись);
							НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВыборкаИзображений.ВидОбъектаМаркетплейса);
							НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаИзображений.Номенклатура);
							НаборЗаписей.Отбор.ОбъектПубликации.Установить(ВыборкаИзображений.ОбъектПубликации);
							НаборЗаписей.Прочитать();

							Для Каждого Запись Из НаборЗаписей Цикл
								Если Запись.Характеристика = ВыборкаИзображений.Характеристика
									И Запись.Упаковка = ВыборкаИзображений.Упаковка Тогда
									Запись.Статус = ТекущееСостояние.СтатусОбъектаПубликации;
									Запись.Состояние = ТекущееСостояние.СостояниеОбъектаПубликации;
									Запись.ОписаниеСостояния = ТекущееСостояние.ОписаниеСостоянияОбъектаПубликации;

									ЗаполнитьДанныеПубликацииИзображения(Запись, ВыборкаИзображений);
								КонецЕсли;

								Запись.ПредставлениеОбъектаМаркетплейса = "";
							КонецЦикла;

							Если НаборЗаписей.Количество() > 0 Тогда
								НаборЗаписей.Записать();
							КонецЕсли;

							ЗафиксироватьТранзакцию();
						Исключение
							ОтменитьТранзакцию();

							ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Ошибка,,,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьУдалениеПубличныхСсылок(УчетнаяЗапись)

	Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
		СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
		
		ЛогКомментарий = НСтр("ru = 'ВыполнитьУдалениеПубличныхСсылок:'") + Символы.ПС
		+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
		+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
		ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.Прочее" ) );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
	КонецЕсли;

	ЗаписьИзмененийВыполнена = Истина;

	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос; 
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СтатусыПубликацииОбъектовИзмененных.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
			|	СтатусыПубликацииОбъектовИзмененных.Номенклатура КАК Номенклатура,
			|	СтатусыПубликацииОбъектовИзмененных.Характеристика КАК Характеристика,
			|	СтатусыПубликацииОбъектовИзмененных.Упаковка КАК Упаковка,
			|	СтатусыПубликацииОбъектовИзмененных.ОбъектПубликации КАК ОбъектПубликации,
			|	СтатусыПубликацииОбъектовИзмененных.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса,
			|	СтатусыПубликацииОбъектовИзмененных.ПредставлениеОбъектаМаркетплейса КАК ПредставлениеОбъектаМаркетплейса,
			|	СтатусыПубликацииОбъектовИзмененных.ДанныеОбъекта КАК ДанныеОбъекта
			|ПОМЕСТИТЬ ВыборкаИзмененийПубличныхСсылок
			|ИЗ
			|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовИзмененных
			|ГДЕ
			|	СтатусыПубликацииОбъектовИзмененных.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
			|	И СтатусыПубликацииОбъектовИзмененных.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение)
			|	И СтатусыПубликацииОбъектовИзмененных.ОбъектПубликации <> НЕОПРЕДЕЛЕНО
			|	И СтатусыПубликацииОбъектовИзмененных.ИзмененыРеквизиты
			|	И СтатусыПубликацииОбъектовИзмененных.ПредставлениеОбъектаМаркетплейса ПОДОБНО ""https://yadi.sk%""
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации КАК ОбъектПубликации,
			|	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))) КАК КоличествоОтличающихсяТоваров
			|ПОМЕСТИТЬ ВыборкаОтличающихсяПубличныхСсылок
			|ИЗ
			|	ВыборкаИзмененийПубличныхСсылок КАК ВыборкаИзмененийПубличныхСсылок
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовДругогоТовара
			|		ПО (СтатусыПубликацииОбъектовДругогоТовара.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
			|			И ВыборкаИзмененийПубличныхСсылок.ВидОбъектаМаркетплейса = СтатусыПубликацииОбъектовДругогоТовара.ВидОбъектаМаркетплейса
			|			И ВыборкаИзмененийПубличныхСсылок.Номенклатура = СтатусыПубликацииОбъектовДругогоТовара.Номенклатура
			|			И ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации = СтатусыПубликацииОбъектовДругогоТовара.ОбъектПубликации
			|			И ВыборкаИзмененийПубличныхСсылок.Характеристика <> СтатусыПубликацииОбъектовДругогоТовара.Характеристика
			|			И ВыборкаИзмененийПубличныхСсылок.Упаковка <> СтатусыПубликацииОбъектовДругогоТовара.Упаковка
			|			И ВыборкаИзмененийПубличныхСсылок.ПредставлениеОбъектаМаркетплейса <> СтатусыПубликацииОбъектовДругогоТовара.ПредставлениеОбъектаМаркетплейса
			|
			|СГРУППИРОВАТЬ ПО
			|	ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОбъектПубликации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВыборкаИзмененийПубличныхСсылок.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
			|	ВыборкаИзмененийПубличныхСсылок.Номенклатура КАК Номенклатура,
			|	ВыборкаИзмененийПубличныхСсылок.Характеристика КАК Характеристика,
			|	ВыборкаИзмененийПубличныхСсылок.Упаковка КАК Упаковка,
			|	ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации КАК ОбъектПубликации,
			|	ВыборкаИзмененийПубличныхСсылок.НаименованиеОбъектаМаркетплейса КАК НаименованиеОбъектаМаркетплейса,
			|	ВыборкаИзмененийПубличныхСсылок.ДанныеОбъекта КАК ДанныеОбъекта
			|ИЗ
			|	ВыборкаИзмененийПубличныхСсылок КАК ВыборкаИзмененийПубличныхСсылок
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВыборкаОтличающихсяПубличныхСсылок КАК ВыборкаОтличающихсяПубличныхСсылок
			|		ПО ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации = ВыборкаОтличающихсяПубличныхСсылок.ОбъектПубликации
			|ГДЕ
			|	ВыборкаОтличающихсяПубличныхСсылок.КоличествоОтличающихсяТоваров ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВыборкаОтличающихсяПубличныхСсылок";

		МассивУдаляемыхПубличныхСсылок = Новый Массив;
		СоответствияУдаляемыхПубличныхСсылок = Новый Соответствие;

		РезультатЗапросаОбъектовПубликации = Запрос.Выполнить();

		Если ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) Тогда
			ТоварыСтр = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( РезультатЗапросаОбъектовПубликации.Выгрузить(),  );
			СтекВызоваСтр = ОбменСВнешнимиСистемамиЛогирование.СтекВызоваПолучить();
			
			ЛогКомментарий = НСтр("ru = 'ВыполнитьУдалениеПубличныхСсылок:'") + Символы.ПС
			+ ОбменСВнешнимиСистемамиЛогирование.КомментарийРазделительБлоков()
			+ НСтр("ru = 'Стек вызовов:'") + Символы.ПС + СтекВызоваСтр;
			ЛогПараметры = Новый Структура( "Действие", ПредопределенноеЗначение( "Перечисление.ОбменСВнешнимиСистемамиЛогированиеДействия.Прочее" ) );
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
		КонецЕсли;

		ВыборкаОбъектовПубликации = РезультатЗапросаОбъектовПубликации.Выбрать();
		

		// Получение массива удаляемых публичных ссылок и очистка массива для каждого измененного изображения со снятием
		// признака "Изменены реквизиты".
		Пока ВыборкаОбъектовПубликации.Следующий() Цикл
			ДанныеОбъекта = ВыборкаОбъектовПубликации.ДанныеОбъекта.Получить();
			Если ТипЗнч(ДанныеОбъекта) <> Тип("Структура") Тогда
				ДанныеОбъекта = НовыйСписокАтрибутовИзображения();
			КонецЕсли;

			УдаляемыеСсылки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОбъекта, "УдаляемыеСсылки", Новый Соответствие);

			Для Каждого ДанныеПубличнойСсылки Из УдаляемыеСсылки Цикл
				Если ПустаяСтрока(ДанныеПубличнойСсылки.Значение) Тогда
					Продолжить;
				КонецЕсли;

				СоответствияУдаляемыхПубличныхСсылок.Вставить(ДанныеПубличнойСсылки.Ключ, ДанныеПубличнойСсылки.Значение);

				Если МассивУдаляемыхПубличныхСсылок.Найти(ДанныеПубличнойСсылки.Ключ) = Неопределено Тогда
					МассивУдаляемыхПубличныхСсылок.Добавить(ДанныеПубличнойСсылки.Ключ);
				КонецЕсли;
			КонецЦикла;

			ДанныеОбъекта.Вставить("УдаляемыеСсылки", Новый Соответствие);

			Запись = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
			Запись.УчетнаяЗаписьМаркетплейса = УчетнаяЗапись; 
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаОбъектовПубликации, "Номенклатура, Характеристика, Упаковка, ОбъектПубликации, ВидОбъектаМаркетплейса");
			Запись.Прочитать();
			
			Если Запись.Выбран() Тогда
				Запись.ДанныеОбъекта = Новый ХранилищеЗначения(ДанныеОбъекта);
				Запись.ИзмененыРеквизиты = Ложь;

				Запись.Записать();
			КонецЕсли;
		КонецЦикла;

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ЗаписьИзмененийВыполнена = Ложь;

		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Если ЗаписьИзмененийВыполнена И МассивУдаляемыхПубличныхСсылок.Количество() > 0 Тогда
		// Поиск изображений, у которых используемая публичная ссылка среди удаляемых публичных ссылок.
		// Такие публичные ссылки должны быть исключены из удаления с сервиса хранения публичных файлов (например, Яндекс.Диск).
		Запрос.УстановитьПараметр("МассивУдаляемыхПубличныхСсылок", МассивУдаляемыхПубличныхСсылок);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса КАК ПубличнаяСсылка
			|ИЗ
			|	ВыборкаИзмененийПубличныхСсылок КАК ВыборкаИзмененийПубличныхСсылок
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
			|		ПО (СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись)
			|			И ВыборкаИзмененийПубличныхСсылок.ВидОбъектаМаркетплейса = СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса
			|			И ВыборкаИзмененийПубличныхСсылок.ОбъектПубликации = СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации
			|ГДЕ
			|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ПредставлениеОбъектаМаркетплейса В(&МассивУдаляемыхПубличныхСсылок)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВыборкаИзмененийПубличныхСсылок";

		ВыборкаПубличныхСсылок = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПубличныхСсылок.Следующий() Цикл
			СоответствияУдаляемыхПубличныхСсылок.Удалить(ВыборкаПубличныхСсылок.ПубличнаяСсылка);

			ИндексЭлемента = МассивУдаляемыхПубличныхСсылок.Найти(ВыборкаПубличныхСсылок.ПубличнаяСсылка);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивУдаляемыхПубличныхСсылок.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;

		// Удаление публичных ссылок с сервиса хранения публичных файлов (например, Яндекс.Диск).
		Если СоответствияУдаляемыхПубличныхСсылок.Количество() > 0 Тогда
			Попытка
				ТокенДоступа = ИнтеграцияСМаркетплейсамиСервер.ПолучитьТокенДоступаЯндексДиск(УчетнаяЗапись);

				ТекущаяПубличнаяСсылка = "";
				Для Каждого ДанныеПубличнойСсылки Из СоответствияУдаляемыхПубличныхСсылок Цикл
					ТекущаяПубличнаяСсылка = ДанныеПубличнойСсылки.Ключ;
					ИнтеграцияСМаркетплейсамиСервер.УдалитьФайлССервиса(ТокенДоступа, ДанныеПубличнойСсылки.Значение);
				КонецЦикла;
			Исключение
				Шаблон = НСтр("ru = 'Не удалось удалить публичную ссылку %1 по причине: %2'");
				СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
						ТекущаяПубличнаяСсылка,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
						УровеньЖурналаРегистрации.Ошибка,,,
						СообщениеПользователю);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


// Возвращает простые типы.
// 
// Возвращаемое значение:
//  Массив - массив простых типов.
//
Функция ПростыеТипы()

	Результат = Новый Массив;
	Результат.Добавить(Тип("Строка"));
	Результат.Добавить(Тип("Число"));
	Результат.Добавить(Тип("Дата"));
	Результат.Добавить(Тип("Булево"));

	Возврат Результат;

КонецФункции

// Возвращает расширения изображений.
//
// Параметры:
//  ИспользоватьPDF - Булево - необходимость включать файлы PDF.
// 
// Возвращаемое значение:
//  Массив - массив расширений изображений.
//
Функция РасширенияИзображений(ИспользоватьPDF = Ложь) Экспорт

	РасширенияИзображений = Новый Массив;
	РасширенияИзображений.Добавить("jpg");
	РасширенияИзображений.Добавить("jpeg");
	РасширенияИзображений.Добавить("png");

	Если ИспользоватьPDF Тогда
		РасширенияИзображений.Добавить("pdf");
	КонецЕсли;

	Возврат РасширенияИзображений;

КонецФункции

Функция ОписаниеТипаКатегории1С()

	МассивТиповКатегории1С = Новый Массив;
	МассивТиповКатегории1С.Добавить(Тип("СправочникСсылка.КатегорииНоменклатуры"));
	МассивТиповКатегории1С.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипаКатегории1С = Новый ОписаниеТипов(МассивТиповКатегории1С);

	Возврат ОписаниеТипаКатегории1С;

КонецФункции

Функция ИдентичныКоллекцииСКлючами(Коллекция1, Коллекция2, ИсключаемыеКлючи = "")

	Если Не (ТипЗнч(Коллекция1) = Тип("Структура") Или ТипЗнч(Коллекция1) = Тип("Соответствие")) Тогда
		Возврат Ложь;
	КонецЕсли;

	Ключи1 = СтрРазделить(ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Коллекция1, ","), ",");
	Ключи2 = СтрРазделить(ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Коллекция2, ","), ",");

	Если Не ОбщегоНазначения.КоллекцииИдентичны(Ключи1, Ключи2) Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Каждого Ключ Из Ключи1 Цикл 
		Если Не ПустаяСтрока(ИсключаемыеКлючи) И СтрНайти(ИсключаемыеКлючи, Ключ) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(Коллекция1[Ключ]) = Тип("Структура") Или ТипЗнч(Коллекция1[Ключ]) = Тип("Соответствие") Тогда
			РезультатСравнения = ИдентичныКоллекцииСКлючами(Коллекция1[Ключ], Коллекция2[Ключ]);
			Если Не РезультатСравнения Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Коллекция1[Ключ] <> Коллекция2[Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

// Возвращает информацию о всех дополнительных реквизитах и сведениях.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными о дополнительных реквизитах и сведениях.
//
Функция ТаблицаДополнительныхСвойств()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ДополнительныеРеквизитыИСведения.Ссылка) КАК Представление
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения";
	
	ТаблицаДополнительныхСвойств = Запрос.Выполнить().Выгрузить();
	ТаблицаДополнительныхСвойств.Индексы.Добавить("Представление");
	
	Возврат ТаблицаДополнительныхСвойств;
	
КонецФункции

// Возвращает путь к полю, собранный из его составляющих, в виде строки с точками-разделителями.
//
// Параметры:
//  ЧастиПутиКПолю - Массив со значениями типа Строка - составляющие пути к полю.
// 
// Возвращаемое значение:
//  Строка - путь к полю с точками-разделителями вида "Номенклатура.ВидНоменклатуры.Наименование".
//
Функция ПутьКПолюИзЧастейПути(ЧастиПутиКПолю) Экспорт

	СоответствиеПутиДополнительногоСвойства = Новый Соответствие;

	Инд = 0;
	НомерСвойства = 1;
	Для Каждого ЧастьПути Из ЧастиПутиКПолю Цикл
		ЭтоДополнительноеСвойство = СтрНайти(ЧастьПути, "[") > 0;

		Если ЭтоДополнительноеСвойство Тогда
			ИмяСвойства = "Свойство" + НомерСвойства;
			СоответствиеПутиДополнительногоСвойства.Вставить(ИмяСвойства, ЧастьПути);

			ЧастиПутиКПолю[Инд] = ИмяСвойства;

			НомерСвойства = НомерСвойства + 1;
		КонецЕсли;

		Инд = Инд + 1;
	КонецЦикла;

	ПутьКПолю = СтрСоединить(ЧастиПутиКПолю, ".");

	Для Каждого СоответствиеПути Из СоответствиеПутиДополнительногоСвойства Цикл
		ПутьКПолю = СтрЗаменить(ПутьКПолю, СоответствиеПути.Ключ, СоответствиеПути.Значение);
	КонецЦикла;

	Возврат ПутьКПолю;

КонецФункции

// Возвращает структуру свойств поля схемы компоновки данных.
//
Функция СтруктураПоляНабораДанныхСхемыКомпоновкиДанных() Экспорт

	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПолеКомпоновкиДанных", "");
	СтруктураПоля.Вставить("ПутьКДанным", "");
	СтруктураПоля.Вставить("Заголовок", "");
	СтруктураПоля.Вставить("ИмяМетаданных", "");
	СтруктураПоля.Вставить("ПолноеИмяМетаданных", "");
	СтруктураПоля.Вставить("ТипЗначенияПоля", Неопределено);
	СтруктураПоля.Вставить("ЭтоПолеУпорядочивания", Ложь);

	Возврат СтруктураПоля;

КонецФункции

// Возвращает список полей схемы компоновки данных для получения значений атрибутов.
//
// Параметры:
//  ИсточникКатегории - ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категории 1С.
//
// Возвращаемое значение:
//  Массив со значениями типа Структура - см. СтруктураПоляНабораДанныхСхемыКомпоновкиДанных().
//
Функция ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов(ПолучитьПоляКатегории1С = Ложь) Экспорт

	Поля = Новый Структура;

	ОбъектМетаданных = Метаданные.Справочники.Номенклатура;
	СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
	СтруктураПоля.ПолеКомпоновкиДанных = "Номенклатура";
	СтруктураПоля.ПутьКДанным = "Номенклатура";
	СтруктураПоля.Заголовок = ОбъектМетаданных.ПредставлениеОбъекта;
	СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
	СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
	СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Поля.Вставить("Номенклатура", СтруктураПоля);

	ОбъектМетаданных = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
	СтруктураПоля.ПолеКомпоновкиДанных = "Характеристика";
	СтруктураПоля.ПутьКДанным = "Характеристика";
	СтруктураПоля.Заголовок = ОбъектМетаданных.ПредставлениеОбъекта;
	СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
	СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
	СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	Поля.Вставить("Характеристика", СтруктураПоля);

	ОбъектМетаданных = Метаданные.Справочники.ЕдиницыИзмерения;
	СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
	СтруктураПоля.ПолеКомпоновкиДанных = "Упаковка";
	СтруктураПоля.ПутьКДанным = "Упаковка";
	СтруктураПоля.Заголовок = ОбъектМетаданных.ПредставлениеОбъекта;
	СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
	СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
	СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения");
	Поля.Вставить("Упаковка", СтруктураПоля);

	Если ПолучитьПоляКатегории1С Тогда
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "УчетнаяЗаписьМаркетплейса";
		СтруктураПоля.Заголовок = НСтр("ru = 'Учетная запись маркетплейса'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "УчетнаяЗаписьМаркетплейса";
		ОбъектМетаданных = Метаданные.Справочники.УчетныеЗаписиМаркетплейсов;
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов");
		СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
		СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		Поля.Вставить("УчетнаяЗаписьМаркетплейса", СтруктураПоля);
		
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "ИсточникКатегории";
		СтруктураПоля.Заголовок = НСтр("ru = 'Источник категории'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "ИсточникКатегории";
		ОбъектМетаданных = Метаданные.Перечисления.ИсточникиКатегорийДляМаркетплейса;
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса");
		СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
		СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		Поля.Вставить("ИсточникКатегории", СтруктураПоля);
		
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "Категория1С_ВидНоменклатуры";
		СтруктураПоля.Заголовок = НСтр("ru = 'Категория 1С'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "Номенклатура.КатегорияНоменклатуры";
		
		ОбъектМетаданных = Метаданные.Справочники.КатегорииНоменклатуры;
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
		СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
		СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		Поля.Вставить("Категория1С_ВидНоменклатуры", СтруктураПоля);
		
	
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "Категория1С_ИерархияНоменклатуры";
		СтруктураПоля.Заголовок = НСтр("ru = 'Категория 1С'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "Номенклатура";
		ОбъектМетаданных = Метаданные.Справочники.Номенклатура;
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		СтруктураПоля.ИмяМетаданных = ОбъектМетаданных.Имя;
		СтруктураПоля.ПолноеИмяМетаданных = ОбъектМетаданных.ПолноеИмя();
		Поля.Вставить("Категория1С_ИерархияНоменклатуры", СтруктураПоля);
		
		СтруктураПоля = СтруктураПоляНабораДанныхСхемыКомпоновкиДанных();
		СтруктураПоля.ПутьКДанным = "ИдентификаторКатегорииМаркетплейса";
		СтруктураПоля.Заголовок = НСтр("ru = 'Идентификатор категории маркетплейса'");
		СтруктураПоля.ЭтоПолеУпорядочивания = Истина;
		СтруктураПоля.ПолеКомпоновкиДанных = "ИдентификаторКатегорииМаркетплейса";
		СтруктураПоля.ТипЗначенияПоля = Новый ОписаниеТипов("Строка");
		СтруктураПоля.ИмяМетаданных = "";
		СтруктураПоля.ПолноеИмяМетаданных = "";
		Поля.Вставить("ИдентификаторКатегорииМаркетплейса", СтруктураПоля);
	КонецЕсли;

	Возврат Поля;

КонецФункции

// Возвращает значение из описания поля по заданному имени.
//
// Параметры:
//  ИмяПоля - Строка - имя поля.
// 
// Возвращаемое значение:
//  Строка, Тип - содержимое поля, см. ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов().
//
Функция ДанныеПоляСхемыДляПолученияРеквизитовАтрибутов(ИмяПоля) Экспорт

	Поля = ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов();
	ДанныеПоля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Поля, ИмяПоля, СтруктураПоляНабораДанныхСхемыКомпоновкиДанных());

	Возврат ДанныеПоля;

КонецФункции

// Подготавливает схему компоновки данных для выбора реквизитов.
//
// Параметры:
//  Поля - Массив - см ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов().
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, из которой вызывается создание схемы
//                                                           компоновки данных.
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных.
//
Функция СоздатьСхемуКомпоновкиДанныхДляВыбораРеквизита(Поля, УникальныйИдентификаторФормы = Неопределено) Экспорт

	СоответствиеПсевдонимовМетаданных = Новый Структура;

	СхемаКомпоновкиДанных = ПустаяСхема();
	НаборДанных = ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ДанныеПубликации");

	Для Каждого ДанныеПоля Из Поля Цикл
		Поле = ДанныеПоля.Значение;

		ПолеНабора = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле        = Поле.ПолеКомпоновкиДанных;
		ПолеНабора.ПутьКДанным = Поле.ПутьКДанным;
		ПолеНабора.Заголовок   = Поле.Заголовок;
		ПолеНабора.ТипЗначения = Поле.ТипЗначенияПоля;

		СоответствиеПсевдонимовМетаданных.Вставить(Поле.ПутьКДанным, Поле.ПолноеИмяМетаданных);
	КонецЦикла;

	Если УникальныйИдентификаторФормы = Неопределено Тогда
		Результат = Новый Структура("СхемаКомпоновкиДанных, СоответствиеПсевдонимовМетаданных",
				СхемаКомпоновкиДанных, СоответствиеПсевдонимовМетаданных);
	Иначе
		АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификаторФормы);
		Результат = Новый Структура("АдресСхемы, СоответствиеПсевдонимовМетаданных", АдресСхемы, СоответствиеПсевдонимовМетаданных);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает выборку результата запроса, содержащую категорию-источник для категории маркетплейса.
//
// Параметры:
//   Категории                 - Массив Из СправочникСсылка.ВидыНоменклатуры
//                             - Массив Из СправочникСсылка.Номенклатура
//                             - Массив Из СправочникСсылка.ТоварныеКатегории - категории, для которых нужно получить категорию-источник.
//   ИсточникКатегории         - ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категории из настроек сопоставления.
//   УчетнаяЗапись             - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   БлижайшийРодитель         - Булево - признак определения только по ближайшему родителю (Истина) или с учетом текущей категории (Ложь).
//   ВсеРодители               - Булево - признак определения по всем родителям.
//
// Возвращаемое значение:
//   ВыборкаРезультатаЗапроса - итоговая выборка результата запроса.
//
Функция ВыборкаИсточникаКатегорииМаркетплейса(Категории, ИсточникКатегории, УчетнаяЗапись, БлижайшийРодитель = Истина, ВсеРодители = Ложь) Экспорт

	ЧастиТекстаЗапроса = СоставныеЧастиТекстаЗапросаПолученияКатегорииМаркетплейса(ИсточникКатегории, БлижайшийРодитель, НЕ БлижайшийРодитель И ВсеРодители );

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Категории", Категории);
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗапись);
	Запрос.Текст = ЧастиТекстаЗапроса.Пролог + ЧастиТекстаЗапроса.Разделитель + ЧастиТекстаЗапроса.Рефрен;

	Инд = 2;
	Пока Истина Цикл
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		Если ВыборкаДанных.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;

		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
				"ТаблицаАнализа" + Формат(Инд, "ЧГ="),
				"ТаблицаАнализа" + Формат(Инд + 1, "ЧГ="));
		ЧастиТекстаЗапроса.Рефрен = СтрЗаменить(ЧастиТекстаЗапроса.Рефрен,
				"ТаблицаАнализа" + Формат(Инд - 1, "ЧГ="),
				"ТаблицаАнализа" + Формат(Инд, "ЧГ="));
		Запрос.Текст = ЧастиТекстаЗапроса.Рефрен;

		Инд = Инд + 1;
	КонецЦикла;

	ЧастиТекстаЗапроса.Эпилог = СтрЗаменить(ЧастиТекстаЗапроса.Эпилог, "ТаблицаАнализа2", "ТаблицаАнализа" + Формат(Инд, "ЧГ="));
	Запрос.Текст = ЧастиТекстаЗапроса.Эпилог;
	ВыборкаДанных = Запрос.Выполнить().Выбрать();

	Возврат ВыборкаДанных;

КонецФункции

Функция СоставныеЧастиТекстаЗапросаПолученияКатегорииМаркетплейса(ИсточникКатегории, БлижайшийРодитель = Истина, ВсеРодители = Ложь)

	ЧастиТекстаЗапроса = Новый Структура;

	Пролог =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК НомерИтерации,
		|	ИсточникДанных.Ссылка КАК Категория1С,
		|	ИсточникДанных.Ссылка КАК РодительКатегории1С,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеОбъектаМаркетплейса
		|ПОМЕСТИТЬ ТаблицаАнализа1
		|ИЗ
		|	&ИсточникДанных КАК ИсточникДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
		|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров))
		|			И ИсточникДанных.Ссылка = СоответствияОбъектовМаркетплейсов.Объект1С
		|ГДЕ
		|	ИсточникДанных.Ссылка В(&Категории)
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса ЕСТЬ NULL";
	
	Если НЕ БлижайшийРодитель Тогда
		Пролог = СтрЗаменить(Пролог, "И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса ЕСТЬ NULL", "");
	КонецЕсли;
	
	Если ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
		Пролог = СтрЗаменить(Пролог, "&ИсточникДанных", "Справочник.КатегорииНоменклатуры");
	Иначе
		Пролог = СтрЗаменить(Пролог, "&ИсточникДанных", "Справочник.Номенклатура");
	КонецЕсли;

	ЧастиТекстаЗапроса.Вставить("Пролог", Пролог);

	ЧастиТекстаЗапроса.Вставить("Разделитель",	"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");

	Рефрен =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ТаблицаАнализа.НомерИтерации + 1 КАК НомерИтерации,
		|	ТаблицаАнализа.Категория1С КАК Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С.Родитель КАК РодительКатегории1С,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса, """") КАК ИдентификаторОбъектаМаркетплейса,
		|	ЕСТЬNULL(СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса, """") КАК НаименованиеОбъектаМаркетплейса
		|ПОМЕСТИТЬ ТаблицаАнализа2
		|ИЗ
		|	ТаблицаАнализа1 КАК ТаблицаАнализа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|		ПО (СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
		|			И (СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров))
		|			И ТаблицаАнализа.РодительКатегории1С.Родитель = СоответствияОбъектовМаркетплейсов.Объект1С
		|ГДЕ
		|	ТаблицаАнализа.НомерИтерации = 1
		|	И ТаблицаАнализа.РодительКатегории1С.Родитель <> &ПустаяСсылка
		|	И ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса = """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ                              
		|	ТаблицаАнализа.НомерИтерации КАК НомерИтерации,
		|	ТаблицаАнализа.Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С,
		|	ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеОбъектаМаркетплейса
		|ИЗ
		|	ТаблицаАнализа1 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаАнализа1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАнализа.Категория1С КАК Категория1С
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.НомерИтерации = 2
		|	И ТаблицаАнализа.РодительКатегории1С.Родитель <> &ПустаяСсылка
		|	И ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса = """"";
	
	Если ВсеРодители Тогда
		Рефрен = СтрЗаменить(Рефрен, "И ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса = """"", "");
	КонецЕсли;
	
	Если ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
		Рефрен = СтрЗаменить(Рефрен, "&ПустаяСсылка", "ЗНАЧЕНИЕ(Справочник.КатегорииНоменклатуры.ПустаяСсылка)");
	Иначе
		Рефрен = СтрЗаменить(Рефрен, "&ПустаяСсылка", "ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)");
	КонецЕсли;

	ЧастиТекстаЗапроса.Вставить("Рефрен", Рефрен);
	
	ЧастиТекстаЗапроса.Вставить("Эпилог",
		"ВЫБРАТЬ
		|	ТаблицаАнализа.Категория1С,
		|	ТаблицаАнализа.РодительКатегории1С,
		|	ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаАнализа.НаименованиеОбъектаМаркетплейса
		|ИЗ
		|	ТаблицаАнализа2 КАК ТаблицаАнализа
		|ГДЕ
		|	ТаблицаАнализа.ИдентификаторОбъектаМаркетплейса <> """"
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаАнализа.НомерИтерации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаАнализа2");

	Возврат ЧастиТекстаЗапроса;

КонецФункции

// Сведения о выгруженных данных
// 
// Возвращаемое значение:
//  ТаблицаЗначений - пуста таблица для заполнения выгруженными данными.
//
Функция СведенияОВыгруженныхДанныхСоздатьСтруктуруДанных() Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	Результат.Колонки.Добавить("ВидОбъектаМаркетплейса", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовМаркетплейсов"));
	
	ТипОбъектПубликации = Новый Массив;
	ТипОбъектПубликации.Добавить(Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	ТипОбъектПубликации.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатурыПрисоединенныеФайлы"));
	Результат.Колонки.Добавить("ОбъектПубликации", Новый ОписаниеТипов(ТипОбъектПубликации));

	Возврат Результат;

КонецФункции

// Очищает сохраненные данных авторизации по учетной записи.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//  Булево - результат выполнения очистки.
//
Функция ОчиститьНастройкиУчетнойЗаписи(УчетнаяЗапись) Экспорт

	ОчисткаУспешна = Истина;

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);

	Попытка

		Владелец = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПрефиксыСервиса().НастройкиСервиса + УчетнаяЗапись.УникальныйИдентификатор();
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, Неопределено);

		ТекОб = УчетнаяЗапись.ПолучитьОбъект();
		ТекОб.УстановитьПометкуУдаления(Истина);

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();
		
		ОчисткаУспешна = Ложь;
		
		ШаблонСообщения = НСтр("ru = 'Не удалось очистить настройки по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

	КонецПопытки;

	Возврат ОчисткаУспешна;

КонецФункции

Процедура ДобавитьСтрокуВПараметрыОтображенияОстатковЦен(ПараметрыОтображенияОстатковЦен, Идентификатор, ОтображатьВТаблице = Ложь, ОтображатьВИнформационномПоле = Ложь)

	Результат = Новый Структура("ОтображатьВТаблице, ОтображатьВИнформационномПоле", ОтображатьВТаблице, ОтображатьВИнформационномПоле);
	ПараметрыОтображенияОстатковЦен.Вставить(Идентификатор, Результат);

КонецПроцедуры

Функция НоменклатураИзображенияПолучить( НоменклатураИлиХарактеристика, ИзображенияДляНоменклатурыИХарактеристики = Ложь, Параметры = Неопределено ) Экспорт
	
	Изображения = ИнтеграцияСМаркетплейсамиСервер.НоменклатураИзображенияПолучить( НоменклатураИлиХарактеристика, ИзображенияДляНоменклатурыИХарактеристики, Параметры );
	
	УчетнаяЗаписьМаркетплейса = Неопределено;
	Упаковка = Неопределено;
	ВыгрузитьВТаблицуЗначений = Истина;
	Если ТипЗнч( Параметры ) = Тип( "Структура" ) Тогда
		Параметры.Свойство( "УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса );
		Параметры.Свойство( "Упаковка", Упаковка );
		Если Параметры.Свойство( "ВыгрузитьВТаблицуЗначений" ) Тогда
			ВыгрузитьВТаблицуЗначений = Параметры.ВыгрузитьВТаблицуЗначений;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч( НоменклатураИлиХарактеристика ) = Тип( "СправочникСсылка.Номенклатура" ) Тогда
		Номенклатура = НоменклатураИлиХарактеристика;
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Иначе
	    Характеристика = НоменклатураИлиХарактеристика;
	    
	    Если ИзображенияДляНоменклатурыИХарактеристики = Истина Тогда
			НоменклатураИлиКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта( Характеристика, "Владелец" );
			
			Если ТипЗнч( НоменклатураИлиКатегория ) = Тип( "СправочникСсылка.КатегорииНоменклатуры" ) Тогда
				Номенклатура = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Параметры, "Номенклатура", Справочники.Номенклатура.ПустаяСсылка() );
			Иначе
				Номенклатура = НоменклатураИлиКатегория;
			КонецЕсли;
			
		Иначе
			Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	ВладелецФайлов = ?(ЗначениеЗаполнено(Характеристика), Характеристика, Номенклатура );
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изображения.Номенклатура КАК Номенклатура,
	|	Изображения.Характеристика КАК Характеристика,
	|	Изображения.Файл КАК Файл,
	|	Изображения.Сортировка КАК Сортировка,
	|	Изображения.ВыгружатьНаСайт КАК ВыгружатьНаСайт,
	|	Изображения.Владелец КАК Владелец,
	|	Изображения.ВладелецФайлов КАК ВладелецФайлов,
	|	Изображения.ДатаСоздания КАК ДатаСоздания,
	|	Изображения.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	|	Изображения.Расширение КАК Расширение,
	|	Изображения.ЭтоИзображение КАК ЭтоИзображение
	|ПОМЕСТИТЬ ВТПрисоединенныеФайлыСортировка
	|ИЗ
	|	&Изображения КАК Изображения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками)
	|				ИЛИ ЕСТЬNULL(ВЫРАЗИТЬ(СтатусыПубликации.ОписаниеОшибки КАК СТРОКА(1024)), """") <> """"
	|			ТОГДА 0
	|		КОГДА СтатусыПубликации.Статус ЕСТЬ NULL
	|					И ВТПрисоединенныеФайлыСортировка.Расширение В (&РасширенияИзображений)
	|				ИЛИ СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации)
	|				ИЛИ СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации)
	|			ТОГДА 1
	|		КОГДА СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве)
	|			ТОГДА 2
	|		КОГДА СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)
	|			ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК МаркерСтатуса,
	|	ВТПрисоединенныеФайлыСортировка.Файл КАК Файл,
	|	ЕСТЬNULL(СправочникНоменклатуры.ФайлКартинки, ЗНАЧЕНИЕ(Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка)) = ВТПрисоединенныеФайлыСортировка.Файл КАК ОсновноеИзображение,
	|	ЕСТЬNULL(СтатусыПубликации.ПредставлениеОбъектаМаркетплейса, """") КАК ПубличнаяСсылка,
	|	ВЫБОР
	|		КОГДА НЕ ВТПрисоединенныеФайлыСортировка.Расширение В (&РасширенияИзображений)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется)
	|		ИНАЧЕ ЕСТЬNULL(СтатусыПубликации.Статус, &СтатусНовый)
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
	|		КОГДА ВТПрисоединенныеФайлыСортировка.Расширение В (&РасширенияИзображений)
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(СтатусыПубликации.ОписаниеОшибки КАК СТРОКА(1024)), """")
	|		ИНАЧЕ &ОписаниеОшибкиФорматФайла
	|	КОНЕЦ КАК ОписаниеОшибки
	|ПОМЕСТИТЬ ВТНоменклатураИзображенияСтатусы
	|ИЗ
	|	ВТПрисоединенныеФайлыСортировка КАК ВТПрисоединенныеФайлыСортировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
	|		ПО (СправочникНоменклатуры.Ссылка = ВТПрисоединенныеФайлыСортировка.Владелец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
	|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
	|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Изображение))
	|			И (СтатусыПубликации.Номенклатура = &Номенклатура)
	|			И (СтатусыПубликации.Характеристика = &Характеристика)
	|			И (СтатусыПубликации.Упаковка = &Упаковка)
	|			И (СтатусыПубликации.ОбъектПубликации = ВТПрисоединенныеФайлыСортировка.Файл)
	|ГДЕ
	|	СтатусыПубликации.ОбъектПубликации ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	&Номенклатура КАК Номенклатура,
	|	&Характеристика КАК Характеристика,
	|	&Упаковка КАК Упаковка,
	|	ВТПрисоединенныеФайлыСортировка.Файл КАК Файл,
	|	ВТПрисоединенныеФайлыСортировка.Сортировка КАК Сортировка,
	|	ВТПрисоединенныеФайлыСортировка.ВыгружатьНаСайт КАК ВыгружатьНаСайт,
	|	ВТПрисоединенныеФайлыСортировка.Владелец КАК Владелец,
	|	ВТПрисоединенныеФайлыСортировка.ВладелецФайлов КАК ВладелецФайлов,
	|	ВТПрисоединенныеФайлыСортировка.ДатаСоздания КАК ДатаСоздания,
	|	ВТПрисоединенныеФайлыСортировка.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	|	ВТПрисоединенныеФайлыСортировка.Расширение КАК Расширение,
	|	ВТПрисоединенныеФайлыСортировка.ЭтоИзображение КАК ЭтоИзображение,
	|	ВТНоменклатураИзображенияСтатусы.МаркерСтатуса КАК МаркерСтатуса,
	|	ВТНоменклатураИзображенияСтатусы.ОсновноеИзображение КАК ОсновноеИзображение,
	|	ВТНоменклатураИзображенияСтатусы.ПубличнаяСсылка КАК ПубличнаяСсылка,
	|	ВТНоменклатураИзображенияСтатусы.Статус КАК Статус,
	|	ВТНоменклатураИзображенияСтатусы.ОписаниеОшибки КАК ОписаниеОшибки
	|ИЗ
	|	ВТПрисоединенныеФайлыСортировка КАК ВТПрисоединенныеФайлыСортировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНоменклатураИзображенияСтатусы КАК ВТНоменклатураИзображенияСтатусы
	|		ПО (ВТНоменклатураИзображенияСтатусы.Файл = ВТПрисоединенныеФайлыСортировка.Файл)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка";
	
	
	РасширенияИзображений = РасширенияИзображений();
	                                                                                  
	Запрос.УстановитьПараметр("Изображения", Изображения);
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
	Запрос.УстановитьПараметр("РасширенияИзображений", РасширенияИзображений);
	Запрос.УстановитьПараметр("СтатусНовый", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации"));
	
	ОписаниеОшибкиФорматФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Присоединенный файл изображения товара не выгружается на маркетплейс, т.к. не соответствует требуемым форматам файлов: %1.'"),
			СтрСоединить(РасширенияИзображений, ", "));
	Запрос.УстановитьПараметр("ОписаниеОшибкиФорматФайла", ОписаниеОшибкиФорматФайла );
	
	РезультатЗапроса = Запрос.Выполнить();
	Если ВыгрузитьВТаблицуЗначений = Истина Тогда
		Данные = РезультатЗапроса.Выгрузить();
	Иначе
		Данные = РезультатЗапроса.Выбрать();
	КонецЕсли;
	
	Возврат Данные;
КонецФункции

Функция ПрисоединенныйФайлЭтоИзображение( ПрисоединенныйФайл, Параметры = Неопределено ) Экспорт
	РасширенияИзображений = РасширенияИзображений();
	Расширение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта( ПрисоединенныйФайл, "Расширение" );
	Если ТипЗнч( Параметры ) = Тип( "Структура" ) Тогда
		Параметры.Вставить( "Расширение", Расширение );
	КонецЕсли;
	Если РасширенияИзображений.Найти( НРег( Расширение ) ) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция СоставИСортировкаФайловДляСайтаЗаписать( ТаблицаФайлов ) Экспорт
	
	Если ТаблицаФайлов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВладелецФайлов = ТаблицаФайлов[0].ВладелецФайлов;
	Если ТипЗнч( ВладелецФайлов ) = Тип( "СправочникСсылка.Номенклатура" ) Тогда
		Номенклатура = ВладелецФайлов;
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Иначе
	    Характеристика = ВладелецФайлов;
		Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта( Характеристика, "Владелец" );
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
	|ГДЕ
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
	|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = &Номенклатура
	|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = &Характеристика";

	Запрос = Новый Запрос( ТекстЗапроса );
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	УчетныеЗаписиТоваров = Запрос.Выполнить().Выбрать();
	Пока УчетныеЗаписиТоваров.Следующий() Цикл
		ИзображенияПараметры = Новый Структура( "УчетнаяЗаписьМаркетплейса, Упаковка", УчетныеЗаписиТоваров.УчетнаяЗаписьМаркетплейса, УчетныеЗаписиТоваров.Упаковка );
		Изображения = НоменклатураИзображенияПолучить( ВладелецФайлов, Истина, ИзображенияПараметры );
		
		ИзображенияСоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzonПоНоменклатуре( Номенклатура );

	КонецЦикла;
	
КонецФункции

// Номенклатура: Ссылка, список значений или массив
Функция ИзображенияСоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzonПоНоменклатуре( Номенклатура )
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликации.Номенклатура КАК Номенклатура,
		|	СтатусыПубликации.Характеристика КАК Характеристика,
		|	СтатусыПубликации.Упаковка КАК Упаковка,
		|	СтатусыПубликации.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликации.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.Номенклатура)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|		КОГДА ТИПЗНАЧЕНИЯ(СтатусыПубликации.ИсточникКатегорииМаркетплейса) = ТИП(Справочник.КатегорииНоменклатуры)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|		ИНАЧЕ СправУчетныеЗаписи.ИсточникКатегории
		|	КОНЕЦ КАК ИсточникКатегории
		|ПОМЕСТИТЬ ДанныеПубликации
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК СправУчетныеЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ПО (СтатусыПубликации.УчетнаяЗаписьМаркетплейса.Ссылка = СтатусыПубликации.УчетнаяЗаписьМаркетплейса)
		|			И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
		|			И (СтатусыПубликации.Номенклатура В (&Номенклатура))";
	Запрос.Выполнить();

	ПараметрыЗаполненияОбъектовПубликации = СписокПараметровПодготовкиДанныхПубликуемыхТоваров();
	ПараметрыЗаполненияОбъектовПубликации.ПолучитьИзображения = Истина;
	ПараметрыЗаполненияОбъектовПубликации.ОбновитьДанные = Истина;

	ТаблицаДанныхИзображений = ПодготовитьДанныеПубликуемыхТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполненияОбъектовПубликации);

	СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon(ТаблицаДанныхИзображений);
	
	Возврат Истина;
КонецФункции

// Формирует список с подчиненными складами, включая переданный
//
// Параметры:
//  Склад	 - СправочникСсылка.Склады - склад, по которому формируется список.
// 
// Возвращаемое значение:
//  СписокЗначений - список с подчиненными складами.
//
Функция СписокПодчиненныхСкладов(Склад) Экспорт
	
	Список = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В ИЕРАРХИИ(&Склад)
		|	И (НЕ Склады.ЭтоГруппа
		|			ИЛИ &УсловиеПоГруппеСкладов)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоГруппеСкладов", "Ложь");
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Склад", Склад);
		
		Список.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция БазоваяВалютаПоУмолчанию() Экспорт
	Возврат Справочники.Валюты.НайтиПоКоду( "643" );
КонецФункции

Функция ВалютаРегламентированногоУчетаОрганизации(Организация) Экспорт
	Возврат Справочники.Валюты.НайтиПоКоду( "643" );
КонецФункции

// Возвращает таблицу значений на основании массива структур
// 
// Параметры:
//	МассивСтруктур - Массив Из Структура - Массив структур, которые будут преобразованы в таблиц значений.
//										   Свойства структуры первого элемента массива определяют состав колонок результирующей таблицы.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений, созданная из массива структур.
// 
Функция МассивВТаблицуЗначений(МассивСтруктур) Экспорт
	Таблица = Новый ТаблицаЗначений;
	// Создадим колонки по первой структуре массива
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл 
			Таблица.Колонки.Добавить(Свойство.Ключ, ОписаниеТиповПоТипу(ТипЗнч(Свойство.Значение)));
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
КонецФункции

// Возвращает описание типов по переданному типу
// 
// Параметры:
//	Тип - Тип - Тип значения
//
// Возвращаемое значение:
//	ОписаниеТипов - созданное на основании переданного типа описание типов.
//
Функция ОписаниеТиповПоТипу(Тип)
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип);
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипов;
КонецФункции

// Возвращает пустую схему СКД
//
// Параметры:
//  ИмяИсточника - Строка - имя источника данных новой схемы компоновки (необязательное по умолчанию "ИсточникДанных1")
//  ТипИсточника - Строка - тип источника данных новой схему компоновки данных (необязательное по умолчанию "Local").
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных - пустая схема компоновки данных.
//
Функция ПустаяСхема(ИмяИсточника = "ИсточникДанных1", ТипИсточника = "Local") Экспорт
	
	НоваяСхема = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = НоваяСхема.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = ИмяИсточника;
	ИсточникДанных.ТипИсточникаДанных = ТипИсточника;
	
	Возврат НоваяСхема;
	
КонецФункции

// Добавляет новый набор данных заданного типа и возвращает ссылку на него
//
// Параметры:
//  СхемаНабор - СхемаКомпоновкиДанных -
//  			- НаборыДанныхСхемыКомпоновкиДанных -
//  			- НаборДанныхОбъединениеСхемыКомпоновкиДанных - схема или набор компоновки данных, в которой необходимо создать новый набор.
//  ТипНабора - Тип - Тип нового набора (необязательное по умолчанию "НаборДанныхЗапросСхемыКомпоновкиДанных")
//  					Тип("НаборДанныхЗапросСхемыКомпоновкиДанных")
//  					Тип("НаборДанныхОбъектСхемыКомпоновкиДанных").
//  ИмяНабора - Строка - имя нового набора (необязательное по умолчанию "НаборДанных1")
//  ИмяИсточника - Строка - имя источника данных новой схемы компоновки (необязательное по умолчанию "ИсточникДанных1")
//  ИмяОбъекта - Строка - имя внешнего источника данных (необязательное по умолчанию равно имени набора данных).
//
// Возвращаемое значение:
//  НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъединениеСхемыКомпоновкиДанных,
//      НаборДанныхОбъектСхемыКомпоновкиДанных - новый набор данных заданного типа.
//
Функция ДобавитьПустойНаборДанных(СхемаНабор, ТипНабора = Неопределено, ИмяНабора = "НаборДанных1", ИмяИсточника = "ИсточникДанных1", ИмяОбъекта = "") Экспорт
	
	Если ТипНабора = Неопределено Тогда
		ТипНабора = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");
	КонецЕсли;
	
	Если ТипЗнч(СхемаНабор) = Тип("СхемаКомпоновкиДанных") Тогда
		
		НаборыДанных = СхемаНабор.НаборыДанных;
		
	ИначеЕсли ТипЗнч(СхемаНабор) = Тип("НаборыДанныхСхемыКомпоновкиДанных") Тогда
		
		НаборыДанных = СхемаНабор;
		
	ИначеЕсли ТипЗнч(СхемаНабор) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		
		НаборыДанных = СхемаНабор.Элементы;
		
	КонецЕсли;
	
	НовыйНабор = НаборыДанных.Добавить(ТипНабора);
	
	НовыйНабор.Имя = ИмяНабора;
	Если Не ТипНабора = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных")
		И ЗначениеЗаполнено(ИмяИсточника) Тогда
		
		НовыйНабор.ИсточникДанных = ИмяИсточника;
		
	КонецЕсли;
	
	Если ТипНабора = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
		НовыйНабор.ИмяОбъекта = ?(ЗначениеЗаполнено(ИмяОбъекта), ИмяОбъекта, ИмяНабора);
	КонецЕсли;
		
	Возврат НовыйНабор;
	
КонецФункции

// Устанавливает значение параметра динамического списка, или отключает его использование в зависимости от признака.
//
// Параметры:
//	Список - ДинамическийСписок - список,
//	ИмяПараметра - Строка - имя параметра,
//	Значение - Произвольный - значение параметра,
//	Использование - Булево - признак использования параметра.
//
Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если ЗначениеПараметра <> Неопределено Тогда
		Если Использование Тогда
			Список.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, Значение);
		Иначе
			ЗначениеПараметра.Значение = Значение;
			ЗначениеПараметра.Использование = Ложь;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Текст запроса регистр сведений цены номенклатуры условие соединения.
// 
// Параметры:
//  ИсточникТоваров - Строка - название таблицы с товарами
//  ИсточникЦен - Строка - название таблицы с ценами
//  ИсточникВидовЦен - Строка, Неопределено - значение, если необходимо в соединение соединять по виду цен
//  ИспользуетсяЦенообразование25 - Неопределено, Булево - Используется ценообразование 2.5
// 
// Возвращаемое значение:
//  Строка - Текст запроса регистр сведений цены номенклатуры условие соединения
Функция ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(ИсточникТоваров, ИсточникЦен, ИсточникВидовЦен = Неопределено)
	
	ТекстыЗапросов = Новый Массив();
	ТекстЗапроса = "
		|			&ИсточникТоваров.Номенклатура = &ИсточникЦен.Номенклатура
		|			И &ИсточникТоваров.Характеристика = &ИсточникЦен.Характеристика";
	ТекстыЗапросов.Добавить(ТекстЗапроса);

	Если ИсточникВидовЦен <> Неопределено Тогда
		ТекстыЗапросов.Добавить(Символы.ПС + "		И ");
		ТекстыЗапросов.Добавить(ИсточникВидовЦен);
		ТекстыЗапросов.Добавить(" = &ИсточникЦен.ВидЦен");
	КонецЕсли;
		
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникТоваров", ИсточникТоваров);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникЦен", ИсточникЦен);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает строковое представление номенклатуры с характеристикой и другими полями для отображения в сообщениях.
//
// Параметры:
//  Номенклатура	 - Строка, СправочникСсылка.Номенклатура			 - номенклатура;
//  Характеристика	 - Строка, СправочникСсылка.ХарактеристикиНоменклатуры	 - характеристика номенклатуры;
//  Упаковка		 - Строка, СправочникСсылка.УпаковкиЕдиницыИзмерения	 - упаковка / единица измерения номенклатуры;
//  Серия			 - Строка, СправочникСсылка.СерииНоменклатуры			 - серия номенклатуры;
//  Назначение		 - Строка, СправочникСсылка.Назначения					 - назначение номенклатуры.
// 
// Возвращаемое значение:
//  Строка - представление номенклатуры.
//
Функция ПредставлениеНоменклатуры(Номенклатура, Характеристика, Упаковка = "", Серия = "", Назначение = "") Экспорт

	СтрПредставление = СокрЛП(Номенклатура);

	Если ЗначениеЗаполнено(Характеристика)Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(Характеристика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Назначение) Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(Назначение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Серия) Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(Серия);
	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции

Функция СкладыПроверитьИЗаписатьСоответствие(ДанныеЗаписи) Экспорт

	ПроверкаПройдена = Истина;

	Если ЗначениеЗаполнено(ДанныеЗаписи.Объект1С) Тогда

		СообщенияПроверки = Новый Массив;

		УстановитьПривилегированныйРежим(Истина);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УчетнаяЗапись", ДанныеЗаписи.УчетнаяЗаписьМаркетплейса);
		Запрос.УстановитьПараметр("ИдентификаторСклада", ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса);
		Запрос.УстановитьПараметр("УстанавливаемыйСклад", ДанныеЗаписи.Объект1С);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(Склады.Ссылка) КАК ПредставлениеСклада,
			|	ЛОЖЬ КАК ЭтоГруппа
			|ИЗ
			|	Справочник.СтруктурныеЕдиницы КАК Склады
			|ГДЕ
			|	Склады.Ссылка = &УстанавливаемыйСклад
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК СкладМаркетплейса,
			|	ПРЕДСТАВЛЕНИЕ(Склады.Наименование) КАК ПредставлениеСклада1С,
			|	ЛОЖЬ КАК ЭтоГруппа,
			|	СоответствияОбъектовМаркетплейсов.Объект1С = &УстанавливаемыйСклад КАК ЭтоВыбранныйСклад
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК Склады
			|		ПО СоответствияОбъектовМаркетплейсов.Объект1С = Склады.Ссылка
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса <> &ИдентификаторСклада
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторВладельцаОбъектаМаркетплейса = """"
			|	И СоответствияОбъектовМаркетплейсов.Объект1С В ИЕРАРХИИ(&УстанавливаемыйСклад)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК СкладМаркетплейса,
			|	Склады.Наименование КАК НаименованиеСклада1С,
			|	ПРЕДСТАВЛЕНИЕ(Склады.Наименование) КАК ПредставлениеСклада1С,
			|	ЛОЖЬ КАК ЭтоГруппа,
			|	СоответствияОбъектовМаркетплейсов.Объект1С = &УстанавливаемыйСклад КАК ЭтоВыбранныйСклад
			|ИЗ
			|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК Склады
			|		ПО СоответствияОбъектовМаркетплейсов.Объект1С = Склады.Ссылка
			|ГДЕ
			|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗапись
			|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)
			|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса <> &ИдентификаторСклада";
		
		ПакетЗапроса = Запрос.ВыполнитьПакет();

		// Проверка на вхождение записанных складов в иерархию выбранного склада.

		МассивПересечений = Новый Массив;

		ПолноеНаименованиеУстанавливаемогоСклада = "";
		ПредставлениеСклада = "";
		ЭтоГруппаСкладов = Ложь;

		ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница() - 2].Выбрать();
		Если ВыборкаСкладов.Следующий() Тогда 
			ПолноеНаименованиеУстанавливаемогоСклада = "/" + ДанныеЗаписи.Объект1С.ПолноеНаименование() + "/";
			ПредставлениеСклада = ВыборкаСкладов.ПредставлениеСклада;
			ЭтоГруппаСкладов = ВыборкаСкладов.ЭтоГруппа;
		КонецЕсли;

		Если ЭтоГруппаСкладов Тогда
			ШаблонСовпаденияСклада = НСтр("ru = 'Устанавливаемая группа складов <%1> совпадает со значением для склада маркетплейса <%2>.'");
		Иначе
			ШаблонСовпаденияСклада = НСтр("ru = 'Устанавливаемый склад <%1> совпадает со значением для склада маркетплейса <%2>.'");
		КонецЕсли;

		ШаблонПересеченияСклада = " - " + НСтр("ru = 'склад 1С <%1>, установленный для склада маркетплейса <%2>'");
		ШаблонПересеченияГруппыСклада = " - " + НСтр("ru = 'группа складов 1С <%1>, установленная для склада маркетплейса <%2>'");

		ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница() - 1].Выбрать();
		Пока ВыборкаСкладов.Следующий() Цикл
			Если ВыборкаСкладов.ЭтоВыбранныйСклад Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСовпаденияСклада,
						ПредставлениеСклада, 
						ВыборкаСкладов.СкладМаркетплейса);

				СообщенияПроверки.Добавить(ТекстСообщения);

				ПроверкаПройдена = Ложь;
				Продолжить;
			КонецЕсли;

			Шаблон = ?(ВыборкаСкладов.ЭтоГруппа, ШаблонПересеченияГруппыСклада, ШаблонПересеченияСклада);

			ОписаниеПересечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
					ВыборкаСкладов.ПредставлениеСклада1С,
					ВыборкаСкладов.СкладМаркетплейса);

			МассивПересечений.Добавить(ОписаниеПересечения);
		КонецЦикла;

		Если МассивПересечений.Количество() > 0 Тогда
			ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены склады, входящие в состав выбранной группы складов <%1>: %2.'");

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияПроверки,
					ПредставлениеСклада,
					Символы.ПС + СтрСоединить(МассивПересечений, ";" + Символы.ПС));

			СообщенияПроверки.Добавить(ТекстСообщения);

			ПроверкаПройдена = Ложь;
		КонецЕсли;

		// Проверка на вхождение выбранного склада в иерархию записанных складов.

		Если ЗначениеЗаполнено(ПолноеНаименованиеУстанавливаемогоСклада) Тогда
			МассивПересечений = Новый Массив;

			ВыборкаСкладов = ПакетЗапроса[ПакетЗапроса.ВГраница()].Выбрать();
			Пока ВыборкаСкладов.Следующий() Цикл
				Если ВыборкаСкладов.ЭтоВыбранныйСклад Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСовпаденияСклада,
							ПредставлениеСклада, 
							ВыборкаСкладов.СкладМаркетплейса);

					СообщенияПроверки.Добавить(ТекстСообщения);

					ПроверкаПройдена = Ложь;
					Продолжить;
				КонецЕсли;

				НаименованиеСкладаВыборки = "/" + ВыборкаСкладов.НаименованиеСклада1С + "/";
				Если СтрНайти(ПолноеНаименованиеУстанавливаемогоСклада, НаименованиеСкладаВыборки) Тогда
					ОписаниеПересечения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПересеченияГруппыСклада,
							ВыборкаСкладов.ПредставлениеСклада1С,
							ВыборкаСкладов.СкладМаркетплейса);

					МассивПересечений.Добавить(ОписаниеПересечения);

					ПроверкаПройдена = Ложь;
				КонецЕсли;
			КонецЦикла;

			Если МассивПересечений.Количество() > 0 Тогда
				Если ЭтоГруппаСкладов Тогда
					ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены группы складов, в состав которых входит выбранная группа складов <%1>: %2.'");
				Иначе
					ШаблонСообщенияПроверки = НСтр("ru = 'Обнаружены группы складов, в состав которых входит выбранный склад <%1>: %2.'");
				КонецЕсли;

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( ШаблонСообщенияПроверки,
						ПредставлениеСклада,
						Символы.ПС + СтрСоединить(МассивПересечений, ";" + Символы.ПС));

				СообщенияПроверки.Добавить(ТекстСообщения);

				ПроверкаПройдена = Ложь;
			КонецЕсли;
		КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);

		Если СообщенияПроверки.Количество() > 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрСоединить(СообщенияПроверки, Символы.ПС));
		КонецЕсли;
	КонецЕсли;

	Если ПроверкаПройдена Тогда
		ДобавитьЗаписьВРегистрСоответствияОбъектов(ДанныеЗаписи);
	КонецЕсли;

	Возврат ПроверкаПройдена;

КонецФункции

Процедура ДобавитьЗаписьВРегистрСоответствияОбъектов(ДанныеЗаписи)

	НаборЗаписей = РегистрыСведений.СоответствияОбъектовМаркетплейсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(ДанныеЗаписи.УчетнаяЗаписьМаркетплейса);
	НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ДанныеЗаписи.ВидОбъектаМаркетплейса);
	НаборЗаписей.Отбор.ИдентификаторОбъектаМаркетплейса.Установить(ДанныеЗаписи.ИдентификаторОбъектаМаркетплейса);

	Если ЗначениеЗаполнено(ДанныеЗаписи.Объект1С) Тогда
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
		Запись.ДатаАктуальности = ТекущаяДатаСеанса();
	КонецЕсли;

	НаборЗаписей.Записать();

КонецПроцедуры

#КонецОбласти

#КонецЕсли

// Конструктор таблицы значений для идентификаторов товаров, полученных из сервиса.
//
// Возвращаемое значение:
//	 ТаблицаЗначений - таблица с колонками:
//	   * УчетнаяЗаписьМаркетплейса		  - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//     * ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца;
//     * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе.
//     * ПродаетсяСоСкидкой               - Булево - товар продается со скидкой;
//     * Архивный                         - Булево - признак архивного товара;
//     * ПродаетсяПоСхемеРаботыFBO        - Булево - продается по схеме FBО;
//     * ПродаетсяПоСхемеРаботыFBS        - Булево - продается по схеме FBS;
//     * ФильтрВидимости                  - Строка - фильтр по видимости товара;
//     * ИдентификаторПоследнегоЗначения  - Строка - идентификатор последнего значения на странице.
//
Функция НоваяТаблицаИдентификаторовТоваров() Экспорт

	ОписаниеТипаБулево   = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтрока50 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса",        Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторПубликации",          ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ПродаетсяСоСкидкой",               ОписаниеТипаБулево);
	Результат.Колонки.Добавить("Архивный",                         ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ПродаетсяПоСхемеРаботыFBO",        ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ПродаетсяПоСхемеРаботыFBS",        ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ФильтрВидимости",  		           ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторПоследнегоЗначения",  ОписаниеТипаСтрока50);

	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для изображений товаров из сервиса.
//
// Возвращаемое значение:
//	 ТаблицаЗначений - таблица с колонками:
//     * Порядок             - Число - порядок расположения на сайте;
//     * ПутьКФайлу 		 - Строка - путь к изображению;
//     * ОсновноеИзображение - Булево - признак главного изображения;
//     * Изображение360      - Булево - признак изображения 360°.
//
Функция НоваяТаблицаИзображений() Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Порядок",             Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	Результат.Колонки.Добавить("ПутьКФайлу",          Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ОсновноеИзображение", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Изображение360",      Новый ОписаниеТипов("Булево"));

	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для информации об источниках схожих предложений.
//
// Возвращаемое значение:
//	 ТаблицаЗначений - таблица с колонками:
//	   * СхемаПродажи                           - Строка - схема продажи;
//	   * ИдентификаторSKU     				    - Строка - идентификатор товара на Ozon;
//	   * УчитываетсяПриРасчетеРыночногоЗначения - Булево - признак, что источник учитывается при расчете рыночного значения.
//
Функция НоваяТаблицаИсточникиСхожихПредложений() Экспорт

	ОписаниеТипаСтрока10 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10));
	ОписаниеТипаСтрока50 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаБулево   = Новый ОписаниеТипов("Булево");

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("СхемаПродажи",                           ОписаниеТипаСтрока10);
	Результат.Колонки.Добавить("ИдентификаторSKU",                       ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("УчитываетсяПриРасчетеРыночногоЗначения", ОписаниеТипаБулево);
	
	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для описания товаров, полученных из сервиса.
//
// Возвращаемое значение:
//	 ТаблицаЗначений - таблица с колонками:
//	   * УчетнаяЗаписьМаркетплейса		      - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//	   * ВидОбъектаМаркетплейса		          - ПеречислениеСсылка.ВидыОбъектовМаркетплейсов - вид объекта маркетплейса;
//     * ИдентификаторПубликации              - Строка - внутренний идентификатор товара в системе продавца;
//     * ИдентификаторОбъектаМаркетплейса     - Строка - идентификатор товара на маркетплейсе;
//     * ИдентификаторFBOSKU                  - Строка - SKU товара, который продается со склада Ozon (FBO);
//     * ИдентификаторFBSSKU                  - Строка - SKU товара, который продается со склада продавца (FBS и rFBS);
//     * ПредставлениеОбъектаМаркетплейса     - Строка - название товара;
//     * ОписаниеОбъектаМаркетплейса          - Строка - описание товара;
//     * Штрихкод                             - Строка - штрихкоды, через ";";
//     * ИдентификаторКатегорииМаркетплейса   - Строка - идентификатор категории маркетплейса;
//     * НаименованиеКатегорииМаркетплейса    - Строка - наименование категории маркетплейса;
//     * ЦеновойИндекс                        - Строка - ценовой индекс. Подробнее в Базе знаний продавца;
//     * ЦенаДоСкидки                         - Число - цена до учета скидок;
//     * ЦенаСоСкидкой                        - Число - цена товара с учетом скидок;
//     * МинимальнаяЦена                      - Число - минимальная цена товара после применения акций;
//     * ЦенаНаВитрине                        - Число - цена на товар с учетом всех акций, это значение будет указано на витрине Ozon;
//     * ЦенаПремиальная                      - Число - цена для клиентов с подпиской Ozon Premium;
//     * ЦенаРекомендованная                  - Число - цена на товар, рекомендованная системой на основании схожих предложений;
//     * КодВалюты                            - Строка - код валюты цен;
//     * СтавкаНДС                            - Число - Ставка НДС для товара;
//     * УцененныйТовар                       - Булево - признак, является ли товар уцененным;
//     * ЕстьУцененныеАналоги                 - Булево - признак, что у товара есть уцененные аналоги на складе Ozon;
//     * ПредоплатаОбязательна                - Булево - признак обязательной предоплаты за товар;
//     * ПредоплатаВозможна                   - Булево - признак, является ли предоплата возможной;
//     * ЗаданиеПубликации                    - Строка - номер задания на формирование документов;
//     * Статус                               - ПеречислениеСсылка.СтатусыОбъектовМаркетплейсаOzon - статус публикации товара;
//     * Состояние                            - Строка - краткое описание состояния публикации;
//     * ОписаниеСостояния                    - Строка - расширенное описание состояния публикации;
//     * КодОшибки                            - Строка - код ошибки при загрузке товара;
//     * ОписаниеОшибки                       - Строка - описание ошибки;
//     * ВыставленНаПродажу                   - Булево - Истина, если товар выставлен на продажу;
//     * ДатаСозданияНаМаркетплейсе           - Дата - дата и время создания товара;
//     * ДатаОбновленияНаМаркетплейсе         - Дата - дата и время последнего обновления товара;
//	   * ИнформацияОКомиссиях                 - ТаблицаЗначений - информация о комиссиях, 
//                                                см. НоваяТаблицаИнформацияОКомиссиях;
//	   * ИсточникиСхожихПредложений           - ТаблицаЗначений - информация об источниках схожих предложений, 
//                                               см. НоваяТаблицаИсточникиСхожихПредложений;
//     * КрупногабаритныйТовар                - Булево - признак крупногабаритного товара;
//     * ОбъемныйВес                          - Число - объемный вес товара;
//	   * ДатаАктуальностиОстатковМаркетплейса - Дата - дата актуальности остатков маркетплейса;
//	   * ОстаткиТовара_ВНаличии               - Число - сейчас на складе;
//	   * ОстаткиТовара_Зарезервировано        - Число - зарезервировано;
//	   * ОстаткиТовара_Ожидается              - Число - ожидается поставка;
//	   * ОстатокFBO                           - Число - сейчас на складе FBO;
//	   * РезервFBO                            - Число - зарезервировано FBO;
//	   * ОстатокFBS                           - Число - сейчас на складе FBS;
//	   * РезервFBS                            - Число - зарезервировано FBS;
//	   * ПродаетсяПоСхемеРаботыFBO            - Булево - товар продается по схеме FBO;
//	   * ПродаетсяПоСхемеРаботыFBS            - Булево - товар продается по схеме FBS;
//	   * ПродаетсяПоСхемеРаботыDBS            - Булево - товар продается по схеме Real FBS;
//	   * ОбъединяетсяВОднуКарточку            - Булево - признак объединения в одну карточку;
//	   * ЗначениеОбъединенияВОднуКарточку     - Строка - значение объединения в одну карточку;
//     * Изображения                          - ТаблицаЗначений - изображения товара,
//                                                см. НоваяТаблицаИзображений.
//
Функция НоваяТаблицаОписанияТоваров() Экспорт

	ОписаниеТипаБулево          = Новый ОписаниеТипов("Булево");
	ОписаниеТипаДата            = Новый ОписаниеТипов("Дата");
	ОписаниеТипаСтрока          = Новый ОписаниеТипов("Строка");
	ОписаниеТипаСтрока10        = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10));
	ОписаниеТипаСтрока50        = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250       = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаСтрока1024      = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1024));
	ОписаниеТипаЧисло           = Новый ОписаниеТипов("Число");
	ОписаниеТипаДенежнаяСумма   = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ДенежнаяСуммаНеотрицательная.Тип);
	ОписаниеТипаТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");
	
	Результат = Новый ТаблицаЗначений;
	
	// Основные
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса",            Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ВидОбъектаМаркетплейса",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторПубликации",              ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса",     ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторFBOSKU",                  ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторFBSSKU",                  ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ПредставлениеОбъектаМаркетплейса",     ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ОписаниеОбъектаМаркетплейса",          ОписаниеТипаСтрока1024);
	Результат.Колонки.Добавить("Штрихкод",                             ОписаниеТипаСтрока);
	
	// Категория маркетплейса
	Результат.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса",   ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеКатегорииМаркетплейса",    ОписаниеТипаСтрока250);
	
	// Ценовые показатели
	Результат.Колонки.Добавить("ЦеновойИндекс",                        ОписаниеТипаСтрока10);
	Результат.Колонки.Добавить("ЦенаДоСкидки",                         ОписаниеТипаДенежнаяСумма);
	Результат.Колонки.Добавить("ЦенаСоСкидкой",                        ОписаниеТипаДенежнаяСумма);
	Результат.Колонки.Добавить("МинимальнаяЦена",                      ОписаниеТипаДенежнаяСумма);
	Результат.Колонки.Добавить("ЦенаНаВитрине",                        ОписаниеТипаДенежнаяСумма);
	Результат.Колонки.Добавить("ЦенаПремиальная",                      ОписаниеТипаДенежнаяСумма);
	Результат.Колонки.Добавить("ЦенаРекомендованная",                  ОписаниеТипаДенежнаяСумма);
	Результат.Колонки.Добавить("КодВалюты",                            ОписаниеТипаСтрока10);
	Результат.Колонки.Добавить("СтавкаНДС",                            ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("УцененныйТовар",                       ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ЕстьУцененныеАналоги",                 ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ПредоплатаОбязательна",                ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ПредоплатаВозможна",                   ОписаниеТипаБулево);
	
	// Статус публикации	
	Результат.Колонки.Добавить("ЗаданиеПубликации",                    ОписаниеТипаСтрока10);
	Результат.Колонки.Добавить("Статус",                               Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбъектовМаркетплейсаOzon"));
	Результат.Колонки.Добавить("Состояние",                            ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ОписаниеСостояния",                    ОписаниеТипаСтрока1024);
	Результат.Колонки.Добавить("КодОшибки",                            ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ОписаниеОшибки",                       ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ВыставленНаПродажу",                   ОписаниеТипаБулево);
	
	// Прочее
	Результат.Колонки.Добавить("ДатаСозданияНаМаркетплейсе",           ОписаниеТипаДата);
	Результат.Колонки.Добавить("ДатаОбновленияНаМаркетплейсе",         ОписаниеТипаДата);
	Результат.Колонки.Добавить("МаркетинговыйЦвет", 			       ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИнформацияОКомиссиях",                 ОписаниеТипаТаблицаЗначений);
	Результат.Колонки.Добавить("ИсточникиСхожихПредложений",           ОписаниеТипаТаблицаЗначений);
	Результат.Колонки.Добавить("КрупногабаритныйТовар",                ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ОбъемныйВес",                		   ОписаниеТипаЧисло);

	// Остатки товара
	Результат.Колонки.Добавить("ДатаАктуальностиОстатковМаркетплейса", ОписаниеТипаДата);
	Результат.Колонки.Добавить("ОстаткиТовара_ВНаличии",               ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("ОстаткиТовара_Зарезервировано",        ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("ОстаткиТовара_Ожидается",              ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("ОстатокFBO",                           ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("РезервFBO",                            ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("ОстатокFBS",                           ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("РезервFBS",                            ОписаниеТипаЧисло);
	
	// Схемы продаж
	Результат.Колонки.Добавить("ПродаетсяПоСхемеРаботыFBO",            ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ПродаетсяПоСхемеРаботыFBS",            ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ПродаетсяПоСхемеРаботыDBS",            ОписаниеТипаБулево);
	
	// Параметры объединения в одну карточку
	Результат.Колонки.Добавить("ОбъединяетсяВОднуКарточку",            ОписаниеТипаБулево);
	Результат.Колонки.Добавить("ЗначениеОбъединенияВОднуКарточку",     ОписаниеТипаСтрока250);
	
	Результат.Колонки.Добавить("ИдентификаторАтрибутаОбъединенияВОднуКарточку",     ОписаниеТипаСтрока50);
	
	// Изображения
	Результат.Колонки.Добавить("Изображения",                          ОписаниеТипаТаблицаЗначений);
	
	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для информации о комиссиях.
//
// Возвращаемое значение:
//	 ТаблицаЗначений - таблица с колонками:
//	   * СхемаПродажи        - Строка - схема продажи;
//	   * ПроцентКомиссии     - Число - процент комиссии;
//	   * СуммаКомиссии       - Число - сумма комиссии;
//	   * МинимальнаяКомиссия - Число - минимальная сумма комиссии;
//	   * СтоимостьДоставки   - Число - стоимость доставки;
//	   * СтоимостьВозврата   - Число - стоимость возврата.
//
Функция НоваяТаблицаИнформацияОКомиссиях() Экспорт

	ОписаниеТипаСтрока10 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10));
	ОписаниеТипаЧисло    = Новый ОписаниеТипов("Число");

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("СхемаПродажи",        ОписаниеТипаСтрока10);
	Результат.Колонки.Добавить("ПроцентКомиссии",     ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("СуммаКомиссии",       ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("МинимальнаяКомиссия", ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("СтоимостьДоставки",   ОписаниеТипаЧисло);
	Результат.Колонки.Добавить("СтоимостьВозврата",   ОписаниеТипаЧисло);
	
	Возврат Результат;

КонецФункции

// Определяет текущую сопоставленную категорию для указанной номенклатуры.
//
// Параметры:                                                                   
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Номенклатура              - СправочникСсылка.Номенклатура - номенклатура, для которой требуется найти категорию.
//   ИдентификаторКатегории    - Строка - искомый идентификатор категории маркетплейса;
//   ИсточникКатегории         - ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категории из настроек сопоставления.
//
// Возвращаемое значение:
//   Структура - результат поиска категории:
//     * ИсточникКатегории      - СправочникСсылка.ВидыНоменклатуры, СправочникСсылка.Номенклатура, СправочникСсылка.ТоварныеКатегории -
//                                  источник категории 1С;
//                              - Неопределено - источник категории не найден;
//     * Категория              - СправочникСсылка.ВидыНоменклатуры, СправочникСсылка.Номенклатура, СправочникСсылка.ТоварныеКатегории -
//                                  подобранная категория 1С;
//                              - Неопределено - категория не найдена;
//     * ИдентификаторКатегории - Строка - идентификатор сопоставленной категории маркетплейса;
//     * НаименованиеКатегории  - Строка - наименование сопоставленной категории маркетплейса.
//
Функция ОпределитьТекущуюСопоставленнуюКатегориюМаркетплейсаПоНоменклатуре(УчетнаяЗаписьМаркетплейса, Номенклатура, ИдентификаторКатегории, ИсточникКатегории) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИсточникКатегории",      Неопределено);
	Результат.Вставить("Категория",              Неопределено);
	Результат.Вставить("ИдентификаторКатегории", "");
	Результат.Вставить("НаименованиеКатегории",  "");
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Объект1С = Неопределено;
	
	Если ИсточникКатегории = Неопределено Тогда
		ИсточникКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
	КонецЕсли;
	
	Если ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры") Тогда
		Объект1С = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "КатегорияНоменклатуры");
	ИначеЕсли ИсточникКатегории = ПредопределенноеЗначение("Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры") Тогда
		Объект1С = Номенклатура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект1С) Тогда
		Результат.Вставить("ИсточникКатегории", Объект1С);
		Результат.Вставить("Категория",         Объект1С);
		
		МассивКатегорий = Новый Массив;
		МассивКатегорий.Добавить(Объект1С);

		ВыборкаДанных = ВыборкаИсточникаКатегорииМаркетплейса(МассивКатегорий, ИсточникКатегории, УчетнаяЗаписьМаркетплейса, Ложь, Истина);
		Пока ВыборкаДанных.Следующий() Цикл
			Если ЗначениеЗаполнено(ИдентификаторКатегории) 
				 И ВыборкаДанных.ИдентификаторОбъектаМаркетплейса = ИдентификаторКатегории Тогда
				Результат.ИсточникКатегории      = ВыборкаДанных.РодительКатегории1С;
				Результат.Категория              = ВыборкаДанных.Категория1С;
				Результат.ИдентификаторКатегории = ВыборкаДанных.ИдентификаторОбъектаМаркетплейса;
				Результат.НаименованиеКатегории  = ВыборкаДанных.НаименованиеОбъектаМаркетплейса;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Формирует дерево реквизитов товара с учетом возможного сравнения, дополняет его основными данными, данными о ценах.
//
// Параметры:
// 	 УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ЗначенияРеквизитов        - ТаблицаЗначений - значения реквизитов товара из сервиса, 
//                                 см. НоваяТаблицаЗначенийРеквизитов.
//   ДанныеТовара              - СтрокаДереваЗначений  - значения реквизитов товара из учетной системы, 
//                                 см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки;
//							   - СтрокаТаблицаЗначений - состав колонок должен соответствовать 
//                                 РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon;
//							   - Структура             - состав должен соответствовать структуре 
//                                 РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon;
//                             - Неопределено          - заполнение групп основных реквизитов не производится.
//   ЦеныТовара                - Массив Из Структура - цены товара из учетной системы, структура элементов массива соответствует таблице 
//                                 значений ПолучитьТекущиеЦеныПоИдентификаторам.
//   НастройкиУчетнойЗаписи    - Структура - настройки учетной записи, 
//                                 см. Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи.
//   ВидыЦен                   - ТаблицаЗначений - таблица с запрошенными видами цен,
//                                 см. ВидыЦенУчетнойЗаписи.
//
// Возвращаемое значение:
//   ДеревоЗначений - дерево заполненных реквизитов товара, см. НовоеДеревоРеквизитов().
//
Функция СформироватьДеревоРеквизитов(УчетнаяЗаписьМаркетплейса, ЗначенияРеквизитов, ДанныеТовара, 
			ЦеныТовара = Неопределено, НастройкиУчетнойЗаписи = Неопределено, ВидыЦен = Неопределено) Экспорт

	ДеревоРеквизитов = ПодготовитьДеревоРеквизитовТовара(ЗначенияРеквизитов, Истина);

	Если ДанныеТовара = Неопределено Тогда
		Возврат ДеревоРеквизитов;
	КонецЕсли;
	
	Если НастройкиУчетнойЗаписи = Неопределено Тогда
		НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	КонецЕсли;
	
	// Основные данные товара
	Родитель                                    = ДеревоРеквизитов.Строки.Вставить(0);
	Родитель.Уровень                            = 0;
	Родитель.ОсновныеПоказатели                 = Истина;
	Родитель.НаименованиеАтрибутаМаркетплейса   = НСтр("ru = 'Основные данные товара'");
	Родитель.НомерКартинкиКоллекцииТипов        = 99;
	Родитель.ТекущееНомерКартинкиКоллекцииТипов = 99;
	
	// Идентификаторы  
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторПубликации", 
			НСтр("ru = 'Идентификатор публикации'"), 
			НСтр("ru = 'Идентификатор публикации товара, передаваемый на площадку маркетплейса Ozon как артикул'"), 
			Истина, 
			ДанныеТовара.ИдентификаторПубликации, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторПубликации", 
			НСтр("ru = 'Идентификатор публикации'"), 
			НСтр("ru = 'Идентификатор публикации товара, передаваемый на площадку маркетплейса Ozon как артикул'"), 
			Истина, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ИдентификаторПубликации, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторОбъектаМаркетплейса", 
			НСтр("ru = 'Идентификатор Ozon'"), 
			НСтр("ru = 'Идентификатор товара на площадке маркетплейса Ozon'"), 
			Истина, 
			ДанныеТовара.ИдентификаторОбъектаМаркетплейса, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторОбъектаМаркетплейса", 
			НСтр("ru = 'Идентификатор Ozon'"),
			НСтр("ru = 'Идентификатор товара на площадке маркетплейса Ozon'"), 
			Истина, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ИдентификаторОбъектаМаркетплейса, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторFBOSKU", 
			НСтр("ru = 'Идентификатор FBO SKU'"), 
			НСтр("ru = 'Идентификатор FBO SKU'"), 
			Ложь, 
			ДанныеТовара.ИдентификаторFBOSKU, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторFBOSKU", 
			НСтр("ru = 'Идентификатор FBO SKU'"), 
			НСтр("ru = 'Идентификатор FBO SKU'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ИдентификаторFBOSKU, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторFBSSKU", 
			НСтр("ru = 'Идентификатор FBS SKU'"), 
			НСтр("ru = 'Идентификатор SKU (FBS  и RealFBS)'"), 
			Ложь, 
			ДанныеТовара.ИдентификаторFBSSKU, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторFBSSKU", 
			НСтр("ru = 'Идентификатор FBS SKU'"), 
			НСтр("ru = 'Идентификатор SKU (FBS  и RealFBS)'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ИдентификаторFBSSKU, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Представление                                      
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ПредставлениеОбъектаМаркетплейса", 
			НСтр("ru = 'Представление товара на Ozon'"), 
			НСтр("ru = 'Представление товара на площадке маркетплейса Ozon'"), 
			Истина, 
			ДанныеТовара.ПредставлениеОбъектаМаркетплейса, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ПредставлениеОбъектаМаркетплейса", 
			НСтр("ru = 'Представление товара на Ozon'"), 
			НСтр("ru = 'Представление товара на площадке маркетплейса Ozon'"), 
			Истина, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ПредставлениеОбъектаМаркетплейса, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Описание                                      
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ОписаниеОбъектаМаркетплейса", 
			НСтр("ru = 'Описание товара'"), 
			НСтр("ru = 'Описание товара на площадке маркетплейса Ozon'"), 
			Ложь, 
			ДанныеТовара.ОписаниеОбъектаМаркетплейса, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ОписаниеОбъектаМаркетплейса", 
			НСтр("ru = 'Описание товара'"), 
			НСтр("ru = 'Описание товара на площадке маркетплейса Ozon'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Статус публикации
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"Статус", 
			НСтр("ru = 'Статус публикации'"), 
			НСтр("ru = 'Статус публикации'"), 
			Истина, 
			ДанныеТовара.Статус, 
			Строка(ДанныеТовара.Статус));
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"Статус", 
			НСтр("ru = 'Статус публикации'"), 
			НСтр("ru = 'Статус публикации'"), 
			Истина, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].Статус, 
			Строка(ДанныеТовара.ДанныеТовараИзСервиса[0].Статус));
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ОписаниеСостояния", 
			НСтр("ru = 'Описание состояния'"), 
			НСтр("ru = 'Описание состояния'"), 
			Ложь, 
			ДанныеТовара.ОписаниеСостояния, 
			Строка(ДанныеТовара.ОписаниеСостояния));
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ОписаниеСостояния", 
			НСтр("ru = 'Описание состояния'"), 
			НСтр("ru = 'Описание состояния'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ОписаниеСостояния, 
			Строка(ДанныеТовара.ДанныеТовараИзСервиса[0].ОписаниеСостояния));
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Категория                                 
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторКатегорииМаркетплейса", 
			НСтр("ru = 'Категория Ozon'"), 
			НСтр("ru = 'Категория Ozon'"), 
			Истина, 
			?(НЕ ЗначениеЗаполнено(ДанныеТовара.НаименованиеКатегорииМаркетплейса), НСтр("ru = '<не определена>'"), 
			ДанныеТовара.НаименованиеКатегорииМаркетплейса),
			ДанныеТовара.ИдентификаторКатегорииМаркетплейса);
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторКатегорииМаркетплейса", 
			НСтр("ru = 'Категория Ozon'"), 
			НСтр("ru = 'Категория Ozon'"), 
			Истина, 
			?(НЕ ЗначениеЗаполнено(ДанныеТовара.ДанныеТовараИзСервиса[0].НаименованиеКатегорииМаркетплейса), НСтр("ru = '<не определена>'"), 
			ДанныеТовара.ДанныеТовараИзСервиса[0].НаименованиеКатегорииМаркетплейса),
			ДанныеТовара.ДанныеТовараИзСервиса[0].ИдентификаторКатегорииМаркетплейса);
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	Иначе
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ИдентификаторКатегорииМаркетплейса", 
			НСтр("ru = 'Категория Ozon'"), 
			НСтр("ru = 'Категория Ozon'"), 
			Истина, 
			?(НЕ ЗначениеЗаполнено(ДанныеТовара.НаименованиеКатегорииМаркетплейса), НСтр("ru = '<не определена>'"), 
			ДанныеТовара.НаименованиеКатегорииМаркетплейса),
			ДанныеТовара.ИдентификаторКатегорииМаркетплейса);
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Штрихкоды
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"Штрихкод", 
			НСтр("ru = 'Штрихкод(ы)'"), 
			НСтр("ru = 'Штрихкод(ы)'"), 
			Ложь, 
			СтрРазделить(ДанныеТовара.Штрихкод, ";", Ложь), 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"Штрихкод", 
			НСтр("ru = 'Штрихкод(ы)'"), 
			НСтр("ru = 'Штрихкод(ы)'"), 
			Ложь, 
			СтрРазделить(ДанныеТовара.ДанныеТовараИзСервиса[0].Штрихкод, ";", Ложь), 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Крупногабаритный товар
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"КрупногабаритныйТовар", 
			НСтр("ru = 'Крупногабаритный товар'"), 
			НСтр("ru = 'Крупногабаритный товар'"), 
			Ложь, 
			ДанныеТовара.КрупногабаритныйТовар, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"КрупногабаритныйТовар", 
			НСтр("ru = 'Крупногабаритный товар'"), 
			НСтр("ru = 'Крупногабаритный товар'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].КрупногабаритныйТовар, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Параметры объединения в одну карточку
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ОбъединяетсяВОднуКарточку", 
			НСтр("ru = 'Объединяется в одну карточку'"), 
			НСтр("ru = 'Объединяется в одну карточку'"), 
			Истина, 
			ДанныеТовара.ОбъединяетсяВОднуКарточку, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ОбъединяетсяВОднуКарточку", 
			НСтр("ru = 'Объединяется в одну карточку'"), 
			НСтр("ru = 'Объединяется в одну карточку'"), 
			Истина, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ОбъединяетсяВОднуКарточку, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ЗначениеОбъединенияВОднуКарточку", 
			НСтр("ru = 'Значение объединения в одну карточку'"), 
			НСтр("ru = 'Значение объединения в одну карточку'"), 
			Истина, 
			ДанныеТовара.ЗначениеОбъединенияВОднуКарточку, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ЗначениеОбъединенияВОднуКарточку", 
			НСтр("ru = 'Значение объединения в одну карточку'"), 
			НСтр("ru = 'Значение объединения в одну карточку'"), 
			Истина, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ЗначениеОбъединенияВОднуКарточку, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Истина, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Ценовые показатели
	Родитель                                    = ДеревоРеквизитов.Строки.Вставить(1);
	Родитель.ЦеновыеПоказатели                  = Ложь;
	Родитель.Уровень                            = 0;
	Родитель.НаименованиеАтрибутаМаркетплейса   = НСтр("ru = 'Ценовые показатели'");
	Родитель.НомерКартинкиКоллекцииТипов        = 99;
	Родитель.ТекущееНомерКартинкиКоллекцииТипов = 99;
	
	// Цены товаров
	СоответствиеВидовЦен = Новый Соответствие;
	СоответствиеВидовЦен.Вставить("ВидЦеныДоСкидок",        "ЦенаДоСкидки");
	СоответствиеВидовЦен.Вставить("ВидЦеныСУчетомСкидок",   "ЦенаСоСкидкой");
	СоответствиеВидовЦен.Вставить("ВидЦеныМинимальныхЦен",  "МинимальнаяЦена");
	СоответствиеВидовЦен.Вставить("ВидЦеныСоВсемиАкциями",  "ЦенаНаВитрине");
	СоответствиеВидовЦен.Вставить("ВидЦеныРекомендованный", "ЦенаРекомендованная");

	Если ВидыЦен = Неопределено Тогда
		ВидыЦен = ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Истина, Истина);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыЗначений Из ВидыЦен Цикл
		ЦенаЗначение        = 0;
		ЦенаТекущееЗначение = 0;
		
		Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда 
			Если ЦеныТовара <> Неопределено Тогда
				Для каждого ЭлементКоллекции Из ЦеныТовара Цикл
					Если СтрокаТаблицыЗначений.Значение = ЭлементКоллекции.ВидЦены Тогда
						ЦенаТекущееЗначение = ЭлементКоллекции.Цена;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ИдентификаторВидаЦен = СоответствиеВидовЦен.Получить(СтрокаТаблицыЗначений.Идентификатор);
				Если ИдентификаторВидаЦен <> Неопределено Тогда
					Попытка
						ЦенаТекущееЗначение = ДанныеТовара[ИдентификаторВидаЦен];
					Исключение
						ЦенаТекущееЗначение = 0;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
			ИдентификаторВидаЦен = СоответствиеВидовЦен.Получить(СтрокаТаблицыЗначений.Идентификатор);
			Если ИдентификаторВидаЦен <> Неопределено Тогда
				ЦенаЗначение = ДанныеТовара.ДанныеТовараИзСервиса[0][ИдентификаторВидаЦен];
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицыЗначений.ОбязательноеЗаполнение 
			 ИЛИ ЗначениеЗаполнено(ЦенаТекущееЗначение) ИЛИ ЗначениеЗаполнено(ЦенаЗначение) Тогда
			СтрокаДереваРеквизитов = Родитель.Строки.Добавить();
			Если СтрокаТаблицыЗначений.ОбязательноеЗаполнение 
			 	 ИЛИ ЗначениеЗаполнено(ЦенаТекущееЗначение) Тогда                     
				ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
					СтрокаТаблицыЗначений.Идентификатор, 
					СтрокаТаблицыЗначений.Наименование, 
					СтрокаТаблицыЗначений.Наименование, 
					СтрокаТаблицыЗначений.ОбязательноеЗаполнение, 
					?(ЗначениеЗаполнено(ЦенаТекущееЗначение), Формат(ЦенаТекущееЗначение, "ЧДЦ=2; ЧН=") + " " + СокрЛП(НастройкиУчетнойЗаписи.ВалютаУчета), ""), 
					"");
				ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Ложь, Истина, ПараметрыАтрибута);
			КонецЕсли;
			Если СтрокаТаблицыЗначений.ОбязательноеЗаполнение 
			 	 ИЛИ ЗначениеЗаполнено(ЦенаЗначение) Тогда
				ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
					СтрокаТаблицыЗначений.Идентификатор, 
					СтрокаТаблицыЗначений.Наименование, 
					СтрокаТаблицыЗначений.Наименование, 
					СтрокаТаблицыЗначений.ОбязательноеЗаполнение, 
					?(ЗначениеЗаполнено(ЦенаЗначение), Формат(ЦенаЗначение, "ЧДЦ=2; ЧН=") + " " + ДанныеТовара.ДанныеТовараИзСервиса[0].КодВалюты, ""), 
					"");
				ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Ложь, Истина, ПараметрыАтрибута);
			КонецЕсли;
			СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
			СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
			Если СтрокаТаблицыЗначений.ОбязательноеЗаполнение 
			 	 ИЛИ ЗначениеЗаполнено(ЦенаТекущееЗначение) Тогда                     
				СтрокаДереваРеквизитов.ТекущееТипЗначенияАтрибута         = "decimal";
				СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 13;
			КонецЕсли;
			Если СтрокаТаблицыЗначений.ОбязательноеЗаполнение 
			 	 ИЛИ ЗначениеЗаполнено(ЦенаЗначение) Тогда
				СтрокаДереваРеквизитов.ТипЗначенияАтрибута         = "decimal";
				СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов = 13;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Ценовой индекс
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ЦеновойИндекс", 
			НСтр("ru = 'Ценовой индекс'"), 
			НСтр("ru = 'Ценовой индекс'"), 
			Ложь, 
			ДанныеТовара.ЦеновойИндекс, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Ложь, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ЦеновойИндекс", 
			НСтр("ru = 'Ценовой индекс'"), 
			НСтр("ru = 'Ценовой индекс'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ЦеновойИндекс, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Ложь, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	// Уцененный товар
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"УцененныйТовар", 
			НСтр("ru = 'Уцененный товар'"), 
			НСтр("ru = 'Уцененный товар'"), 
			Ложь, 
			ДанныеТовара.УцененныйТовар, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Ложь, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"УцененныйТовар", 
			НСтр("ru = 'Уцененный товар'"), 
			НСтр("ru = 'Уцененный товар'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].УцененныйТовар, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Ложь, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	СтрокаДереваРеквизитов 									  = Родитель.Строки.Добавить();
	СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов        = 99;
	СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов = 99;
	Если ДанныеТовара.ВариантЗагрузки <> 2 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ЕстьУцененныеАналоги", 
			НСтр("ru = 'Имеются уцененные аналоги'"), 
			НСтр("ru = 'Имеются уцененные аналоги'"), 
			Ложь, 
			ДанныеТовара.ЕстьУцененныеАналоги, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Ложь, Ложь, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	Если ДанныеТовара.ДанныеТовараИзСервиса.Количество() > 0 Тогда
		ПараметрыАтрибута = НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(
			"ЕстьУцененныеАналоги", 
			НСтр("ru = 'Имеются уцененные аналоги'"), 
			НСтр("ru = 'Имеются уцененные аналоги'"), 
			Ложь, 
			ДанныеТовара.ДанныеТовараИзСервиса[0].ЕстьУцененныеАналоги, 
			"");
		ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, Истина, Ложь, Ложь, ПараметрыАтрибута);
	КонецЕсли;
	
	Возврат ДеревоРеквизитов;
	
КонецФункции

// Конструктор параметров атрибута для заполнения строки дерева реквизитов товара.
//
// Параметры:       
//   ИдентификаторАтрибутаМаркетплейса         - Строка - идентификатор атрибута;
//   НаименованиеАтрибутаМаркетплейса          - Строка - наименование атрибута;
//   ОписаниеНазначенияАтрибута                - Строка - описание назначения атрибута;
//   ОбязательныйАтрибут                       - Булево - признак обязательной атрибута;
//	 ЗначениеАтрибутаМаркетплейса 	  		   - Строка, Число, Булево, Дата - значение атрибута;
//	 ИдентификаторЗначенияАтрибутаМаркетплейса - Строка - идентификатор значения для маркетплейса при выборе значения из списка;
//
// Возвращаемое значение:
//   Структура - параметры атрибута для заполнения строки дерева:
//     * ИдентификаторАтрибутаМаркетплейса         - Строка - идентификатор атрибута;
//     * НаименованиеАтрибутаМаркетплейса          - Строка - наименование атрибута;
//     * ОписаниеНазначенияАтрибута                - Строка - описание назначения атрибута;
//     * ОбязательныйАтрибут                       - Булево - признак обязательной атрибута;
//	   * ЗначениеАтрибутаМаркетплейса 	  		   - Строка, Число, Булево, Дата - значение атрибута;
//	   * ИдентификаторЗначенияАтрибутаМаркетплейса - Строка - идентификатор значения для маркетплейса при выборе значения из списка;
//
Функция НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов(ИдентификаторАтрибутаМаркетплейса, НаименованиеАтрибутаМаркетплейса, 
			ОписаниеНазначенияАтрибута, ОбязательныйАтрибут, ЗначениеАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибутаМаркетплейса = "")
			
	Результат = Новый Структура; 
	Результат.Вставить("ИдентификаторАтрибутаМаркетплейса",         ИдентификаторАтрибутаМаркетплейса);
	Результат.Вставить("НаименованиеАтрибутаМаркетплейса",          НаименованиеАтрибутаМаркетплейса);
	Результат.Вставить("ОписаниеНазначенияАтрибута",                ОписаниеНазначенияАтрибута);
	Результат.Вставить("ОбязательныйАтрибут",                       ОбязательныйАтрибут);
	Результат.Вставить("ЗначениеАтрибутаМаркетплейса",              ЗначениеАтрибутаМаркетплейса);
	Результат.Вставить("ИдентификаторЗначенияАтрибутаМаркетплейса", ИдентификаторЗначенияАтрибутаМаркетплейса);
	
	Возврат Результат;
			
КонецФункции

// Заполняет строку дерева реквизитов товара с учетом возможного сравнения, дополняет его основными данными, данными о ценах.
//
// Параметры:       
//   СтрокаДереваРеквизитов - СтрокаДереваЗначений - заполняемая строка дерева реквизитов.
// 	 ИзСервиса              - Булево - Истина, если заполняются данные, полученные из сервиса.
//   ОсновныеПоказатели     - Булево - признак основных показателей (наименование родителя строки дерева).
//   ЦеновыеПоказатели      - Булево - признак ценовых показателей (наименование родителя строки дерева).
//   ПараметрыАтрибута      - Структура - параметры атрибута для заполнения строки дерева,
//                              см. НовыеПараметрыАтрибутаДляЗаполненияСтрокиДереваРеквизитов.
//
Процедура ЗаполнитьСтрокуДереваРеквизитов(СтрокаДереваРеквизитов, ИзСервиса, ОсновныеПоказатели, ЦеновыеПоказатели, ПараметрыАтрибута)
				
	РасширенияИзображений         = РасширенияИзображений(Ложь);
	ЯвляетсяКоллекциейЗначений    = Ложь;
	ДоступенВыборЗначенияИзСписка = ЗначениеЗаполнено(ПараметрыАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса);
	ТипЗначенияАтрибута1С         = "Строка";
	ТипЗначенияАтрибута           = "string";
	ЗначенияАтрибутаМаркетплейса  = Новый СписокЗначений;
	
	Если ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) = Тип("Булево") Тогда
		ТипЗначенияАтрибута1С = "Булево";
		ТипЗначенияАтрибута   = "boolean";		
	ИначеЕсли ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) = Тип("Строка") Тогда
		ТипЗначенияАтрибута1С = "Строка";
		ТипЗначенияАтрибута   = "string";
		Если СтрНайти(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса, Символы.ПС) > 0 Тогда
			ТипЗначенияАтрибута = "multiline";
		ИначеЕсли РасширенияИзображений.Найти(Сред(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса, 
		СтрНайти(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса, ".") + 1)) <> Неопределено Тогда
			ТипЗначенияАтрибута = "imageurl";
		ИначеЕсли СтрНайти(ВРег(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса), "HTTP") = 1 Тогда
			ТипЗначенияАтрибута = "url";
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) = Тип("Число") Тогда	
		ТипЗначенияАтрибута1С = "Число";
		ТипЗначенияАтрибута   = "decimal";
		Если ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса = Цел(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) Тогда
			ТипЗначенияАтрибута = "integer";
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) = Тип("Дата") Тогда
		ТипЗначенияАтрибута1С = "Дата";
		ТипЗначенияАтрибута   = "data";
	ИначеЕсли ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) = Тип("Неопределено") Тогда
		ТипЗначенияАтрибута1С = "";
		ТипЗначенияАтрибута   = "";
	ИначеЕсли ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса) = Тип("Массив") Тогда
		ЯвляетсяКоллекциейЗначений    = Истина;
		ДоступенВыборЗначенияИзСписка = Ложь;
		ЗначенияАтрибутаМаркетплейса.ЗагрузитьЗначения(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса);
		ЗначенияАтрибутаМаркетплейса.СортироватьПоЗначению();
		ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса = СтрСоединить(ЗначенияАтрибутаМаркетплейса.ВыгрузитьЗначения(), ";"); 
	Иначе
		ДоступенВыборЗначенияИзСписка = Истина;
		ТипЗначенияАтрибута1С         = СтрЗаменить(Строка(ТипЗнч(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса)), " ", "");
	КонецЕсли;
				
	СтрокаДереваРеквизитов.Уровень                             = 3;
	СтрокаДереваРеквизитов.ОсновныеПоказатели                  = ОсновныеПоказатели; 
	СтрокаДереваРеквизитов.ЦеновыеПоказатели                   = ЦеновыеПоказатели;
	СтрокаДереваРеквизитов.ИдентификаторАтрибутаМаркетплейса   = ПараметрыАтрибута.ИдентификаторАтрибутаМаркетплейса;
	СтрокаДереваРеквизитов.НаименованиеАтрибутаМаркетплейса    = ПараметрыАтрибута.НаименованиеАтрибутаМаркетплейса;	
	СтрокаДереваРеквизитов.ОписаниеНазначенияАтрибута          = ПараметрыАтрибута.ОписаниеНазначенияАтрибута;
	СтрокаДереваРеквизитов.ЗначениеАтрибутаЗаданоПользователем = Истина;
	
	Если ИзСервиса Тогда
		СтрокаДереваРеквизитов.ОбязательныйАтрибут                       = ПараметрыАтрибута.ОбязательныйАтрибут;
		СтрокаДереваРеквизитов.ЯвляетсяКоллекциейЗначений                = ЯвляетсяКоллекциейЗначений;
		СтрокаДереваРеквизитов.ДоступенВыборЗначенияИзСписка             = ДоступенВыборЗначенияИзСписка;
		СтрокаДереваРеквизитов.ТипЗначенияАтрибута                       = ТипЗначенияАтрибута;
		СтрокаДереваРеквизитов.ТипЗначенияАтрибута1С                     = ТипЗначенияАтрибута1С;
		СтрокаДереваРеквизитов.ЗначениеАтрибутаМаркетплейса              = ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса;
		СтрокаДереваРеквизитов.ИдентификаторЗначенияАтрибутаМаркетплейса = ПараметрыАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса;
		СтрокаДереваРеквизитов.ЗначениеАтрибутаМаркетплейсаБулево        = ?(ТипЗначенияАтрибута1С = "Булево", ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса, Ложь);
		СтрокаДереваРеквизитов.ЗначенияАтрибутаМаркетплейса              = ЗначенияАтрибутаМаркетплейса;
		СтрокаДереваРеквизитов.ЗначениеАтрибутаЗаполнено                 = ЗначениеЗаполнено(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса);
		СтрокаДереваРеквизитов.НомерКартинкиКоллекцииТипов               = ОпределитьНомерКартинкиКоллекцииТипов(ТипЗначенияАтрибута, 
																				ТипЗначенияАтрибута1С, 
																				ЯвляетсяКоллекциейЗначений, 
																				ДоступенВыборЗначенияИзСписка);
	
	Иначе
		СтрокаДереваРеквизитов.ОбязательныйАтрибут               			    = ПараметрыАтрибута.ОбязательныйАтрибут;
		СтрокаДереваРеквизитов.ТекущееОбязательныйАтрибут                       = ПараметрыАтрибута.ОбязательныйАтрибут;
		СтрокаДереваРеквизитов.ТекущееЯвляетсяКоллекциейЗначений                = ЯвляетсяКоллекциейЗначений;
		СтрокаДереваРеквизитов.ТекущееДоступенВыборЗначенияИзСписка             = ДоступенВыборЗначенияИзСписка;
		СтрокаДереваРеквизитов.ТекущееТипЗначенияАтрибута                       = ТипЗначенияАтрибута;
		СтрокаДереваРеквизитов.ТекущееТипЗначенияАтрибута1С                     = ТипЗначенияАтрибута1С;
		СтрокаДереваРеквизитов.ТекущееЗначениеАтрибутаМаркетплейса              = ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса;
		СтрокаДереваРеквизитов.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = ПараметрыАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса;
		СтрокаДереваРеквизитов.ТекущееЗначениеАтрибутаМаркетплейсаБулево        = ?(ТипЗначенияАтрибута1С = "Булево", ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса, Ложь);
		СтрокаДереваРеквизитов.ТекущееЗначенияАтрибутаМаркетплейса              = ЗначенияАтрибутаМаркетплейса;
		СтрокаДереваРеквизитов.ТекущееЗначениеАтрибутаЗаполнено                 = ЗначениеЗаполнено(ПараметрыАтрибута.ЗначениеАтрибутаМаркетплейса);
		СтрокаДереваРеквизитов.ТекущееНомерКартинкиКоллекцииТипов               = ОпределитьНомерКартинкиКоллекцииТипов(ТипЗначенияАтрибута, 
																						ТипЗначенияАтрибута1С, 
																						ЯвляетсяКоллекциейЗначений, 
																						ДоступенВыборЗначенияИзСписка);
	КонецЕсли;
	
	Если СтрокаДереваРеквизитов.ТекущееЯвляетсяКоллекциейЗначений = СтрокаДереваРеквизитов.ЯвляетсяКоллекциейЗначений
		 И СтрокаДереваРеквизитов.ТекущееДоступенВыборЗначенияИзСписка = СтрокаДереваРеквизитов.ДоступенВыборЗначенияИзСписка
		 И СтрокаДереваРеквизитов.ТекущееТипЗначенияАтрибута = СтрокаДереваРеквизитов.ТипЗначенияАтрибута
		 И СтрокаДереваРеквизитов.ТекущееЗначениеАтрибутаМаркетплейса = СтрокаДереваРеквизитов.ЗначениеАтрибутаМаркетплейса
		 И СтрокаДереваРеквизитов.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = СтрокаДереваРеквизитов.ИдентификаторЗначенияАтрибутаМаркетплейса 
		 И СтрСоединить(СтрокаДереваРеквизитов.ТекущееЗначенияАтрибутаМаркетплейса.ВыгрузитьЗначения(), ";")
		 = СтрСоединить(СтрокаДереваРеквизитов.ЗначенияАтрибутаМаркетплейса.ВыгрузитьЗначения(), ";") Тогда
		СтрокаДереваРеквизитов.ЕстьРазличия = Ложь;
	Иначе
		СтрокаДереваРеквизитов.ЕстьРазличия = Истина;
	КонецЕсли;

КонецПроцедуры
// Определяет представление типа данных в пользовательском интерфейсе.
// 
// Параметры:
//   ТипДанныхСтрокой - Строка - имя типа данных 1С.
//
// Возвращаемое значение:
//   Строка - представление типа данных.
//
Функция ОпределитьПредставлениеТипа(ТипДанныхСтрокой)
    
	Результат = ТипДанныхСтрокой;

	Если ТипДанныхСтрокой = "Строка" Тогда
		Результат = НСтр("ru = 'Строка'");
	ИначеЕсли ТипДанныхСтрокой = "Число" Тогда
		Результат = НСтр("ru = 'Число'");
	ИначеЕсли ТипДанныхСтрокой = "Дата" Тогда
		Результат = НСтр("ru = 'Дата'");
	ИначеЕсли ТипДанныхСтрокой = "Булево" Тогда
		Результат = НСтр("ru = 'Булево'");
	КонецЕсли;

	Возврат Результат;

КонецФункции

#Область ИмпортДанных

// Обновляет служебные данные дерева товаров при открытии обработки.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса      - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ДеревоТоваров                  - ДеревоЗначений - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                      см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//   СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго уровня дерева товаров.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * Ошибка        - Структура - код и описание ошибки при выполнении функции, см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * ДеревоТоваров - ДеревоЗначений - заполненное дерево товаров, см. реквизит "ИмпортируемыеТовары" в 
//                         Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//
Функция ИмпортИзOzonОбновитьСлужебныеДанные(Знач УчетнаяЗаписьМаркетплейса, ДеревоТоваров, СортироватьСтрокиДереваТоваров) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка",        ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
	Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Результат.Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки для импорта данных по товарам.'");
		Возврат Результат;
	КонецЕсли;
	
	Отказ = Ложь;
	Попытка
		НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
		НалогообложениеНДС     = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		Организация            = НастройкиУчетнойЗаписи.Организация;
		ТекущаяДата            = ТекущаяДатаСеанса();
		ВидыЦен                = ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Истина, Истина);
		СписокНоменклатуры     = Новый Массив;
		
		Для каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
			Для каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
				Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) Тогда
					СписокНоменклатуры.Добавить(СтрокаДереваВторогоУровня.Номенклатура);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Запрос для определения дополнительных реквизитов
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СправочникНоменклатура.Ссылка КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА &ИспользоватьХарактеристикиНоменклатуры
			|				И СправочникНоменклатура.ИспользоватьХарактеристики
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ХарактеристикиИспользуются,
			|	ИСТИНА КАК ИспользоватьУпаковки,
			|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения,
			|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
			|	НЕОПРЕДЕЛЕНО КАК Ставка
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ГДЕ
			|	СправочникНоменклатура.Ссылка В(&СписокНоменклатуры)";
		
		Запрос.УстановитьПараметр("СписокНоменклатуры",                     СписокНоменклатуры);   
		Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
		Запрос.УстановитьПараметр("НалогообложениеНДС",                     НалогообложениеНДС);
		Запрос.УстановитьПараметр("Дата",									ТекущаяДата);

		УстановитьПривилегированныйРежим(Истина);
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		// Заполнение дерева товаров  
		Для каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
			Для каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
				СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса = СтрЗаменить(
					СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса, 
					НСтр("ru = '<не определена>'"), 
					"");
				СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса;
				СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса;
				
				Отбор = Новый Структура("Номенклатура", СтрокаДереваВторогоУровня.Номенклатура);
				ВыборкаДанных.Сбросить();
				Если ВыборкаДанных.НайтиСледующий(Отбор) Тогда
					СтрокаДереваВторогоУровня.ХарактеристикиИспользуются = ВыборкаДанных.ХарактеристикиИспользуются;
					СтрокаДереваВторогоУровня.ИспользоватьУпаковки       = ВыборкаДанных.ИспользоватьУпаковки;
					СтрокаДереваВторогоУровня.ЕдиницаИзмерения           = ВыборкаДанных.ЕдиницаИзмерения;
					СтрокаДереваВторогоУровня.СтавкаНДС                  = ВыборкаДанных.СтавкаНДС;
					СтрокаДереваВторогоУровня.Ставка                     = ВыборкаДанных.Ставка;
				КонецЕсли;
				
				// Значения реквизитов
				ДополнитьТаблицуЗначенийРеквизитов(
					УчетнаяЗаписьМаркетплейса,
					СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
					Неопределено,
					Неопределено,
					СтрокаДереваВторогоУровня.Категория,
					СтрокаДереваВторогоУровня.ДанныеОбъекта,
					Истина);
					
				// Дерево реквизитов
				СтрокаДереваВторогоУровня.ДеревоРеквизитов = СформироватьДеревоРеквизитов(
					УчетнаяЗаписьМаркетплейса,
					СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
					СтрокаДереваВторогоУровня,
					Неопределено,
					НастройкиУчетнойЗаписи,
					ВидыЦен);
			КонецЦикла;
		КонецЦикла;
		
		ИмпортИзOzonОпределитьНаименованияГруппДереваТоваров(
			ДеревоТоваров, 
			СортироватьСтрокиДереваТоваров, 
			0,
			-1);
		
		Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
		
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;

	Если Отказ Тогда
		Результат.Ошибка.КодОшибки 	    = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Формирует список товаров с описаниями для последующего импорта.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - параметры выполнения функции:
//     * ВариантЗагрузкиДанных          - Число - вариант загрузки данных из сервиса, см. реквизит "ВариантЗагрузкиДанных" в
//                                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * КэшКатегорий                   - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//     * ЗагрузитьЦеныПродажи           - Булево - признак записи цен, см. реквизит "ЗагрузитьЦеныПродажи" в
//                                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * ИмяИдентификатора              - Строка - имя ключевого поля идентификаторов. Может принимать значения:
//                                          "ИдентификаторОбъектаМаркетплейса" и "ИдентификаторПубликации". 
//     * РазмерПорцииЗагрузкиДанных     - Число - размер порции загрузки данных с торговой площадки за один запрос;
//                                      - Неопределено - размер порции для загрузки не ограничен.
//     * СоздатьЭлементыНоменклатуры    - Булево - Истина, если несопоставленные элементы справочника "Номенклатура" необходимо создать.
//     * СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго уровня дерева товаров.
//     * ОтображатьСопоставленные       - Число - установленный фильтр по сопоставленным позициям дерева товаров.
//     * ОтображатьПоСтатусу            - Число - установленный фильтр по статусу позиций дерева товаров.
//     * СледующаяПорцияДанных          - Булево - получить следующую порцию данных с торговой площадки (уже считанные данные будут пропущены).
//     * ИдентификаторыТоваров          - ТаблицаЗначений - таблица идентификаторов товаров, 
//                                          см. НоваяТаблицаИдентификаторовТоваров.
//   ДеревоТоваров             - ДеревоЗначений - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                 см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//                             - Неопределено - заполнение дерева товаров не производится.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * Ошибка                       - Структура - код и описание ошибки при выполнении функции, 
//                                        см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * ДеревоТоваров                - ДеревоЗначений - заполненное дерево товаров, см. реквизит "ИмпортируемыеТовары" в 
//                                        Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//                                    - Неопределено - заполнение дерева товаров не производится.
//     * КэшКатегорий                 - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//     * ИдентификаторыТоваров        - ТаблицаЗначений - таблица идентификаторов товаров, 
//                                          см. НоваяТаблицаИдентификаторовТоваров.
//     * ОписаниеТоваров              - ТаблицаЗначений - описания товаров, 
//                                        см. НоваяТаблицаОписанияТоваров.
//     * ОписаниеХарактеристикТоваров - ТаблицаЗначений - описания характеристик товаров, 
//                                        см. НоваяТаблицаОписанияХарактеристикТоваров.
//     * ОстаткиТоваров               - ТаблицаЗначений - остатки товаров, 
//                                        см. НоваяТаблицаОстатковТоваров.
//     * ЦеныТоваров                  - ТаблицаЗначений - цены товаров, 
//                                        см. ПолучитьТекущиеЦеныПоИдентификаторам.
//                                    - Неопределено - заполнение цен товаров не производится.
//
Функция ИмпортИзOzonПолучитьИмпортируемыеДанныеСТорговойПлощадки(Знач УчетнаяЗаписьМаркетплейса, Знач Параметры, ДеревоТоваров = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка",        ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
	Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
    Если Параметры.Свойство("КэшКатегорий") 
         И ЗначениеЗаполнено(Параметры.КэшКатегорий) Тогда
        Результат.Вставить("КэшКатегорий", Параметры.КэшКатегорий);
    КонецЕсли;
    Если Параметры.Свойство("ИдентификаторыТоваров") Тогда
        Результат.Вставить("ИдентификаторыТоваров", Параметры.ИдентификаторыТоваров);
    КонецЕсли;
	Если ДеревоТоваров = Неопределено Тогда
    	Результат.Вставить("ОписаниеТоваров",              НоваяТаблицаОписанияТоваров());
    	Результат.Вставить("ОписаниеХарактеристикТоваров", НоваяТаблицаОписанияХарактеристикТоваров());
    	Результат.Вставить("ОстаткиТоваров",               НоваяТаблицаОстатковТоваров());
    	Результат.Вставить("ЦеныТоваров",                  Неопределено);
    КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Результат.Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки для импорта данных по товарам.'");
		Возврат Результат;
	КонецЕсли;
	
	Если Параметры.КэшКатегорий = Неопределено Тогда
		Параметры.КэшКатегорий = Новый Структура;
	КонецЕсли;
	
	Отказ = Ложь;
		
	ТипНалогообложенияНДС  = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	ВидыЦен                = ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Истина, Истина);
	ИсточникКатегории      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
	КэшИдентификаторов     = Новый Соответствие;
	
	Попытка
		ИмяИдентификатора           = Параметры.ИмяИдентификатора;
		Идентификаторы              = Новый Массив;
		ИдентификаторыПовторные     = Новый Массив;
		ИдентификаторыНовые         = Новый Массив;
		СтрокаДереваГруппаЗагрузить = Неопределено;
		СтрокаДереваГруппаОшибки    = Неопределено;
		
		Если ДеревоТоваров <> Неопределено Тогда
			Для Каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
				Если СтрокаДереваПервогоУровня.ВариантЗагрузки = 0 Тогда
					// СтрокаДереваГруппаОбновить
				ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 Тогда
					СтрокаДереваГруппаЗагрузить = СтрокаДереваПервогоУровня;
				ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 3 Тогда
					СтрокаДереваГруппаОшибки = СтрокаДереваПервогоУровня;
				Иначе
					Продолжить;
				КонецЕсли;	
					
				Для Каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
					Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ИдентификаторПубликации) Тогда
						КэшИдентификаторов.Вставить(СтрокаДереваВторогоУровня.ИдентификаторПубликации, СтрокаДереваВторогоУровня.ИдентификаторОбъектаМаркетплейса);
					КонецЕсли;
					
					Если НЕ СтрокаДереваВторогоУровня.Пометка
						 ИЛИ СтрокаДереваВторогоУровня.ИндексСтатуса = 4 Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
					КонецЕсли;
					
					Если Параметры.СледующаяПорцияДанных
						 И СтрокаДереваВторогоУровня.ИндексСтатуса <> 5 Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
					КонецЕсли;
					
					// Дополнительные фильтры
					Если Параметры.ОтображатьСопоставленные = 1
						 И (НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
						 	ИЛИ СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
						        И НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика)
						 	ИЛИ НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория)) Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
						
					ИначеЕсли Параметры.ОтображатьСопоставленные = 2
						 	  И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
						 	  И (НЕ СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
						         ИЛИ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика))
						 	  И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория) Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
					КонецЕсли;
					
					Если Параметры.ОтображатьПоСтатусу <> -1
						 И СтрокаДереваВторогоУровня.ИндексСтатуса <> Параметры.ОтображатьПоСтатусу Тогда
						ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						Продолжить;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня[ИмяИдентификатора]) Тогда
						Если ЗначениеЗаполнено(Параметры.РазмерПорцииЗагрузкиДанных)
							 И Идентификаторы.Количество() >= Параметры.РазмерПорцииЗагрузкиДанных Тогда
							ИдентификаторыПовторные.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);							
						Иначе
							СтрокаДереваВторогоУровня.ИндексСтатуса = 7;
							Идентификаторы.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
							
							Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
								ИдентификаторыНовые.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// Новые товары с торговой площадки
		Если Параметры.ВариантЗагрузкиДанных >= 1 
			 И НЕ (ЗначениеЗаполнено(Параметры.РазмерПорцииЗагрузкиДанных)
			 	   И Идентификаторы.Количество() >= Параметры.РазмерПорцииЗагрузкиДанных) Тогда
			ФильтрПоТоварам = НовыйФильтрЗапросаПоТоварам(Истина);
			НомерПП         = 0;
			
			Пока Истина Цикл    
				НомерПП           = НомерПП + 1;
				КоличествоПозиций = Параметры.ИдентификаторыТоваров.Количество();
				
				Если ЗначениеЗаполнено(Параметры.РазмерПорцииЗагрузкиДанных)
					 И Идентификаторы.Количество() >= Параметры.РазмерПорцииЗагрузкиДанных Тогда
					Прервать;
				КонецЕсли;
				
				ПолучитьИдентификаторыТоваров(
					УчетнаяЗаписьМаркетплейса, 
					ФильтрПоТоварам, 
					Параметры.ИдентификаторыТоваров,
					Параметры.РазмерПорцииЗагрузкиДанных,
					КэшИдентификаторов, 
					Отказ);

				Если Отказ Тогда
					Результат.Ошибка.КодОшибки 	    = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
					Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При получении идентификаторов товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
					Возврат Результат;
				КонецЕсли;
				
				Если КоличествоПозиций = Параметры.ИдентификаторыТоваров.Количество() Тогда
					Прервать;
				КонецЕсли;
				
				ИдентификаторыТоваров = НоваяТаблицаИдентификаторовТоваров();
				Индекс = КоличествоПозиций;
				Пока Индекс < Параметры.ИдентификаторыТоваров.Количество() Цикл
					ЗаполнитьЗначенияСвойств(ИдентификаторыТоваров.Добавить(), Параметры.ИдентификаторыТоваров[Индекс]);
					Индекс = Индекс + 1;
				КонецЦикла;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТаблицаИдентификаторовТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса
					|ПОМЕСТИТЬ ТаблицаИдентификаторовТоваров
					|ИЗ
					|	&ТаблицаИдентификаторовТоваров КАК ТаблицаИдентификаторовТоваров
                    |
                    |ИНДЕКСИРОВАТЬ ПО 
					|	ИдентификаторПубликации
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ 
					|	ТаблицаИдентификаторовТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
					|	ТаблицаИдентификаторовТоваров.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса
					|ИЗ
					|	ТаблицаИдентификаторовТоваров КАК ТаблицаИдентификаторовТоваров
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
					|		ПО (СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
					|			И (СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
					|			И ТаблицаИдентификаторовТоваров.ИдентификаторПубликации = СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации
					|ГДЕ
					|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса ЕСТЬ NULL
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|УНИЧТОЖИТЬ ТаблицаИдентификаторовТоваров";

				Запрос.Текст = СтрЗаменить(Запрос.Текст, 
					"И ТаблицаИдентификаторовТоваров.ИдентификаторПубликации = СтатусыПубликацииОбъектовМаркетплейсаOzon.ИдентификаторПубликации", 
					"И ТаблицаИдентификаторовТоваров." + ИмяИдентификатора + " = СтатусыПубликацииОбъектовМаркетплейсаOzon." + ИмяИдентификатора);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, 
					"ИНДЕКСИРОВАТЬ ПО 
					|	ИдентификаторПубликации", 
					"ИНДЕКСИРОВАТЬ ПО 
					|	" + ИмяИдентификатора);
				
				Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса",     УчетнаяЗаписьМаркетплейса);
				Запрос.УстановитьПараметр("ТаблицаИдентификаторовТоваров", ИдентификаторыТоваров);
				
				УстановитьПривилегированныйРежим(Истина);
				ВыборкаДанных = Запрос.Выполнить().Выбрать();
				УстановитьПривилегированныйРежим(Ложь);
				
				Пока ВыборкаДанных.Следующий() Цикл
					Если Идентификаторы.Найти(ВыборкаДанных[ИмяИдентификатора]) = Неопределено 
						 И ИдентификаторыПовторные.Найти(ВыборкаДанных[ИмяИдентификатора]) = Неопределено Тогда
						Идентификаторы.Добавить(ВыборкаДанных[ИмяИдентификатора]);
						ИдентификаторыНовые.Добавить(ВыборкаДанных[ИмяИдентификатора]);
						
						Если ДеревоТоваров <> Неопределено Тогда
							Если СтрокаДереваГруппаЗагрузить = Неопределено Тогда
								СтрокаДереваГруппаЗагрузить                 = ДеревоТоваров.Строки.Вставить(Мин(2, ДеревоТоваров.Строки.Количество()));
								СтрокаДереваГруппаЗагрузить.ВариантЗагрузки = 2;
								СтрокаДереваГруппаЗагрузить.ИндексСтатуса   = -2;
							КонецЕсли;
							
							СтрокаДереваВторогоУровня                                  = СтрокаДереваГруппаЗагрузить.Строки.Добавить();
							СтрокаДереваВторогоУровня.ВариантЗагрузки                  = 2;
							СтрокаДереваВторогоУровня.ИндексСтатуса                    = 6;
							СтрокаДереваВторогоУровня.ИдентификаторПубликации          = ВыборкаДанных.ИдентификаторПубликации;
							СтрокаДереваВторогоУровня.ИдентификаторОбъектаМаркетплейса = ВыборкаДанных.ИдентификаторОбъектаМаркетплейса;
							СтрокаДереваВторогоУровня.ДанныеОбъекта                    = НоваяТаблицаЗначенийРеквизитов();
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса            = НоваяТаблицаОписанияТоваров();
							СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса      = НоваяТаблицаЗначенийРеквизитов(Истина);
							СтрокаДереваВторогоУровня.ЦеныТовара                       = Новый Массив;
							СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса        = УчетнаяЗаписьМаркетплейса;
							СтрокаДереваВторогоУровня.ВидОбъектаМаркетплейса           = Перечисления.ВидыОбъектовМаркетплейсов.Товар;
							СтрокаДереваВторогоУровня.ОбъектПубликации                 = Неопределено;
						КонецЕсли;

						Если ЗначениеЗаполнено(Параметры.РазмерПорцииЗагрузкиДанных)
							 И Идентификаторы.Количество() >= Параметры.РазмерПорцииЗагрузкиДанных Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если Идентификаторы.Количество() = 0 Тогда
			Результат.Ошибка.КодОшибки 	    = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Данных для загрузки с торговой площадки не найдено.'");
			Возврат Результат;
		КонецЕсли;
		
		// Описание товаров                                
		Если ИмяИдентификатора = "ИдентификаторПубликации" Тогда
			ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияОписанияТоваров(Идентификаторы, ,);
		Иначе
			ПараметрыЗапроса = НовыеПараметрыЗапросаПолученияОписанияТоваров(, Идентификаторы,);
		КонецЕсли;
		
		ОписаниеТоваровИзСервиса = ПолучитьОписаниеТоваров(
			УчетнаяЗаписьМаркетплейса, 
			ПараметрыЗапроса, 
			Параметры.КэшКатегорий, 
			КэшИдентификаторов,
			Отказ);
		ОписаниеТоваровИзСервиса.Индексы.Добавить(ИмяИдентификатора);
		
		Если Отказ Тогда
			Результат.Ошибка.КодОшибки 	    = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При получении описания товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
			Возврат Результат;
		КонецЕсли;
		
		Если ОписаниеТоваровИзСервиса.Количество() > 0 Тогда
			// Характеристики товаров
			Если ИмяИдентификатора = "ИдентификаторПубликации" Тогда
				ФильтрПоТоварам = НовыйФильтрЗапросаПоТоварам(Истина, Идентификаторы,);
			Иначе
				ФильтрПоТоварам = НовыйФильтрЗапросаПоТоварам(Истина, , Идентификаторы);
			КонецЕсли;
			
			ОписаниеХарактеристикТоваров = ПолучитьОписаниеХарактеристикТоваров(
				УчетнаяЗаписьМаркетплейса, 
				ФильтрПоТоварам, 
				Параметры.КэшКатегорий, 
				КэшИдентификаторов,
				Отказ);
			ОписаниеХарактеристикТоваров.Индексы.Добавить(ИмяИдентификатора);
			
			Если Отказ Тогда
				Результат.Ошибка.КодОшибки 	    = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При получении описания характеристик товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
				Возврат Результат;
			КонецЕсли;
			
			// Данные соответствия категорий  
			ИдентификаторыКатегорий = ОписаниеТоваровИзСервиса.ВыгрузитьКолонку("ИдентификаторКатегорииМаркетплейса");
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.Категория1С КАК Категория1С,
				|	СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса КАК ИдентификаторКатегорииМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.ИдентификаторРодителяАтрибутаМаркетплейса КАК ИдентификаторРодителяАтрибутаМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.НаименованиеРодителяАтрибутаМаркетплейса КАК НаименованиеРодителяАтрибутаМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.ИдентификаторАтрибутаМаркетплейса КАК ИдентификаторАтрибутаМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.НаименованиеАтрибутаМаркетплейса КАК НаименованиеАтрибутаМаркетплейса,
				|	СоответствияАтрибутовМаркетплейсов.ОписаниеНазначенияАтрибута КАК ОписаниеНазначенияАтрибута,
				|	СоответствияАтрибутовМаркетплейсов.ОбязательныйАтрибут КАК ОбязательныйАтрибут,
				|	СоответствияАтрибутовМаркетплейсов.ЯвляетсяКоллекциейЗначений КАК ЯвляетсяКоллекциейЗначений,
				|	СоответствияАтрибутовМаркетплейсов.ДоступенВыборЗначенияИзСписка КАК ДоступенВыборЗначенияИзСписка,
				|	СоответствияАтрибутовМаркетплейсов.ТипЗначенияАтрибута КАК ТипЗначенияАтрибута,
				|	СоответствияАтрибутовМаркетплейсов.ИдентификаторЗначенияПоУмолчанию КАК ЗначениеПоУмолчаниюИдентификатор,
				|	СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
				|	СоответствияАтрибутовМаркетплейсов.ЗначениеПоУмолчаниюСтрокаНеограниченная КАК ЗначениеПоУмолчаниюСтрокаНеограниченная,
				|	СоответствияАтрибутовМаркетплейсов.ПорядокСортировки КАК ПорядокСортировки
				|ИЗ
				|	РегистрСведений.СоответствияАтрибутовМаркетплейсов КАК СоответствияАтрибутовМаркетплейсов
				|ГДЕ
				|	СоответствияАтрибутовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
				|	И СоответствияАтрибутовМаркетплейсов.ИдентификаторКатегорииМаркетплейса В (&ИдентификаторыКатегорий)";

			Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
			Запрос.УстановитьПараметр("ИдентификаторыКатегорий",   ИдентификаторыКатегорий);
			
			УстановитьПривилегированныйРежим(Истина);
			СоответствияАтрибутовМаркетплейсов = Запрос.Выполнить().Выгрузить();
			СоответствияАтрибутовМаркетплейсов.Индексы.Добавить("УчетнаяЗаписьМаркетплейса, ИдентификаторКатегорииМаркетплейса, ИдентификаторАтрибутаМаркетплейса");
			УстановитьПривилегированныйРежим(Ложь);

		Иначе           
			ОписаниеХарактеристикТоваров       = НоваяТаблицаОписанияХарактеристикТоваров();
			СоответствияАтрибутовМаркетплейсов = Неопределено;
		КонецЕсли;
		
		Если ИдентификаторыНовые.Количество() > 0 Тогда
			// Остатки товаров
			Если ИмяИдентификатора = "ИдентификаторПубликации" Тогда
				ФильтрПоТоварам = НовыйФильтрЗапросаПоТоварам(Истина, ИдентификаторыНовые,);
			Иначе
				ФильтрПоТоварам = НовыйФильтрЗапросаПоТоварам(Истина, , ИдентификаторыНовые);
			КонецЕсли;
			
			ОстаткиТоваров = ПолучитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, ФильтрПоТоварам, Отказ);
			ОстаткиТоваров.Индексы.Добавить(ИмяИдентификатора);	
			
			Если Отказ Тогда
				Результат.Ошибка.КодОшибки 	    = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
				Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'При получении остатков товаров с торговой площадки возникли ошибки. Подробности см. в журнале регистрации.'");
				Возврат Результат;
			КонецЕсли;
			
		Иначе
			ОстаткиТоваров = НоваяТаблицаОстатковТоваров();
		КонецЕсли;

		Если ИдентификаторыНовые.Количество() > 0 Тогда
			// Поиск номенклатурных позиций
			РазделителиСловПоиска     = ",/(";
			ПараметрыРасчетаСтавкиНДС = Новый Структура("НалогообложениеНДС, Организация, Дата", 
				ТипНалогообложенияНДС, НастройкиУчетнойЗаписи.Организация, ТекущаяДатаСеанса());
			
			РезультатПоиска = НайтиНоменклатурыХарактеристикиУпаковки(
				ИдентификаторыНовые, 
				ИмяИдентификатора,
				ОписаниеТоваровИзСервиса,
				ОписаниеХарактеристикТоваров,
				ПараметрыРасчетаСтавкиНДС, 
				РазделителиСловПоиска, 
				Истина);
				
			РезультатПоискаОсновныхСправочников = РезультатПоиска.ОсновныеСправочники;
			РезультатПоискаКатегорий            = Неопределено;
			
			Если РезультатПоиска.Категории <> Неопределено Тогда
				РезультатПоискаКатегорий = ВыборкаИсточникаКатегорииМаркетплейса(
					РезультатПоиска.Категории, ИсточникКатегории, УчетнаяЗаписьМаркетплейса, Ложь, Истина);
			КонецЕсли;
				
		Иначе
			РезультатПоискаОсновныхСправочников = Неопределено;
			РезультатПоискаКатегорий            = Неопределено;
		КонецЕсли;
		
		// Цены товаров
		ЦеныТоваров = ПолучитьТекущиеЦеныПоИдентификаторам(	УчетнаяЗаписьМаркетплейса, Идентификаторы, ИмяИдентификатора );
		
		// Заполнение дерева товаров  
		Если ДеревоТоваров <> Неопределено Тогда
			Для каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
				Для каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
					Если ИдентификаторыПовторные.Найти(СтрокаДереваВторогоУровня[ИмяИдентификатора]) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;					
					
					СтрокаДереваВторогоУровня.Изображения.Очистить();
					СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса.Очистить();
					СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.Очистить();
					СтрокаДереваВторогоУровня.ЦеныТовара = Новый Массив;
					
					Отбор = Новый Структура(ИмяИдентификатора, СтрокаДереваВторогоУровня[ИмяИдентификатора]);
					
					// Цены товаров
					Если ЦеныТоваров <> Неопределено Тогда
						НайденныеСтрокиЦеныТоваров = ЦеныТоваров.НайтиСтроки(Отбор);
						Для каждого ЭлементКоллекции Из НайденныеСтрокиЦеныТоваров Цикл
							СтрокаДереваВторогоУровня.ЦеныТовара.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементКоллекции));
						КонецЦикла;
					КонецЕсли;
											
					// Описание товаров
					НайденныеСтрокиОписаниеТоваровИзСервиса = ОписаниеТоваровИзСервиса.НайтиСтроки(Отбор);
					
					Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня[ИмяИдентификатора])
						 И НайденныеСтрокиОписаниеТоваровИзСервиса.Количество() > 0 Тогда
						
						// Заполнить строки дерева
						Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда 
							ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, НайденныеСтрокиОписаниеТоваровИзСервиса[0],, "Изображения");
						КонецЕсли;                                                                           
						
						СтрокаДереваВторогоУровня.Статус = НайденныеСтрокиОписаниеТоваровИзСервиса[0].Статус;
						
						// Изображения
						СтрокаДереваВторогоУровня.Изображения = НайденныеСтрокиОписаниеТоваровИзСервиса[0].Изображения.Скопировать();
						
						// Данные из сервиса
						ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса.Добавить(), НайденныеСтрокиОписаниеТоваровИзСервиса[0]);
						
						НайденныеСтрокиОписаниеХарактеристикТоваров = ОписаниеХарактеристикТоваров.НайтиСтроки(Отбор);
						Если НайденныеСтрокиОписаниеХарактеристикТоваров.Количество() > 0 Тогда
							СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса = НайденныеСтрокиОписаниеХарактеристикТоваров[0].ЗначенияАтрибутов.Скопировать();
						КонецЕсли;
						
						// Остатки и схемы работы
						Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда 
							ОстатокFBO = 0;
							РезервFBO  = 0;
							ОстатокFBS = 0;
							РезервFBS  = 0;
							
							НайденныеСтрокиОстаткиТоваров = ОстаткиТоваров.НайтиСтроки(Отбор);							
							Для каждого ЭлементКоллекции Из НайденныеСтрокиОстаткиТоваров Цикл
								Если ЭлементКоллекции.ТипСкладаМаркетплейса = "FBO" Тогда
									ОстатокFBO = ОстатокFBO + ЭлементКоллекции.КоличествоВНаличии;
									РезервFBO  = РезервFBO  + ЭлементКоллекции.КоличествоЗарезервировано;
								ИначеЕсли ЭлементКоллекции.ТипСкладаМаркетплейса = "FBS" Тогда
									ОстатокFBS = ОстатокFBS + ЭлементКоллекции.КоличествоВНаличии;
									РезервFBS  = РезервFBS  + ЭлементКоллекции.КоличествоЗарезервировано;
								КонецЕсли;
							КонецЦикла;
						
							СтрокаДереваВторогоУровня.ДатаАктуальностиОстатковМаркетплейса = ТекущаяДатаСеанса();
							СтрокаДереваВторогоУровня.ОстатокFBO                           = ОстатокFBO;
							СтрокаДереваВторогоУровня.РезервFBO                            = РезервFBO;
							СтрокаДереваВторогоУровня.ОстатокFBS                           = ОстатокFBS;
							СтрокаДереваВторогоУровня.РезервFBS                            = РезервFBS;
							СтрокаДереваВторогоУровня.ПродаетсяПоСхемеРаботыFBS            = (ОстатокFBS > 0) ИЛИ (РезервFBS > 0);
						КонецЕсли;
						
						Если НайденныеСтрокиОписаниеХарактеристикТоваров.Количество() > 0
							 И НайденныеСтрокиОписаниеХарактеристикТоваров[0].ФильтрВидимости = "ARCHIVED" Тогда
							СтрокаДереваВторогоУровня.Статус                          = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве;
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве;
						КонецЕсли;
						
						Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
							СтрокаДереваВторогоУровня.Пометка       = (Параметры.ВариантЗагрузкиДанных >= 1);
							СтрокаДереваВторогоУровня.ИндексСтатуса = 6;

							// Подобрать номенклатуру, характеристику, упаковку
							РезультатПоиска = ОпределитьНоменклатуруХарактеристикуУпаковку(
								РезультатПоискаОсновныхСправочников,
								УчетнаяЗаписьМаркетплейса,
								СтрокаДереваВторогоУровня[ИмяИдентификатора],
								ИмяИдентификатора);
							
							СтрокаДереваВторогоУровня.Номенклатура                              = РезультатПоиска.Номенклатура;
							СтрокаДереваВторогоУровня.ХарактеристикиИспользуются                = РезультатПоиска.ХарактеристикиИспользуются;
							СтрокаДереваВторогоУровня.Характеристика                            = РезультатПоиска.Характеристика;
							СтрокаДереваВторогоУровня.ИспользоватьУпаковки                      = РезультатПоиска.ИспользоватьУпаковки;
							СтрокаДереваВторогоУровня.Упаковка                                  = РезультатПоиска.Упаковка;
							СтрокаДереваВторогоУровня.ЕдиницаИзмерения                          = РезультатПоиска.ЕдиницаИзмерения;
							СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса             = РезультатПоиска.Категория;
							СтрокаДереваВторогоУровня.Категория                                 = РезультатПоиска.Категория;
							СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса;
							СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса;
							СтрокаДереваВторогоУровня.СтавкаНДС                                 = РезультатПоиска.СтавкаНДС;
							СтрокаДереваВторогоУровня.Ставка                                    = РезультатПоиска.Ставка;
							
							Если РезультатПоискаКатегорий <> Неопределено
								 И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория) Тогда
								Отбор = Новый Структура("Категория1С, ИдентификаторОбъектаМаркетплейса", СтрокаДереваВторогоУровня.Категория, СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса);
								РезультатПоискаКатегорий.Сбросить();
								Если РезультатПоискаКатегорий.НайтиСледующий(Отбор) Тогда
									СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса             = РезультатПоискаКатегорий.РодительКатегории1С;
									СтрокаДереваВторогоУровня.Категория                                 = РезультатПоискаКатегорий.Категория1С;
									СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = РезультатПоискаКатегорий.ИдентификаторОбъектаМаркетплейса;
									СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = РезультатПоискаКатегорий.НаименованиеОбъектаМаркетплейса;
								КонецЕсли;
							КонецЕсли;
							
						Иначе
							СтрокаДереваВторогоУровня.Пометка       = Ложь;
							СтрокаДереваВторогоУровня.ИндексСтатуса = 7;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.НаименованиеКатегорииМаркетплейса) Тогда
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].Статус         = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками; 
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОшибки = НСтр("ru = 'Отсутствуют данные об атрибутах товара. Необходимо настроить соответствие категорий и после этого перевыбрать номенклатуру для заполнения категории торговой площадки.'") 
								+ " " + СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОшибки;
								
							Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
								СтрокаДереваВторогоУровня.Статус         = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками; 
								СтрокаДереваВторогоУровня.ОписаниеОшибки = НСтр("ru = 'Отсутствуют данные об атрибутах товара. Необходимо настроить соответствие категорий и после этого перевыбрать номенклатуру для заполнения категории торговой площадки.'") 
									+ " " + СтрокаДереваВторогоУровня.ОписаниеОшибки;
							КонецЕсли;
						КонецЕсли;

					Иначе
						СтрокаДереваВторогоУровня.Пометка       = Ложь;
						СтрокаДереваВторогоУровня.ИндексСтатуса = 4;
					КонецЕсли;
					
					// Значения реквизитов
					ДополнитьТаблицуЗначенийРеквизитов(
						УчетнаяЗаписьМаркетплейса,
						СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
						Параметры.КэшКатегорий,
						СоответствияАтрибутовМаркетплейсов,
						СтрокаДереваВторогоУровня.Категория,
						СтрокаДереваВторогоУровня.ДанныеОбъекта,
						Истина);
						
					Если СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса.Количество() > 0 Тогда
						// Описание товара
						Если НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса) Тогда
							// Аннотация (описание)
							НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(Новый Структура("ИдентификаторАтрибутаМаркетплейса", "4191"));
							Если НайденныеСтроки.Количество() > 0 Тогда
								СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
								Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда 
									СтрокаДереваВторогоУровня.ОписаниеОбъектаМаркетплейса = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						// Объединение в одну карточку
						Отбор = Новый Структура("НаименованиеАтрибутаМаркетплейса", НСтр( "ru = 'Объединить на одной карточке'" ));
						НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(Отбор);
						Если НайденныеСтроки.Количество() = 0 Тогда
							Отбор = Новый Структура("НаименованиеАтрибутаМаркетплейса", "Combine into One PDP");
							НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(Отбор);
						КонецЕсли;

						Если НайденныеСтроки.Количество() = 0 Тогда
							Отбор = Новый Структура("НаименованиеАтрибутаМаркетплейса", НСтр( "ru = 'Название модели (для объединения в одну карточку)'" ) );
							НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(Отбор);
						КонецЕсли;
						
						Если НайденныеСтроки.Количество() > 0 Тогда
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОбъединяетсяВОднуКарточку = Истина;
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ЗначениеОбъединенияВОднуКарточку = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
							СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ИдентификаторАтрибутаОбъединенияВОднуКарточку
							= НайденныеСтроки[0].ИдентификаторАтрибутаМаркетплейса;
							Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда 
								СтрокаДереваВторогоУровня.ОбъединяетсяВОднуКарточку = Истина;
								СтрокаДереваВторогоУровня.ЗначениеОбъединенияВОднуКарточку = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
								СтрокаДереваВторогоУровня.ИдентификаторАтрибутаОбъединенияВОднуКарточку
								= НайденныеСтроки[0].ИдентификаторАтрибутаМаркетплейса;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
						
					// Дерево реквизитов
					СтрокаДереваВторогоУровня.ДеревоРеквизитов = СформироватьДеревоРеквизитов(
						УчетнаяЗаписьМаркетплейса,
						СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
						СтрокаДереваВторогоУровня,
						СтрокаДереваВторогоУровня.ЦеныТовара,
						НастройкиУчетнойЗаписи,
						ВидыЦен);
						
					// Различия
					Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 0 
						 И СтрокаДереваВторогоУровня.ИндексСтатуса <> 4 Тогда
						Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "СтавкаНДС");
						ЕстьРазличияСтавкаНДС = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
						СтрокаДереваВторогоУровня.ЕстьРазличияСтавкаНДС = (ЕстьРазличияСтавкаНДС > 0);
						
						Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "ИдентификаторКатегорииМаркетплейса");
						ЕстьРазличияКатегорииOzon = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
						СтрокаДереваВторогоУровня.ЕстьРазличияКатегорииOzon = (ЕстьРазличияКатегорииOzon > 0);
						
						Отбор = Новый Структура("ЕстьРазличия, ЦеновыеПоказатели", Истина, Истина);
						ЕстьРазличияЦеновыеПоказатели = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
						СтрокаДереваВторогоУровня.ЕстьРазличияЦеновыеПоказатели = (ЕстьРазличияЦеновыеПоказатели > 0);
						
						Отбор = Новый Структура("ЕстьРазличия", Истина);
						ЕстьРазличия = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество() - ЕстьРазличияСтавкаНДС
						- ЕстьРазличияКатегорииOzon - ЕстьРазличияЦеновыеПоказатели;
						
						Если ЕстьРазличия > 0 Тогда
							СтрокаДереваВторогоУровня.Пометка       = (Параметры.ВариантЗагрузкиДанных <= 1);
							СтрокаДереваВторогоУровня.ИндексСтатуса = 6;
						ИначеЕсли Параметры.ЗагрузитьЦеныПродажи И (ЕстьРазличияЦеновыеПоказатели > 0) Тогда
							СтрокаДереваВторогоУровня.Пометка = (Параметры.ВариантЗагрузкиДанных <= 1);
						КонецЕсли;
						
					Иначе
						Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "СтавкаНДС");
						ЕстьРазличияСтавкаНДС = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
						СтрокаДереваВторогоУровня.ЕстьРазличияСтавкаНДС = (ЕстьРазличияСтавкаНДС > 0);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
				Если СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 
					 ИЛИ СтрокаДереваПервогоУровня.ВариантЗагрузки = 3 Тогда
					Продолжить;
				КонецЕсли;
				
				Индекс = 0;
				
				Пока Индекс < СтрокаДереваПервогоУровня.Строки.Количество() Цикл
					СтрокаДереваВторогоУровня = СтрокаДереваПервогоУровня.Строки[Индекс];
					
					Если СтрокаДереваВторогоУровня.ИндексСтатуса = 4 Тогда
						Если СтрокаДереваГруппаОшибки = Неопределено Тогда
							СтрокаДереваГруппаОшибки                 = ДеревоТоваров.Строки.Вставить(Мин(3, ДеревоТоваров.Строки.Количество()));
							СтрокаДереваГруппаОшибки.ВариантЗагрузки = 3;
							СтрокаДереваГруппаОшибки.ИндексСтатуса   = -2;
						КонецЕсли;
						
						ИмпортИзOzonПеренестиСтрокуДереваТоваровВДругуюГруппу(ДеревоТоваров, СтрокаДереваВторогоУровня, СтрокаДереваГруппаОшибки);
						
					Иначе
						Индекс = Индекс + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ИмпортИзOzonОпределитьНаименованияГруппДереваТоваров(
				ДеревоТоваров, 
				Параметры.СортироватьСтрокиДереваТоваров, 
				Параметры.ОтображатьСопоставленные,
				Параметры.ОтображатьПоСтатусу);
		КонецЕсли;	
		
		Если ДеревоТоваров <> Неопределено Тогда
			Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
		Иначе
			Результат.Вставить("ОписаниеТоваров",              ОписаниеТоваровИзСервиса);
			Результат.Вставить("ОписаниеХарактеристикТоваров", ОписаниеХарактеристикТоваров);
			Результат.Вставить("ОстаткиТоваров",               ОстаткиТоваров);
			Результат.Вставить("ЦеныТоваров",                  ЦеныТоваров);
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.КэшКатегорий) Тогда
			Результат.Вставить("КэшКатегорий", Параметры.КэшКатегорий);
		КонецЕсли;		
		Результат.Вставить("ИдентификаторыТоваров", Параметры.ИдентификаторыТоваров);
		
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;

	Если Отказ Тогда
		Результат.Ошибка.КодОшибки 	    = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ИмпортИзOzonЗаписатьЗагруженныеДанныеСТорговойПлощадкиИзображения(Знач УчетнаяЗаписьМаркетплейса, ДеревоТоваров, Знач Параметры, 
	СтрокаДереваВторогоУровня, Результат, Индекс)
	
	НачатьТранзакцию();
	
	Попытка                                                                          
		Записать = Ложь;
		
		Если СтрокаДереваВторогоУровня.Изображения.Колонки.Найти("Обработано") = Неопределено Тогда
			СтрокаДереваВторогоУровня.Изображения.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		СтрокаДереваВторогоУровня.Изображения.ЗаполнитьЗначения(Ложь, "Обработано");
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
		ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса);
		ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса",    Перечисления.ВидыОбъектовМаркетплейсов.Изображение);
		ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",              СтрокаДереваВторогоУровня.Номенклатура);
		ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика",            СтрокаДереваВторогоУровня.Характеристика);
		ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",                  СтрокаДереваВторогоУровня.Упаковка);
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса);
		НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(Перечисления.ВидыОбъектовМаркетплейсов.Изображение);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаДереваВторогоУровня.Номенклатура);
		НаборЗаписей.Отбор.Характеристика.Установить(СтрокаДереваВторогоУровня.Характеристика);
		НаборЗаписей.Отбор.Упаковка.Установить(СтрокаДереваВторогоУровня.Упаковка);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл          
			
			Если Не ЗначениеЗаполнено(Запись.ПредставлениеОбъектаМаркетплейса) Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор = Новый Структура("ПутьКФайлу", Запись.ПредставлениеОбъектаМаркетплейса);
			НайденныеСтроки = СтрокаДереваВторогоУровня.Изображения.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Если Запись.Статус <> Перечисления.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется Тогда
					ДанныеОбъекта = Запись.ДанныеОбъекта.Получить();
					Если ДанныеОбъекта = Неопределено Тогда
						ДанныеОбъекта = НовыйСписокАтрибутовИзображения();
					КонецЕсли;
					ДанныеОбъекта.Вставить("ЭтоОсновноеИзображение", Ложь);
					Если НЕ ДанныеОбъекта.Свойство("СсылкаНаФайлВСервисеПубличныхСсылок") Тогда
						ДанныеОбъекта.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", "");
					КонецЕсли;
					Если НЕ ДанныеОбъекта.Свойство("УдаляемыеСсылки") Тогда
						ДанныеОбъекта.Вставить("УдаляемыеСсылки", Новый Соответствие);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.УдаляемыеСсылки.Получить(Запись.ПредставлениеОбъектаМаркетплейса)) Тогда
						ДанныеОбъекта.УдаляемыеСсылки.Вставить(Запись.ПредставлениеОбъектаМаркетплейса, ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок);
					КонецЕсли;
					ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок = "";
					
					Запись.Статус                           = Перечисления.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется;
					Запись.Состояние                        = НСтр("ru = 'Не используется'");
					Запись.ОписаниеСостояния                = НСтр("ru = 'Не используется'");
					Запись.ПредставлениеОбъектаМаркетплейса = "";
					Запись.ДанныеОбъекта                    = Новый ХранилищеЗначения(ДанныеОбъекта);
					Запись.ДатаОбновления                   = ТекущаяДатаСеанса();
					
					Записать = Истина;
				КонецЕсли;
				
			Иначе
				Для Каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
					СтрокаТаблицыЗначений.Обработано = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Отбор = Новый Структура("Обработано", Ложь);
		НайденныеСтроки = СтрокаДереваВторогоУровня.Изображения.НайтиСтроки(Отбор);
		Для каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
			АдресВременногоХранилищаФайла = Неопределено;
			
			ДанныеИзображения = ИнтеграцияСМаркетплейсамиСервер.ДанныеФайлаПоВнешнейСсылке(СтрокаТаблицыЗначений.ПутьКФайлу);
			Если ДанныеИзображения.Статус 
				И ИнтеграцияСМаркетплейсамиСервер.ЭтоФайлКартинки(ДанныеИзображения.Путь) Тогда
				АдресВременногоХранилищаФайла = ДанныеИзображения.Путь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(АдресВременногоХранилищаФайла) Тогда
				ИмяФайла              = СтрЗаменить(СтрокаТаблицыЗначений.ПутьКФайлу, "\", "/");
				ИмяФайла              = Сред(ИмяФайла, СтрНайти(ИмяФайла, "/", НаправлениеПоиска.СКонца) + 1);
				ИмяФайлаБезРасширения = Сред(ИмяФайла, 1, СтрНайти(ИмяФайла, ".") - 1);
				РасширениеФайла       = НРег(Сред(ИмяФайла, СтрНайти(ИмяФайла, ".") + 1));
				
				ДополнительныеРеквизиты = Новый Структура;
				ДополнительныеРеквизиты.Вставить("ПубликуетсяВСервисах", Истина);
				ДополнительныеРеквизиты.Вставить("ДатаСоздания",         ТекущаяУниверсальнаяДата());
				
				ПараметрыФайла                             = РаботаСФайлами.ПараметрыДобавленияФайла(ДополнительныеРеквизиты);
				ПараметрыФайла.Автор                       = Пользователи.АвторизованныйПользователь();
				ПараметрыФайла.ВладелецФайлов              = ?( ЗначениеЗаполнено( СтрокаДереваВторогоУровня.Характеристика ), СтрокаДереваВторогоУровня.Характеристика, СтрокаДереваВторогоУровня.Номенклатура );
				ПараметрыФайла.ИмяБезРасширения            = ИмяФайлаБезРасширения;
				ПараметрыФайла.РасширениеБезТочки          = РасширениеФайла;
				ПараметрыФайла.ГруппаФайлов                = Неопределено;
				ПараметрыФайла.ВремяИзмененияУниверсальное = ДополнительныеРеквизиты.ДатаСоздания;
				
				ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВременногоХранилищаФайла,, СтрокаТаблицыЗначений.ПутьКФайлу);
				Если ПрисоединенныйФайл <> Неопределено Тогда
					ДанныеОбъекта                                     = НовыйСписокАтрибутовИзображения();
					ДанныеОбъекта.СсылкаНаФайлВСервисеПубличныхСсылок = СтрокаТаблицыЗначений.ПутьКФайлу;
					ДанныеОбъекта.ЭтоОсновноеИзображение              = СтрокаТаблицыЗначений.ОсновноеИзображение;
					ДанныеОбъекта.ЭтоИзображение360                   = СтрокаТаблицыЗначений.Изображение360;
					ДанныеОбъекта.УдаляемыеСсылки                     = Новый Соответствие;
					
					Запись                                  = НаборЗаписей.Добавить();
					Запись.УчетнаяЗаписьМаркетплейса        = СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса;
					Запись.ВидОбъектаМаркетплейса           = Перечисления.ВидыОбъектовМаркетплейсов.Изображение;
					Запись.Номенклатура                     = СтрокаДереваВторогоУровня.Номенклатура;
					Запись.Характеристика                   = СтрокаДереваВторогоУровня.Характеристика;
					Запись.Упаковка                         = СтрокаДереваВторогоУровня.Упаковка;
					Запись.ОбъектПубликации                 = ПрисоединенныйФайл;
					Запись.ИдентификаторПубликации          = ХешСуммаПрисоединенногоФайла(ПрисоединенныйФайл);
					Запись.Статус                           = Перечисления.СтатусыОбъектовМаркетплейсаOzon.Загружен;
					Запись.НаименованиеОбъектаМаркетплейса  = Строка(ПрисоединенныйФайл);
					Запись.ПредставлениеОбъектаМаркетплейса = СтрокаТаблицыЗначений.ПутьКФайлу;
					Запись.ДанныеОбъекта                    = Новый ХранилищеЗначения(ДанныеОбъекта);
					Запись.ДатаСоздания                     = ТекущаяДатаСеанса();
					
					Записать = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Записать Тогда
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Импорт из Ozon: При записи сведений по изображениям товарной позиции «%1» возникла ошибка: %2.'", 
		ОбщегоНазначения.КодОсновногоЯзыка()),
		СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстСообщения);
		
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстСообщения, УчетнаяЗаписьМаркетплейса, Истина );
		
		Результат.Пропущено.Добавить(Новый Структура("НомерСтроки, Сообщение", 
		Индекс + 1, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При записи сведений по изображениям товарной позиции «%1» возникли ошибки.'"),
		СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса)));							
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Записывает загруженные данные с торговой площадки в информационную базу.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//   ДеревоТоваров             - ДеревоЗначений - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                 см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//   Параметры                 - Структура - параметры выполнения функции:
//     * ВариантЗагрузкиДанных          - Число - вариант загрузки данных из сервиса, см. реквизит "ВариантЗагрузкиДанных" в
//                                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * ЗагрузитьЦеныПродажи           - Булево - признак записи цен, см. реквизит "ЗагрузитьЦеныПродажи" в
//                                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * ЗаписатьТолькоЦены             - Булево - Истина, если необходимо записать только цены товаров.
//     * ТолькоСоздатьНоменклатуру      - Булево - Истина, если необходимо только создать элементы справочника "Номенклатура".
//     * ЗагрузитьИзображения           - Булево - Истина, если необходимо загрузить изображения товаров.
//     * ИмяИдентификатора              - Строка - имя ключевого поля идентификаторов. Может принимать значения:
//                                          "ИдентификаторОбъектаМаркетплейса" и "ИдентификаторПубликации". 
//     * РазмерПорцииЗагрузкиДанных     - Число - размер порции загрузки данных с торговой площадки за один запрос;
//                                      - Неопределено - размер порции для загрузки не ограничен.
//     * СоздатьЭлементыНоменклатуры    - Булево - Истина, если несопоставленные элементы справочника "Номенклатура" необходимо создать.
//     * СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго уровня дерева товаров.
//     * ОтображатьСопоставленные       - Число - установленный фильтр по сопоставленным позициям дерева товаров.
//     * ОтображатьПоСтатусу            - Число - установленный фильтр по статусу позиций дерева товаров.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * Ошибка         - Структура - код и описание ошибки при выполнении функции, 
//                          см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * ДеревоТоваров  - ДеревоЗначений - заполненное дерево товаров, см. реквизит "ИмпортируемыеТовары" в 
//                          Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//     * Записано       - Число - количество записанных данных;
//     * ВТомЧислеНовых - Число - количество новых записанных данных;
//     * НеЗаписано     - Число - количество данных с ошибками записи;
//     * Пропущено      - Массив Из Структура - информация о пропущенных записях:
//       ** НомерСтроки   - Число - номер строки дерева товаров;
//       ** Сообщение     - Строка - описание ошибки.
//     * ЗагруженыЦены  - Булево - в результате выполнения функции были загружены цены товаров.
//
Функция ИмпортИзOzonЗаписатьЗагруженныеДанныеСТорговойПлощадки(Знач УчетнаяЗаписьМаркетплейса, ДеревоТоваров, Знач Параметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка",         ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
    Результат.Вставить("ДеревоТоваров",  ДеревоТоваров);
    Результат.Вставить("Записано",       0);
    Результат.Вставить("ВТомЧислеНовых", 0);
    Результат.Вставить("НеЗаписано",     0);
    Результат.Вставить("Пропущено",      Новый Массив);
    Результат.Вставить("ЗагруженыЦены",  Параметры.ЗагрузитьЦеныПродажи ИЛИ Параметры.ЗаписатьТолькоЦены);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Результат.Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Не указана учетная запись торговой площадки для импорта данных по товарам.'");
		Возврат Результат;
	КонецЕсли; 
	
	ДоступнаУстановкаЦен = ПравоДоступа("Проведение", Метаданные.Документы.УстановкаЦенНоменклатуры);
	
	Если НЕ ДоступнаУстановкаЦен Тогда
		Результат.Вставить("ЗагруженыЦены", Ложь);
		
		Если Параметры.ЗаписатьТолькоЦены Тогда
			Результат.Ошибка.КодОшибки      = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Для пользователя не доступна установка цен номенклатуры.'");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ТипНалогообложенияНДС  = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	НастройкиУчетнойЗаписи = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	ВидыЦен                = ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса, Истина, Истина);
	ИсточникКатегории      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
	
	Попытка
		ТаблицаТоваров    = СведенияОВыгруженныхДанных();
		Идентификаторы    = Новый Массив;
		ИмяИдентификатора = Параметры.ИмяИдентификатора;
		
		МассивПолейТаблицыТоваров = Новый Массив;
		Для Каждого Колонка Из ТаблицаТоваров.Колонки Цикл
			МассивПолейТаблицыТоваров.Добавить(Колонка.Имя);
		КонецЦикла;
		ПоляТаблицыТоваров = СтрСоединить(МассивПолейТаблицыТоваров, ", ");
		
		ВсегоОтмечено       = 0;
		ВсегоНеПолучено     = 0;
		ВсегоНеСопоставлено = 0;
		
		Для каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
			Если СтрокаДереваПервогоУровня.ВариантЗагрузки = 0 Тогда
				// СтрокаДереваГруппаОбновить 
			ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 Тогда
				// СтрокаДереваГруппаЗагрузить 
			Иначе
				Продолжить;
			КонецЕсли;	
				
			Индекс = 0;
			Пока Индекс < СтрокаДереваПервогоУровня.Строки.Количество() Цикл
				СтрокаДереваВторогоУровня = СтрокаДереваПервогоУровня.Строки[Индекс];
				
				// Дополнительные фильтры
				Если Параметры.ОтображатьСопоставленные = 1
					 И (НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
					 	ИЛИ СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
					        И НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика)
					 	ИЛИ НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория)) Тогда
					Индекс = Индекс + 1;
					Продолжить;
					
				ИначеЕсли Параметры.ОтображатьСопоставленные = 2
					 	  И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
					 	  И (НЕ СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
					         ИЛИ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика))
					 	  И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория) Тогда
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;
				
				Если Параметры.ОтображатьПоСтатусу <> -1
					 И СтрокаДереваВторогоУровня.ИндексСтатуса <> Параметры.ОтображатьПоСтатусу Тогда
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;

				// Отмеченные позиции
				Если СтрокаДереваВторогоУровня.Пометка Тогда
					ВсегоОтмечено = ВсегоОтмечено + 1;
					Если СтрокаДереваВторогоУровня.ИндексСтатуса = 5 Тогда
						ВсегоНеПолучено = ВсегоНеПолучено + 1;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) И НЕ Параметры.СоздатьЭлементыНоменклатуры Тогда
						ВсегоНеСопоставлено = ВсегоНеСопоставлено + 1;
					КонецЕсли;
				КонецЕсли;				
				
				Если НЕ СтрокаДереваВторогоУровня.Пометка 
					 ИЛИ НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ИдентификаторПубликации)
					 ИЛИ СтрокаДереваВторогоУровня.ВариантЗагрузки = 0 И Параметры.ВариантЗагрузкиДанных = 2
					 ИЛИ СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 И Параметры.ВариантЗагрузкиДанных = 0
					 ИЛИ СтрокаДереваВторогоУровня.ВариантЗагрузки = 3 
					 ИЛИ СтрокаДереваВторогоУровня.ИндексСтатуса = 4 
					 ИЛИ СтрокаДереваВторогоУровня.ИндексСтатуса = 5
					 ИЛИ НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) И НЕ Параметры.СоздатьЭлементыНоменклатуры Тогда
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;
				
				Если Параметры.ЗаписатьТолькоЦены 
					 И НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) Тогда
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;
				
				// Создать номенклатуру
				Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 
					 И НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
					 И (Параметры.СоздатьЭлементыНоменклатуры 
					    ИЛИ Параметры.ТолькоСоздатьНоменклатуру) Тогда
					НачатьТранзакцию();
					
					Попытка  
						Номенклатура                    = Справочники.Номенклатура.СоздатьЭлемент();
						Номенклатура.ТипНоменклатуры    = Перечисления.ТипыНоменклатуры.Запас;
						Номенклатура.Наименование       = СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса;
						Номенклатура.НаименованиеПолное = СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса;
						Номенклатура.Комментарий        = СтрокаДереваВторогоУровня.ОписаниеОбъектаМаркетплейса;
						Номенклатура.Артикул            = СтрокаДереваВторогоУровня.ИдентификаторПубликации;
						
						Номенклатура.ОбменДанными.Загрузка = Истина;
						Номенклатура.Записать();
						
						СтрокаДереваВторогоУровня.Номенклатура                    = Номенклатура.Ссылка;
						СтрокаДереваВторогоУровня.НаименованиеОбъектаМаркетплейса = Номенклатура.Наименование;
						
						ТекущаяКатегория = ОпределитьТекущуюСопоставленнуюКатегориюМаркетплейсаПоНоменклатуре(
							УчетнаяЗаписьМаркетплейса,
							СтрокаДереваВторогоУровня.Номенклатура,
							СтрокаДереваВторогоУровня.ИдентификаторКатегорииМаркетплейса,
							ИсточникКатегории);
								
						СтрокаДереваВторогоУровня.Категория                                 = ТекущаяКатегория.Категория;
						СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса             = ТекущаяКатегория.ИсточникКатегории;
						СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса = ТекущаяКатегория.ИдентификаторКатегории;
						СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса  = ТекущаяКатегория.НаименованиеКатегории;
						 
						ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, 
						ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДереваВторогоУровня.Номенклатура, "ИспользоватьУпаковки, ЕдиницаИзмерения"));
						
						ЗафиксироватьТранзакцию();
						
					Исключение
						ОтменитьТранзакцию();
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'При создании новой номенклатурной позиции «%1» возникла ошибка: %2.'", 
								ОбщегоНазначения.КодОсновногоЯзыка()),
							СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,,,
							ТекстСообщения);
							
						Результат.Пропущено.Добавить(Новый Структура("НомерСтроки, Сообщение", 
							Индекс + 1, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка создания новой номенклатурной позиции «%1».'"),
							    СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса)));							
						Результат.НеЗаписано = Результат.НеЗаписано + 1;
						Индекс = Индекс + 1;
						Продолжить;
					КонецПопытки;
				КонецЕсли;
				
				Если Параметры.ТолькоСоздатьНоменклатуру Тогда
					СтрокаДереваВторогоУровня.Пометка       = Ложь;
					СтрокаДереваВторогоУровня.ИндексСтатуса = СтрокаДереваВторогоУровня.ИндексСтатуса - 100;
					
					Индекс = Индекс + 1;
					Продолжить;
				КонецЕсли;
				
				Если Параметры.ЗагрузитьЦеныПродажи ИЛИ Параметры.ЗаписатьТолькоЦены Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаТоваров.Добавить(), СтрокаДереваВторогоУровня);
					Идентификаторы.Добавить(СтрокаДереваВторогоУровня[ИмяИдентификатора]);
				
					Если Параметры.ЗаписатьТолькоЦены Тогда
						СтрокаДереваВторогоУровня.Пометка       = Ложь;
						СтрокаДереваВторогоУровня.ИндексСтатуса = СтрокаДереваВторогоУровня.ИндексСтатуса - 100;
						
						Индекс = Индекс + 1;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// Изображения
				Если Параметры.ЗагрузитьИзображения Тогда
					ИмпортИзOzonЗаписатьЗагруженныеДанныеСТорговойПлощадкиИзображения( 
					УчетнаяЗаписьМаркетплейса, ДеревоТоваров, Параметры, 
					СтрокаДереваВторогоУровня, Результат, Индекс );
				КонецЕсли;
				
				// Запись данных объекта 
				НачатьТранзакцию();
				
				Попытка  
					// Корректировка данных
					ДанныеОбъекта = НоваяТаблицаЗначенийРеквизитов();
					Для каждого СтрокаТаблицыЗначений Из СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса Цикл
						Если НЕ СтрокаТаблицыЗначений.ТолькоТекущее Тогда
							ЗаполнитьЗначенияСвойств(ДанныеОбъекта.Добавить(), СтрокаТаблицыЗначений);
						КонецЕсли;
					КонецЦикла;
					ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса, "УчетнаяЗаписьМаркетплейса");
					
					Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.Номенклатура, "Номенклатура");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.Характеристика, "Характеристика");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.Упаковка, "Упаковка");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.Категория, "Категория1С");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса, "ИсточникКатегорииМаркетплейса");
						ДанныеОбъекта.ЗаполнитьЗначения(СтрЗаменить(СтрокаДереваВторогоУровня.ИсточникКатегорииМаркетплейса.УникальныйИдентификатор(), "-", "_"),
						"ИдентификаторИсточникаКатегорииМаркетплейса");
						
						СтрокаДереваВторогоУровня.ДатаСоздания = ТекущаяДатаСеанса();
						СтрокаДереваВторогоУровня.НаименованиеОбъектаМаркетплейса = ПредставлениеТоварнойПозиции(
							СтрокаДереваВторогоУровня.Номенклатура, 
							СтрокаДереваВторогоУровня.Характеристика, 
							СтрокаДереваВторогоУровня.Упаковка);
							
					Иначе
						СтрокаДереваВторогоУровня.ДатаОбновления = ТекущаяДатаСеанса();
					КонецЕсли;
					
					СтрокаДереваВторогоУровня.ДанныеОбъекта = ДанныеОбъекта.Скопировать();
					СтрокаДереваВторогоУровня.ИсточникиСхожихПредложений = СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ИсточникиСхожихПредложений.Скопировать();
					
					// РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon
					БлокировкаДанных = Новый БлокировкаДанных;
					ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
					ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса);
					ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса",    СтрокаДереваВторогоУровня.ВидОбъектаМаркетплейса);
					ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура",              СтрокаДереваВторогоУровня.Номенклатура);
					ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика",            СтрокаДереваВторогоУровня.Характеристика);
					ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка",                  СтрокаДереваВторогоУровня.Упаковка);
					БлокировкаДанных.Заблокировать();

					НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(СтрокаДереваВторогоУровня.УчетнаяЗаписьМаркетплейса);
					НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(СтрокаДереваВторогоУровня.ВидОбъектаМаркетплейса);
					НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаДереваВторогоУровня.Номенклатура);
					НаборЗаписей.Отбор.Характеристика.Установить(СтрокаДереваВторогоУровня.Характеристика);
					НаборЗаписей.Отбор.Упаковка.Установить(СтрокаДереваВторогоУровня.Упаковка);
					НаборЗаписей.Отбор.ОбъектПубликации.Установить(Неопределено);
					НаборЗаписей.Прочитать();
					
					ДействиеДобавлениеОписанияТовара = Ложь;
					ДействиеОбновлениеОписанияТовара = Ложь;
					
					Если НаборЗаписей.Количество() = 0 Тогда
						Запись = НаборЗаписей.Добавить();
						
						ДействиеДобавлениеОписанияТовара = Истина;
						
					ИначеЕсли СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
						ОтменитьТранзакцию();
						
						Результат.Пропущено.Добавить(Новый Структура("НомерСтроки, Сообщение", 
							Индекс + 1, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Товарная позиция «%1» не записана, т.к. уже существует другая позиция с таким набором ключевых полей: %2, %3, %4, %5.'"),
								СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса,
								СтрокаДереваВторогоУровня.ВидОбъектаМаркетплейса,
								СтрокаДереваВторогоУровня.Номенклатура,
								СтрокаДереваВторогоУровня.Характеристика,
								СтрокаДереваВторогоУровня.Упаковка)));
						Результат.НеЗаписано = Результат.НеЗаписано + 1;
						Индекс = Индекс + 1;
						
						// Удаление дубля товара
						Отбор = Новый Структура(ПоляТаблицыТоваров);
						ЗаполнитьЗначенияСвойств(Отбор, СтрокаДереваВторогоУровня);
						СтрокиТовара = ТаблицаТоваров.НайтиСтроки(Отбор);
						Для Каждого СтрокаТовара Из СтрокиТовара Цикл
							ТаблицаТоваров.Удалить(СтрокаТовара);
							Прервать;
						КонецЦикла;
						
						Продолжить;
						
					Иначе
						Запись = НаборЗаписей[0];
						
						ДействиеОбновлениеОписанияТовара = Истина;
					КонецЕсли;
									 
					ИсключаяСвойства = "ИсточникиСхожихПредложений";
									 
					Если НЕ Параметры.ЗагрузитьЦеныПродажи Тогда
						ИсключаяСвойства = ИсключаяСвойства
									     + ", ЦенаДоСкидки, ЦенаСоСкидкой, МинимальнаяЦена";
					КонецЕсли;
					
					Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
						ИсключаяСвойства = ИсключаяСвойства
										 + ", ДанныеОбъекта, ДатаВыгрузкиЦенПродажи";
						
						ЗаполнитьЗначенияСвойств(Запись, СтрокаДереваВторогоУровня,, ИсключаяСвойства);
						
						Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса) Тогда
							Запись.ИдентификаторКатегорииМаркетплейса = СтрокаДереваВторогоУровня.ТекущееИдентификаторКатегорииМаркетплейса;
							Запись.НаименованиеКатегорииМаркетплейса  = СтрокаДереваВторогоУровня.ТекущееНаименованиеКатегорииМаркетплейса;
						КонецЕсли;
									   
					Иначе
						ИсключаяСвойства = ИсключаяСвойства
						+ ", УчетнаяЗаписьМаркетплейса, ВидОбъектаМаркетплейса"
						+ ", " + Параметры.ИмяИдентификатора
						+ ", ПродаетсяПоСхемеРаботыFBO, ПродаетсяПоСхемеРаботыFBS, ПродаетсяПоСхемеРаботыDBS"
						+ ", ОписаниеОбъектаМаркетплейса"
						+ ", ДатаАктуальностиОстатковМаркетплейса, ОстатокFBO, РезервFBO, ОстатокFBS, РезервFBS";
						
						ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0],, ИсключаяСвойства);
						ЗаполнитьЗначенияСвойств(Запись, СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0],, ИсключаяСвойства);
						Если ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса) Тогда
							Запись.ОписаниеОбъектаМаркетплейса = СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса[0].ОписаниеОбъектаМаркетплейса;
						КонецЕсли;
					КонецЕсли;
					
					Запись.ДанныеОбъекта              = Новый ХранилищеЗначения(СтрокаДереваВторогоУровня.ДанныеОбъекта);
					Запись.ИсточникиСхожихПредложений = Новый ХранилищеЗначения(СтрокаДереваВторогоУровня.ИсточникиСхожихПредложений);
					
					Если ДействиеДобавлениеОписанияТовара = Истина
					Или Запись.ВыгружатьПоНастройкамУчетнойЗаписи = Истина
					Тогда
						ИнтеграцияСМаркетплейсомOzonСервер.ЗаполнитьНастройкиВидовДанныхДляВыгрузкиПоНастройкеУчетнойЗаписи( Запись );
					КонецЕсли;
					
					НаборЗаписей.Записать(Истина);					
					ЗафиксироватьТранзакцию();
					
				Исключение
					ОтменитьТранзакцию();
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При записи сведений по товарной позиции «%1» возникла ошибка: %2.'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
					СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,,
					ТекстСообщения);
						
					Результат.Пропущено.Добавить(Новый Структура("НомерСтроки, Сообщение", 
					Индекс + 1, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При записи сведений по товарной позиции «%1» возникли ошибки.'"),
					СтрокаДереваВторогоУровня.ПредставлениеОбъектаМаркетплейса)));							
						    
					Результат.НеЗаписано = Результат.НеЗаписано + 1;
					Индекс = Индекс + 1;
					Продолжить;
				КонецПопытки;
			
				// Значения реквизитов
				Для каждого СтрокаТаблицыЗначений Из СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса Цикл
					Если НЕ СтрокаТаблицыЗначений.ТолькоТекущее Тогда
						СтрокаТаблицыЗначений.ТекущееОбязательныйАтрибут                       = СтрокаТаблицыЗначений.ОбязательныйАтрибут;
						СтрокаТаблицыЗначений.ТекущееЯвляетсяКоллекциейЗначений                = СтрокаТаблицыЗначений.ЯвляетсяКоллекциейЗначений;
						СтрокаТаблицыЗначений.ТекущееДоступенВыборЗначенияИзСписка             = СтрокаТаблицыЗначений.ДоступенВыборЗначенияИзСписка;
						СтрокаТаблицыЗначений.ТекущееТипЗначенияАтрибута                       = СтрокаТаблицыЗначений.ТипЗначенияАтрибута;
						СтрокаТаблицыЗначений.ТекущееЗначениеАтрибутаМаркетплейса              = СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса;
						СтрокаТаблицыЗначений.ТекущееНеЗаполненАтрибут                         = СтрокаТаблицыЗначений.НеЗаполненАтрибут;
						СтрокаТаблицыЗначений.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторЗначенияАтрибутаМаркетплейса;
						СтрокаТаблицыЗначений.ЕстьРазличия                                     = Ложь;
					КонецЕсли;
				КонецЦикла;
				
				Отбор = Новый Структура("ТолькоТекущее", Истина);
				НайденныеСтроки = СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.НайтиСтроки(Отбор);
				Для каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
					СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса.Удалить(СтрокаТаблицыЗначений);
				КонецЦикла;
				
				Результат.Записано = Результат.Записано + 1;
				Если СтрокаДереваВторогоУровня.ВариантЗагрузки = 2 Тогда
					Результат.ВТомЧислеНовых = Результат.ВТомЧислеНовых + 1;
				КонецЕсли;

				СтрокаДереваВторогоУровня.Пометка         = Ложь;
				СтрокаДереваВторогоУровня.ВариантЗагрузки = 0;
				СтрокаДереваВторогоУровня.ИндексСтатуса   = -999;
				
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
		
		// Загрузить цены 
		Если ТаблицаТоваров.Количество() > 0
			 И ДоступнаУстановкаЦен Тогда
			
			ПараметрыЗагрузкиЦен = Новый Структура;
			ПараметрыЗагрузкиЦен.Вставить( "Товары", ТаблицаТоваров );
			ПараметрыЗагрузкиЦен.Вставить( "ВидыЦен", Неопределено );
			ПараметрыЗагрузкиЦен.Вставить( "ТолькоЗагружаемые", Ложь );
			ПараметрыЗагрузкиЦен.Вставить( "ТолькоПоСтатусуЗагружен", Ложь );
			
			ДокументУстановкаЦенНоменклатуры = 
			ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Параметры, "ДокументУстановкаЦенНоменклатуры", Неопределено );
			ПараметрыЗагрузкиЦен.Вставить( "ДокументУстановкаЦенНоменклатуры", ДокументУстановкаЦенНоменклатуры );

			СозданныеДокументы = ИмпортИзOzonЗагрузитьЦеныТоваров( УчетнаяЗаписьМаркетплейса, ПараметрыЗагрузкиЦен );
			Результат.Вставить("СозданныеДокументыУстановкаЦенНоменклатуры", СозданныеДокументы );
			
			Если СозданныеДокументы = Неопределено Тогда
				Результат.Вставить("ЗагруженыЦены", Ложь);
			ИначеЕсли СозданныеДокументы.Получить(УчетнаяЗаписьМаркетплейса) = Неопределено Тогда
				Результат.Вставить("ЗагруженыЦены", Ложь);
			ИначеЕсли СозданныеДокументы.Получить(УчетнаяЗаписьМаркетплейса).Количество() = 0 Тогда
				Результат.Вставить("ЗагруженыЦены", Ложь);
			КонецЕсли;
			
			ЦеныТоваров = ПолучитьТекущиеЦеныПоИдентификаторам(	УчетнаяЗаписьМаркетплейса, Идентификаторы, ИмяИдентификатора );
			
		Иначе
			ЦеныТоваров = Неопределено;
		КонецЕсли;
		
		// Окончание
		Для каждого СтрокаДереваПервогоУровня Из ДеревоТоваров.Строки Цикл
			Для каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
				Если СтрокаДереваВторогоУровня.ИндексСтатуса < 0 Тогда
					Если СтрокаДереваВторогоУровня.ИндексСтатуса = -999 Тогда
						Если СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками 
							 ИЛИ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.ОписаниеОшибки)
								 И СтрокаДереваВторогоУровня.Статус <> Перечисления.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 0;
						ИначеЕсли СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.КПубликации Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 1;
						ИначеЕсли СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.НаМодерации Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 1;
						ИначеЕсли СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 2;
						ИначеЕсли СтрокаДереваВторогоУровня.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.Загружен Тогда
							СтрокаДереваВторогоУровня.ИндексСтатуса = 3;
						КонецЕсли;
					Иначе
						СтрокаДереваВторогоУровня.ИндексСтатуса = СтрокаДереваВторогоУровня.ИндексСтатуса + 100;
					КонецЕсли;
					
					// Цены товаров
					Если ЦеныТоваров <> Неопределено Тогда
						СтрокаДереваВторогоУровня.ЦеныТовара = Новый Массив;
						Отбор = Новый Структура(ИмяИдентификатора, СтрокаДереваВторогоУровня[ИмяИдентификатора]);
						НайденныеСтрокиЦеныТоваров = ЦеныТоваров.НайтиСтроки(Отбор);
						Для каждого ЭлементКоллекции Из НайденныеСтрокиЦеныТоваров Цикл
							СтрокаДереваВторогоУровня.ЦеныТовара.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЭлементКоллекции));
						КонецЦикла;
					КонецЕсли;
					
					// Дерево реквизитов
					СтрокаДереваВторогоУровня.ДеревоРеквизитов = СформироватьДеревоРеквизитов(
						УчетнаяЗаписьМаркетплейса,
						СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса,
						СтрокаДереваВторогоУровня,
						СтрокаДереваВторогоУровня.ЦеныТовара,
						НастройкиУчетнойЗаписи,
						ВидыЦен);
					
					// Различия
					Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "СтавкаНДС");
					ЕстьРазличияСтавкаНДС = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
					СтрокаДереваВторогоУровня.ЕстьРазличияСтавкаНДС = (ЕстьРазличияСтавкаНДС > 0);
					
					Отбор = Новый Структура("ЕстьРазличия, ИдентификаторАтрибутаМаркетплейса", Истина, "ИдентификаторКатегорииМаркетплейса");
					ЕстьРазличияКатегорииOzon = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
					СтрокаДереваВторогоУровня.ЕстьРазличияКатегорииOzon = (ЕстьРазличияКатегорииOzon > 0);
					
					Отбор = Новый Структура("ЕстьРазличия, ЦеновыеПоказатели", Истина, Истина);
					ЕстьРазличияЦеновыеПоказатели = СтрокаДереваВторогоУровня.ДеревоРеквизитов.Строки.НайтиСтроки(Отбор, Истина).Количество();
					СтрокаДереваВторогоУровня.ЕстьРазличияЦеновыеПоказатели = (ЕстьРазличияЦеновыеПоказатели > 0);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ИмпортИзOzonОпределитьНаименованияГруппДереваТоваров(
			ДеревоТоваров, 
			Ложь, 
			Параметры.ОтображатьСопоставленные,
			Параметры.ОтображатьПоСтатусу);
		
		Результат.Вставить("ДеревоТоваров", ДеревоТоваров);
		
		Если Результат.Записано = 0 И Результат.НеЗаписано = 0 Тогда
			Результат.Ошибка.КодОшибки 	    = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
			Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Данных, отмеченных для записи, не найдено.'");
			
			Если ВсегоОтмечено > 0 
				 И (ВсегоНеПолучено > 0 ИЛИ ВсегоНеСопоставлено > 0) Тогда
				Результат.Ошибка.ОписаниеОшибки = НСтр("ru = 'Данные не записаны, так как для отмеченных позиций'");
				Если ВсегоНеПолучено > 0 Тогда
					Результат.Ошибка.ОписаниеОшибки = Результат.Ошибка.ОписаниеОшибки + " " + НСтр("ru = 'не получены обновленные данные с торговой площадки'");
				КонецЕсли;
				Если ВсегоНеСопоставлено > 0 Тогда
					Если ВсегоНеПолучено > 0 Тогда
						Результат.Ошибка.ОписаниеОшибки = Результат.Ошибка.ОписаниеОшибки + " " + НСтр("ru = 'или'");
					КонецЕсли;
					Результат.Ошибка.ОписаниеОшибки = Результат.Ошибка.ОписаниеОшибки + " " + НСтр("ru = 'не выполнено сопоставление данным учетной системы 1С'");
				КонецЕсли;
				Результат.Ошибка.ОписаниеОшибки = Результат.Ошибка.ОписаниеОшибки + ".";
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;

	Если Отказ Тогда
		Результат.Ошибка.КодОшибки 	    = КодыОшибокРегистраСтатусовПубликацииТоваров().ОшибкаПрочие;
		Результат.Ошибка.ОписаниеОшибки = ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИмпортДанныхСлужебный

// Формирует наименования групп первого уровня дерева товаров.
//
// Параметры:
//   ДеревоТоваров                  - ДеревоЗначений - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                      см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//   СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго уровня дерева товаров.
//   ОтображатьСопоставленные       - Число - установленный фильтр по сопоставленным позициям дерева товаров.
//   ОтображатьПоСтатусу            - Число - установленный фильтр по статусу позиций дерева товаров.
//
Процедура ИмпортИзOzonОпределитьНаименованияГруппДереваТоваров(ДеревоТоваров, Знач СортироватьСтрокиДереваТоваров = Истина, 
            Знач ОтображатьСопоставленные = 0, Знач ОтображатьПоСтатусу = -1)
    
    Индекс = 0;
    
    Пока Индекс < ДеревоТоваров.Строки.Количество() Цикл
        СтрокаДереваПервогоУровня = ДеревоТоваров.Строки[Индекс];
        
        Если СтрокаДереваПервогоУровня.Строки.Количество() = 0 Тогда
            ДеревоТоваров.Строки.Удалить(СтрокаДереваПервогоУровня);
            Продолжить;
        ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 0 Тогда
            ШаблонПредставления = НСтр("ru = 'Обновить (%1 из %2)'");
        ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 2 Тогда
            ШаблонПредставления = НСтр("ru = 'Загрузить (%1 из %2)'");
        ИначеЕсли СтрокаДереваПервогоУровня.ВариантЗагрузки = 3 Тогда
            ШаблонПредставления = НСтр("ru = 'Не найдены (%2)'");
        КонецЕсли;
        
        КоличествоСтрок           = СтрокаДереваПервогоУровня.Строки.Количество();
        КоличествоОтмеченныхСтрок = 0;
        
        Для каждого СтрокаДереваВторогоУровня Из СтрокаДереваПервогоУровня.Строки Цикл
            Если ОтображатьСопоставленные = 1
                 И (НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
                    ИЛИ СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
                        И НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика)
                    ИЛИ НЕ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория)) Тогда
                КоличествоСтрок = КоличествоСтрок - 1;
                Продолжить;
                
            ИначеЕсли ОтображатьСопоставленные = 2
                      И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Номенклатура) 
                      И (НЕ СтрокаДереваВторогоУровня.ХарактеристикиИспользуются
                         ИЛИ ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Характеристика))
                      И ЗначениеЗаполнено(СтрокаДереваВторогоУровня.Категория) Тогда
                КоличествоСтрок = КоличествоСтрок - 1;
                Продолжить;
            КонецЕсли;
            
            Если ОтображатьПоСтатусу <> -1
                 И СтрокаДереваВторогоУровня.ИндексСтатуса <> ОтображатьПоСтатусу Тогда
                КоличествоСтрок = КоличествоСтрок - 1;
                Продолжить;
            КонецЕсли;
            
            КоличествоОтмеченныхСтрок = КоличествоОтмеченныхСтрок + ?(СтрокаДереваВторогоУровня.Пометка, 1, 0);
        КонецЦикла;
        
        Если КоличествоСтрок = 0 Тогда
            ШаблонПредставления = СтрЗаменить(ШаблонПредставления, " (%1 из %2)", "");
            ШаблонПредставления = СтрЗаменить(ШаблонПредставления, " (%2)", "");
        КонецЕсли;
        
        СтрокаДереваПервогоУровня.Пометка                          = (КоличествоОтмеченныхСтрок > 0);
        СтрокаДереваПервогоУровня.КоличествоОтмеченныхСтрок        = КоличествоОтмеченныхСтрок;
        СтрокаДереваПервогоУровня.ПредставлениеОбъектаМаркетплейса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            ШаблонПредставления,
            КоличествоОтмеченныхСтрок,
            КоличествоСтрок);
        
        Если СортироватьСтрокиДереваТоваров Тогда
            СтрокаДереваПервогоУровня.Строки.Сортировать("ПредставлениеОбъектаМаркетплейса");
        КонецЕсли;
        
        Индекс = Индекс + 1;
    КонецЦикла;
        
КонецПроцедуры

// Осуществляет перенос строки дерева товаров между родителями.
// 
// Параметры:
//   ДеревоТоваров - ДеревоЗначений       - структура дерева описана в реквизите "ИмпортируемыеТовары", 
//                                            см. Обработка.УправлениеПродажамиНаOzon.Форма.ИмпортДанныхТоваровСТорговойПлощадки.
//   Источник      - СтрокаДереваЗначений - строка дерева товаров, которую необходимо перенести.
//   Приемник      - СтрокаДереваЗначений - строка-родитель дерева товаров, в которую необходимо перенести Источник.
//
Процедура ИмпортИзOzonПеренестиСтрокуДереваТоваровВДругуюГруппу(ДеревоТоваров, Источник, Приемник) 
	
	СтрокаДереваВторогоУровня = Приемник.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаДереваВторогоУровня, Источник,, "ДеревоРеквизитов, Изображения, ДанныеОбъекта, ДанныеТовараИзСервиса, ЗначенияРеквизитовИзСервиса");

	СтрокаДереваВторогоУровня.ДеревоРеквизитов            = Источник.ДеревоРеквизитов.Скопировать();
	СтрокаДереваВторогоУровня.Изображения                 = Источник.Изображения.Скопировать();
	СтрокаДереваВторогоУровня.ДанныеОбъекта               = Источник.ДанныеОбъекта.Скопировать();
	СтрокаДереваВторогоУровня.ДанныеТовараИзСервиса       = Источник.ДанныеТовараИзСервиса.Скопировать();
	СтрокаДереваВторогоУровня.ЗначенияРеквизитовИзСервиса = Источник.ЗначенияРеквизитовИзСервиса.Скопировать();
	СтрокаДереваВторогоУровня.ЦеныТовара                  = ОбщегоНазначения.СкопироватьРекурсивно(Источник.ЦеныТовара);
	
	СтрокаДереваПервогоУровня = Источник.Родитель;
	СтрокаДереваПервогоУровня.Строки.Удалить(Источник);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Конструктор таблицы значений для описания характеристик товаров, полученных из сервиса.
//
// Возвращаемое значение:
//	 ТаблицаЗначений - таблица с колонками:
//	   * УчетнаяЗаписьМаркетплейса		    - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//     * ИдентификаторПубликации            - Строка - внутренний идентификатор товара в системе продавца;
//     * ИдентификаторОбъектаМаркетплейса   - Строка - идентификатор товара на маркетплейсе.
//     * ФильтрВидимости                    - Строка - фильтр по видимости товара;
//     * Штрихкод                           - Строка - штрихкоды, через ";";
//     * ИдентификаторКатегорииМаркетплейса - Строка - идентификатор категории маркетплейса;
//     * ЗначенияАтрибутов                  - ТаблицаЗначений - значения реквизитов товара, 
//                                              см. НоваяТаблицаЗначенийРеквизитов;
//     * Изображения                        - ТаблицаЗначений - изображения товара, 
//                                              см. НоваяТаблицаИзображений;
//     * ДокументыPDF                       - ТаблицаЗначений - документы PDF, 
//                                              см. НоваяТаблицаДокументовPDF.
//
Функция НоваяТаблицаОписанияХарактеристикТоваров() Экспорт

	ОписаниеТипаСтрока50        = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250       = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", 		 Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторПубликации",  		     ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса",   ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ФильтрВидимости",  		             ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("Штрихкод",                  		 ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ИдентификаторКатегорииМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ЗначенияАтрибутов",                  ОписаниеТипаТаблицаЗначений);
	Результат.Колонки.Добавить("Изображения",                        ОписаниеТипаТаблицаЗначений);
	Результат.Колонки.Добавить("ДокументыPDF",                       ОписаниеТипаТаблицаЗначений);

	Возврат Результат;

КонецФункции

// Заполняет значения служебных колонок таблицы значений реквизитов товара согласно указанных данных в порядке приоритета; 
// сравнивает с предыдущими значениями.
//
// Параметры:
// 	 УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ЗначенияРеквизитов        - ТаблицаЗначений - значения реквизитов товара из сервиса, 
//                                 см. НоваяТаблицаЗначенийРеквизитов;
//   КэшКатегорий              - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий;
//                             - Неопределено - заполнение согласно кэша категорий не производится;
//	 СоответствияАтрибутов     - ТаблицаЗначений - соответствие атрибутов по категориям, 
//                                 см. ПолучитьДанныеСоответствияАтрибутовКатегории;
//                             - Неопределено - заполнение согласно соответствия атрибутов по категориям не производится;
//	 Категория1С               - СправочникСсылка.ВидыНоменклатуры, СправочникСсылка.Номенклатура, СправочникСсылка.ТоварныеКатегории - 
//                                 источник категорий учетной системы;
//                             - Неопределено - заполнение согласно соответствия атрибутов по категориям с учетом категории учетной 
//                                 системы не производится;
//   ДанныеОбъекта             - ТаблицаЗначений - значения реквизитов товара из учетной системы, 
//                                 см. НоваяТаблицаЗначенийРеквизитов;
//                             - Неопределено - заполнение согласно сохраненных реквизитов из учетной системы не производится;
//   РеквизитыДляСравнения     - Булево - Истина, если необходимо добавить дополнительные реквизиты для сравнения.
//
Процедура ДополнитьТаблицуЗначенийРеквизитов(УчетнаяЗаписьМаркетплейса, ЗначенияРеквизитов, КэшКатегорий, 
			СоответствияАтрибутов, Категория1С, ДанныеОбъекта, Знач РеквизитыДляСравнения = Ложь) Экспорт
				
	Если ЗначенияРеквизитов.Колонки.Найти("Обработано") = Неопределено Тогда
		ЗначенияРеквизитов.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	КонецЕсли;				
	ЗначенияРеквизитов.ЗаполнитьЗначения(Ложь, "Обработано");
	
	Если ДанныеОбъекта = Неопределено Тогда 
		ДанныеОбъекта = НоваяТаблицаЗначенийРеквизитов();
	КонецЕсли;
	
	Если РеквизитыДляСравнения Тогда
		ЗначенияРеквизитов.ЗаполнитьЗначения(Истина, "ЕстьРазличия");
		ЗначенияРеквизитов.ЗаполнитьЗначения(Ложь,   "ТолькоТекущее");
		
		Если ДанныеОбъекта.Колонки.Найти("Обработано") = Неопределено Тогда
			ДанныеОбъекта.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
		КонецЕсли;				
		ДанныеОбъекта.ЗаполнитьЗначения(Ложь, "Обработано");
	КонецЕсли;
	
	Если ЗначенияРеквизитов.Количество() > 0 Тогда
		ИдентификаторКатегорииМаркетплейса = ЗначенияРеквизитов[0].ИдентификаторКатегорииМаркетплейса;
		
		// Согласно данных категории из кэша
		Если КэшКатегорий <> Неопределено Тогда
			АтрибутыКатегории = Неопределено;
			Если КэшКатегорий.Свойство("Категория_" + ИдентификаторКатегорииМаркетплейса, АтрибутыКатегории) Тогда
				ИсключитьСвойства = "ИдентификаторКатегорииМаркетплейса, ИдентификаторАтрибутаМаркетплейса"
									+ ", ЗначениеПоУмолчанию, ПредставлениеРеквизита1С";
				
				Для каждого ЭлементКоллекции Из АтрибутыКатегории Цикл
					Отбор = Новый Структура;
					Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", ЭлементКоллекции.ИдентификаторКатегорииМаркетплейса);
					Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса",  ЭлементКоллекции.ИдентификаторАтрибутаМаркетплейса);
					
					НайденныеСтроки = ЗначенияРеквизитов.НайтиСтроки(Отбор);
					Для каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ЭлементКоллекции,, ИсключитьСвойства);
						СтрокаТаблицыЗначений.Обработано = Истина;
					КонецЦикла;
				КонецЦикла;
				
				// Удалить атрибуты, не присутствующие в категории
				Отбор = Новый Структура("Обработано", Ложь);
				НайденныеСтроки = ЗначенияРеквизитов.НайтиСтроки(Отбор);
				Для каждого СтрокаТаблицыЗначений Из НайденныеСтроки Цикл
					ЗначенияРеквизитов.Удалить(СтрокаТаблицыЗначений);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Согласно предыдущих значений
		Если ДанныеОбъекта.Количество() > 0 Тогда
			Для каждого СтрокаТаблицыЗначений Из ЗначенияРеквизитов Цикл
				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", СтрокаТаблицыЗначений.ИдентификаторКатегорииМаркетплейса);
				Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса",  СтрокаТаблицыЗначений.ИдентификаторАтрибутаМаркетплейса);
			
			    НайденныеСтроки = ДанныеОбъекта.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ИсключитьСвойства = "ИдентификаторКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса"
										+ ", ИдентификаторАтрибутаМаркетплейса, ЗначениеАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибутаМаркетплейса";
					
					Если СтрокаТаблицыЗначений.Обработано Тогда
						ИсключитьСвойства = ИсключитьСвойства + ", ИдентификаторРодителяАтрибутаМаркетплейса, НаименованиеРодителяАтрибутаМаркетплейса, НаименованиеАтрибутаМаркетплейса"
											  				  + ", ОбязательныйАтрибут, ЯвляетсяКоллекциейЗначений, ДоступенВыборЗначенияИзСписка, ТипЗначенияАтрибута"
											  				  + ", ОписаниеНазначенияАтрибута";
					Иначе
						Если НЕ ЗначениеЗаполнено(НайденныеСтроки[0].НаименованиеРодителяАтрибутаМаркетплейса) Тогда
							ИсключитьСвойства = ИсключитьСвойства + ", НаименованиеРодителяАтрибутаМаркетплейса";
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(НайденныеСтроки[0].НаименованиеАтрибутаМаркетплейса) Тогда
							ИсключитьСвойства = ИсключитьСвойства + ", НаименованиеАтрибутаМаркетплейса";
						КонецЕсли;
					КонецЕсли;
						
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, НайденныеСтроки[0],, ИсключитьСвойства);
					СтрокаТаблицыЗначений.Обработано = Истина;
					
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ДанныеОбъекта[0], "Номенклатура, Характеристика, Упаковка, Категория1С, ИсточникКатегорииМаркетплейса, ИдентификаторИсточникаКатегорииМаркетплейса",);
				КонецЕсли;
			КонецЦикла;
			
		// Согласно указанного соответствия по категории
		ИначеЕсли СоответствияАтрибутов <> Неопределено 
				  И СоответствияАтрибутов.Количество() > 0 Тогда
			Для каждого СтрокаТаблицыЗначений Из ЗначенияРеквизитов Цикл
				Отбор = Новый Структура;
				Если СоответствияАтрибутов.Колонки.Найти("УчетнаяЗаписьМаркетплейса") <> Неопределено Тогда
					Отбор.Вставить("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
				КонецЕсли;
				Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", СтрокаТаблицыЗначений.ИдентификаторКатегорииМаркетплейса);
				Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса",  СтрокаТаблицыЗначений.ИдентификаторАтрибутаМаркетплейса);
				Если ЗначениеЗаполнено(Категория1С) Тогда
					Отбор.Вставить("Категория1С", Категория1С);
				КонецЕсли;
			
			    НайденныеСтроки = СоответствияАтрибутов.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ИсключитьСвойства = "Категория1С, ИдентификаторКатегорииМаркетплейса, ИдентификаторАтрибутаМаркетплейса";
					
					Если СтрокаТаблицыЗначений.Обработано Тогда
						ИсключитьСвойства = ИсключитьСвойства + ", ИдентификаторРодителяАтрибутаМаркетплейса, НаименованиеРодителяАтрибутаМаркетплейса, НаименованиеАтрибутаМаркетплейса"
											  				  + ", ОбязательныйАтрибут, ЯвляетсяКоллекциейЗначений, ДоступенВыборЗначенияИзСписка, ТипЗначенияАтрибута"
											  				  + ", ОписаниеНазначенияАтрибута";
					Иначе
						Если НЕ ЗначениеЗаполнено(НайденныеСтроки[0].НаименованиеРодителяАтрибутаМаркетплейса) Тогда
							ИсключитьСвойства = ИсключитьСвойства + ", НаименованиеРодителяАтрибутаМаркетплейса";
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(НайденныеСтроки[0].НаименованиеАтрибутаМаркетплейса) Тогда
							ИсключитьСвойства = ИсключитьСвойства + ", НаименованиеАтрибутаМаркетплейса";
						КонецЕсли;
					КонецЕсли;
						
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, НайденныеСтроки[0],, ИсключитьСвойства);
					СтрокаТаблицыЗначений.Обработано = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеТипов            = СоответствиеТипов();
	ПутьКРеквизитам1СПоУмолчанию = ПутьКРеквизитам1СПоУмолчанию();
	
	Для каждого СтрокаТаблицыЗначений Из ЗначенияРеквизитов Цикл
		СтрокаТаблицыЗначений.ЗначениеАтрибутаЗаданоПользователем = Истина;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ТипЗначенияАтрибута) Тогда
			ТипЗначенияАтрибута1С                              = СоответствиеТипов.Получить(СтрокаТаблицыЗначений.ТипЗначенияАтрибута);
			ОписаниеТипа                                       = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТипЗначенияАтрибута1С, СтрокаТаблицыЗначений.ТипЗначенияАтрибута);
			СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса = ОписаниеТипа.ПривестиЗначение(СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса);
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса) И ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеПоУмолчанию) Тогда
			СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса              = СтрокаТаблицыЗначений.ЗначениеПоУмолчанию;
			СтрокаТаблицыЗначений.ИдентификаторЗначенияАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторЗначенияПоУмолчанию;
			СтрокаТаблицыЗначений.ЗначениеАтрибутаЗаданоПользователем       = Ложь;
		КонецЕсли;
		
		Значение = Неопределено;
		Если ПутьКРеквизитам1СПоУмолчанию.Свойство("Атрибут_" + СтрокаТаблицыЗначений.ИдентификаторАтрибутаМаркетплейса, Значение) Тогда	
			СтрокаТаблицыЗначений.ПолныйПутьКРеквизиту1С   = Значение.Реквизит1С;
			СтрокаТаблицыЗначений.ПредставлениеРеквизита1С = Значение.ПредставлениеРеквизита1С;
		КонецЕсли;
															   
		СтрокаТаблицыЗначений.НеЗаполненПутьКРеквизиту1С     = НЕ ЗначениеЗаполнено(СтрокаТаблицыЗначений.ПолныйПутьКРеквизиту1С);
		СтрокаТаблицыЗначений.НеЗаполненАтрибут              = НЕ ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса);
		СтрокаТаблицыЗначений.УстановленоЗначениеПоУмолчанию = НЕ СтрокаТаблицыЗначений.НеЗаполненоСоответствиеАтрибута
															   И ЗначениеЗаполнено(СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса)
															   И СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ЗначениеПоУмолчанию;
															   
		Если РеквизитыДляСравнения И ДанныеОбъекта.Количество() > 0 Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", СтрокаТаблицыЗначений.ИдентификаторКатегорииМаркетплейса);
			Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса",  СтрокаТаблицыЗначений.ИдентификаторАтрибутаМаркетплейса);
			Отбор.Вставить("Обработано", Ложь);
		
			НайденнаяСтрока = Неопределено;
		    НайденныеСтроки = ДанныеОбъекта.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				
				Если НайденныеСтроки.Количество() > 1 Тогда
					Для каждого ЭлементКоллекции Из НайденныеСтроки Цикл
						Если СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса = ЭлементКоллекции.ЗначениеАтрибутаМаркетплейса
						     И СтрокаТаблицыЗначений.ИдентификаторЗначенияАтрибутаМаркетплейса = ЭлементКоллекции.ИдентификаторЗначенияАтрибутаМаркетплейса Тогда
                        	НайденнаяСтрока = ЭлементКоллекции;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если НайденнаяСтрока <> Неопределено Тогда
				СтрокаТаблицыЗначений.ТекущееОбязательныйАтрибут                       = НайденнаяСтрока.ОбязательныйАтрибут;
				СтрокаТаблицыЗначений.ТекущееЯвляетсяКоллекциейЗначений                = НайденнаяСтрока.ЯвляетсяКоллекциейЗначений;
				СтрокаТаблицыЗначений.ТекущееДоступенВыборЗначенияИзСписка             = НайденнаяСтрока.ДоступенВыборЗначенияИзСписка;
				СтрокаТаблицыЗначений.ТекущееТипЗначенияАтрибута                       = НайденнаяСтрока.ТипЗначенияАтрибута;
				СтрокаТаблицыЗначений.ТекущееЗначениеАтрибутаМаркетплейса              = НайденнаяСтрока.ЗначениеАтрибутаМаркетплейса;
				СтрокаТаблицыЗначений.ТекущееНеЗаполненАтрибут                         = НайденнаяСтрока.НеЗаполненАтрибут;
				СтрокаТаблицыЗначений.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = НайденнаяСтрока.ИдентификаторЗначенияАтрибутаМаркетплейса;
				
				Если СтрокаТаблицыЗначений.ТекущееЯвляетсяКоллекциейЗначений = СтрокаТаблицыЗначений.ЯвляетсяКоллекциейЗначений
					 И СтрокаТаблицыЗначений.ТекущееДоступенВыборЗначенияИзСписка = СтрокаТаблицыЗначений.ДоступенВыборЗначенияИзСписка
					 И СтрокаТаблицыЗначений.ТекущееТипЗначенияАтрибута = СтрокаТаблицыЗначений.ТипЗначенияАтрибута
					 И СтрокаТаблицыЗначений.ТекущееЗначениеАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса
					 И СтрокаТаблицыЗначений.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторЗначенияАтрибутаМаркетплейса Тогда
					СтрокаТаблицыЗначений.ЕстьРазличия = Ложь;
				КонецЕсли;
				
				НайденнаяСтрока.Обработано = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РеквизитыДляСравнения И ДанныеОбъекта.Количество() > 0 Тогда
		Отбор = Новый Структура("Обработано", Ложь);
	    НайденныеСтроки = ДанныеОбъекта.НайтиСтроки(Отбор);
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтрокаТаблицыЗначений = ЗначенияРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, НайденнаяСтрока);
			
			СтрокаТаблицыЗначений.ТекущееОбязательныйАтрибут                       = НайденнаяСтрока.ОбязательныйАтрибут;
			СтрокаТаблицыЗначений.ТекущееЯвляетсяКоллекциейЗначений                = НайденнаяСтрока.ЯвляетсяКоллекциейЗначений;
			СтрокаТаблицыЗначений.ТекущееДоступенВыборЗначенияИзСписка             = НайденнаяСтрока.ДоступенВыборЗначенияИзСписка;
			СтрокаТаблицыЗначений.ТекущееТипЗначенияАтрибута                       = НайденнаяСтрока.ТипЗначенияАтрибута;
			СтрокаТаблицыЗначений.ТекущееЗначениеАтрибутаМаркетплейса              = НайденнаяСтрока.ЗначениеАтрибутаМаркетплейса;
			СтрокаТаблицыЗначений.ТекущееНеЗаполненАтрибут                         = НайденнаяСтрока.НеЗаполненАтрибут;
			СтрокаТаблицыЗначений.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = НайденнаяСтрока.ИдентификаторЗначенияАтрибутаМаркетплейса;
			СтрокаТаблицыЗначений.ТолькоТекущее                                    = Истина;
				
			Если СтрокаТаблицыЗначений.ТекущееЯвляетсяКоллекциейЗначений = СтрокаТаблицыЗначений.ЯвляетсяКоллекциейЗначений
				 И СтрокаТаблицыЗначений.ТекущееДоступенВыборЗначенияИзСписка = СтрокаТаблицыЗначений.ДоступенВыборЗначенияИзСписка
				 И СтрокаТаблицыЗначений.ТекущееТипЗначенияАтрибута = СтрокаТаблицыЗначений.ТипЗначенияАтрибута
				 И СтрокаТаблицыЗначений.ТекущееЗначениеАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ЗначениеАтрибутаМаркетплейса
				 И СтрокаТаблицыЗначений.ТекущееИдентификаторЗначенияАтрибутаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторЗначенияАтрибутаМаркетплейса Тогда
				СтрокаТаблицыЗначений.ЕстьРазличия = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Конструктор таблицы значений для полученных остатков товаров.
//
// Возвращаемое значение:
//	 ТаблицаЗначений - таблица с колонками:
//	   * УчетнаяЗаписьМаркетплейса        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//     * ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца;
//     * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе;
//     * ИдентификаторSKU                 - Строка - SKU товара, который продается со склада продавца (схемы FBS и rFBS);
//     * ИдентификаторСкладаМаркетплейса  - Строка - идентификатор склада на маркетплейсе;
//     * НаименованиеСкладаМаркетплейса   - Строка - наименование склада на маркетплейсе;
//     * ТипСкладаМаркетплейса            - Строка - тип склада на маркетплейсе;
//	   * КоличествоВНаличии 		      - Число - количество товара в наличии;
//	   * КоличествоЗарезервировано        - Число - количество товара зарезервировано;
//
Функция НоваяТаблицаОстатковТоваров() Экспорт
	
	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока250 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250));
	ОписаниеТипаЧисло15_3 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса",        Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторПубликации",          ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторSKU",                 ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторСкладаМаркетплейса",  ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("НаименованиеСкладаМаркетплейса",   ОписаниеТипаСтрока250);
	Результат.Колонки.Добавить("ТипСкладаМаркетплейса",            ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("КоличествоВНаличии",               ОписаниеТипаЧисло15_3);
	Результат.Колонки.Добавить("КоличествоЗарезервировано",        ОписаниеТипаЧисло15_3);
	
	Возврат Результат;

КонецФункции

// Конструктор списка параметров для фильтра по товарам.
//
// Параметры:
//   ВключатьТоварыИзАрхива             - Булево - Истина, если в выборку включаются товары из архива.
//   ИдентификаторыПубликации           - Массив Из Строка - список внутренних идентификаторов товаров в системе продавца;
//                                      - Неопределено - выборка по идентификаторам публикации не используется.
//   ИдентификаторыОбъектовМаркетплейса - Массив Из Строка - список идентификаторов товаров на маркетплейсе;
//                                      - Неопределено - выборка по идентификаторам товаров на маркетплейсе не используется.
//
// Возвращаемое значение:
//   Структура - фильтры для получения списка товаров (filter):
//     * ФильтрВидимости                    - Массив Из Строка - для указания нескольких фильтров по видимости;
//                                          - Строка - фильтр по видимости товара (visibility): 
//                                              "ALL"                      - все товары, кроме архивных;
//                                              "VISIBLE"                  - товары, которые видны покупателям;.
//                                              "INVISIBLE"                - товары, которые не видны покупателям;
//                                              "EMPTY_STOCK"              - товары, у которых не указано наличие;
//                                              "NOT_MODERATED"            - товары, которые не прошли модерацию;
//                                              "MODERATED"                - товары, которые прошли модерацию;
//                                              "DISABLED"                 - товары, которые видны покупателям, но недоступны к покупке;
//                                              "STATE_FAILED"             - товары, создание которых завершилось ошибкой;
//                                              "READY_TO_SUPPLY"          - товары, готовые к поставке;
//                                              "VALIDATION_STATE_PENDING" - товары, которые проходят проверку валидатором на предварительной модерации;
//                                              "VALIDATION_STATE_FAIL"    - товары, которые не прошли проверку валидатором на предварительной модерации;
//                                              "VALIDATION_STATE_SUCCESS" - товары, которые прошли проверку валидатором на предварительной модерации;
//                                              "TO_SUPPLY"                - товары, готовые к продаже;
//                                              "IN_SALE"                  - товары в продаже;
//                                              "REMOVED_FROM_SALE"        - товары, скрытые от покупателей;
//                                              "BANNED"                   - заблокированные товары;
//                                              "OVERPRICED"               - товары с завышенной ценой;
//                                              "CRITICALLY_OVERPRICED"    - товары со слишком завышенной ценой;
//                                              "EMPTY_BARCODE"            - товары без штрихкода;
//                                              "BARCODE_EXISTS"           - товары со штрихкодом;
//                                              "QUARANTINE"               - товары на карантине после изменения цены более чем на 50%;
//                                              "ARCHIVED"                 - товары в архиве;
//                                              "OVERPRICED_WITH_STOCK"    - товары в продаже со стоимостью выше, чем у конкурентов;
//                                              "PARTIAL_APPROVED"         - товары в продаже с пустым или неполным описанием;
//                                              "IMAGE_ABSENT"             - товары без изображений;
//                                              "MODERATION_BLOCK"                  - товары, для которых заблокирована модерация.
//     * ИдентификаторыПубликации           - Массив Из Строка - список внутренних идентификаторов товаров в системе продавца (offer_id);
//     * ИдентификаторыОбъектовМаркетплейса - Массив Из Строка - список идентификаторов товаров на маркетплейсе (product_id).
//
Функция НовыйФильтрЗапросаПоТоварам(ВключатьТоварыИзАрхива = Ложь, ИдентификаторыПубликации = Неопределено, ИдентификаторыОбъектовМаркетплейса = Неопределено) Экспорт

	Результат = Новый Структура;
	
	Если ВключатьТоварыИзАрхива Тогда
		ФильтрыВидимости = Новый Массив;
		ФильтрыВидимости.Добавить("ALL");
		ФильтрыВидимости.Добавить("ARCHIVED");

		Результат.Вставить("ФильтрВидимости", ФильтрыВидимости);
		
	Иначе
		Результат.Вставить("ФильтрВидимости", "ALL");
	КонецЕсли;

	Результат.Вставить("ИдентификаторыПубликации",           ИдентификаторыПубликации);
	Результат.Вставить("ИдентификаторыОбъектовМаркетплейса", ИдентификаторыОбъектовМаркетплейса);

	Возврат Результат;

КонецФункции

// Получает таблицу идентификаторов товаров, полученных из сервиса с учетом установленного отбора.
//
// Параметры:
// 	 УчетнаяЗаписьМаркетплейса     - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ФильтрПоТоварам               - Структура - фильтр по товарам, см. НовыйФильтрЗапросаПоТоварам.
//   ТаблицаИдентификаторовТоваров - ТаблицаЗначений - таблица идентификаторов товаров, 
//                                     см. НоваяТаблицаИдентификаторовТоваров.
//   РазмерПорцииЗагрузкиДанных    - Число - размер порции загрузки данных с торговой площадки за один запрос;
//                                 - Неопределено - размер порции для загрузки не ограничен.
//   КэшИдентификаторов            - Соответствие - кэш идентификаторов (связь между идентификаторами публикации и идентификаторами Ozon).
//   Отказ                         - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица идентификаторов товаров, см. НоваяТаблицаИдентификаторовТоваров.
//
Процедура ПолучитьИдентификаторыТоваров(УчетнаяЗаписьМаркетплейса, ФильтрПоТоварам, ТаблицаИдентификаторовТоваров, 
			РазмерПорцииЗагрузкиДанных = Неопределено, КэшИдентификаторов = Неопределено, Отказ = Ложь) Экспорт
	
	Если ТаблицаИдентификаторовТоваров = Неопределено Тогда
		ТаблицаИдентификаторовТоваров = НоваяТаблицаИдентификаторовТоваров();
	КонецЕсли;
	
	Если КэшИдентификаторов = Неопределено Тогда
		КэшИдентификаторов = Новый Соответствие;
	КонецЕсли;

	ФильтрыВидимости = ЗначениеВМассив(ФильтрПоТоварам.ФильтрВидимости);
	НовыхПозиций     = 0;

	Для каждого ЭлементФильтра Из ФильтрыВидимости Цикл
		Если ЗначениеЗаполнено(РазмерПорцииЗагрузкиДанных)
			 И НовыхПозиций >= РазмерПорцииЗагрузкиДанных Тогда
			Прервать;
		КонецЕсли;
		
		Если ФильтрПоТоварам.ИдентификаторыПубликации <> Неопределено
			 И НовыхПозиций >= ФильтрПоТоварам.ИдентификаторыПубликации.Количество() Тогда
			Прервать;
		ИначеЕсли ФильтрПоТоварам.ИдентификаторыОбъектовМаркетплейса <> Неопределено
			 И НовыхПозиций >= ФильтрПоТоварам.ИдентификаторыОбъектовМаркетплейса.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		ПараметрыЗапроса                 = НовыеПараметрыЗапросаПолученияСпискаТоваров(ФильтрПоТоварам);
		ПараметрыЗапроса.ФильтрВидимости = ЭлементФильтра;
		Если ЗначениеЗаполнено(РазмерПорцииЗагрузкиДанных) Тогда
			ПараметрыЗапроса.Вставить("МаксимальноеКоличествоВОтвете", Мин(ПараметрыЗапроса.МаксимальноеКоличествоВОтвете, РазмерПорцииЗагрузкиДанных));
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаИдентификаторовТоваров.НайтиСтроки(Новый Структура("ФильтрВидимости", ЭлементФильтра));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(НайденныеСтроки[НайденныеСтроки.Количество() - 1].ИдентификаторПоследнегоЗначения) Тогда
				ПараметрыЗапроса.Вставить("ИдентификаторПоследнегоЗначения", НайденныеСтроки[НайденныеСтроки.Количество() - 1].ИдентификаторПоследнегоЗначения);
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Пока Истина Цикл
			Если ЗначениеЗаполнено(РазмерПорцииЗагрузкиДанных)
				 И НовыхПозиций >= РазмерПорцииЗагрузкиДанных Тогда
				Прервать;
			КонецЕсли;
			
			Если ФильтрПоТоварам.ИдентификаторыПубликации <> Неопределено
				 И НовыхПозиций >= ФильтрПоТоварам.ИдентификаторыПубликации.Количество() Тогда
				Прервать;
			ИначеЕсли ФильтрПоТоварам.ИдентификаторыОбъектовМаркетплейса <> Неопределено
				 И НовыхПозиций >= ФильтрПоТоварам.ИдентификаторыОбъектовМаркетплейса.Количество() Тогда
				Прервать;
			КонецЕсли;
			
			ОтветСервиса = ПолучитьИдентификаторыТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			
			Если ОтветСервиса.Результат = Неопределено Тогда
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			
			ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
			КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

			Для каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
				НоваяСтрока                                  = ТаблицаИдентификаторовТоваров.Добавить();
				НоваяСтрока.УчетнаяЗаписьМаркетплейса        = УчетнаяЗаписьМаркетплейса;
				НоваяСтрока.ИдентификаторПубликации          = ЭлементОтветаСервиса["offer_id"];
				НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["product_id"]);
				НоваяСтрока.ПродаетсяСоСкидкой               = ЭлементОтветаСервиса["is_discounted"];
				НоваяСтрока.Архивный                         = ЭлементОтветаСервиса["archived"];
				НоваяСтрока.ПродаетсяПоСхемеРаботыFBO        = ЭлементОтветаСервиса["is_fbo_visible"];
				НоваяСтрока.ПродаетсяПоСхемеРаботыFBS        = ЭлементОтветаСервиса["is_fbs_visible"];
				НоваяСтрока.ФильтрВидимости                  = ЭлементФильтра;
				НоваяСтрока.ИдентификаторПоследнегоЗначения  = ПараметрыЗапроса.ИдентификаторПоследнегоЗначения;
				
				Если ЗначениеЗаполнено(НоваяСтрока.ИдентификаторПубликации) Тогда
					КэшИдентификаторов.Вставить(НоваяСтрока.ИдентификаторПубликации, НоваяСтрока.ИдентификаторОбъектаМаркетплейса);
				КонецЕсли;
				
				НовыхПозиций = НовыхПозиций + 1;
			КонецЦикла;
			
			Если ОтветСервиса.Результат.Количество() < ПараметрыЗапроса.МаксимальноеКоличествоВОтвете Тогда
				Прервать;
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаИдентификаторовТоваров.НайтиСтроки(Новый Структура("ФильтрВидимости", ЭлементФильтра));
			Если НайденныеСтроки.Количество() >= КоличествоТоваров Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Преобразует исходное значение в массив значений.
//
// Параметры:
//   Значение               - Произвольный - исходное значение.
//   ПреобразоватьВСтроку   - Булево - Истина, если необходимо преобразовать значение из числа в строку.
//   ПреобразоватьВЧисло    - Булево - Истина, если необходимо преобразовать значение из строки в число.
//   ИсключатьНеЗаполненные - Булево - Истина, если необходимо исключить незаполненные значения.
//
// Возвращаемое значение:
//   Массив Из Произвольный - массив значений.
//
Функция ЗначениеВМассив(Знач Значение, ПреобразоватьВСтроку = Ложь, ПреобразоватьВЧисло = Ложь, ИсключатьНеЗаполненные = Истина)
	
	Результат = Новый Массив;

	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Для каждого ЭлементКоллекции Из Значение Цикл
			Если НЕ ИсключатьНеЗаполненные
				 ИЛИ ЗначениеЗаполнено(ЭлементКоллекции) Тогда
				Если ПреобразоватьВСтроку
					 И ТипЗнч(ЭлементКоллекции) = Тип("Число") Тогда
					Результат.Добавить(ЧислоВСтроку(ЭлементКоллекции));
				ИначеЕсли ПреобразоватьВЧисло
					 И ТипЗнч(ЭлементКоллекции) = Тип("Строка") Тогда
					Результат.Добавить(СтрокаВЧисло(ЭлементКоллекции));
				Иначе
					Результат.Добавить(ЭлементКоллекции);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если НЕ ИсключатьНеЗаполненные
			 ИЛИ ЗначениеЗаполнено(Значение) Тогда
			Если ПреобразоватьВСтроку
				 И ТипЗнч(Значение) = Тип("Число") Тогда
				Результат.Добавить(ЧислоВСтроку(Значение));
			ИначеЕсли ПреобразоватьВЧисло
				 И ТипЗнч(Значение) = Тип("Строка") Тогда
				Результат.Добавить(СтрокаВЧисло(Значение));
			Иначе
				Результат.Добавить(Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Конструктор списка параметров для запроса получения идентификаторов товаров.
// 
// Параметры:
//   ФильтрПоТоварам - Структура - фильтр по товарам, см. НовыйФильтрЗапросаПоТоварам();
//                   - Неопределено - использовать фильтр по умолчанию.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ФильтрВидимости                    - Строка - фильтр по видимости товара (filter.visibility): 
//     * ИдентификаторыПубликации           - Массив Из Строка - список внутренних идентификаторов товаров в системе продавца (filter.offer_id);
//     * ИдентификаторыОбъектовМаркетплейса - Массив Из Строка - список идентификаторов товаров на маркетплейсе (filter.product_id).
//     * ИдентификаторПоследнегоЗначения    - Строка - идентификатор последнего значения на странице (last_id);
//     * МаксимальноеКоличествоВОтвете      - Число - количество значений на странице (limit).
//
Функция НовыеПараметрыЗапросаПолученияСпискаТоваров(ФильтрПоТоварам = Неопределено)
	
	Если ФильтрПоТоварам = Неопределено Тогда
		ФильтрПоТоварам = НовыйФильтрЗапросаПоТоварам();
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторПоследнегоЗначения", "");
	Результат.Вставить("МаксимальноеКоличествоВОтвете",   1000);
	Результат.Вставить("МаксимальноеКоличествоВЗапросе",  1000);
	
	Для каждого КлючЗначение Из ФильтрПоТоварам Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Получает список идентификаторов товаров из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductList
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаПолученияСпискаТоваров.
// 
// Возвращаемое значение:
//   Структура    - результат выполнения запроса:
//     * Результат                       - Массив Из Соответствие - список идентификаторов товаров (productv2GetProductListResponseItem):
//       ** offer_id                       - Строка - идентификатор товара в системе продавца (артикул);
//       ** product_id                     - Число - идентификатор товара.
//       ** is_discounted                  - Булево - товар продается со скидкой;
//       ** archived                       - Булево - признак архивного товара;
//       ** is_fbo_visible                 - Булево - продается по схеме FBО;
//       ** is_fbs_visible                 - Булево - продается по схеме FBS;
//     * ИдентификаторПоследнегоЗначения - Строка - идентификатор последнего значения на странице (last_id);
//     * КоличествоТоваров               - Число - количество товаров в списке (total).
//   Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ПолучитьИдентификаторыТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v2/product/list";

	ФильтрПоТоварам = Новый Структура;
	ФильтрПоТоварам.Вставить("visibility", Параметры.ФильтрВидимости);

	Если Параметры.ИдентификаторыПубликации <> Неопределено Тогда
		ФильтрПоТоварам.Вставить("offer_id", ЗначениеВМассив(Параметры.ИдентификаторыПубликации));
	КонецЕсли;

	Если Параметры.ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
		ФильтрПоТоварам.Вставить("product_id", ЗначениеВМассив(Параметры.ИдентификаторыОбъектовМаркетплейса));
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("filter",  ФильтрПоТоварам);
	ПараметрыЗапроса.Вставить("last_id", Параметры.ИдентификаторПоследнегоЗначения);
	ПараметрыЗапроса.Вставить("limit",   Параметры.МаксимальноеКоличествоВОтвете);

	ПустойРезультат = Новый Структура;
	ПустойРезультат.Вставить("items",   Новый Массив);
	ПустойРезультат.Вставить("last_id", "");
	ПустойРезультат.Вставить("total",   0);
	
	СлужебныеПараметры 								= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета = "item not found";
	СлужебныеПараметры.ПустойРезультат              = Новый Структура("result", ПустойРезультат);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",                       "result.items");
	АтрибутыОтвета.Вставить("ИдентификаторПоследнегоЗначения", "result.last_id");
	АтрибутыОтвета.Вставить("КоличествоТоваров",               "result.total");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса;

КонецФункции

// Преобразует исходную строку в число без вызова исключений.
// Аналог функции СтроковыеФункцииКлиентСервер.СтрокаВЧисло() с дополнительной обработкой строки без нулей.
//
// Параметры:
//   Значение - Строка - строка, которую необходимо привести к числу.
//
// Возвращаемое значение:
//   Число        - полученное число.
//   Неопределено - если строка не является числом.
//
Функция СтрокаВЧисло(Знач Значение) Экспорт
	
	Значение  = СтрЗаменить(Значение, " ", "");
	Если СтрНачинаетсяС(Значение, "(") Тогда
		Значение = СтрЗаменить(Значение, "(", "-");
		Значение = СтрЗаменить(Значение, ")", "");
	КонецЕсли;
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) ИЛИ СтрокаБезНулей = "-" ИЛИ СтрокаБезНулей = "." ИЛИ СтрокаБезНулей = "," Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, Неопределено);
	
КонецФункции 

// Конструктор списка параметров для запроса получения описаний товаров из сервиса.
// 
// Параметры:
//   ИдентификаторыПубликации           - Массив Из Строка - список внутренних идентификаторов товаров в системе продавца;
//                                      - Неопределено - выборка по идентификаторам публикации не используется.
//   ИдентификаторыОбъектовМаркетплейса - Массив Из Строка - список идентификаторов товаров на маркетплейсе;
//                                      - Неопределено - выборка по идентификаторам товаров на маркетплейсе не используется.
//   ИдентификаторыSKU                  - Массив Из Строка - список идентификаторов SKU;
//                                      - Неопределено - выборка по идентификаторам SKU не используется.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ИдентификаторыПубликации           - Массив Из Строка - список внутренних идентификаторов товара в системе продавца (offer_id);
//     * ИдентификаторыОбъектовМаркетплейса - Массив Из Строка - список идентификаторов товара на маркетплейсе (product_id);
//     * ИдентификаторыSKU                  - Массив Из Строка - список идентификаторов товара в системе Ozon (sku);
//     * МаксимальноеКоличествоВЗапросе     - Число - максимальное количество товаров для запроса (limit).
//
Функция НовыеПараметрыЗапросаПолученияОписанияТоваров(ИдентификаторыПубликации = Неопределено, ИдентификаторыОбъектовМаркетплейса = Неопределено, ИдентификаторыSKU = Неопределено) Экспорт

	Результат = Новый Структура;
	
	Результат.Вставить("ИдентификаторыПубликации",           ИдентификаторыПубликации);
	Результат.Вставить("ИдентификаторыОбъектовМаркетплейса", ИдентификаторыОбъектовМаркетплейса);
	Результат.Вставить("ИдентификаторыSKU",                  ИдентификаторыSKU);
	Результат.Вставить("МаксимальноеКоличествоВЗапросе",     1000);

	Возврат Результат;

КонецФункции

// Получает таблицу описания товаров, полученных из сервиса.
//
// Параметры:
// 	 УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ПараметрыЗапроса          - Структура - список параметров, см. НовыеПараметрыЗапросаПолученияОписанияТоваров.
//   КэшКатегорий              - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//   КэшИдентификаторов        - Соответствие - кэш идентификаторов (связь между идентификаторами публикации и идентификаторами Ozon).
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица описания товаров, см. НоваяТаблицаОписанияТоваров.
//
Функция ПолучитьОписаниеТоваров(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса, КэшКатегорий, 
			КэшИдентификаторов = Неопределено, Отказ = Ложь) Экспорт

	ТаблицаОписанияТоваров = НоваяТаблицаОписанияТоваров();
	
	Если КэшИдентификаторов = Неопределено Тогда
		КэшИдентификаторов = Новый Соответствие;
	КонецЕсли;

	ИдентификаторыПубликации           = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса.ИдентификаторыПубликации);
	ИдентификаторыОбъектовМаркетплейса = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса);
	ИдентификаторыSKU                  = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса.ИдентификаторыSKU);
	Порция                             = Новый Массив;
	
	Если ИдентификаторыПубликации <> Неопределено Тогда
		Для каждого ЭлементПорции Из ИдентификаторыПубликации Цикл
			Если Порция.Количество() >= ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе Тогда
				ПараметрыЗапроса.ИдентификаторыПубликации           = Порция;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
				ПараметрыЗапроса.ИдентификаторыSKU                  = Неопределено;
				
				ОтветСервиса = ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
					
				Если ОтветСервиса = Неопределено Тогда
					Отказ = Истина;	
					Прервать;
				Иначе
					ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, КэшКатегорий, КэшИдентификаторов);
				КонецЕсли;
			КонецЕсли;

			Порция.Добавить(ЭлементПорции);
		КонецЦикла;
		
		Если НЕ Отказ
		 	 И Порция.Количество() > 0 Тогда
			ПараметрыЗапроса.ИдентификаторыПубликации           = Порция;
			ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
			ПараметрыЗапроса.ИдентификаторыSKU                  = Неопределено;
			
			ОтветСервиса = ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			Порция.Очистить();
			
			Если ОтветСервиса = Неопределено Тогда
				Отказ = Истина;	
			Иначе
				ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, КэшКатегорий, КэшИдентификаторов);
			КонецЕсли;
		КонецЕсли;   
	КонецЕсли;
	
	Если ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
		Для каждого ЭлементПорции Из ИдентификаторыОбъектовМаркетплейса Цикл
			Если Порция.Количество() >= ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе Тогда
				ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Порция;
				ПараметрыЗапроса.ИдентификаторыSKU                  = Неопределено;
				
				ОтветСервиса = ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
					
				Если ОтветСервиса = Неопределено Тогда
					Отказ = Истина;	
					Прервать;
				Иначе
					ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, КэшКатегорий, КэшИдентификаторов);
				КонецЕсли;
			КонецЕсли;

			Порция.Добавить(ЭлементПорции);
		КонецЦикла;
		
		Если НЕ Отказ
		     И Порция.Количество() > 0 Тогда
			ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
			ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Порция;
			ПараметрыЗапроса.ИдентификаторыSKU                  = Неопределено;
			
			ОтветСервиса = ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			Порция.Очистить();
			
			Если ОтветСервиса = Неопределено Тогда
				Отказ = Истина;	
			Иначе
				ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, КэшКатегорий, КэшИдентификаторов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторыSKU <> Неопределено Тогда
		Для каждого ЭлементПорции Из ИдентификаторыSKU Цикл
			Если Порция.Количество() >= ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе Тогда
				ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
				ПараметрыЗапроса.ИдентификаторыSKU                  = Порция;
				
				ОтветСервиса = ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
					
				Если ОтветСервиса = Неопределено Тогда
					Отказ = Истина;	
					Прервать;
				Иначе
					ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, КэшКатегорий, КэшИдентификаторов);
				КонецЕсли;
			КонецЕсли;

			Порция.Добавить(ЭлементПорции);
		КонецЦикла;
		
		Если НЕ Отказ
		     И Порция.Количество() > 0 Тогда
			ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
			ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
			ПараметрыЗапроса.ИдентификаторыSKU                  = Порция;
			
			ОтветСервиса = ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			Порция.Очистить();
			
			Если ОтветСервиса = Неопределено Тогда
				Отказ = Истина;	
			Иначе
				ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, КэшКатегорий, КэшИдентификаторов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаОписанияТоваров;

КонецФункции

// Получает таблицу описания характеристик товаров, полученных из сервиса, с учетом установленного отбора.
//
// Параметры:
// 	 УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ФильтрПоТоварам           - Структура - фильтр по товарам, см. НовыйФильтрЗапросаПоТоварам.
//   КэшКатегорий              - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//   КэшИдентификаторов        - Соответствие - кэш идентификаторов (связь между идентификаторами публикации и идентификаторами Ozon).
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица характеристик товаров, см. НоваяТаблицаОписанияХарактеристикТоваров.
//
Функция ПолучитьОписаниеХарактеристикТоваров(УчетнаяЗаписьМаркетплейса, ФильтрПоТоварам, КэшКатегорий, 
			КэшИдентификаторов = Неопределено, Отказ = Ложь) Экспорт

	ТаблицаОписанияХарактеристикТоваров = НоваяТаблицаОписанияХарактеристикТоваров();
	
	Если КэшИдентификаторов = Неопределено Тогда
		КэшИдентификаторов = Новый Соответствие;
	КонецЕсли;

	ПараметрыЗапроса          = НовыеПараметрыЗапросаЗначенийАтрибута(, "СлужебныеАтрибуты");
	ТаблицаСлужебныхАтрибутов = ПолучитьЗначенияАтрибутаКатегории(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
	
	ФильтрыВидимости                   = ЗначениеВМассив(ФильтрПоТоварам.ФильтрВидимости);
	ИдентификаторыПубликации           = ОбщегоНазначения.СкопироватьРекурсивно(ФильтрПоТоварам.ИдентификаторыПубликации);
	ИдентификаторыОбъектовМаркетплейса = ОбщегоНазначения.СкопироватьРекурсивно(ФильтрПоТоварам.ИдентификаторыОбъектовМаркетплейса);
	
	Для каждого ЭлементФильтра Из ФильтрыВидимости Цикл
		ПараметрыЗапроса                 = НовыеПараметрыЗапросаПолученияОписанияХарактеристикТоваров(ФильтрПоТоварам);
		ПараметрыЗапроса.ФильтрВидимости = ЭлементФильтра;
		Порция 							 = Новый Массив;
		
		Если ИдентификаторыПубликации <> Неопределено Тогда
			Для каждого ЭлементПорции Из ИдентификаторыПубликации Цикл
				Если Порция.Количество() >= Мин(ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе, ПараметрыЗапроса.МаксимальноеКоличествоВОтвете) Тогда
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
					ПараметрыЗапроса.ИдентификаторыПубликации           = Порция;
					ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
					
					ОтветСервиса = ПолучитьОписаниеХарактеристикТовараИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
					Порция.Очистить();
					
					Если ОтветСервиса.Результат = Неопределено Тогда
						Отказ = Истина;
						Прервать;
					Иначе
						ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
						КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

						ДобавитьОтветСервисаВТаблицуОписанияХарактеристикТоваров(
							ТаблицаОписанияХарактеристикТоваров, 
							ТаблицаСлужебныхАтрибутов,
							ОтветСервиса, 
							ЭлементФильтра,
							УчетнаяЗаписьМаркетплейса, 
							КэшКатегорий, 
							КэшИдентификаторов);
					КонецЕсли;
				КонецЕсли;

				Порция.Добавить(ЭлементПорции);
			КонецЦикла;

			Если НЕ Отказ
		 		 И Порция.Количество() > 0 Тогда
				ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
				ПараметрыЗапроса.ИдентификаторыПубликации           = Порция;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
				
				ОтветСервиса = ПолучитьОписаниеХарактеристикТовараИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
				
				Если ОтветСервиса.Результат = Неопределено Тогда
					Отказ = Истина;
					Прервать;
				Иначе
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
					КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

					ДобавитьОтветСервисаВТаблицуОписанияХарактеристикТоваров(
						ТаблицаОписанияХарактеристикТоваров, 
						ТаблицаСлужебныхАтрибутов,
						ОтветСервиса, 
						ЭлементФильтра,
						УчетнаяЗаписьМаркетплейса, 
						КэшКатегорий, 
						КэшИдентификаторов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;

		Если ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
			Для каждого ЭлементПорции Из ИдентификаторыОбъектовМаркетплейса Цикл
				Если Порция.Количество() >= Мин(ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе, ПараметрыЗапроса.МаксимальноеКоличествоВОтвете) Тогда
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
					ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
					ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Порция;
					
					ОтветСервиса = ПолучитьОписаниеХарактеристикТовараИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
					Порция.Очистить();
					
					Если ОтветСервиса.Результат = Неопределено Тогда
						Отказ = Истина;
						Прервать;
					Иначе
						ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
						КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

						ДобавитьОтветСервисаВТаблицуОписанияХарактеристикТоваров(
							ТаблицаОписанияХарактеристикТоваров, 
							ТаблицаСлужебныхАтрибутов,
							ОтветСервиса, 
							ЭлементФильтра,
							УчетнаяЗаписьМаркетплейса, 
							КэшКатегорий, 
							КэшИдентификаторов);
					КонецЕсли;
				КонецЕсли;

				Порция.Добавить(ЭлементПорции);
			КонецЦикла;

			Если НЕ Отказ
		 		 И Порция.Количество() > 0 Тогда
				ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
				ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Порция;
				
				ОтветСервиса = ПолучитьОписаниеХарактеристикТовараИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
				
				Если ОтветСервиса.Результат = Неопределено Тогда
					Отказ = Истина;
					Прервать;
				Иначе
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
					КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

					ДобавитьОтветСервисаВТаблицуОписанияХарактеристикТоваров(
						ТаблицаОписанияХарактеристикТоваров, 
						ТаблицаСлужебныхАтрибутов,
						ОтветСервиса, 
						ЭлементФильтра,
						УчетнаяЗаписьМаркетплейса, 
						КэшКатегорий, 
						КэшИдентификаторов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаОписанияХарактеристикТоваров;

КонецФункции

// Получает информацию о списке товаров из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductInfoV2
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     			   - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаПолученияОписанияТоваров.
// 
// Возвращаемое значение:
//   Массив Из Соответствие - описания товаров (productv2GetProductInfoListResponseItem):
//     * barcode               - Строка - штрихкод;
//     * barcodes              - Массив Из Строка - все штрихкоды товара;
//     * buybox_price          - Строка - цена главного предложения на Ozon (устаревший);
//     * category_id           - Число - идентификатор категории.
//     * color_image           - Строка - маркетинговый цвет;
//     * commissions           - Строка - информация о комиссиях (productv2GetProductInfoResponseCommissions):
//       ** deliveryAmount       - Число - стоимость доставки;
//       ** minValue             - Число - минимальная комиссия;
//       ** percent              - Число - процент комиссии;
//       ** returnAmount         - Число - стоимость возврата;
//       ** saleSchema           - Строка - схема продажи;
//       ** value                - Число - сумма комиссии.
//     * created_at            - Дата - дата и время создания товара;
//     * fbo_sku               - Число - SKU товара, который продается со склада Ozon (FBO);
//     * fbs_sku               - Число - SKU товара, который продается со склада продавца (FBS и rFBS);
//     * id                    - Число - номер задания на формирование документов;
//     * images                - Массив Из Строка - список ссылок на изображения;
//     * primary_image         - Строка - главное изображение товара;
//     * images360             - Массив Из Строка - список изображений 360;
//     * has_discounted_item   - Булево - признак, что у товара есть уцененные аналоги на складе Ozon;
//     * is_discounted         - Булево - признак, является ли товар уцененным;
//     * discounted_stocks     - Соответствие - остатки уцененного товара на складе Ozon (productv2GetProductInfoDiscountedStocks):
//       ** coming               - Число - количество товара, ожидаемого при поставке;
//       ** present              - Число - количество товара на складе;
//       ** reserved             - Число - количество зарезервированного товара.
//     * is_kgt                - Булево - признак крупногабаритного товара;
//     * is_prepayment         - Булево - флаг обязательной предоплаты для товара;
//     * is_prepayment_allowed - Булево - Истина, если возможна предоплата;
//     * currency_code         - Строка - валюта ваших цен;
//     * marketing_price       - Строка - цена на товар с учетом всех акций;
//     * min_ozon_price        - Строка - минимальная цена на аналогичный товар на Ozon (устаревший);
//     * min_price             - Строка - минимальная цена товара после применения акций;
//     * name                  - Строка - название;
//     * offer_id              - Строка - идентификатор товара в системе продавца (артикул);
//     * old_price             - Строка - цена до учета скидок;
//     * premium_price         - Строка - цена для клиентов с подпиской Ozon Premium;
//     * price                 - Строка - цена товара с учетом скидок;
//     * price_index           - Строка - ценовой индекс;
//     * recommended_price     - Строка - цена на товар, рекомендованная системой на основании схожих предложений;
//     * status                - Соответствие - описание состояния товара (productv2Status):
//       ** state                - Строка - состояние товара;
//       ** state_failed         - Строка - состояние товара, на переходе в которое произошла ошибка;
//       ** moderate_status      - Строка - статус модерации;
//       ** decline_reasons      - Массив Из Строка - причины отклонения товара;
//       ** validation_state     - Строка - статус валидации;
//       ** state_name           - Строка - название состояния товара;
//       ** state_description    - Строка - описание состояния товара;
//       ** is_failed            - Булево - признак, что при создании товара возникли ошибки;
//       ** is_created           - Булево - признак, что товар создан;
//       ** state_tooltip        - Строка - подсказки для текущего состояния товара;
//       ** item_errors          - Массив Из Соответствие - ошибки при загрузке товаров (v2ItemError):
//         *** code                          - Строка - код ошибки;
//         *** message                       - Строка - техническое описание ошибки;
//         *** state                         - Строка - состояние товара, в котором произошла ошибка;
//         *** level                         - Строка - уровень ошибки;
//         *** description                   - Строка - описание ошибки;
//         *** field                         - Строка - поле, в котором произошла ошибка;
//         *** attribute_id                  - Число - атрибут, в котором произошла ошибка;
//         *** attribute_name                - Строка - название атрибута, в котором произошла ошибка;
//         *** optional_description_elements - Соответствие - дополнительные поля для описания ошибки.
//       ** state_updated_at     - Дата - время последнего изменения состояния товара.
//     * sources               - Массив Из Соответствие - информация об источниках схожих предложений (productv2GetProductInfoResponseSource):
//       ** is_enabled           - Булево - признак, что источник учитывается при расчете рыночного значения;
//       ** sku                  - Число - идентификатор товара на Ozon;
//       ** source               - Строка - ссылка на источник.
//     * stocks                - Соответствие - информация об остатках товара (productv2GetProductInfoResponseStock):
//       ** coming               - Число - ожидается поставка;
//       ** present              - Число - сейчас на складе;
//       ** reserved             - Число - зарезервировано;
//     * updated_at            - Дата - дата последнего обновления товара;
//     * vat                   - Строка - ставка НДС для товара;
//     * visibility_details    - Соответствие - настройки видимости товара (productv2GetProductInfoResponseVisibilityDetails):
//       ** active_product       - Булево - признак товар - активный;
//       ** has_price            - Булево - Истина, если установлена цена;
//       ** has_stock            - Булево - Истина, если есть остаток на складах.
//     * visible               - Булево - признак, что товар выставлен на продажу;
//     * volume_weight         - Число - объемный вес товара.
//   Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ПолучитьОписаниеТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v2/product/info/list";

	ПараметрыЗапроса = Новый Структура;
	Если Параметры.ИдентификаторыПубликации <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("offer_id", ЗначениеВМассив(Параметры.ИдентификаторыПубликации));
	КонецЕсли;
	Если Параметры.ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("product_id", ЗначениеВМассив(Параметры.ИдентификаторыОбъектовМаркетплейса, , Истина));
	КонецЕсли;
	Если Параметры.ИдентификаторыSKU <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("sku", ЗначениеВМассив(Параметры.ИдентификаторыSKU, , Истина));
	КонецЕсли;

	МассивПолейТипаДата = Новый Массив;
	МассивПолейТипаДата.Добавить("created_at");
	МассивПолейТипаДата.Добавить("updated_at");
	МассивПолейТипаДата.Добавить("state_updated_at");

	СлужебныеПараметры 								= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПоляТипаДата 				= МассивПолейТипаДата;
	СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета = "item not found";
	СлужебныеПараметры.ПустойРезультат              = Новый Структура("result", Новый Структура("items", Новый Массив));
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);
	
	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result.items");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Получает описание характеристик товаров из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductInfoListV2
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры     			   - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаПолученияСпискаТоваров.
// 
// Возвращаемое значение:
//   Структура    - результат выполнения запроса:
//     * Результат                       - Массив Из Соответствие - результат запроса (productv3GetProductAttributesV3ResponseResult):
//       ** attributes                     - Массив Из Соответствие - список характеристик товара (productGetProductAttributesV3ResponseAttribute):
//         *** attribute_id                  - Число - идентификатор характеристики;
//         *** complex_id                    - Число - идентификатор характеристики, которая поддерживает вложенные свойства;
//         *** values                        - Массив Из Соответствие - список вложенных значений характеристики (productGetProductAttributesV3ResponseDictionaryValue):
//           **** dictionary_value_id          - Число - идентификатор справочника;
//           **** value                        - Строка - значение из справочника.
//       ** barcode	                       - Строка - штрихкод;
//       ** category_id	                   - Число - идентификатор категории;
//       ** color_image	                   - Строка - маркетинговый цвет;
//       ** complex_attributes             - Массив Из Соответствие - список вложенных характеристик (productGetProductAttributesV3ResponseComplexAttribute):
//         *** attributes                     - Массив Из Соответствие - список характеристик товара (productGetProductAttributesV3ResponseAttribute):
//           **** attribute_id                  - Число - идентификатор характеристики;
//           **** complex_id                    - Число - идентификатор характеристики, которая поддерживает вложенные свойства;
//           **** values                        - Массив Из Соответствие - список вложенных значений характеристики (productGetProductAttributesV3ResponseDictionaryValue):
//             ***** dictionary_value_id          - Число - идентификатор справочника;
//             ***** value                        - Строка - значение из справочника.
//       ** depth	                       - Число - глубина;
//       ** dimension_unit	               - Строка - единица измерения габаритов;
//       ** id	                           - Число - идентификатор характеристики товара;
//       ** image_group_id	               - Строка - идентификатор для последующей пакетной загрузки изображений;
//       ** images	                       - Массив Из Соответствие - список изображений товара (GetProductAttributesResponseImage):
//         *** default	                     - Булево - признак основного изображения;
//         *** file_name	                 - Строка - ссылка на изображение;
//         *** index	                     - Число - порядковый номер изображения.
//       ** images360	                   - Массив Из Соответствие - список изображений товара 360 (GetProductAttributesResponseImage360):
//         *** file_name	                 - Строка - ссылка на изображение;
//         *** index	                     - Число - порядковый номер изображения.
//       ** name	                       - Строка - название товара;
//       ** offer_id	                   - Строка - идентификатор товара в системе продавца (артикул);
//       ** pdf_list	                   - Массив Из Соответствие - массив PDF-файлов (GetProductAttributesResponsePdf):
//         *** file_name	                 - Строка - путь к PDF-файлу;
//         *** index	                     - Число - индекс документа в хранилище, который задает порядок;
//         *** name	                         - Строка - название файла.
//       ** weight	                       - Число - вес товара в упаковке;
//       ** weight_unit	                   - Строка - единица измерения веса;
//       ** width	                       - Число - ширина упаковки.
//     * ИдентификаторПоследнегоЗначения - Строка - идентификатор последнего значения на странице (last_id);
//     * КоличествоТоваров               - Число - количество товаров в списке (total).
//   Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ПолучитьОписаниеХарактеристикТовараИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v3/products/info/attributes";

	ФильтрПоТоварам = Новый Структура;
	ФильтрПоТоварам.Вставить("visibility", Параметры.ФильтрВидимости);

	Если Параметры.ИдентификаторыПубликации <> Неопределено Тогда
		ФильтрПоТоварам.Вставить("offer_id", ЗначениеВМассив(Параметры.ИдентификаторыПубликации));
	КонецЕсли;

	Если Параметры.ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
		ФильтрПоТоварам.Вставить("product_id", ЗначениеВМассив(Параметры.ИдентификаторыОбъектовМаркетплейса));
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("filter",  ФильтрПоТоварам);
	ПараметрыЗапроса.Вставить("last_id", Параметры.ИдентификаторПоследнегоЗначения);
	ПараметрыЗапроса.Вставить("limit",   Параметры.МаксимальноеКоличествоВОтвете);
	
	Если ЗначениеЗаполнено(Параметры.ПараметрСортировки) Тогда
		ПараметрыЗапроса.Вставить("sort_by",  Параметры.ПараметрСортировки);
		ПараметрыЗапроса.Вставить("sort_dir", Параметры.НаправлениеСортировки);
	КонецЕсли;

	СлужебныеПараметры 								= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета = "item not found";
	СлужебныеПараметры.ПустойРезультат              = Новый Структура("result, last_id, total", Новый Массив, "", 0);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",                       "result");
	АтрибутыОтвета.Вставить("ИдентификаторПоследнегоЗначения", "last_id");
	АтрибутыОтвета.Вставить("КоличествоТоваров",               "total");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса;

КонецФункции

// Заполняет таблицу описания характеристик товаров значениями из сервиса.
//
// Параметры:
//   ТаблицаОписанияХарактеристикТоваров - ТаблицаЗначений - описания характеристик товаров, 
//                                           см. НоваяТаблицаОписанияХарактеристикТоваров.
//   ТаблицаСлужебныхАтрибутов           - ТаблицаЗначений - служебные атрибуты, 
//                                           см. НоваяТаблицаЗначенийАтрибутаКатегории.
//   ОтветСервиса                        - Массив Из Соответствие - информацию о списке товаров из сервиса Ozon,
//                                           см. ПолучитьОписаниеХарактеристикТовараИзСервиса.
//   ФильтрВидимости                     - Строка - фильтр по видимости товара.
//   УчетнаяЗаписьМаркетплейса           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   КэшКатегорий                        - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//   КэшИдентификаторов                  - Соответствие - кэш идентификаторов (связь между идентификаторами публикации и идентификаторами Ozon).
//
Процедура ДобавитьОтветСервисаВТаблицуОписанияХарактеристикТоваров(ТаблицаОписанияХарактеристикТоваров, ТаблицаСлужебныхАтрибутов,
			ОтветСервиса, ФильтрВидимости, УчетнаяЗаписьМаркетплейса, КэшКатегорий, КэшИдентификаторов)

	Для каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
		НоваяСтрока                    				   = ТаблицаОписанияХарактеристикТоваров.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса 		   = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторПубликации			   = ЧислоВСтроку(ЭлементОтветаСервиса["offer_id"]);
		НоваяСтрока.ИдентификаторОбъектаМаркетплейса   = КэшИдентификаторов.Получить(НоваяСтрока.ИдентификаторПубликации);
		НоваяСтрока.ФильтрВидимости                    = ФильтрВидимости;
		НоваяСтрока.Штрихкод                  		   = ЭлементОтветаСервиса["barcode"];
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["category_id"]);
		
		НаименованиеКатегорииМаркетплейса = Неопределено;
		Если НЕ КэшКатегорий.Свойство("НаименованиеКатегории_" + НоваяСтрока.ИдентификаторКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса) Тогда
			ПараметрыЗапросаК = НовыеПараметрыЗапросаДереваКатегории(НоваяСтрока.ИдентификаторКатегорииМаркетплейса);
			ДанныеКатегории = ПолучитьКатегориюИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапросаК);
			
			Если ДанныеКатегории <> Неопределено
				 И ДанныеКатегории.Количество() > 0 Тогда
				НаименованиеКатегорииМаркетплейса = ДанныеКатегории[0]["title"];
			Иначе
				НаименованиеКатегорииМаркетплейса = "";
			КонецЕсли;
			КэшКатегорий.Вставить("НаименованиеКатегории_" + НоваяСтрока.ИдентификаторКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса);
		КонецЕсли;
		
		// Значения реквизитов 
		НоваяСтрока.ЗначенияАтрибутов = НоваяТаблицаЗначенийРеквизитов(Истина);
		
		Для каждого ЭлементКоллекции Из ЭлементОтветаСервиса["attributes"] Цикл
			Для каждого ЗначениеАтрибута Из ЭлементКоллекции["values"] Цикл
				НовоеЗначение                                           = НоваяСтрока.ЗначенияАтрибутов.Добавить();
				НовоеЗначение.УчетнаяЗаписьМаркетплейса                 = УчетнаяЗаписьМаркетплейса;
				НовоеЗначение.ИдентификаторКатегорииМаркетплейса        = НоваяСтрока.ИдентификаторКатегорииМаркетплейса;
				НовоеЗначение.НаименованиеКатегорииМаркетплейса         = НаименованиеКатегорииМаркетплейса;
				НовоеЗначение.ИдентификаторРодителяАтрибутаМаркетплейса = ЧислоВСтроку(ЭлементКоллекции["complex_id"]);
				НовоеЗначение.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = '<Группа атрибутов не определена>'");
				НовоеЗначение.ИдентификаторАтрибутаМаркетплейса         = ЧислоВСтроку(ЭлементКоллекции["attribute_id"]);
				НовоеЗначение.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = '<Атрибут не определен>'");
				НовоеЗначение.ЗначениеАтрибутаМаркетплейса              = ЗначениеАтрибута["value"];
				НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса = ЧислоВСтроку(ЗначениеАтрибута["dictionary_value_id"]);
				НовоеЗначение.НеЗаполненАтрибут                         = Не ЗначениеЗаполнено(НовоеЗначение.ЗначениеАтрибутаМаркетплейса);
				НовоеЗначение.УстановленоЗначениеПоУмолчанию            = Ложь;
				НовоеЗначение.ЗначениеАтрибутаЗаданоПользователем       = Истина;
				
				Если Не ЗначениеЗаполнено( ЗначениеАтрибута["value"] ) И ЗначениеЗаполнено( НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса ) Тогда
					НовоеЗначение.ЗначениеАтрибутаМаркетплейса = "Значение: <Пусто>, Идентификатор: <" + НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса + ">";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого ЭлементКоллекцииКомплексныеАтрибуты Из ЭлементОтветаСервиса["complex_attributes"] Цикл
			Для каждого ЭлементКоллекции Из ЭлементКоллекцииКомплексныеАтрибуты["attributes"] Цикл
				Для каждого ЗначениеАтрибута Из ЭлементКоллекции["values"] Цикл
					НовоеЗначение                                           = НоваяСтрока.ЗначенияАтрибутов.Добавить();
					НовоеЗначение.УчетнаяЗаписьМаркетплейса                 = УчетнаяЗаписьМаркетплейса;
					НовоеЗначение.ИдентификаторКатегорииМаркетплейса        = НоваяСтрока.ИдентификаторКатегорииМаркетплейса;
					НовоеЗначение.НаименованиеКатегорииМаркетплейса         = НаименованиеКатегорииМаркетплейса;
					НовоеЗначение.ИдентификаторРодителяАтрибутаМаркетплейса = ЧислоВСтроку(ЭлементКоллекции["complex_id"]);
					НовоеЗначение.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = '<Группа атрибутов не определена>'");
					НовоеЗначение.ИдентификаторАтрибутаМаркетплейса         = ЧислоВСтроку(ЭлементКоллекции["attribute_id"]);
					НовоеЗначение.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = '<Атрибут не определен>'");
					
					// иногда Ozon возвращает значение "value" пустым, но при этом в "dictionary_value_id" есть значение идентификатора
					НовоеЗначение.ЗначениеАтрибутаМаркетплейса              = ЗначениеАтрибута["value"]; 
					
					НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса = ЧислоВСтроку(ЗначениеАтрибута["dictionary_value_id"]);
					НовоеЗначение.НеЗаполненАтрибут                         = Не ЗначениеЗаполнено(НовоеЗначение.ЗначениеАтрибутаМаркетплейса);
					НовоеЗначение.УстановленоЗначениеПоУмолчанию            = Ложь;
					НовоеЗначение.ЗначениеАтрибутаЗаданоПользователем       = Истина;
					
					Если Не ЗначениеЗаполнено( ЗначениеАтрибута["value"] ) И ЗначениеЗаполнено( НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса ) Тогда
						НовоеЗначение.ЗначениеАтрибутаМаркетплейса = "Значение: <Пусто>, Идентификатор: <" + НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса + ">";
					КонецЕсли;
				КонецЦикла;
			КонецЦикла
		КонецЦикла;

		// Весогабаритные характеристики в атрибуты
		Для каждого ЭлементКоллекции Из НовыеСлужебныеАтрибутыСНаименованиями() Цикл
			ЗначенияСлужебныхАтрибутов = ТаблицаСлужебныхАтрибутов.НайтиСтроки(
				Новый Структура("ИдентификаторАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибута", ЭлементКоллекции.Идентификатор, ЭлементОтветаСервиса[ЭлементКоллекции.Идентификатор]));	
			
			НовоеЗначение                                           = НоваяСтрока.ЗначенияАтрибутов.Добавить();
			НовоеЗначение.УчетнаяЗаписьМаркетплейса                 = УчетнаяЗаписьМаркетплейса;
			НовоеЗначение.ИдентификаторКатегорииМаркетплейса        = НоваяСтрока.ИдентификаторКатегорииМаркетплейса;
			НовоеЗначение.НаименованиеКатегорииМаркетплейса         = НаименованиеКатегорииМаркетплейса;
			НовоеЗначение.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
			НовоеЗначение.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
			НовоеЗначение.ИдентификаторАтрибутаМаркетплейса         = ЭлементКоллекции.Идентификатор;
			НовоеЗначение.НаименованиеАтрибутаМаркетплейса          = ЭлементКоллекции.Наименование;
			НовоеЗначение.ЗначениеАтрибутаМаркетплейса              = ?(ЗначенияСлужебныхАтрибутов.Количество() > 0, ЗначенияСлужебныхАтрибутов[0].ЗначениеАтрибута, ЭлементОтветаСервиса[ЭлементКоллекции.Идентификатор]);
			НовоеЗначение.ИдентификаторЗначенияАтрибутаМаркетплейса = ?(ЗначенияСлужебныхАтрибутов.Количество() > 0, ЗначенияСлужебныхАтрибутов[0].ИдентификаторЗначенияАтрибута, "");
			НовоеЗначение.НеЗаполненАтрибут                         = Не ЗначениеЗаполнено(НовоеЗначение.ЗначениеАтрибутаМаркетплейса);
			НовоеЗначение.УстановленоЗначениеПоУмолчанию            = Ложь;
			НовоеЗначение.ЗначениеАтрибутаЗаданоПользователем       = Истина;
		КонецЦикла;
		
		// Изображения
		НоваяСтрока.Изображения = НоваяТаблицаИзображений();
		
		Для каждого ЭлементКоллекции Из ЭлементОтветаСервиса["images"] Цикл
			НовоеИзображение                     = НоваяСтрока.Изображения.Добавить();
			НовоеИзображение.Порядок             = ЭлементКоллекции["index"];
			НовоеИзображение.ПутьКФайлу          = ЭлементКоллекции["file_name"];
			НовоеИзображение.ОсновноеИзображение = ЭлементКоллекции["default"];
			НовоеИзображение.Изображение360      = Ложь;
		КонецЦикла;
		
		Для каждого ЭлементКоллекции Из ЭлементОтветаСервиса["images360"] Цикл
			НовоеИзображение                     = НоваяСтрока.Изображения.Добавить();
			НовоеИзображение.Порядок             = ЭлементКоллекции["index"];
			НовоеИзображение.ПутьКФайлу          = ЭлементКоллекции["file_name"];
			НовоеИзображение.ОсновноеИзображение = Ложь;
			НовоеИзображение.Изображение360      = Истина;
		КонецЦикла;
		
		// Документы PDF
		НоваяСтрока.ДокументыPDF = НоваяТаблицаДокументовPDF();
		
		Для каждого ЭлементКоллекции Из ЭлементОтветаСервиса["pdf_list"] Цикл
			НовыйДокумент              = НоваяСтрока.ДокументыPDF.Добавить();
			НовыйДокумент.Порядок      = ЭлементКоллекции["index"];
			НовыйДокумент.Наименование = ЭлементКоллекции["name"];
			НовыйДокумент.ПутьКФайлу   = ЭлементКоллекции["file_name"];
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры
         
Функция ПоОтветуСервисаОпределитьСтатусТоварВАрхиве( ЭлементОтветаСервиса )
	
	Если ТипЗнч( ЭлементОтветаСервиса ) <> Тип( "Соответствие" ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементОтветаСервиса[ "visible" ] <> Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементОтветаСервисаVisibility_details = ЭлементОтветаСервиса[ "visibility_details" ];
	Если ТипЗнч( ЭлементОтветаСервисаVisibility_details ) <> Тип( "Соответствие" ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлементОтветаСервисаReasons = ЭлементОтветаСервисаVisibility_details[ "reasons" ];
	Если ЭлементОтветаСервисаReasons = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаReasons = ЗначениеВСтрокуВнутр( ЭлементОтветаСервисаReasons );
	Если СтрНайти( ВРЕГ( СтрокаReasons ), ВРЕГ( "ТОВАР В АРХИВЕ" )) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции
         
// Заполняет таблицу описания товаров значениями из сервиса.
//
// Параметры:
//   ТаблицаОписанияТоваров    - ТаблицаЗначений - описания товаров, см. НоваяТаблицаОписанияТоваров.
//   ОтветСервиса              - Массив Из Соответствие - информацию о списке товаров из сервиса Ozon,
//                                 см. ПолучитьОписаниеТоваровИзСервиса.
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   КэшКатегорий              - Структура - кэш категорий, см. ИнтеграцияСМаркетплейсомOzonКлиент.КэшКатегорий.
//   КэшИдентификаторов        - Соответствие - кэш идентификаторов (связь между идентификаторами публикации и идентификаторами Ozon).
//
Процедура ДобавитьОтветСервисаВТаблицуОписанияТоваров(ТаблицаОписанияТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса, 
			КэшКатегорий, КэшИдентификаторов)

	СоответствиеСостоянийПубликации = СоответствиеСостоянийПубликации();
	
	Для Каждого ЭлементОтветаСервиса Из ОтветСервиса Цикл
		НоваяСтрока = ТаблицаОписанияТоваров.Добавить();
		
		sku = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( ЭлементОтветаСервиса, "sku", "" );
		Если ЗначениеЗаполнено( sku ) Тогда
			sku = ЧислоВСтроку( sku );
			
			fbo_sku = sku;
			fbs_sku = sku;
		Иначе
			fbo_sku = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( ЭлементОтветаСервиса, "fbo_sku", "" );
			fbs_sku = ОбменСВнешнимиСистемамиЛогирование.ПолучитьЗначениеПоля( ЭлементОтветаСервиса, "fbs_sku", "" );
			
			fbo_sku = ?(ЗначениеЗаполнено( fbo_sku ), ЧислоВСтроку(fbo_sku), "" );
			fbs_sku = ?(ЗначениеЗаполнено( fbs_sku ), ЧислоВСтроку(fbs_sku), "" );
		КонецЕсли;
		
		// Основные      
		НоваяСтрока.УчетнаяЗаписьМаркетплейса        = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ВидОбъектаМаркетплейса           = Перечисления.ВидыОбъектовМаркетплейсов.Товар;
		НоваяСтрока.ИдентификаторПубликации          = ЧислоВСтроку(ЭлементОтветаСервиса["offer_id"]);
		НоваяСтрока.ИдентификаторОбъектаМаркетплейса = КэшИдентификаторов.Получить(НоваяСтрока.ИдентификаторПубликации);
		НоваяСтрока.ИдентификаторFBOSKU              = fbo_sku;
		НоваяСтрока.ИдентификаторFBSSKU              = fbs_sku;
		НоваяСтрока.ПредставлениеОбъектаМаркетплейса = ЭлементОтветаСервиса["name"];
		НоваяСтрока.ОписаниеОбъектаМаркетплейса      = "";
        НоваяСтрока.Штрихкод                         = СтрСоединить(ЭлементОтветаСервиса["barcodes"], ";");
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ИдентификаторОбъектаМаркетплейса) Тогда
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["id"]);
			Если ЗначениеЗаполнено( НоваяСтрока.ИдентификаторПубликации ) Тогда
				КэшИдентификаторов.Вставить( НоваяСтрока.ИдентификаторПубликации, НоваяСтрока.ИдентификаторОбъектаМаркетплейса );
			КонецЕсли;
		КонецЕсли;
		
		// Категория маркетплейса
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["category_id"]);
		
		НаименованиеКатегорииМаркетплейса = Неопределено;
		Если НЕ КэшКатегорий.Свойство("НаименованиеКатегории_" + НоваяСтрока.ИдентификаторКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса) Тогда
			ПараметрыЗапроса = НовыеПараметрыЗапросаДереваКатегории(НоваяСтрока.ИдентификаторКатегорииМаркетплейса);
			ДанныеКатегории  = ПолучитьКатегориюИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			
			Если ДанныеКатегории <> Неопределено
				 И ДанныеКатегории.Количество() > 0 Тогда
				НаименованиеКатегорииМаркетплейса = ДанныеКатегории[0]["title"];
		
				АтрибутыКатегории = Неопределено;
				Если НЕ КэшКатегорий.Свойство("Категория_" + НоваяСтрока.ИдентификаторКатегорииМаркетплейса, АтрибутыКатегории) Тогда
					ДанныеКатегории = ПолучитьАтрибутыКатегории(УчетнаяЗаписьМаркетплейса, НоваяСтрока.ИдентификаторКатегорииМаркетплейса);
					
					Если ЗначениеЗаполнено(ДанныеКатегории) Тогда
						АтрибутыКатегории = ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеКатегории);
						КэшКатегорий.Вставить("Категория_" + НоваяСтрока.ИдентификаторКатегорииМаркетплейса, АтрибутыКатегории);
					КонецЕсли;
				КонецЕсли;
			Иначе
				НаименованиеКатегорииМаркетплейса = "";
			КонецЕсли;			
			КэшКатегорий.Вставить("НаименованиеКатегории_" + НоваяСтрока.ИдентификаторКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса);
		КонецЕсли;				
		НоваяСтрока.НаименованиеКатегорииМаркетплейса = НаименованиеКатегорииМаркетплейса;
		
		// Ценовые показатели
		НоваяСтрока.ЦеновойИндекс         = ЭлементОтветаСервиса["price_index"];
		НоваяСтрока.ЦенаДоСкидки          = СтрокаВЧисло(ЭлементОтветаСервиса["old_price"]);
		НоваяСтрока.ЦенаСоСкидкой         = СтрокаВЧисло(ЭлементОтветаСервиса["price"]);
		НоваяСтрока.МинимальнаяЦена       = СтрокаВЧисло(ЭлементОтветаСервиса["min_price"]);
		НоваяСтрока.ЦенаНаВитрине         = СтрокаВЧисло(ЭлементОтветаСервиса["marketing_price"]);
		НоваяСтрока.ЦенаПремиальная       = СтрокаВЧисло(ЭлементОтветаСервиса["premium_price"]);
		НоваяСтрока.ЦенаРекомендованная   = СтрокаВЧисло(ЭлементОтветаСервиса["recommended_price"]);
		НоваяСтрока.КодВалюты             = ЭлементОтветаСервиса["currency_code"]; 
		НоваяСтрока.УцененныйТовар        = ЭлементОтветаСервиса["is_discounted"];
		НоваяСтрока.ЕстьУцененныеАналоги  = ЭлементОтветаСервиса["has_discounted_item"];
		НоваяСтрока.ПредоплатаОбязательна = ЭлементОтветаСервиса["is_prepayment"];
		НоваяСтрока.ПредоплатаВозможна    = ЭлементОтветаСервиса["is_prepayment_allowed"];
		
		// Статус публикации	
		ДанныеИзСтатуса = ДанныеИзСтатуса(ЭлементОтветаСервиса["status"], СоответствиеСостоянийПубликации);
		
		НоваяСтрока.ЗаданиеПубликации            = ЧислоВСтроку(ЭлементОтветаСервиса["id"]);
		НоваяСтрока.Статус                       = ДанныеИзСтатуса.ТекущееСостояние.Статус;
		
		// Ozon не передает в поле "status" статус "В архиве", необходимо определить по другим полям
		Если ПоОтветуСервисаОпределитьСтатусТоварВАрхиве( ЭлементОтветаСервиса ) = Истина Тогда
			НоваяСтрока.Статус = Перечисления.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве;
		КонецЕсли;
		
		НоваяСтрока.Состояние                    = ДанныеИзСтатуса.ТекущееСостояние.Состояние;
		НоваяСтрока.ОписаниеСостояния            = ДанныеИзСтатуса.ТекущееСостояние.ОписаниеСостояния;
		НоваяСтрока.КодОшибки                    = ДанныеИзСтатуса.КодОшибки;
		НоваяСтрока.ОписаниеОшибки               = ДанныеИзСтатуса.ОписаниеОшибки;
		НоваяСтрока.ВыставленНаПродажу           = ЭлементОтветаСервиса["visible"];
		НоваяСтрока.ДатаОбновленияНаМаркетплейсе = ДанныеИзСтатуса.ДатаОбновленияНаМаркетплейсе;
		
		// Прочее    
		НоваяСтрока.ДатаСозданияНаМаркетплейсе   = ЭлементОтветаСервиса["created_at"];
		НоваяСтрока.ДатаОбновленияНаМаркетплейсе = ?(НоваяСтрока.ДатаОбновленияНаМаркетплейсе = Дата(1,1,1), ЭлементОтветаСервиса["updated_at"], ДанныеИзСтатуса.ДатаОбновленияНаМаркетплейсе);
		НоваяСтрока.МаркетинговыйЦвет            = ЭлементОтветаСервиса["color_image"];
		НоваяСтрока.КрупногабаритныйТовар        = ЭлементОтветаСервиса["is_kgt"];
		НоваяСтрока.ОбъемныйВес                  = ЭлементОтветаСервиса["volume_weight"];
		
		НоваяСтрока.ИнформацияОКомиссиях = НоваяТаблицаИнформацияОКомиссиях();
		Если ЭлементОтветаСервиса["commissions"] <> Неопределено Тогда
			Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["commissions"] Цикл
				НоваяИнформацияОКомиссиях                     = НоваяСтрока.ИнформацияОКомиссиях.Добавить();
				НоваяИнформацияОКомиссиях.СхемаПродажи        = ЭлементКоллекции["saleSchema"];
				НоваяИнформацияОКомиссиях.ПроцентКомиссии     = ЭлементКоллекции["percent"];
				НоваяИнформацияОКомиссиях.СуммаКомиссии       = ЭлементКоллекции["value"];
				НоваяИнформацияОКомиссиях.МинимальнаяКомиссия = ЭлементКоллекции["minValue"];
				НоваяИнформацияОКомиссиях.СтоимостьДоставки   = ЭлементКоллекции["deliveryAmount"];
				НоваяИнформацияОКомиссиях.СтоимостьВозврата   = ЭлементКоллекции["returnAmount"];
			КонецЦикла;
		КонецЕсли;															 
		
		НоваяСтрока.ИсточникиСхожихПредложений = НоваяТаблицаИсточникиСхожихПредложений();
		Если ЭлементОтветаСервиса["commissions"] <> Неопределено Тогда
			Для Каждого ЭлементКоллекции Из ЭлементОтветаСервиса["sources"] Цикл
				НовыйИсточникСхожихПредложений                                        = НоваяСтрока.ИсточникиСхожихПредложений.Добавить();
				НовыйИсточникСхожихПредложений.СхемаПродажи                           = ЭлементКоллекции["source"];
				НовыйИсточникСхожихПредложений.ИдентификаторSKU                       = ЧислоВСтроку(ЭлементКоллекции["sku"]);
				НовыйИсточникСхожихПредложений.УчитываетсяПриРасчетеРыночногоЗначения = ЭлементКоллекции["is_enabled"];
			КонецЦикла;
		КонецЕсли;														 
		
		// Остатки товара
		НоваяСтрока.ОстаткиТовара_ВНаличии        = ЭлементОтветаСервиса["stocks"]["present"];
		НоваяСтрока.ОстаткиТовара_Зарезервировано = ЭлементОтветаСервиса["stocks"]["reserved"];
		НоваяСтрока.ОстаткиТовара_Ожидается       = ЭлементОтветаСервиса["stocks"]["coming"];
		
		// Изображения
		НоваяСтрока.Изображения = НоваяТаблицаИзображений();
		
		Если ЗначениеЗаполнено(ЭлементОтветаСервиса["primary_image"]) Тогда
			НовоеИзображение                     = НоваяСтрока.Изображения.Добавить();
			НовоеИзображение.Порядок             = НоваяСтрока.Изображения.Количество();
			НовоеИзображение.ПутьКФайлу          = ЭлементОтветаСервиса["primary_image"];
			НовоеИзображение.ОсновноеИзображение = Истина;
			НовоеИзображение.Изображение360      = Ложь;
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из ЭлементОтветаСервиса["images"] Цикл
			НовоеИзображение                     = НоваяСтрока.Изображения.Добавить();
			НовоеИзображение.Порядок             = НоваяСтрока.Изображения.Количество();
			НовоеИзображение.ПутьКФайлу          = ЭлементКоллекции;
			НовоеИзображение.ОсновноеИзображение = (НовоеИзображение.Порядок = 1);
			НовоеИзображение.Изображение360      = Ложь;
		КонецЦикла;
		
		Для каждого ЭлементКоллекции Из ЭлементОтветаСервиса["images360"] Цикл
			НовоеИзображение                     = НоваяСтрока.Изображения.Добавить();
			НовоеИзображение.Порядок             = НоваяСтрока.Изображения.Количество();
			НовоеИзображение.ПутьКФайлу          = ЭлементКоллекции;
			НовоеИзображение.ОсновноеИзображение = Ложь;
			НовоеИзображение.Изображение360      = Истина;
		КонецЦикла;
		
		// Схемы продаж
		НоваяСтрока.ПродаетсяПоСхемеРаботыFBO = Истина;
		НоваяСтрока.ПродаетсяПоСхемеРаботыFBS = Ложь;
		НоваяСтрока.ПродаетсяПоСхемеРаботыDBS = Ложь;

	КонецЦикла;

КонецПроцедуры

// Конструктор списка параметров для запроса определения значений атрибута.
// 
// Параметры:
//   ИдентификаторКатегорииМаркетплейса - Строка - идентификатор категории маркетплейса.
//   ИдентификаторАтрибутаМаркетплейса  - Строка - идентификатор атрибута маркетплейса.
//   ЯзыкВОтвете                        - Строка - язык в ответе.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ИдентификаторКатегории1С           - Строка - идентификатор категории 1С;
//     * ИдентификаторКатегорииМаркетплейса - Строка - идентификатор категории маркетплейса (category_id);
//     * ИдентификаторАтрибутаМаркетплейса  - Строка - идентификатор атрибута маркетплейса (attribute_id);
//     * ИдентификаторПоследнегоЗначения    - Число - идентификатор справочника, с которого нужно начать ответ (last_value_id);
//     * МаксимальноеКоличествоВОтвете      - Число - количество значений в ответе (limit);
//     * ЯзыкВОтвете                        - Строка - язык в ответе (language).
//
Функция НовыеПараметрыЗапросаЗначенийАтрибута(ИдентификаторКатегорииМаркетплейса = "", ИдентификаторАтрибутаМаркетплейса = "", ЯзыкВОтвете = "DEFAULT") Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторКатегории1С",           "");
	Результат.Вставить("ИдентификаторКатегорииМаркетплейса", ИдентификаторКатегорииМаркетплейса);
	Результат.Вставить("ИдентификаторАтрибутаМаркетплейса",  ИдентификаторАтрибутаМаркетплейса);
	Результат.Вставить("ИдентификаторПоследнегоЗначения",    0);
	Результат.Вставить("МаксимальноеКоличествоВОтвете",      500);
	Результат.Вставить("ЯзыкВОтвете",                        ЯзыкВОтвете);

	Возврат Результат;

КонецФункции

// Конструктор списка параметров для запроса получения описания характеристик товаров.
// 
// Параметры:
//   ФильтрПоТоварам - Структура - фильтр по товарам, см. НовыйФильтрЗапросаПоТоварам;
//                   - Неопределено - использовать фильтр по умолчанию.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ФильтрВидимости                    - Строка - фильтр по видимости товара (filter.visibility): 
//     * ИдентификаторыПубликации           - Массив Из Строка - список внутренних идентификаторов товаров в системе продавца (filter.offer_id);
//     * ИдентификаторыОбъектовМаркетплейса - Массив Из Строка - список идентификаторов товаров на маркетплейсе (filter.product_id).
//     * ИдентификаторПоследнегоЗначения    - Строка - идентификатор последнего значения на странице (last_id);
//     * МаксимальноеКоличествоВОтвете      - Число - количество значений на странице (limit);
//     * ПараметрСортировки                 - Строка - параметр, по которому товары будут отсортированы (sort_by);
//     * НаправлениеСортировки              - Строка - направление сортировки (sort_dir).
//
Функция НовыеПараметрыЗапросаПолученияОписанияХарактеристикТоваров(ФильтрПоТоварам = Неопределено)
	
	Если ФильтрПоТоварам = Неопределено Тогда
		ФильтрПоТоварам = НовыйФильтрЗапросаПоТоварам();
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторПоследнегоЗначения", "");
	Результат.Вставить("МаксимальноеКоличествоВОтвете",   1000);
	Результат.Вставить("МаксимальноеКоличествоВЗапросе",  1000);
	Результат.Вставить("ПараметрСортировки",              "");
	Результат.Вставить("НаправлениеСортировки",           "asc");
	
	Для каждого КлючЗначение Из ФильтрПоТоварам Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Определяет состояние товара.
//
// Параметры:
//   СтатусИзСервиса                 - Соответствие - описание состояния товара, 
//                                       см. ПолучитьОписаниеТоваровИзСервиса.
//   СоответствиеСостоянийПубликации - Соответствие - данные соответствия состояний публикации, 
//                                       см. СоответствиеСостоянийПубликации.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * ТекущееСостояние             - Структура - текущее состояние публикации, 
//                                        см. СостоянияПубликации
//     * КодОшибки                    - Строка - 
//     * ОписаниеОшибки               - Строка - 
//     * ДатаОбновленияНаМаркетплейсе - Дата - время последнего изменения состояния товара.
//
Функция ДанныеИзСтатуса(СтатусИзСервиса, СоответствиеСостоянийПубликации)

	СтруктураСтатуса = Новый Структура;
	СтруктураСтатуса.Вставить("state_description", "");
	СтруктураСтатуса.Вставить("state_name",        "");
	СтруктураСтатуса.Вставить("item_errors",       Новый Массив);
	СтруктураСтатуса.Вставить("state_updated_at",  Дата(1,1,1));
	ЗаполнитьЗначенияСвойствИзСервиса(СтруктураСтатуса, СтатусИзСервиса);
	
	СтатусТовара = НРег(СтрЗаменить(СтруктураСтатуса.state_description, " ", "_"));
	Если ПустаяСтрока(СтатусТовара) Тогда
		СтатусТовара = НРег(СтрЗаменить(СтруктураСтатуса.state_name, " ", "_"));
	КонецЕсли;

	ТекущееСостояние = СоответствиеСостоянийПубликации[СтатусТовара];
	Если ТекущееСостояние = Неопределено Тогда
		ТекущееСостояние = СоответствиеСостоянийПубликации["на_модерации"];
	КонецЕсли;

	КодОшибки      = "";
	ОписаниеОшибки = "";

	ОписаниеОшибок = СобратьОписаниеОшибокСтатусаДобавления(СтруктураСтатуса.item_errors);
	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		КодОшибки      = ОписаниеОшибок.КодОшибки;
		ОписаниеОшибки = ОписаниеОшибок.ОписаниеОшибки;
	КонецЕсли;

	ДанныеИзСтатуса = Новый Структура;
	ДанныеИзСтатуса.Вставить("ТекущееСостояние",             ТекущееСостояние);
	ДанныеИзСтатуса.Вставить("КодОшибки",                    КодОшибки);
	ДанныеИзСтатуса.Вставить("ОписаниеОшибки",               ОписаниеОшибки);
	ДанныеИзСтатуса.Вставить("ДатаОбновленияНаМаркетплейсе", СтруктураСтатуса.state_updated_at);

	Возврат ДанныеИзСтатуса;
	
КонецФункции

// Получает значения атрибута, включая служебные.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ПараметрыЗапроса          - Структура - список параметров, см. НовыеПараметрыЗапросаЗначенийАтрибута.
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. НоваяТаблицаЗначенийАтрибутаКатегории.
//
Функция ПолучитьЗначенияАтрибутаКатегории(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса, Отказ = Ложь)

	ТаблицаЗначенийАтрибута = НоваяТаблицаЗначенийАтрибутаКатегории();

	Если ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса = "weight_unit"
		 ИЛИ ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса = "СлужебныеАтрибуты" Тогда
		НоваяСтрока 								   = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса          = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса  = "weight_unit";
		НоваяСтрока.ИдентификаторЗначенияАтрибута      = "g";
		НоваяСтрока.ЗначениеАтрибута 				   = "грамм";

		НоваяСтрока 								   = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса          = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса  = "weight_unit";
		НоваяСтрока.ИдентификаторЗначенияАтрибута      = "kg";
		НоваяСтрока.ЗначениеАтрибута 				   = "килограмм";

		НоваяСтрока 								   = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса          = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса  = "weight_unit";
		НоваяСтрока.ИдентификаторЗначенияАтрибута      = "lb";
		НоваяСтрока.ЗначениеАтрибута 				   = "фунт";
	КонецЕсли;
	
	Если ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса = "dimension_unit" 
		 ИЛИ ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса = "СлужебныеАтрибуты" Тогда
		НоваяСтрока 								   = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса          = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса  = "dimension_unit";
		НоваяСтрока.ИдентификаторЗначенияАтрибута      = "mm";
		НоваяСтрока.ЗначениеАтрибута 				   = "миллиметр";

		НоваяСтрока 								   = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса          = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса  = "dimension_unit";
		НоваяСтрока.ИдентификаторЗначенияАтрибута      = "cm";
		НоваяСтрока.ЗначениеАтрибута 				   = "сантиметр";

		НоваяСтрока 								   = ТаблицаЗначенийАтрибута.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса          = УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторКатегорииМаркетплейса = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
		НоваяСтрока.ИдентификаторАтрибутаМаркетплейса  = "dimension_unit";
		НоваяСтрока.ИдентификаторЗначенияАтрибута      = "in";
		НоваяСтрока.ЗначениеАтрибута 				   = "дюйм";
	КонецЕсли;
	
	Если ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса <> "weight_unit"
		 И ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса <> "dimension_unit" 
		 И ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса <> "СлужебныеАтрибуты" Тогда
		Пока Истина Цикл
			ОтветСервиса = ПолучитьЗначенияАтрибутаКатегорииИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			
			Если ОтветСервиса.Результат = Неопределено Тогда
				Отказ = Истина;	
				Прервать;
			КонецЕсли;

			Для Каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
				НоваяСтрока 								    = ТаблицаЗначенийАтрибута.Добавить();
				НоваяСтрока.УчетнаяЗаписьМаркетплейса           = УчетнаяЗаписьМаркетплейса;
				НоваяСтрока.ИдентификаторКатегорииМаркетплейса  = ПараметрыЗапроса.ИдентификаторКатегорииМаркетплейса;
				НоваяСтрока.ИдентификаторАтрибутаМаркетплейса   = ПараметрыЗапроса.ИдентификаторАтрибутаМаркетплейса;
				НоваяСтрока.ИдентификаторЗначенияАтрибута       = ЧислоВСтроку(ЭлементОтветаСервиса["id"]);
				НоваяСтрока.ЗначениеАтрибута 				    = ЭлементОтветаСервиса["value"];
				НоваяСтрока.ОписаниеЗначенияАтрибута 			= ЭлементОтветаСервиса["info"];
				НоваяСтрока.АдресИзображенияДляЗначенияАтрибута = ЭлементОтветаСервиса["picture"];
				
				ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ЭлементОтветаСервиса["id"];
			КонецЦикла;
			
			Если НЕ ОтветСервиса.Продолжить 
				ИЛИ ОтветСервиса.Результат.Количество() < ПараметрыЗапроса.МаксимальноеКоличествоВОтвете Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ТаблицаЗначенийАтрибута.Сортировать("ЗначениеАтрибута Возр");
	КонецЕсли;

	Возврат ТаблицаЗначенийАтрибута;

КонецФункции

// Конструктор списка параметров для запроса дерева категорий.
// 
// Параметры:
//   ИдентификаторКатегорииМаркетплейса - Строка - идентификатор категории маркетплейса;
//                                      - Неопределено - указывается для получения полного списка категорий.
//   ЯзыкВОтвете                        - Строка - язык в ответе.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ИдентификаторКатегорииМаркетплейса - Строка, Неопределено - идентификатор категории маркетплейса (category_id).
//     * ЯзыкВОтвете                        - Строка - язык в ответе (language).
//
Функция НовыеПараметрыЗапросаДереваКатегории(ИдентификаторКатегорииМаркетплейса = Неопределено, ЯзыкВОтвете = "DEFAULT")

	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторКатегорииМаркетплейса", ИдентификаторКатегорииМаркетплейса);
	Результат.Вставить("ЯзыкВОтвете",                        ЯзыкВОтвете);

	Возврат Результат;

КонецФункции

// Получает категории для товаров в виде дерева из сервиса Ozon. Создание товаров доступно только в категориях последнего уровня, сравните 
// именно эти категории с категориями своей площадки. Категории не создаются по запросу пользователя.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/CategoryAPI_GetCategoryTree
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаДереваКатегории.
//
// Возвращаемое значение:
//   Массив Из Соответствие - результат выполнения запроса (GetCategoryTreeResponseItem):
//     * category_id          - Число - идентификатор категории;
//     * children             - Массив Из Соответствие - дерево подкатегорий (GetCategoryTreeResponseItem);
//     * title                - Строка - название категории.
//   Неопределено           - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ПолучитьКатегориюИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)
	
	ТекстЗапроса = "/v2/category/tree";

	ПараметрыЗапроса = Новый Структура;
	Если Параметры.ИдентификаторКатегорииМаркетплейса <> Неопределено Тогда
		ПараметрыЗапроса.Вставить("category_id", СтрокаВЧисло(Параметры.ИдентификаторКатегорииМаркетплейса));
	КонецЕсли;
	ПараметрыЗапроса.Вставить("language", Параметры.ЯзыкВОтвете);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Конструктор идентификаторов и наименований служебных атрибутов.
// 
// Возвращаемое значение:
//   Массив Из Структура - служебные атрибуты:
//     * Идентификатор - Строка - идентификатор служебного атрибута;
//     * Наименование  - Строка - наименование служебного атрибута.
//
Функция НовыеСлужебныеАтрибутыСНаименованиями()

	Результат = Новый Массив;
	Результат.Добавить(Новый Структура("Идентификатор, Наименование", "weight_unit",    НСтр("ru = 'Единица измерения веса'")));
	Результат.Добавить(Новый Структура("Идентификатор, Наименование", "weight",         НСтр("ru = 'Вес товара в упаковке'")));
	Результат.Добавить(Новый Структура("Идентификатор, Наименование", "dimension_unit", НСтр("ru = 'Единица измерения габаритов'")));
	Результат.Добавить(Новый Структура("Идентификатор, Наименование", "depth",          НСтр("ru = 'Глубина упаковки'")));
	Результат.Добавить(Новый Структура("Идентификатор, Наименование", "height",         НСтр("ru = 'Высота упаковки'")));
	Результат.Добавить(Новый Структура("Идентификатор, Наименование", "width",          НСтр("ru = 'Ширина упаковки'")));

	Возврат Результат;

КонецФункции

// Конструктор таблицы значений для документов PDF из сервиса.
//
// Возвращаемое значение:
//	 ТаблицаЗначений - таблица с колонками:
//     * Порядок      - Число - индекс документа в хранилище;
//     * Наименование - Строка - название файла;
//     * ПутьКФайлу   - Строка - путь к документу.
//
Функция НоваяТаблицаДокументовPDF() Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Порядок",      Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	Результат.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(250)));
	Результат.Колонки.Добавить("ПутьКФайлу",   Новый ОписаниеТипов("Строка"));

	Возврат Результат;

КонецФункции

// Получает данные по атрибутам категории.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса          - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ИдентификаторКатегорииМаркетплейса - Строка - идентификатор категории маркетплейса;
//                                      - Массив Из Строка - список идентификаторов категорий маркетплейса.
//   Отказ                              - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
// 
// Возвращаемое значение:
//   ТаблицаЗначений - см. НоваяТаблицаАтрибутовКатегорииМаркетплейса. 
//
Функция ПолучитьАтрибутыКатегории(УчетнаяЗаписьМаркетплейса, Знач ИдентификаторКатегорииМаркетплейса, Отказ = Ложь)

	ТаблицаАтрибутов = НоваяТаблицаАтрибутовКатегорииМаркетплейса();
	ТаблицаАтрибутов.Колонки.Добавить("ПорядокСортировки", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(1)));

	ПараметрыЗапроса  = НовыеПараметрыЗапросаАтрибутовКатегории(, "ALL");
	Идентификаторы    = ЗначениеВМассив(ИдентификаторКатегорииМаркетплейса);
	Порция            = Новый Массив;
	
	Для каждого ЭлементПорции Из Идентификаторы Цикл
		Если Порция.Количество() >= ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе Тогда
			ПараметрыЗапроса.ИдентификаторыКатегорийМаркетплейса = Порция;
			ОтветСервиса = ПолучитьАтрибутыКатегорииИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
			Порция.Очистить();
			
			Если ОтветСервиса = Неопределено Тогда
				Отказ = Истина;	
				Прервать;
			Иначе
				ДобавитьОтветСервисаВТаблицуАтрибутовКатегории(ТаблицаАтрибутов, ОтветСервиса, УчетнаяЗаписьМаркетплейса);
			КонецЕсли;
		КонецЕсли;

		Порция.Добавить(ЭлементПорции);
	КонецЦикла;
	
	Если НЕ Отказ
		 И Порция.Количество() > 0 Тогда
		ПараметрыЗапроса.ИдентификаторыКатегорийМаркетплейса = Порция;
		ОтветСервиса = ПолучитьАтрибутыКатегорииИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
		Порция.Очистить();
		
		Если ОтветСервиса = Неопределено Тогда
			Отказ = Истина;
		Иначе		
			ДобавитьОтветСервисаВТаблицуАтрибутовКатегории(ТаблицаАтрибутов, ОтветСервиса, УчетнаяЗаписьМаркетплейса);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаАтрибутов.Сортировать("ПорядокСортировки, ЗаполненРодитель УБЫВ, НаименованиеРодителяАтрибутаМаркетплейса, ОбязательныйАтрибут УБЫВ, НаименованиеАтрибутаМаркетплейса");
	ТаблицаАтрибутов.Колонки.Удалить("ПорядокСортировки");

	Возврат ТаблицаАтрибутов;

КонецФункции

// Копирует значения свойств структуры или соответствия Источника в свойства структуры Приемника.
//
// Параметры:
//   Приемник         - Структура - значение, чьи свойства будут заполнены значениями соответствующих свойств Источника.
//   Источник         - Структура, Соответствие - значения свойств данного объекта будут установлены в соответствующие свойства Приемника.
//   СписокСвойств    - Строка - список имен свойств Приемника, разделенный запятыми, которые необходимо заполнить.
//   ИсключаяСвойства - Строка - список имен свойств Приемника, разделенный запятыми, которые необходимо исключить из заполнения.
//
Процедура ЗаполнитьЗначенияСвойствИзСервиса(Приемник, Источник, СписокСвойств = "", ИсключаяСвойства = "")

	Если ЗначениеЗаполнено(СписокСвойств) Тогда
		СписокСвойств = ВРег(СтрЗаменить(СписокСвойств, " ", ""));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсключаяСвойства) Тогда
		ИсключаяСвойства = ВРег(СтрЗаменить(ИсключаяСвойства, " ", ""));
	КонецЕсли;
	
	Для Каждого КлючЗначение Из Источник Цикл
	
		Если ЗначениеЗаполнено(СписокСвойств) И СтрНайти(СписокСвойств + ",", ВРег(КлючЗначение.Ключ + ",")) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсключаяСвойства) И СтрНайти(ИсключаяСвойства + ",", ВРег(КлючЗначение.Ключ + ",")) > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Приемник.Вставить(КлючЗначение.Ключ, ОбщегоНазначения.СкопироватьРекурсивно(КлючЗначение.Значение, Ложь));
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значения (вложенные справочники) атрибута категории из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/CategoryAPI_DictionaryValueBatch
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаЗначенийАтрибута.
// 
// Возвращаемое значение:
//   Структура    - результат выполнения запроса:
//     * Результат  - Массив Из Соответствие - данные значений характеристик (categoryv2DictionaryValueBatchResponseDictionaryValue):
//       ** id        - Число  - идентификатор значения;
//       ** info      - Строка - наименование значения;
//       ** picture   - Строка - URL адрес изображения;
//       ** value     - Строка - значение характеристики товара.
//     * Продолжить  - Булево - признак необходимости получения следующей порции данных (has_next).
//   Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ПолучитьЗначенияАтрибутаКатегорииИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v2/category/attribute/values";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("category_id",   СтрокаВЧисло(Параметры.ИдентификаторКатегорииМаркетплейса));
	ПараметрыЗапроса.Вставить("attribute_id",  СтрокаВЧисло(Параметры.ИдентификаторАтрибутаМаркетплейса));
	ПараметрыЗапроса.Вставить("last_value_id", Параметры.ИдентификаторПоследнегоЗначения);
	ПараметрыЗапроса.Вставить("limit",         Параметры.МаксимальноеКоличествоВОтвете);
	ПараметрыЗапроса.Вставить("language",      Параметры.ЯзыкВОтвете);

	СлужебныеПараметры 								= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета = "GetDictionaryValuesBatchWithFilter: dictionary not found";
	СлужебныеПараметры.ПустойРезультат              = Новый Структура("result, has_next", Новый Массив, Ложь);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",  "result");
	АтрибутыОтвета.Вставить("Продолжить", "has_next");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса;

КонецФункции

// Получает характеристики (атрибуты) указанной категории (категорий) из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/CategoryAPI_GetCategoryAttributesV3
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаАтрибутовКатегории.
//
// Возвращаемое значение:
//   Массив Из Соответствие - результат выполнения запроса (CategoryAttributesResponseCategoryAttributes):
//     * category_id          - Число - идентификатор категории;
//     * attributes           - Массив Из Соответствие - список характеристик товара (CategoryAttributesResponseAttribute):
//       ** category_dependent  - Булево - признак, что значения словарного атрибута зависят от категории;
//       ** description         - Строка - описание характеристики;
//       ** dictionary_id       - Число - идентификатор справочника;
//       ** group_id            - Число - идентификатор группы характеристик;
//       ** group_name          - Строка - название группы характеристик;
//       ** id                  - Число - номер задания на формирование документов;
//       ** is_aspect           - Булево - признак аспектного атрибута. Аспектный атрибут - характеристика, по которой отличаются 
//                                  товары одной модели;
//       ** is_collection       - Булево - признак, что характеристика - набор значений;
//       ** is_required         - Булево - признак обязательной характеристики;
//       ** name                - Строка - название;
//       ** type                - Строка - тип характеристики.
//   Неопределено           - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ПолучитьАтрибутыКатегорииИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)
	
	ТекстЗапроса = "/v3/category/attribute";

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("category_id",	ЗначениеВМассив(Параметры.ИдентификаторыКатегорийМаркетплейса, , Истина));
	ПараметрыЗапроса.Вставить("attribute_type",	Параметры.ФильтрПоАтрибутам);
	ПараметрыЗапроса.Вставить("language",		Параметры.ЯзыкВОтвете);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат", "result");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета);

	Возврат РезультатЗапроса.Результат;

КонецФункции

// Конструктор списка параметров для запроса атрибутов категории.
// 
// Параметры:
//   ИдентификаторКатегорииМаркетплейса - Строка - идентификатор категории маркетплейса;
//                                      - Массив Из Строка - список идентификаторов категорий маркетплейса.
//   ФильтрПоАтрибутам                  - Строка - фильтр по характеристикам (атрибутам):
//                                          "ALL"      - все атрибуты (по умолчанию);
//                                          "REQUIRED" - обязательные атрибуты; 
//                                          "OPTIONAL" - дополнительные атрибуты.
//   ЯзыкВОтвете                        - Строка - язык в ответе.
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ИдентификаторыКатегорийМаркетплейса - Массив Из Строка - идентификаторы категории маркетплейса (category_id);
//     * ФильтрПоАтрибутам                   - Строка - фильтр по характеристикам (атрибутам) (attribute_type);
//     * ЯзыкВОтвете                         - Строка - язык в ответе (language);
//     * МаксимальноеКоличествоВЗапросе      - Число - ограничение на количество записей в списке категорий.
//
Функция НовыеПараметрыЗапросаАтрибутовКатегории(ИдентификаторКатегорииМаркетплейса = "", ФильтрПоАтрибутам = "ALL", ЯзыкВОтвете = "DEFAULT")
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыКатегорийМаркетплейса", ЗначениеВМассив(ИдентификаторКатегорииМаркетплейса));
	Результат.Вставить("ФильтрПоАтрибутам",                   ФильтрПоАтрибутам);
	Результат.Вставить("ЯзыкВОтвете",                         ЯзыкВОтвете);
	Результат.Вставить("МаксимальноеКоличествоВЗапросе",      20);

	Возврат Результат;

КонецФункции

// Заполняет таблицу атрибутов категории значениями из сервиса.
//
// Параметры:
//   ТаблицаАтрибутов          - ТаблицаЗначений - данные об атрибутах категории,
//                                 см. НоваяТаблицаАтрибутовКатегорииМаркетплейса.
//   ОтветСервиса              - Массив Из Соответствие - характеристики (атрибуты) категории (категорий) из сервиса Ozon,
//                                 см. ПолучитьАтрибутыКатегорииИзСервиса.
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ДобавитьОтветСервисаВТаблицуАтрибутовКатегории(ТаблицаАтрибутов, ОтветСервиса, УчетнаяЗаписьМаркетплейса)

	СоответствиеТипов = СоответствиеТипов();
	
	Для каждого ЭлементОтветаСервиса Из ОтветСервиса Цикл 
		Для каждого ЭлементКоллекции Из ЭлементОтветаСервиса["attributes"] Цикл
			НоваяСтрока 										  = ТаблицаАтрибутов.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса                 = УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторКатегорииМаркетплейса		  = ЧислоВСтроку(ЭлементОтветаСервиса["category_id"]);
			НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = ЧислоВСтроку(ЭлементКоллекции["group_id"]);
			НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = ЭлементКоллекции["group_name"];
			НоваяСтрока.ИдентификаторАтрибутаМаркетплейса		  = ЧислоВСтроку(ЭлементКоллекции["id"]);
			НоваяСтрока.НаименованиеАтрибутаМаркетплейса		  = ЭлементКоллекции["name"];
			НоваяСтрока.ОписаниеНазначенияАтрибута				  = ЭлементКоллекции["description"];
			НоваяСтрока.ОбязательныйАтрибут						  = ЭлементКоллекции["is_required"];
			НоваяСтрока.ЯвляетсяКоллекциейЗначений				  = ЭлементКоллекции["is_collection"];
			НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = (ЭлементКоллекции["dictionary_id"] > 0);
			НоваяСтрока.ТипЗначенияАтрибута						  = НРег(ЭлементКоллекции["type"]);
			НоваяСтрока.ТипЗначенияАтрибута1С					  = СоответствиеТипов.Получить(НоваяСтрока.ТипЗначенияАтрибута);
			НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = ОпределитьНомерКартинкиКоллекцииТипов(НоваяСтрока.ТипЗначенияАтрибута, 
																		НоваяСтрока.ТипЗначенияАтрибута1С,
																		НоваяСтрока.ЯвляетсяКоллекциейЗначений,
					 													НоваяСтрока.ДоступенВыборЗначенияИзСписка);
			НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
			НоваяСтрока.ПорядокСортировки 						  = 1;
		КонецЦикла;

		ДополнитьВесогабаритнымиХарактеристикамиУпаковки(УчетнаяЗаписьМаркетплейса, ТаблицаАтрибутов, ЧислоВСтроку(ЭлементОтветаСервиса["category_id"]));
	КонецЦикла;

КонецПроцедуры

// Дополняет таблицу данных служебными атрибутами категорий. 
// Идентификаторы служебных атрибутов см. НовыеСлужебныеАтрибуты. 
//
// Параметры:  
//   УчетнаяЗаписьМаркетплейса          - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТаблицаАтрибутов                   - ТаблицаЗначений - таблица атрибутов, 
//                                          см. НоваяТаблицаАтрибутовКатегорииМаркетплейса.
//   ИдентификаторКатегорииМаркетплейса - Строка - идентификатор категории маркетплейса.
//
Процедура ДополнитьВесогабаритнымиХарактеристикамиУпаковки(УчетнаяЗаписьМаркетплейса, ТаблицаАтрибутов, ИдентификаторКатегорииМаркетплейса)

	// Единица измерения веса
	НоваяСтрока											  = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.УчетнаяЗаписьМаркетплейса                 = УчетнаяЗаписьМаркетплейса;
	НоваяСтрока.ИдентификаторКатегорииМаркетплейса        = ИдентификаторКатегорииМаркетплейса;
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса         = "weight_unit";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = 'Единица измерения веса'");
	НоваяСтрока.ОбязательныйАтрибут						  = Истина;
	НоваяСтрока.ОписаниеНазначенияАтрибута 				  = "";
	НоваяСтрока.ЯвляетсяКоллекциейЗначений 				  = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = Истина; // г, кг, фунты
	НоваяСтрока.ТипЗначенияАтрибута 					  = "string";
	НоваяСтрока.ТипЗначенияАтрибута1С 					  = "Строка";
	НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = 8; // в коллекции это тип Строка;

	// Вес товара в упаковке
	НоваяСтрока											  = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.УчетнаяЗаписьМаркетплейса                 = УчетнаяЗаписьМаркетплейса;
	НоваяСтрока.ИдентификаторКатегорииМаркетплейса        = ИдентификаторКатегорииМаркетплейса;
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса         = "weight";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = 'Вес товара в упаковке'");
	НоваяСтрока.ОбязательныйАтрибут						  = Истина;
	НоваяСтрока.ОписаниеНазначенияАтрибута 				  = НСтр("ru = 'Предельное значение - 1000 килограммов или конвертированная величина в других единицах измерения.'");
	НоваяСтрока.ЯвляетсяКоллекциейЗначений 				  = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = Ложь;
	НоваяСтрока.ТипЗначенияАтрибута 					  = "integer";
	НоваяСтрока.ТипЗначенияАтрибута1С 					  = "Число";
	НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = 13; // в коллекции это тип Число;

	// Единица измерения габаритов
	НоваяСтрока											  = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.УчетнаяЗаписьМаркетплейса                 = УчетнаяЗаписьМаркетплейса;
	НоваяСтрока.ИдентификаторКатегорииМаркетплейса        = ИдентификаторКатегорииМаркетплейса;
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса         = "dimension_unit";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = 'Единица измерения габаритов'");
	НоваяСтрока.ОбязательныйАтрибут						  = Истина;
	НоваяСтрока.ОписаниеНазначенияАтрибута 				  = "";
	НоваяСтрока.ЯвляетсяКоллекциейЗначений 				  = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = Истина; // мм, см, дюйм
	НоваяСтрока.ТипЗначенияАтрибута 					  = "string";
	НоваяСтрока.ТипЗначенияАтрибута1С 					  = "Строка";
	НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = 8; // в коллекции это тип Строка;

	// Глубина упаковки
	НоваяСтрока											  = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.УчетнаяЗаписьМаркетплейса                 = УчетнаяЗаписьМаркетплейса;
	НоваяСтрока.ИдентификаторКатегорииМаркетплейса        = ИдентификаторКатегорииМаркетплейса;
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса         = "depth";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = 'Глубина упаковки'");
	НоваяСтрока.ОбязательныйАтрибут						  = Истина;
	НоваяСтрока.ОписаниеНазначенияАтрибута 				  = "";
	НоваяСтрока.ЯвляетсяКоллекциейЗначений 				  = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = Ложь;
	НоваяСтрока.ТипЗначенияАтрибута 					  = "integer";
	НоваяСтрока.ТипЗначенияАтрибута1С 					  = "Число";
	НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = 13; // в коллекции это тип Число;

	// Высота упаковки
	НоваяСтрока											  = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.УчетнаяЗаписьМаркетплейса                 = УчетнаяЗаписьМаркетплейса;
	НоваяСтрока.ИдентификаторКатегорииМаркетплейса        = ИдентификаторКатегорииМаркетплейса;
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса         = "height";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = 'Высота упаковки'");
	НоваяСтрока.ОбязательныйАтрибут						  = Истина;
	НоваяСтрока.ОписаниеНазначенияАтрибута 				  = "";
	НоваяСтрока.ЯвляетсяКоллекциейЗначений 				  = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = Ложь;
	НоваяСтрока.ТипЗначенияАтрибута 					  = "integer";
	НоваяСтрока.ТипЗначенияАтрибута1С 					  = "Число";
	НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = 13; // в коллекции это тип Число;

	// Ширина упаковки
	НоваяСтрока											  = ТаблицаАтрибутов.Добавить();
	НоваяСтрока.УчетнаяЗаписьМаркетплейса                 = УчетнаяЗаписьМаркетплейса;
	НоваяСтрока.ИдентификаторКатегорииМаркетплейса        = ИдентификаторКатегорииМаркетплейса;
	НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса = "ВесогабаритныеХарактеристики";
	НоваяСтрока.НаименованиеРодителяАтрибутаМаркетплейса  = НСтр("ru = 'Весогабаритные характеристики'");
	НоваяСтрока.ИдентификаторАтрибутаМаркетплейса         = "width";
	НоваяСтрока.НаименованиеАтрибутаМаркетплейса          = НСтр("ru = 'Ширина упаковки'");
	НоваяСтрока.ОбязательныйАтрибут						  = Истина;
	НоваяСтрока.ОписаниеНазначенияАтрибута 				  = "";
	НоваяСтрока.ЯвляетсяКоллекциейЗначений 				  = Ложь;
	НоваяСтрока.ДоступенВыборЗначенияИзСписка 			  = Ложь;
	НоваяСтрока.ТипЗначенияАтрибута 					  = "integer";
	НоваяСтрока.ТипЗначенияАтрибута1С 					  = "Число";
	НоваяСтрока.ЗаполненРодитель 						  = ЗначениеЗаполнено(НоваяСтрока.ИдентификаторРодителяАтрибутаМаркетплейса);
	НоваяСтрока.НомерКартинкиКоллекцииТипов 			  = 13; // в коллекции это тип Число;

КонецПроцедуры

// Получает остатки товаров.
//
// Параметры:
// 	 УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ФильтрПоТоварам           - Структура - фильтр по товарам, см. НовыйФильтрЗапросаПоТоварам.
//   Отказ                     - Булево - выходной параметр, определяет наличие ошибки при выполнении запросов к сервису.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица остатков товаров, см. НоваяТаблицаОстатковТоваров.
//
Функция ПолучитьОстаткиТоваров(УчетнаяЗаписьМаркетплейса, ФильтрПоТоварам, Отказ = Ложь) Экспорт
	
	ТаблицаОстатковТоваров = НоваяТаблицаОстатковТоваров();

	ФильтрыВидимости                   = ЗначениеВМассив(ФильтрПоТоварам.ФильтрВидимости);
	ИдентификаторыПубликации           = ОбщегоНазначения.СкопироватьРекурсивно(ФильтрПоТоварам.ИдентификаторыПубликации);
	ИдентификаторыОбъектовМаркетплейса = ОбщегоНазначения.СкопироватьРекурсивно(ФильтрПоТоварам.ИдентификаторыОбъектовМаркетплейса);

	Для каждого ЭлементФильтра Из ФильтрыВидимости Цикл
		ПараметрыЗапроса                 = НовыеПараметрыЗапросаПолученияСпискаТоваров(ФильтрПоТоварам);
		ПараметрыЗапроса.ФильтрВидимости = ЭлементФильтра;
		Порция 							 = Новый Массив;
		
		Если ИдентификаторыПубликации <> Неопределено Тогда
			Для каждого ЭлементПорции Из ИдентификаторыПубликации Цикл
				Если Порция.Количество() >= Мин(ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе, ПараметрыЗапроса.МаксимальноеКоличествоВОтвете) Тогда
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
					ПараметрыЗапроса.ИдентификаторыПубликации           = Порция;
					ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
					
					ОтветСервиса = ПолучитьОстаткиТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
					Порция.Очистить();
					
					Если ОтветСервиса.Результат = Неопределено Тогда
						Отказ = Истина;
						Прервать;
					Иначе	
						ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
						КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

						ДобавитьОтветСервисаВТаблицуОстатковТоваров(
							ТаблицаОстатковТоваров, 
							ОтветСервиса, 
							УчетнаяЗаписьМаркетплейса);
					КонецЕсли;	
				КонецЕсли;

				Порция.Добавить(ЭлементПорции);
			КонецЦикла;

			Если НЕ Отказ
		 		 И Порция.Количество() > 0 Тогда  
				ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
				ПараметрыЗапроса.ИдентификаторыПубликации           = Порция;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Неопределено;
				
				ОтветСервиса = ПолучитьОстаткиТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
				
				Если ОтветСервиса.Результат = Неопределено Тогда
					Отказ = Истина;
					Прервать;
				Иначе	
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
					КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

					ДобавитьОтветСервисаВТаблицуОстатковТоваров(
						ТаблицаОстатковТоваров, 
						ОтветСервиса, 
						УчетнаяЗаписьМаркетплейса);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		Если ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
			Для каждого ЭлементПорции Из ИдентификаторыОбъектовМаркетплейса Цикл
				Если Порция.Количество() >= Мин(ПараметрыЗапроса.МаксимальноеКоличествоВЗапросе, ПараметрыЗапроса.МаксимальноеКоличествоВОтвете) Тогда
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
					ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
					ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Порция;
					
					ОтветСервиса = ПолучитьОстаткиТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
					Порция.Очистить();
					
					Если ОтветСервиса.Результат = Неопределено Тогда
						Отказ = Истина;
						Прервать;
					Иначе	
						ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
						КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

						ДобавитьОтветСервисаВТаблицуОстатковТоваров(
							ТаблицаОстатковТоваров, 
							ОтветСервиса, 
							УчетнаяЗаписьМаркетплейса);
					КонецЕсли;	
				КонецЕсли;

				Порция.Добавить(ЭлементПорции);
			КонецЦикла;

			Если НЕ Отказ
		 		 И Порция.Количество() > 0 Тогда
				ПараметрыЗапроса.ИдентификаторПоследнегоЗначения    = "";
				ПараметрыЗапроса.ИдентификаторыПубликации           = Неопределено;
				ПараметрыЗапроса.ИдентификаторыОбъектовМаркетплейса = Порция;
				
				ОтветСервиса = ПолучитьОстаткиТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, ПараметрыЗапроса);
				Порция.Очистить();
				
				Если ОтветСервиса.Результат = Неопределено Тогда
					Отказ = Истина;
					Прервать;
				Иначе	
					ПараметрыЗапроса.ИдентификаторПоследнегоЗначения = ОтветСервиса.ИдентификаторПоследнегоЗначения;
					КоличествоТоваров                                = ОтветСервиса.КоличествоТоваров;

					ДобавитьОтветСервисаВТаблицуОстатковТоваров(
						ТаблицаОстатковТоваров, 
						ОтветСервиса, 
						УчетнаяЗаписьМаркетплейса);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаОстатковТоваров;

КонецФункции

// Получает остатки товаров из сервиса Ozon.
// Описание метода см. https://docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductInfoStocksV3
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Параметры                 - Структура - список параметров запроса, 
//                                 см. НовыеПараметрыЗапросаПолученияСпискаТоваров.
// 
// Возвращаемое значение:
//   Структура    - результат выполнения запроса:
//     * Результат                       - Массив Из Соответствие - информация о товарах (productv3GetProductInfoStocksV3ResponseItem):
//       ** offer_id                       - Строка - идентификатор товара в системе продавца (артикул);
//       ** product_id                     - Число - идентификатор товара в маркетплейсе;
//       ** stocks	                       - Массив Из Соответствие - информация об остатках (GetProductInfoStocksV3ResponseStock):
//         *** present	                     - Число - сейчас на складе;
//         *** reserved	                     - Число - зарезервировано;
//         *** type	                         - Строка - тип склада.
//     * ИдентификаторПоследнегоЗначения - Строка - идентификатор последнего значения на странице (last_id);
//     * КоличествоТоваров               - Число - количество товаров в списке (total).
//   Неопределено - при выполнении запроса к внешнему ресурсу возникли ошибки.
//
Функция ПолучитьОстаткиТоваровИзСервиса(УчетнаяЗаписьМаркетплейса, Параметры)

	ТекстЗапроса = "/v3/product/info/stocks";

	ФильтрПоТоварам = Новый Структура;
	ФильтрПоТоварам.Вставить("visibility", Параметры.ФильтрВидимости);

	Если Параметры.ИдентификаторыПубликации <> Неопределено Тогда
		ФильтрПоТоварам.Вставить("offer_id", ЗначениеВМассив(Параметры.ИдентификаторыПубликации));
	КонецЕсли;

	Если Параметры.ИдентификаторыОбъектовМаркетплейса <> Неопределено Тогда
		ФильтрПоТоварам.Вставить("product_id", ЗначениеВМассив(Параметры.ИдентификаторыОбъектовМаркетплейса));
	КонецЕсли;

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("filter",  ФильтрПоТоварам);
	ПараметрыЗапроса.Вставить("last_id", Параметры.ИдентификаторПоследнегоЗначения);
	ПараметрыЗапроса.Вставить("limit",   Параметры.МаксимальноеКоличествоВОтвете);
	
	ПустойРезультат = Новый Структура;
	ПустойРезультат.Вставить("items",   Новый Массив);
	ПустойРезультат.Вставить("last_id", "");
	ПустойРезультат.Вставить("total",   0);
	
	СлужебныеПараметры 								= СлужебныеПараметрыHTTPЗапроса();
	СлужебныеПараметры.ПодстрокаПоискаВТекстеОтвета = "item not found";
	СлужебныеПараметры.ПустойРезультат              = Новый Структура("result", ПустойРезультат);
	ПараметрыЗапроса.Вставить("СлужебныеПараметры", СлужебныеПараметры);

	АтрибутыОтвета = Новый Структура;
	АтрибутыОтвета.Вставить("Результат",                       "result.items");
	АтрибутыОтвета.Вставить("ИдентификаторПоследнегоЗначения", "result.last_id");
	АтрибутыОтвета.Вставить("КоличествоТоваров",               "result.total");

	// POST-запрос
	РезультатЗапроса = ПолучитьРезультатЗапроса(ТекстЗапроса, ПараметрыЗапроса, УчетнаяЗаписьМаркетплейса, АтрибутыОтвета, Истина);

	Возврат РезультатЗапроса;

КонецФункции

// Заполняет таблицу остатков товаров значениями из сервиса.
//
// Параметры:
//   ТаблицаОстатковТоваров    - ТаблицаЗначений - остатки товаров, 
//                                 см. НоваяТаблицаОстатковТоваров.
//   ОтветСервиса              - Массив Из Соответствие - информацию о списке товаров из сервиса Ozon,
//                                 см. ПолучитьОстаткиТоваровИзСервиса.
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ДобавитьОтветСервисаВТаблицуОстатковТоваров(ТаблицаОстатковТоваров, ОтветСервиса, УчетнаяЗаписьМаркетплейса)

	Для каждого ЭлементОтветаСервиса Из ОтветСервиса.Результат Цикл
		Для каждого ЭлементКоллекции Из ЭлементОтветаСервиса["stocks"] Цикл
			НоваяСтрока                                  = ТаблицаОстатковТоваров.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = ЭлементОтветаСервиса["offer_id"];
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = ЧислоВСтроку(ЭлементОтветаСервиса["product_id"]);
			НоваяСтрока.ИдентификаторSKU                 = "";
			НоваяСтрока.ИдентификаторСкладаМаркетплейса  = "";
			НоваяСтрока.НаименованиеСкладаМаркетплейса   = "";
			НоваяСтрока.ТипСкладаМаркетплейса            = ВРег(ЭлементКоллекции["type"]);
			НоваяСтрока.КоличествоВНаличии               = ЭлементКоллекции["present"];
			НоваяСтрока.КоличествоЗарезервировано        = ЭлементКоллекции["reserved"];
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Конструктор таблицы значений для сведений о выгруженных данных.
// 
// Возвращаемое значение:
//	 ТаблицаЗначений - таблица с колонками:
//     * УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//     * Номенклатура              - СправочникСсылка.Номенклатура - найденная номенклатура;
//     * Характеристика            - СправочникСсылка.ХарактеристикиНоменклатуры - найденная характеристика;
//     * Упаковка                  - СправочникСсылка.УпаковкиЕдиницыИзмерения - найденная упаковка;
//     * ВидОбъектаМаркетплейса    - ПеречислениеСсылка.ВидыОбъектовМаркетплейсов - вид объекта маркетплейса;
//     * ОбъектПубликации          - СправочникСсылка.НоменклатураПрисоединенныеФайлы - объект публикации.
//
Функция СведенияОВыгруженныхДанных() Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("Номенклатура",              Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика",            Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Упаковка",                  Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	Результат.Колонки.Добавить("ВидОбъектаМаркетплейса",    Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовМаркетплейсов"));
	ТипОбъектПубликации = Новый Массив;
	ТипОбъектПубликации.Добавить(Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	ТипОбъектПубликации.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатурыПрисоединенныеФайлы"));
	Результат.Колонки.Добавить("ОбъектПубликации", Новый ОписаниеТипов(ТипОбъектПубликации));

	Возврат Результат;

КонецФункции

Функция НовыйСписокАтрибутовИзображения() Экспорт

	СписокАтрибутовИзображения = Новый Структура;
	СписокАтрибутовИзображения.Вставить("СсылкаНаФайлВСервисеПубличныхСсылок", "");
	СписокАтрибутовИзображения.Вставить("ЭтоОсновноеИзображение", Ложь);
	СписокАтрибутовИзображения.Вставить("ЭтоИзображение360", Ложь);
	СписокАтрибутовИзображения.Вставить("УдаляемыеСсылки", Новый Соответствие);

	Возврат СписокАтрибутовИзображения;

КонецФункции

// Получает хеш указанного присоединенного файла.
//
// Параметры:
//   ПрисоединенныйФайл     - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на созданный присоединенный файл.
// 
// Возвращаемое значение:
//   Строка - значение хеш-суммы в формате Base 64.
//
Функция ХешСуммаПрисоединенногоФайла(ПрисоединенныйФайл) Экспорт

	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);

	ХешСумма = ХешСуммаДвоичныхДанных(ДвоичныеДанныеФайла, Истина);

	Возврат ХешСумма;

КонецФункции

// Загрузка цен товарных позиций с маркетплейса в ИБ.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТаблицаТоваров            - ТаблицаЗначений - обрабатываемые товарные позиции,
//                                 см. СведенияОВыгруженныхДанных.
//   ВидыЦен                   - Массив Из СправочникСсылка.ВидыЦен - загружаемые цены.
//   ТолькоЗагружаемые         - Булево - признак удаления выгружаемых видов цен из результата.
//   ТолькоПоСтатусуЗагружен   - Булево - признак обработки только объектов со статусом "Загружен".
//     
// Возвращаемое значение: 
//   Соответствие - список сформированных документов изменений цен в разрезе учетных записей:
//     * Ключ       - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//     * Значение   - Массив Из Структура - информация о записанных документах:
//       ** УстановкаЦенНоменклатуры - ДокументСсылка.УстановкаЦенНоменклатуры - сформированный документ установки цен;
//       ** СогласованиеЦенНоменклатуры - БизнесПроцессСсылка.СогласованиеЦенНоменклатуры - бизнес процесс согласования цен.
//   Неопределено - документы установки цен не сформированы.
//
Функция ИмпортИзOzonЗагрузитьЦеныТоваров( УчетнаяЗаписьМаркетплейса, ПараметрыЗагрузкиЦен )

	ТаблицаТоваров = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( ПараметрыЗагрузкиЦен, "Товары", Неопределено );
	Если ТипЗнч( ТаблицаТоваров ) <> Тип( "ТаблицаЗначений" ) Тогда
		ТекстОшибки = НСтр("ru = 'ИмпортИзOzonЗагрузитьЦеныТоваров: Ошибка: Параметр Товары не задан.'", ОбщегоНазначения.КодОсновногоЯзыка() );
		ЗаписьЖурналаРегистрации( СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,,	ТекстОшибки );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗаписьМаркетплейса, Истина );
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыЦен = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( ПараметрыЗагрузкиЦен, "ВидыЦен", Неопределено );
	ТолькоЗагружаемые = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( ПараметрыЗагрузкиЦен, "ТолькоЗагружаемые", Истина );
	ТолькоПоСтатусуЗагружен = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( ПараметрыЗагрузкиЦен, "ТолькоПоСтатусуЗагружен", Истина );
	ДокументУстановкаЦенНоменклатуры = 
	ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( ПараметрыЗагрузкиЦен, "ДокументУстановкаЦенНоменклатуры", Неопределено );
	
	
	Результат = Новый Соответствие;			
			
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УчетныеЗаписиМаркетплейсов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
			|ГДЕ
			|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
			|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;

		Выгрузка = РезультатЗапроса.Выгрузить();
		УчетныеЗаписиДляЗагрузки = Выгрузка.ВыгрузитьКолонку("Ссылка");
	Иначе
		УчетныеЗаписиДляЗагрузки = Новый Массив;
		УчетныеЗаписиДляЗагрузки.Добавить(УчетнаяЗаписьМаркетплейса);
	КонецЕсли;

	Для Каждого УчетнаяЗаписьМаркетплейса Из УчетныеЗаписиДляЗагрузки Цикл

		НастройкиУчетнойЗаписи = НастройкиУчетнойЗаписиСЗагружаемымиВидамиЦен(УчетнаяЗаписьМаркетплейса, ТолькоЗагружаемые);

		ВидыЦенУстановлены = (ТипЗнч(ВидыЦен) = Тип("Массив"));

		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаВидаЦен Из НастройкиУчетнойЗаписи.ВидыЦен Цикл
		
			Если СтрокаВидаЦен.Значение.Пустая() Тогда
				СтрокиКУдалению.Добавить(СтрокаВидаЦен.Ключ);
			ИначеЕсли ВидыЦенУстановлены И ВидыЦен.Найти(СтрокаВидаЦен.Значение) = Неопределено Тогда
				СтрокиКУдалению.Добавить(СтрокаВидаЦен.Ключ);
			КонецЕсли;
			
		КонецЦикла;

		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			НастройкиУчетнойЗаписи.ВидыЦен.Удалить(СтрокаКУдалению);
		КонецЦикла;

		Если НастройкиУчетнойЗаписи.ВидыЦен.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не установлены виды цен для загрузки.'", ОбщегоНазначения.КодОсновногоЯзыка() );
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,	ТекстОшибки );
				
			ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ТекстОшибки, УчетнаяЗаписьМаркетплейса, Истина );
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
			|	ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК Упаковка
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар) КАК ВидОбъектаМаркетплейса,
			|	СтатусыПубликации.Номенклатура КАК Номенклатура,
			|	СтатусыПубликации.Характеристика КАК Характеристика,
			|	СтатусыПубликации.Упаковка КАК Упаковка,
			|	НЕОПРЕДЕЛЕНО КАК ОбъектПубликации,
			|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
			|	&Валюта КАК Валюта
			|ИЗ
			|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
			|		ПО СтатусыПубликации.Номенклатура = ТаблицаТоваров.Номенклатура
			|			И СтатусыПубликации.Характеристика = ТаблицаТоваров.Характеристика
			|			И СтатусыПубликации.Упаковка = ТаблицаТоваров.Упаковка
			|ГДЕ
			|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
			|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
			|	И СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)
			|	И СтатусыПубликации.ИдентификаторОбъектаМаркетплейса <> """"";

		Если ТаблицаТоваров.Количество() = 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
				|		ПО СтатусыПубликации.Номенклатура = ТаблицаТоваров.Номенклатура
				|			И СтатусыПубликации.Характеристика = ТаблицаТоваров.Характеристика
				|			И СтатусыПубликации.Упаковка = ТаблицаТоваров.Упаковка",
				"");
		КонецЕсли;
		
		Если НЕ ТолькоПоСтатусуЗагружен Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"И СтатусыПубликации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен)",
				"");
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		ВалютаУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ВалютаУчета");
		Запрос.УстановитьПараметр("Валюта", ВалютаУчета);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не обнаружено товаров для загрузки цен по учетной записи <%1>'", 
					ОбщегоНазначения.КодОсновногоЯзыка()), 
				УчетнаяЗаписьМаркетплейса);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,,,
				ТекстСообщения);
			Продолжить;
		КонецЕсли;

		ЛимитПозицийНаИтерацию = 1000;
		ПоследнийИдентификатор = "";

		ПолученныеЦены = СведенияОВыгруженныхДанных();
		ПолученныеЦены.Колонки.Добавить("product_id", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Любой)));
		ПолученныеЦены.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ПолученныеЦены.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		ПолученныеЦены.Колонки.Добавить("Цена", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
		ЦеныДляЗагрузки = ПолученныеЦены.Скопировать();

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ЦеныДляЗагрузки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ИдентификаторЧислом = СтрокаВЧисло(Выборка.ИдентификаторОбъектаМаркетплейса);
			НоваяСтрока.product_id = ИдентификаторЧислом;
			Если ЦеныДляЗагрузки.Количество() = ЛимитПозицийНаИтерацию Тогда
				ЦеныДляЗагрузки.Индексы.Добавить("product_id");
				ПоследнийИдентификатор = ПолучитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ПоследнийИдентификатор, ЦеныДляЗагрузки, ПолученныеЦены, НастройкиУчетнойЗаписи.ВидыЦен);
				ЦеныДляЗагрузки.Очистить();
				ЦеныДляЗагрузки.Индексы.Очистить();
			КонецЕсли;
		КонецЦикла;

		Если ЦеныДляЗагрузки.Количество() > 0 Тогда
			ЦеныДляЗагрузки.Индексы.Добавить("product_id");
			ПолучитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ПоследнийИдентификатор, ЦеныДляЗагрузки, ПолученныеЦены, НастройкиУчетнойЗаписи.ВидыЦен);
		КонецЕсли;

		// Сверка значений цен с текущими в ИБ
		ДатаЗагрузки = ТекущаяДатаСеанса();
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаЦен.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаЦен.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаЦен.Упаковка КАК Справочник.ЕдиницыИзмерения) КАК ЕдиницаИзмерения,
		|	ВЫРАЗИТЬ(ТаблицаЦен.ВидЦены КАК Справочник.ВидыЦен) КАК ВидЦены,
		|	ВЫРАЗИТЬ(ТаблицаЦен.Валюта КАК Справочник.Валюты) КАК Валюта,
		|	ВЫРАЗИТЬ(ТаблицаЦен.Цена КАК ЧИСЛО(31, 2)) КАК Цена
		|ПОМЕСТИТЬ ТаблицаЦен
		|ИЗ
		|	&ТаблицаЦен КАК ТаблицаЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЦенРазличия.Номенклатура КАК Номенклатура,
		|	ТаблицаЦенРазличия.Характеристика КАК Характеристика,
		|	ТаблицаЦенРазличия.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаЦенРазличия.ВидЦены КАК ВидЦены,
		|	ТаблицаЦенРазличия.Валюта КАК Валюта,
		|	ТаблицаЦенРазличия.Цена КАК Цена
		|ИЗ
		|	ТаблицаЦен КАК ТаблицаЦенРазличия
		|ГДЕ
		|	ТаблицаЦенРазличия.Цена <> 0";

		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ТаблицаЦен", ПолученныеЦены);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Продолжить;
		КонецЕсли;

		ТаблицаЦен = РезультатЗапроса.Выгрузить();
		
		// Создание документа установки цен
		ПараметрыЗаписиЦен = Новый Структура;
		ПараметрыЗаписиЦен.Вставить( "ДокументУстановкаЦенНоменклатуры", ДокументУстановкаЦенНоменклатуры );
		ПараметрыЗаписиЦен.Вставить( "Товары", ТаблицаЦен );
		ПараметрыЗаписиЦен.Вставить( "УчетнаяЗапись", УчетнаяЗаписьМаркетплейса );
		ПараметрыЗаписиЦен.Вставить( "Комментарий", "Ozon: Импорт цен" );
		
		ЗаписатьЦеныВДокументУстановкаЦен( ПараметрыЗаписиЦен );
		
		ДокументУстановкаЦенНоменклатуры = ПараметрыЗаписиЦен.ДокументУстановкаЦенНоменклатуры;
		
		ДокументыУстановкаЦенНоменклатуры = Новый Массив;
		ДокументыУстановкаЦенНоменклатуры.Добавить( ДокументУстановкаЦенНоменклатуры );
		Результат.Вставить( УчетнаяЗаписьМаркетплейса, ДокументыУстановкаЦенНоменклатуры );

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьЦеныВДокументУстановкаЦен( Параметры )

	Если ТипЗнч( Параметры ) <> Тип( "Структура" ) Тогда
		ОбщегоНазначения.СообщитьПользователю( "ЗаписатьЦеныВДокументУстановкаЦен: Ошибка: Параметры переданы некорректно." );
		Возврат Ложь;
	КонецЕсли;
	
	Товары = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Параметры, "Товары", Неопределено );
	Если ТипЗнч( Товары ) <> Тип( "ТаблицаЗначений" ) Тогда
		ОбщегоНазначения.СообщитьПользователю( "ЗаписатьЦеныВДокументУстановкаЦен: Ошибка: Товары не заполнены." );
		Возврат Ложь;
	КонецЕсли;
	
	УчетнаяЗапись = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Параметры, "УчетнаяЗапись", Неопределено );
	
	ДокументУстановкаЦенНоменклатуры = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Параметры, 
	"ДокументУстановкаЦенНоменклатуры", Неопределено );
	Комментарий = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Параметры, "Комментарий", "" );
	
	Если ТипЗнч( ДокументУстановкаЦенНоменклатуры ) = Тип( "ДокументСсылка.УстановкаЦенНоменклатуры" )
	И Не ДокументУстановкаЦенНоменклатуры.Пустая() Тогда
		ДокументУстановкаЦенНоменклатурыОбъект = ДокументУстановкаЦенНоменклатуры.ПолучитьОбъект();
	Иначе
		ДокументУстановкаЦенНоменклатурыОбъект = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		
		ДокументУстановкаЦенНоменклатурыОбъект.Дата = ТекущаяДатаСеанса();
		ДокументУстановкаЦенНоменклатурыОбъект.Автор = Пользователи.АвторизованныйПользователь();

		ДокументУстановкаЦенНоменклатурыОбъект.ПоказыватьДействующуюЦену = Истина;
		ДокументУстановкаЦенНоменклатурыОбъект.ПоказыватьЕдиницыИзмерения = Истина;
		ДокументУстановкаЦенНоменклатурыОбъект.ПоказыватьХарактеристики = Истина;
		ДокументУстановкаЦенНоменклатурыОбъект.ПоказыватьОтклонениеЦен = Истина;
		ДокументУстановкаЦенНоменклатурыОбъект.ПоказыватьНовуюЦену = Истина;
	КонецЕсли;
	
	Если СтрНайти( ДокументУстановкаЦенНоменклатурыОбъект.Комментарий, Комментарий ) = 0 Тогда
		ДокументУстановкаЦенНоменклатурыОбъект.Комментарий = Комментарий 
		+ ?( ПустаяСтрока( ДокументУстановкаЦенНоменклатурыОбъект.Комментарий ), "", Символы.ПС )
		+ ДокументУстановкаЦенНоменклатурыОбъект.Комментарий;
	КонецЕсли;

	ЗаписатьДокумент = Ложь;
	
	ТЧЗапасы = ДокументУстановкаЦенНоменклатурыОбъект.Запасы;
	Отбор = Новый Структура( "Номенклатура, Характеристика, ЕдиницаИзмерения, ВидЦены, Валюта" );
	Для Каждого ТоварыСтрока Из Товары Цикл
	
		Отбор.Номенклатура = ТоварыСтрока.Номенклатура;
		Отбор.Характеристика = ТоварыСтрока.Характеристика;
		Отбор.ЕдиницаИзмерения = ТоварыСтрока.ЕдиницаИзмерения;
		Отбор.ВидЦены = ТоварыСтрока.ВидЦены;
		Отбор.Валюта = ТоварыСтрока.Валюта;
		
		ТЧЗапасыСтроки = ТЧЗапасы.НайтиСтроки( Отбор );
		Если ТЧЗапасыСтроки.Количество() = 0 Тогда
		
			ТЧЗапасыСтрока = ТЧЗапасы.Добавить();
			
			ТЧЗапасыСтрока.Номенклатура = ТоварыСтрока.Номенклатура;
			ТЧЗапасыСтрока.Характеристика = ТоварыСтрока.Характеристика;
			ТЧЗапасыСтрока.ЕдиницаИзмерения = ТоварыСтрока.ЕдиницаИзмерения;
			ТЧЗапасыСтрока.ВидЦены = ТоварыСтрока.ВидЦены;
			ТЧЗапасыСтрока.Валюта = ТоварыСтрока.Валюта;
			
		Иначе
			ТЧЗапасыСтрока = ТЧЗапасыСтроки[ 0 ];
		КонецЕсли;
		
		Если ТЧЗапасыСтрока.Цена <> ТоварыСтрока.Цена Тогда
			ТЧЗапасыСтрока.Цена = ТоварыСтрока.Цена;
			ЗаписатьДокумент = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаписатьДокумент = Истина Тогда
		ДокументУстановкаЦенНоменклатурыОбъект.Записать( РежимЗаписиДокумента.Проведение );
		ЛогКомментарий = "Заполнен и записан документ: " + ДокументУстановкаЦенНоменклатурыОбъект;
		
		ОбщегоНазначения.СообщитьПользователю( ЛогКомментарий );
		
		ЛогПараметры = Новый Структура( "ДанныеСсылка", ДокументУстановкаЦенНоменклатурыОбъект.Ссылка );
		ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись, , ЛогПараметры );
		
	КонецЕсли;

	Параметры.Вставить( "ДокументУстановкаЦенНоменклатуры", ДокументУстановкаЦенНоменклатурыОбъект.Ссылка );
	Параметры.Вставить( "ДокументУстановкаЦенНоменклатурыЗаписан", ЗаписатьДокумент );
	
	Возврат Истина;
КонецФункции

// Получает текущие цены из учетной системы по указанным идентификаторам публикации.
//
// Параметры:
// 	 УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Идентификаторы            - Массив Из Строка - список внутренних идентификаторов товара в системе продавца или список идентификаторов 
//                                 товаров на маркетплейсе.

// Возвращаемое значение:
//   ТаблицаЗначений - цены товаров из учетной системы:
//     * УчетнаяЗаписьМаркетплейса        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//	   * Номенклатура					  - СправочникСсылка.Номенклатура - номенклатура;
//	   * Характеристика					  - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры;
//	   * Упаковка 						  - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка;
//     * ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца;
//     * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе;
//     * ВидЦены                          - СправочникСсылка.ВидыЦен - вид цены товара;
//     * Цена                             - Число - значение цены товара.
//
Функция ПолучитьТекущиеЦеныПоИдентификаторам(УчетнаяЗаписьМаркетплейса, Идентификаторы, ИмяИдентификатора = "") Экспорт
	
	Если Идентификаторы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиУчетнойЗаписи = НастройкиУчетнойЗаписиСЗагружаемымиВидамиЦен(УчетнаяЗаписьМаркетплейса, Ложь);
	ВидыЦен = Новый Массив;
	
	Для Каждого КлючЗначение Из НастройкиУчетнойЗаписи.ВидыЦен Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение) 
			 И ВидыЦен.Найти(КлючЗначение.Значение) = Неопределено Тогда
			ВидыЦен.Добавить(КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидыЦен.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапросТекст = 
		"ВЫБРАТЬ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	СтатусыПубликации.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
		|	СтатусыПубликации.Номенклатура КАК Номенклатура,
		|	СтатусыПубликации.Характеристика КАК Характеристика,
		|	СтатусыПубликации.Упаковка КАК Упаковка,
		|	СтатусыПубликации.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	СтатусыПубликации.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ВидыЦен.Ссылка КАК ВидЦены
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
		|		ПО (ВидыЦен.Ссылка В (&ВидыЦен))
		|ГДЕ
		|	СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар)
		|	И &УсловиеИдентификаторы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТоваров.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаТоваров.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаТоваров.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.ЕдиницаИзмерения КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦен КАК ВидЦены,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / ЕСТЬNULL(ЦеныНоменклатуры.ЕдиницаИзмерения.Коэффициент, 1) КАК Цена
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&ДатаЦен, ДЕНЬ),
		|			(ВидЦен, Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					Товары.ВидЦены,
		|					Товары.Номенклатура,
		|					Товары.Характеристика
		|				ИЗ
		|					ТаблицаТоваров КАК Товары)) КАК ЦеныНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправНоменклатура
		|		ПО ЦеныНоменклатуры.Номенклатура = СправНоменклатура.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
		|		ПО (ТаблицаТоваров.Номенклатура = ЦеныНоменклатуры.Номенклатура)
		|			И (ТаблицаТоваров.Характеристика = ЦеныНоменклатуры.Характеристика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ЦеныНоменклатуры.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ЦеныНоменклатуры.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатуры.Цена КАК Цена
		|ИЗ
		|	ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныНоменклатуры";
	
	Если ПустаяСтрока( ИмяИдентификатора ) Или ВРЕГ( ИмяИдентификатора ) = ВРЕГ( "ИдентификаторОбъектаМаркетплейса" ) Тогда
		ЗапросТекст = СтрЗаменить( ЗапросТекст, "&УсловиеИдентификаторы", "СтатусыПубликации.ИдентификаторОбъектаМаркетплейса В(&Идентификаторы)" );
	Иначе
	    ЗапросТекст = СтрЗаменить( ЗапросТекст, "&УсловиеИдентификаторы", "СтатусыПубликации.ИдентификаторПубликации В(&Идентификаторы)" );
	КонецЕсли;

	Запрос = Новый Запрос( ЗапросТекст );
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("Идентификаторы",            Идентификаторы);
	Запрос.УстановитьПараметр("ВидыЦен",   				   ВидыЦен);
	Запрос.УстановитьПараметр("ВидЦеныДоСкидок", 		   НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныДоСкидок);
	Запрос.УстановитьПараметр("ВидЦеныСУчетомСкидок",	   НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныСУчетомСкидок);
	Запрос.УстановитьПараметр("ВидЦеныМинимальныхЦен", 	   НастройкиУчетнойЗаписи.ВидыЦен.ВидЦеныМинимальныхЦен);
	Запрос.УстановитьПараметр("ДатаЦен", 				   ТекущаяДатаСеанса());
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.Индексы.Добавить( "ИдентификаторПубликации" );
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПорциюЦен(УчетнаяЗаписьМаркетплейса, ПоследнийИдентификатор, ЦеныДляВыгрузки, ПолученныеЦены, ВидыЦен)

	Фильтр = Новый Структура("offer_id, product_id, visibility", Новый Массив, Новый Массив, "ALL");
	ДанныеИтерации = Новый Структура("filter, last_id, limit", Фильтр, "", 1000);
	ДанныеИтерации.last_id = ПоследнийИдентификатор;
	ДанныеИтерации.filter.Вставить("product_id", ЦеныДляВыгрузки.ВыгрузитьКолонку("product_id"));

	ТекстЗапроса = "/v4/product/info/prices";
	РезультатЗапроса = ВыполнитьЗапросКСервису(ТекстЗапроса, ДанныеИтерации, УчетнаяЗаписьМаркетплейса, Истина);
	Если РезультатЗапроса = Неопределено Тогда
		Возврат "";
	Иначе
		Для каждого ЭлементРезультата Из РезультатЗапроса["result"]["items"] Цикл
			СтруктураПоиска = Новый Структура("product_id", ЭлементРезультата["product_id"]);
			РезультатПоиска = ЦеныДляВыгрузки.НайтиСтроки(СтруктураПоиска);
			Если РезультатПоиска.Количество() <> 1 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРезультатаПоиска = РезультатПоиска[0];
			Для каждого ВидЦены Из ВидыЦен Цикл
				Попытка
					Если ВидЦены.Ключ = "ВидЦеныСАкциямиПродавца" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныСАкциямиПродавца;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["marketing_seller_price"];
					ИначеЕсли ВидЦены.Ключ = "ВидЦеныРекомендованный" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныРекомендованный;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["recommended_price"];
					ИначеЕсли ВидЦены.Ключ = "ВидЦеныПоставщика" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныПоставщика;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["retail_price"];
					ИначеЕсли ВидЦены.Ключ = "ВидЦеныСоВсемиАкциями" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныСоВсемиАкциями;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["marketing_price"];
					ИначеЕсли ВидЦены.Ключ = "ВидЦеныДоСкидок" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныДоСкидок;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["old_price"];
					ИначеЕсли ВидЦены.Ключ = "ВидЦеныМинимальныхЦен" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныМинимальныхЦен;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["min_price"];
					ИначеЕсли ВидЦены.Ключ = "ВидЦеныСУчетомСкидок" Тогда
						НоваяСтрока = ПолученныеЦены.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатаПоиска);
						НоваяСтрока.ВидЦены = ВидыЦен.ВидЦеныСУчетомСкидок;
						НоваяСтрока.Цена = ЭлементРезультата["price"]["price"];
					КонецЕсли;
					
				Исключение
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось получить значение для вида цены %1.'", 
							ОбщегоНазначения.КодОсновногоЯзыка()), 
						ВидЦены);
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
						УровеньЖурналаРегистрации.Ошибка,,, 
						ТекстОшибки);
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Возврат РезультатЗапроса["result"]["last_id"];

КонецФункции

// Конструктор структуры дополнительных параметров процедуры импорта данных с торговой площадки.
// 
// Возвращаемое значение:
//   Структура - список параметров:
//     * ИмяИдентификатора              - Строка - имя ключевого поля идентификаторов. Может принимать значения:
//                                          "ИдентификаторОбъектаМаркетплейса" и "ИдентификаторПубликации"; 
//     * РазмерПорцииЗагрузкиДанных     - Число - размер порции загрузки данных с торговой площадки за один запрос;
//                                      - Неопределено - размер порции для загрузки не ограничен;
//     * СоздатьЭлементыНоменклатуры    - Булево - Истина, если несопоставленные элементы справочника "Номенклатура" необходимо создать;
//     * СортироватьСтрокиДереваТоваров - Булево - Истина, если после загрузки требуется отсортировать строки второго уровня дерева товаров.
//
Функция НовыеДополнительныеПараметрыИмпортаДанных() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяИдентификатора",              "ИдентификаторОбъектаМаркетплейса");
	Результат.Вставить("РазмерПорцииЗагрузкиДанных",     100);
	Результат.Вставить("СоздатьЭлементыНоменклатуры",    Ложь);
	
	Результат.Вставить("СортироватьСтрокиДереваТоваров", Истина);
	
	Возврат Результат;
	
КонецФункции

// Определяет категорию-источник, для которой выполнены настройки сопоставления.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Категория1С               - СправочникСсылка.ВидыНоменклатуры
//					           - СправочникСсылка.Номенклатура
//					           - СправочникСсылка.ТоварныеКатегории - категория, для которой нужно получить категорию-источник.
//   БлижайшийРодитель         - Булево - признак определения только по ближайшему родителю (Истина) или с учетом текущей категории (Ложь).
//
// Возвращаемое значение:
//   Структура - данные об источнике категории:
//     * ИсточникКатегорииМаркетплейса               - СправочникСсылка.ВидыНоменклатуры, СправочникСсылка.Номенклатура, СправочникСсылка.ТоварныеКатегории - источник категории;
//                                                   - Неопределено - источник категории не найден;
//     * ИдентификаторИсточникаКатегорииМаркетплейса - Строка - идентификатор источника категории;
//     * НаименованиеИсточникаКатегорииМаркетплейса  - Строка - наименование источника категории.
//
Функция ПолучитьТекущийИсточникКатегорииМаркетплейса(УчетнаяЗаписьМаркетплейса, Категория1С, БлижайшийРодитель = Истина) Экспорт

	ДанныеИсточникаКатегорииМаркетплейса = Новый Структура;
	ДанныеИсточникаКатегорииМаркетплейса.Вставить("ИсточникКатегорииМаркетплейса",               Неопределено);
	ДанныеИсточникаКатегорииМаркетплейса.Вставить("ИдентификаторИсточникаКатегорииМаркетплейса", "");
	ДанныеИсточникаКатегорииМаркетплейса.Вставить("НаименованиеИсточникаКатегорииМаркетплейса",  "");

	Если ЗначениеЗаполнено(Категория1С) Тогда
		ИсточникКатегории = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ИсточникКатегории");
		МассивКатегорий = Новый Массив;
		МассивКатегорий.Добавить(Категория1С);

		ВыборкаДанных = ВыборкаИсточникаКатегорииМаркетплейса(МассивКатегорий, ИсточникКатегории, УчетнаяЗаписьМаркетплейса, БлижайшийРодитель, Ложь);

		Если ВыборкаДанных.Следующий() Тогда
			ДанныеИсточникаКатегорииМаркетплейса.ИсточникКатегорииМаркетплейса               = ВыборкаДанных.РодительКатегории1С;
			ДанныеИсточникаКатегорииМаркетплейса.ИдентификаторИсточникаКатегорииМаркетплейса = ВыборкаДанных.ИдентификаторОбъектаМаркетплейса;
			ДанныеИсточникаКатегорииМаркетплейса.НаименованиеИсточникаКатегорииМаркетплейса  = ВыборкаДанных.НаименованиеОбъектаМаркетплейса;
		КонецЕсли;
	КонецЕсли;

	Возврат ДанныеИсточникаКатегорииМаркетплейса;

КонецФункции

// Определяет текущую сопоставленную категорию для указанного идентификатора категории маркетплейса.
//
// Параметры:                                                                   
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ИсточникКатегории         - СправочникСсылка.ВидыНоменклатуры, СправочникСсылка.Номенклатура, СправочникСсылка.ТоварныеКатегории -
//                                  искомый источник категории 1С.
//   ИдентификаторКатегории    - Строка - идентификатор категория маркетплейса, для которого требуется найти сопоставление.
//
// Возвращаемое значение:
//   Неопределено             - сопоставление категорий не найдено.
//   Структура                - результат поиска категории:
//     * Категория              - СправочникСсылка.ВидыНоменклатуры, СправочникСсылка.Номенклатура, СправочникСсылка.ТоварныеКатегории -
//                                  подобранная категория 1С;
//     * ИдентификаторКатегории - Строка - идентификатор сопоставленной категории маркетплейса;
//     * НаименованиеКатегории  - Строка - наименование сопоставленной категории маркетплейса.
//
Функция ОпределитьТекущуюСопоставленнуюКатегориюМаркетплейсаПоИдентификатору(УчетнаяЗаписьМаркетплейса, ИсточникКатегории, ИдентификаторКатегории) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Категория",              Неопределено);
	Результат.Вставить("ИдентификаторКатегории", "");
	Результат.Вставить("НаименованиеКатегории",  "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствияОбъектовМаркетплейсов.Объект1С КАК Категория,
		|	СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторКатегории,
		|	СоответствияОбъектовМаркетплейсов.НаименованиеОбъектаМаркетплейса КАК НаименованиеКатегории
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектовМаркетплейсов
		|ГДЕ
		|	СоответствияОбъектовМаркетплейсов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СоответствияОбъектовМаркетплейсов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.КатегорияТоваров)
		|	И СоответствияОбъектовМаркетплейсов.Объект1С = &Объект1С
		|	И СоответствияОбъектовМаркетплейсов.ИдентификаторОбъектаМаркетплейса = &ИдентификаторОбъектаМаркетплейса";

	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса",        УчетнаяЗаписьМаркетплейса);
	Запрос.УстановитьПараметр("Объект1С",                         ИсточникКатегории);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаМаркетплейса", ИдентификаторКатегории);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Возврат Результат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Неопределено;

КонецФункции

Функция ИдентификаторАтрибутаМаркетплейсаАртикул()
	Возврат "9024";	
КонецФункции

Функция ИдентификаторАтрибутаМаркетплейсаНаименование()
	Возврат "4180";
КонецФункции

// Выполняет поиск номенклатуры, характеристик, упаковок, категорий для указанных товарных позиций из сервиса Ozon одним запросом.
//
// Параметры:                                                                   
//   Идентификаторы               - Массив Из Строка - список идентификаторов (внутренних публикации или внешних Ozon) товарных позиций, 
//                                    для которых выполняется поиск;
//                                - Строка - идентификатор (внутренний или внешний) публикации товарной позиции, для которой выполняется поиск.
//   ИмяИдентификатора            - Строка - имя поля идентификатора в анализируемых данных.
//   ОписаниеТоваров              - ТаблицаЗначений - описания товаров из сервиса, 
//                                    см. НоваяТаблицаОписанияТоваров.
//   ОписаниеХарактеристикТоваров - ТаблицаЗначений - значения реквизитов товара из сервиса, 
//                                    см. НоваяТаблицаОписанияХарактеристикТоваров.
//   ПараметрыРасчетаСтавкиНДС    - Структура - параметры определения ставок НДС по номенклатуре:
//     * НалогообложениеНДС         - ПеречислениеСсылка.ТипыНалогообложенияНДС - тип налогообложения НДС;
//     * Организация                - СправочникСсылка.Организации - организация;
//     * Дата                       - Дата - период определения ставок НДС.
//   РазделителиСловПоиска        - Строка - перечень символов-разделителей для поиска по частям наименований.
//   ПоискПоХарактеристикам       - Булево - Истина, если выполнять поиск характеристик номенклатуры по частям наименования.
//
// Возвращаемое значение:
//   Структура - результат выполнения функции:
//     * ОсновныеСправочники               - ВыборкаИзРезультатаЗапроса - результат поиска номенклатуры, характеристик, упаковки:
//       ** УчетнаяЗаписьМаркетплейса        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//       ** ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца;
//       ** ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе;
//       ** ВариантПоиска                    - Число - вариант поиска (-1 - не найдено; 0 - неоднозначный поиск; 1, 2 - по штрихкоду; 3, 4 - по 
//                                               артикулу; 5 - по идентификаторам из сервиса Ozon; 6 - по наименованию; 10 и более - по словам 
//                                               наименований; для поиска по номенклатуре контрагентов добавляется 0.1);
//       ** ОднозначныйПоиск                 - Булево - признак однозначных требований к результатам поиска;
//       ** Номенклатура                     - СправочникСсылка.Номенклатура - найденная номенклатура;
//       ** ХарактеристикиИспользуются       - Булево - признак использования характеристик номенклатуры;
//       ** Характеристика                   - СправочникСсылка.ХарактеристикиНоменклатуры - найденная характеристика;
//       ** ИспользоватьУпаковки             - Булево - признак использования упаковок номенклатуры;
//       ** Упаковка                         - СправочникСсылка.УпаковкиЕдиницыИзмерения - найденная упаковка;
//       ** ЕдиницаИзмерения                 - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица хранения номенклатуры;
//                                           - Неопределено - категория не найдена;
//       ** СтавкаНДС                        - СправочникСсылка.СтавкиНДС - ставка НДС номенклатуры;
//       ** Ставка                           - Число - ставка НДС номенклатуры.
//       ** Категория                        - СправочникСсылка.ВидыНоменклатуры, СправочникСсылка.Номенклатура, СправочникСсылка.ТоварныеКатегории -
//                                               начальная категория 1С для определения.
//     * Категории                         - Массив Из СправочникСсылка.ВидыНоменклатуры
//                                         - Массив Из СправочникСсылка.Номенклатура
//                                         - Массив Из СправочникСсылка.ТоварныеКатегории - категории, для которых нужно получить категорию-источник.
//
Функция НайтиНоменклатурыХарактеристикиУпаковки(Знач Идентификаторы, Знач ИмяИдентификатора, 
			ОписаниеТоваров, ОписаниеХарактеристикТоваров, ПараметрыРасчетаСтавкиНДС,
			РазделителиСловПоиска = Неопределено, ПоискПоХарактеристикам = Ложь) Экспорт
			
	Результат = Новый Структура;
	Результат.Вставить("ОсновныеСправочники", Неопределено);
	Результат.Вставить("Категории",           Неопределено);
		
	Если ТипЗнч(Идентификаторы) = Тип("Строка") Тогда
		Идентификаторы = СтрРазделить(Идентификаторы, Символы.ПС, Ложь);
	КонецЕсли;
	Если Идентификаторы.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	Если НЕ ИспользоватьХарактеристикиНоменклатуры Тогда
		ПоискПоХарактеристикам = Ложь;
	КонецЕсли;
	
	ТаблицаПоиска = НоваяТаблицаПоискаНоменклатурыХарактеристикиУпаковки();
	
	Для каждого СтрокаТаблицыЗначений Из ОписаниеТоваров Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗначений[ИмяИдентификатора]) Тогда
			Продолжить;
		КонецЕсли;
		Если Идентификаторы.Найти(СтрокаТаблицыЗначений[ИмяИдентификатора]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Поиск по штрихкоду
		Для каждого ЭлементКоллекции Из СтрРазделить(СтрокаТаблицыЗначений.Штрихкод, ";", Ложь) Цикл
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 1;
			НоваяСтрока.ЗначениеПоиска                   = СокрЛП(ЭлементКоллекции);
			НоваяСтрока.ПоискХарактеристики              = Ложь;
		КонецЦикла;
		
		// Поиск по артикулу как штрихкоду
		НоваяСтрока                                  = ТаблицаПоиска.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
		НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
		НоваяСтрока.ВариантПоиска                    = 2;
		НоваяСтрока.ЗначениеПоиска                   = СтрокаТаблицыЗначений.ИдентификаторПубликации;
		НоваяСтрока.ПоискХарактеристики              = Ложь;
		
		// Поиск по артикулу
		НоваяСтрока                                  = ТаблицаПоиска.Добавить();
		НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
		НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
		НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
		НоваяСтрока.ВариантПоиска                    = 4;
		НоваяСтрока.ЗначениеПоиска                   = СтрокаТаблицыЗначений.ИдентификаторПубликации;
		НоваяСтрока.ПоискХарактеристики              = Ложь;
		
		// Поиск по идентификатору контрагента
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса) Тогда
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 5;
			НоваяСтрока.ЗначениеПоиска                   = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ПоискХарактеристики              = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ИдентификаторFBOSKU) Тогда
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 5;
			НоваяСтрока.ЗначениеПоиска                   = СтрокаТаблицыЗначений.ИдентификаторFBOSKU;
			НоваяСтрока.ПоискХарактеристики              = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ИдентификаторFBSSKU) Тогда
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 5;
			НоваяСтрока.ЗначениеПоиска                   = СтрокаТаблицыЗначений.ИдентификаторFBSSKU;
			НоваяСтрока.ПоискХарактеристики              = Ложь;
		КонецЕсли;
		
		// Поиск по наименованию
		Если ЗначениеЗаполнено(СтрокаТаблицыЗначений.ПредставлениеОбъектаМаркетплейса) Тогда
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 6;
			НоваяСтрока.ЗначениеПоиска                   = СтрокаТаблицыЗначений.ПредставлениеОбъектаМаркетплейса;
			НоваяСтрока.ПоискХарактеристики              = Ложь;
			
			Наименование         = СтрокаТаблицыЗначений.ПредставлениеОбъектаМаркетплейса;
			НаименованияПоСловам = Новый Массив;
			НомераВхождений      = Новый Соответствие;
			КоллекцияЭлементов   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Наименование, РазделителиСловПоиска);
			
			Для каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
				НомерВхождения = НомераВхождений.Получить(ЭлементКоллекции);
				Если НомерВхождения = Неопределено Тогда
					НомерВхождения = 0;
				КонецЕсли;
				НомерВхождения = НомерВхождения + 1;
				
				НаименованияПоСловам.Вставить(0, Сред(Наименование, 1, СтрНайти(Наименование, ЭлементКоллекции,,, НомерВхождения) - 1) + ЭлементКоллекции);
				НомераВхождений.Вставить(ЭлементКоллекции, НомерВхождения);
			КонецЦикла;
			
			Индекс = 0;
			Пока Индекс < НаименованияПоСловам.Количество() Цикл
				НоваяСтрока                                  = ТаблицаПоиска.Добавить();
				НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
				НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
				НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
				НоваяСтрока.ВариантПоиска                    = 10 + Индекс;
				НоваяСтрока.ЗначениеПоиска                   = НаименованияПоСловам[Индекс];
				НоваяСтрока.ПоискХарактеристики              = Ложь;
				
				Если ЗначениеЗаполнено(НаименованияПоСловам[Индекс]) 
					 И ПоискПоХарактеристикам Тогда
					Для каждого ЭлементКоллекции Из НаименованияПоСловам Цикл
						Если СтрНайти(ЭлементКоллекции, НаименованияПоСловам[Индекс]) = 1 Тогда
							Наименование = СтрЗаменить(ЭлементКоллекции, НаименованияПоСловам[Индекс], "");
							
							Если ЗначениеЗаполнено(Наименование) Тогда
								НоваяСтрока                                  = ТаблицаПоиска.Добавить();
								НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
								НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
								НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
								НоваяСтрока.ВариантПоиска                    = 10 + Индекс;
								НоваяСтрока.ЗначениеПоиска                   = Наименование;
								НоваяСтрока.ПоискХарактеристики              = Истина;
								
								Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола(Наименование, 1), РазделителиСловПоиска) Тогда
									НоваяСтрока                                  = ТаблицаПоиска.Добавить();
									НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
									НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
									НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
									НоваяСтрока.ВариантПоиска                    = 10 + Индекс;
									НоваяСтрока.ЗначениеПоиска                   = Сред(Наименование, 2);
									НоваяСтрока.ПоискХарактеристики              = Истина;
									
									НоваяСтрока                                  = ТаблицаПоиска.Добавить();
									НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
									НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
									НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
									НоваяСтрока.ВариантПоиска                    = 10 + Индекс;
									НоваяСтрока.ЗначениеПоиска                   = СокрЛП(Сред(Наименование, 2));
									НоваяСтрока.ПоискХарактеристики              = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТаблицыЗначений Из ОписаниеХарактеристикТоваров Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗначений[ИмяИдентификатора]) Тогда
			Продолжить;
		КонецЕсли;
		Если Идентификаторы.Найти(СтрокаТаблицыЗначений[ИмяИдентификатора]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Поиск по артикулу
		НайденныеСтроки = СтрокаТаблицыЗначений.ЗначенияАтрибутов.НайтиСтроки(Новый Структура("ИдентификаторАтрибутаМаркетплейса", ИдентификаторАтрибутаМаркетплейсаАртикул() ));
		Если НайденныеСтроки.Количество() > 0 
			 И ЗначениеЗаполнено(НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса) Тогда
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 3;
			НоваяСтрока.ЗначениеПоиска                   = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
			НоваяСтрока.ПоискХарактеристики              = Ложь;
		КонецЕсли;
		
		// Поиск по наименованию
		НайденныеСтроки = СтрокаТаблицыЗначений.ЗначенияАтрибутов.НайтиСтроки(Новый Структура("ИдентификаторАтрибутаМаркетплейса", ИдентификаторАтрибутаМаркетплейсаНаименование() ));
		Если НайденныеСтроки.Количество() > 0 
			 И ЗначениеЗаполнено(НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса) Тогда
			НоваяСтрока                                  = ТаблицаПоиска.Добавить();
			НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
			НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
			НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
			НоваяСтрока.ВариантПоиска                    = 6;
			НоваяСтрока.ЗначениеПоиска                   = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
			НоваяСтрока.ПоискХарактеристики              = Ложь;
			
			Наименование         = НайденныеСтроки[0].ЗначениеАтрибутаМаркетплейса;
			НаименованияПоСловам = Новый Массив;
			НомераВхождений      = Новый Соответствие;
			КоллекцияЭлементов   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Наименование, РазделителиСловПоиска);
			
			Для каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
				НомерВхождения = НомераВхождений.Получить(ЭлементКоллекции);
				Если НомерВхождения = Неопределено Тогда
					НомерВхождения = 0;
				КонецЕсли;
				НомерВхождения = НомерВхождения + 1;
				
				НаименованияПоСловам.Вставить(0, Сред(Наименование, 1, СтрНайти(Наименование, ЭлементКоллекции,,, НомерВхождения) - 1) + ЭлементКоллекции);
				НомераВхождений.Вставить(ЭлементКоллекции, НомерВхождения);
			КонецЦикла;
			
			Индекс = 0;
			Пока Индекс < НаименованияПоСловам.Количество() Цикл
				НоваяСтрока                                  = ТаблицаПоиска.Добавить();
				НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
				НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
				НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
				НоваяСтрока.ВариантПоиска                    = 20 + Индекс;
				НоваяСтрока.ЗначениеПоиска                   = НаименованияПоСловам[Индекс];
				НоваяСтрока.ПоискХарактеристики              = Ложь;
				
				Если ЗначениеЗаполнено(НаименованияПоСловам[Индекс]) 
					 И ПоискПоХарактеристикам Тогда
					Для каждого ЭлементКоллекции Из НаименованияПоСловам Цикл
						Если СтрНайти(ЭлементКоллекции, НаименованияПоСловам[Индекс]) = 1 Тогда
							Наименование = СтрЗаменить(ЭлементКоллекции, НаименованияПоСловам[Индекс], "");
							
							Если ЗначениеЗаполнено(Наименование) Тогда
								НоваяСтрока                                  = ТаблицаПоиска.Добавить();
								НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
								НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
								НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
								НоваяСтрока.ВариантПоиска                    = 20 + Индекс;
								НоваяСтрока.ЗначениеПоиска                   = Наименование;
								НоваяСтрока.ПоискХарактеристики              = Истина;
								
								Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола(Наименование, 1), РазделителиСловПоиска) Тогда
									НоваяСтрока                                  = ТаблицаПоиска.Добавить();
									НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
									НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
									НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
									НоваяСтрока.ВариантПоиска                    = 20 + Индекс;
									НоваяСтрока.ЗначениеПоиска                   = Сред(Наименование, 2);
									НоваяСтрока.ПоискХарактеристики              = Истина;
									
									НоваяСтрока                                  = ТаблицаПоиска.Добавить();
									НоваяСтрока.УчетнаяЗаписьМаркетплейса        = СтрокаТаблицыЗначений.УчетнаяЗаписьМаркетплейса;
									НоваяСтрока.ИдентификаторПубликации          = СтрокаТаблицыЗначений.ИдентификаторПубликации;
									НоваяСтрока.ИдентификаторОбъектаМаркетплейса = СтрокаТаблицыЗначений.ИдентификаторОбъектаМаркетплейса;
									НоваяСтрока.ВариантПоиска                    = 20 + Индекс;
									НоваяСтрока.ЗначениеПоиска                   = СокрЛП(Сред(Наименование, 2));
									НоваяСтрока.ПоискХарактеристики              = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаПоиска.УчетнаяЗаписьМаркетплейса КАК Справочник.УчетныеЗаписиМаркетплейсов) КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ВЫРАЗИТЬ(ТаблицаПоиска.ВариантПоиска КАК ЧИСЛО(5, 1)) КАК ВариантПоиска,
		|	ТаблицаПоиска.ЗначениеПоиска КАК ЗначениеПоиска,
		|	ТаблицаПоиска.ПоискХарактеристики КАК ПоискХарактеристики
		|ПОМЕСТИТЬ ТаблицаПоиска
		|ИЗ
		|	&ТаблицаПоиска КАК ТаблицаПоиска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВариантПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Владелец КАК Владелец,
		|	ТаблицаПоиска.ВариантПоиска КАК ВариантПоиска,
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ПОМЕСТИТЬ ХарактеристикиНоменклатуры
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (&ПоискПоХарактеристикам)
		|			И (ТаблицаПоиска.ВариантПоиска >= 10)
		|			И (ТаблицаПоиска.ПоискХарактеристики)
		|			И ТаблицаПоиска.ЗначениеПоиска = ХарактеристикиНоменклатуры.Наименование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Владелец,
		|	ВариантПоиска,
		|	УчетнаяЗаписьМаркетплейса,
		|	ИдентификаторПубликации,
		|	ИдентификаторОбъектаМаркетплейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска КАК ВариантПоиска,
		|	ИСТИНА КАК ОднозначныйПоиск,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения КАК Упаковка
		|ПОМЕСТИТЬ ВложенныйЗапрос
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО (ТаблицаПоиска.ВариантПоиска = 1
		|				ИЛИ ТаблицаПоиска.ВариантПоиска = 2)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И ТаблицаПоиска.ЗначениеПоиска = ШтрихкодыНоменклатуры.Штрихкод
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска,
		|	ЛОЖЬ,
		|	Номенклатура.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	Номенклатура.ЕдиницаИзмерения
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (ТаблицаПоиска.ВариантПоиска = 3
		|				ИЛИ ТаблицаПоиска.ВариантПоиска = 4)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И (НЕ Номенклатура.ЭтоГруппа)
		|			И ТаблицаПоиска.ЗначениеПоиска = Номенклатура.Артикул
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска + 0.1,
		|	ЛОЖЬ,
		|	НоменклатураКонтрагентов.Номенклатура,
		|	НоменклатураКонтрагентов.Характеристика,
		|	НоменклатураКонтрагентов.Упаковка
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|		ПО (ТаблицаПоиска.ВариантПоиска = 3
		|				ИЛИ ТаблицаПоиска.ВариантПоиска = 4)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И (НЕ НоменклатураКонтрагентов.ЭтоГруппа)
		|			И ТаблицаПоиска.ЗначениеПоиска = НоменклатураКонтрагентов.Артикул
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска + 0.1,
		|	ЛОЖЬ,
		|	НоменклатураКонтрагентов.Номенклатура,
		|	НоменклатураКонтрагентов.Характеристика,
		|	НоменклатураКонтрагентов.Упаковка
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|		ПО (ТаблицаПоиска.ВариантПоиска = 5)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И (НЕ НоменклатураКонтрагентов.ЭтоГруппа)
		|			И ТаблицаПоиска.ЗначениеПоиска = НоменклатураКонтрагентов.Идентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска,
		|	ЛОЖЬ,
		|	Номенклатура.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	Номенклатура.ЕдиницаИзмерения
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (ТаблицаПоиска.ВариантПоиска = 6)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И (НЕ Номенклатура.ЭтоГруппа)
		|			И ТаблицаПоиска.ЗначениеПоиска = Номенклатура.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска + 0.1,
		|	ЛОЖЬ,
		|	НоменклатураКонтрагентов.Номенклатура,
		|	НоменклатураКонтрагентов.Характеристика,
		|	НоменклатураКонтрагентов.Упаковка
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|		ПО (ТаблицаПоиска.ВариантПоиска = 6)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И (НЕ НоменклатураКонтрагентов.ЭтоГруппа)
		|			И ТаблицаПоиска.ЗначениеПоиска = НоменклатураКонтрагентов.Наименование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПоиска.УчетнаяЗаписьМаркетплейса,
		|	ТаблицаПоиска.ИдентификаторПубликации,
		|	ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса,
		|	ТаблицаПоиска.ВариантПоиска,
		|	ЛОЖЬ,
		|	Номенклатура.Ссылка,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
		|	Номенклатура.ЕдиницаИзмерения
		|ИЗ
		|	ТаблицаПоиска КАК ТаблицаПоиска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (ТаблицаПоиска.ВариантПоиска >= 10)
		|			И (НЕ ТаблицаПоиска.ПоискХарактеристики)
		|			И (НЕ Номенклатура.ЭтоГруппа)
		|			И ТаблицаПоиска.ЗначениеПоиска = Номенклатура.Наименование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (&ПоискПоХарактеристикам)
		|			
		|					И Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
		|			И ТаблицаПоиска.ВариантПоиска = ХарактеристикиНоменклатуры.ВариантПоиска
		|			И ТаблицаПоиска.УчетнаяЗаписьМаркетплейса = ХарактеристикиНоменклатуры.УчетнаяЗаписьМаркетплейса
		|			И ТаблицаПоиска.ИдентификаторПубликации = ХарактеристикиНоменклатуры.ИдентификаторПубликации
		|			И ТаблицаПоиска.ИдентификаторОбъектаМаркетплейса = ХарактеристикиНоменклатуры.ИдентификаторОбъектаМаркетплейса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	Неопределено КАК СтавкаНДС
		|ПОМЕСТИТЬ СтавкиНДСПоНоменклатуре
		|ИЗ
		|	ВложенныйЗапрос КАК ВложенныйЗапрос
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	УчетнаяЗаписьМаркетплейса,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|			ТОГДА ВложенныйЗапрос.Номенклатура.КатегорияНоменклатуры
		|		КОГДА ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|			ТОГДА ВложенныйЗапрос.Номенклатура
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Категория
		|ИЗ
		|	ВложенныйЗапрос КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
		|	ВложенныйЗапрос.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	ВложенныйЗапрос.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторОбъектаМаркетплейса,
		|	ВложенныйЗапрос.ВариантПоиска КАК ВариантПоиска,
		|	ВложенныйЗапрос.ОднозначныйПоиск КАК ОднозначныйПоиск,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &ИспользоватьХарактеристикиНоменклатуры
		|				И ВложенныйЗапрос.Номенклатура.ИспользоватьХарактеристики
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВложенныйЗапрос.Характеристика КАК Характеристика,
		|	Истина КАК ИспользоватьУпаковки,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.Упаковка = ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|		ИНАЧЕ ВложенныйЗапрос.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ЕСТЬNULL(ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(СтавкиНДСПоНоменклатуре.СтавкаНДС, &СтавкаНДСПоТипуНалогообложения) КАК СтавкаНДС,
		|	Неопределено КАК Ставка,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ВидНоменклатуры)
		|			ТОГДА ВложенныйЗапрос.Номенклатура.КатегорияНоменклатуры
		|		КОГДА ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса.ИсточникКатегории = ЗНАЧЕНИЕ(Перечисление.ИсточникиКатегорийДляМаркетплейса.ИерархияНоменклатуры)
		|			ТОГДА ВложенныйЗапрос.Номенклатура
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Категория
		|ИЗ
		|	ВложенныйЗапрос КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтавкиНДСПоНоменклатуре КАК СтавкиНДСПоНоменклатуре
		|		ПО ВложенныйЗапрос.УчетнаяЗаписьМаркетплейса = СтавкиНДСПоНоменклатуре.УчетнаяЗаписьМаркетплейса
		|			И ВложенныйЗапрос.Номенклатура = СтавкиНДСПоНоменклатуре.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВариантПоиска,
		|	Характеристика УБЫВ,
		|	Упаковка УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаПоиска",                          ТаблицаПоиска);   
	Запрос.УстановитьПараметр("ПоискПоХарактеристикам",                 ПоискПоХарактеристикам);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", ИспользоватьХарактеристикиНоменклатуры);
	Запрос.УстановитьПараметр("НалогообложениеНДС",                     ПараметрыРасчетаСтавкиНДС.НалогообложениеНДС);
	Запрос.УстановитьПараметр("СтавкаНДСПоТипуНалогообложения",         Неопределено );
	Запрос.УстановитьПараметр("СтавкаНДСПоУмолчанию",         			Неопределено );
	Запрос.УстановитьПараметр("СтавкаНДСБезНДС",						Неопределено );
	Запрос.УстановитьПараметр("Дата",									ПараметрыРасчетаСтавкиНДС.Дата);
	Запрос.УстановитьПараметр("Страна",									Неопределено );
	Запрос.УстановитьПараметр("ПустаяСтрана", 							Справочники.СтраныМира.ПустаяСсылка());

	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Структура;
	Результат.Вставить("ОсновныеСправочники", РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать());
	Результат.Вставить("Категории",           РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить().ВыгрузитьКолонку("Категория"));
		
	Возврат Результат;	
	
КонецФункции

// Конструктор таблицы значений для поиска номенклатуры, характеристики, упаковки одним запросом.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица данных для поиска:
//     * УчетнаяЗаписьМаркетплейса        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//     * ИдентификаторПубликации          - Строка - внутренний идентификатор товара в системе продавца;
//     * ИдентификаторОбъектаМаркетплейса - Строка - идентификатор товара на маркетплейсе;
//     * ВариантПоиска                    - Число - вариант поиска (1, 2 - по штрихкоду; 3, 4 - по артикулу; 5 - по идентификаторам Ozon; 
//                                            6 - по наименованию; 10 и более - по словам наименований);
//     * ЗначениеПоиска                   - Строка - значение поиска по соответствующему варианту;
//     * ПоискХарактеристики              - Булево - Истина, если строка таблицы предназначена для поиска характеристики номенклатуры.
//
Функция НоваяТаблицаПоискаНоменклатурыХарактеристикиУпаковки() 

	ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50));
	ОписаниеТипаСтрока500 = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500));
	ОписаниеТипаБулево	  = Новый ОписаниеТипов("Булево");

	Результат = Новый ТаблицаЗначений; 
	Результат.Колонки.Добавить("УчетнаяЗаписьМаркетплейса",        Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	Результат.Колонки.Добавить("ИдентификаторПубликации",          ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ИдентификаторОбъектаМаркетплейса", ОписаниеТипаСтрока50);
	Результат.Колонки.Добавить("ВариантПоиска",                    Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ЗначениеПоиска",                   ОписаниеТипаСтрока500);
	Результат.Колонки.Добавить("ПоискХарактеристики",              ОписаниеТипаБулево);

	Возврат Результат;

КонецФункции

// Определяет номенклатуру, характеристику, упаковку, категорию для конкретной товарной позиции по результатам поиска.
//
// Параметры:                   
//   РезультатПоискаОсновныхСправочников - ВыборкаИзРезультатаЗапроса - результат поиска, 
//                                         см. НайтиНоменклатурыХарактеристикиУпаковки.
//   УчетнаяЗаписьМаркетплейса           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   Идентификатор                       - Строка - внутренний идентификатор товара в системе продавца или идентификатор товара на маркетплейсе.
//   ИмяИдентификатора                   - Строка - имя поля идентификатора в анализируемых данных.
//
// Возвращаемое значение:
//   Структура - результат поиска:
//     * ВариантПоиска              - Число - вариант поиска (-1 - не найдено; 0 - неоднозначный поиск; 1, 2 - по штрихкоду; 3, 4 - по артикулу; 
//                                      5 - по идентификаторам Ozon; 6 - по наименованию; 10 и более - по словам наименований; для поиска по 
//                                      номенклатуре контрагентов добавляется 0.1);
//     * Номенклатура               - СправочникСсылка.Номенклатура - найденная номенклатура;
//     * ХарактеристикиИспользуются - Булево - признак использования характеристик номенклатуры;
//     * Характеристика             - СправочникСсылка.ХарактеристикиНоменклатуры - найденная характеристика;
//     * ИспользоватьУпаковки       - Булево - признак использования упаковок номенклатуры;
//     * Упаковка                   - СправочникСсылка.ЕдиницыИзмерения - найденная упаковка;
//     * ЕдиницаИзмерения           - СправочникСсылка.ЕдиницыИзмерения - единица хранения номенклатуры;
//     * СтавкаНДС                  - СправочникСсылка.СтавкиНДС - ставка НДС номенклатуры;
//     * Ставка                     - Число - ставка НДС номенклатуры;
//     * Категория                  - СправочникСсылка.ВидыНоменклатуры, СправочникСсылка.Номенклатура, СправочникСсылка.ТоварныеКатегории -
//                                      начальная категория 1С для определения.
//
Функция ОпределитьНоменклатуруХарактеристикуУпаковку(РезультатПоискаОсновныхСправочников, УчетнаяЗаписьМаркетплейса, 
			Идентификатор, ИмяИдентификатора) Экспорт

	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("ВариантПоиска",              -1);
	РезультатПоиска.Вставить("Номенклатура",               Справочники.Номенклатура.ПустаяСсылка());
	РезультатПоиска.Вставить("ХарактеристикиИспользуются", Ложь);
	РезультатПоиска.Вставить("Характеристика",             Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	РезультатПоиска.Вставить("ИспользоватьУпаковки",       Ложь);
	РезультатПоиска.Вставить("Упаковка",                   Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	РезультатПоиска.Вставить("ЕдиницаИзмерения",           Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	РезультатПоиска.Вставить("СтавкаНДС",                  Неопределено );
	РезультатПоиска.Вставить("Ставка",                     0);
	РезультатПоиска.Вставить("Категория",                  Неопределено);
	
	Если РезультатПоискаОсновныхСправочников <> Неопределено Тогда
		Отбор = Новый Структура("УчетнаяЗаписьМаркетплейса, " + ИмяИдентификатора, УчетнаяЗаписьМаркетплейса, Идентификатор);
		РезультатПоискаОсновныхСправочников.Сбросить();
		Пока РезультатПоискаОсновныхСправочников.НайтиСледующий(Отбор) Цикл
			Если РезультатПоиска.ВариантПоиска > 0 Тогда
				Если РезультатПоиска.ВариантПоиска = РезультатПоискаОсновныхСправочников.ВариантПоиска 
					 И НЕ РезультатПоискаОсновныхСправочников.ОднозначныйПоиск Тогда
					РезультатПоиска.Вставить("ВариантПоиска", 0);
					Если РезультатПоиска.Номенклатура <> РезультатПоискаОсновныхСправочников.Номенклатура Тогда
						РезультатПоиска.Вставить("Номенклатура",               Справочники.Номенклатура.ПустаяСсылка());
						РезультатПоиска.Вставить("ХарактеристикиИспользуются", Ложь);
						РезультатПоиска.Вставить("ИспользоватьУпаковки",       Ложь);
						РезультатПоиска.Вставить("ЕдиницаИзмерения",           Справочники.ЕдиницыИзмерения.ПустаяСсылка());
						РезультатПоиска.Вставить("СтавкаНДС",                  Неопределено);
						РезультатПоиска.Вставить("Ставка",                     0);
					КонецЕсли;
					РезультатПоиска.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
					РезультатПоиска.Вставить("Упаковка",       Справочники.ЕдиницыИзмерения.ПустаяСсылка());
				КонецЕсли;
				
				Прервать;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(РезультатПоиска, РезультатПоискаОсновныхСправочников);
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции	

Процедура ОбновлениеИнформационнойБазыУстановитьРеквизитыВыгрузкиПоВидамДанных( Параметры ) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	// Справочник.УчетныеЗаписиМаркетплейсов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетныеЗаписиМаркетплейсов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
	|ГДЕ
	|	УчетныеЗаписиМаркетплейсов.ПометкаУдаления = ЛОЖЬ
	|	И УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = &ВидМаркетплейсаOzon
	|	И УчетныеЗаписиМаркетплейсов.ВыгружатьОписаниеТовара = ЛОЖЬ";
	
	Запрос.УстановитьПараметр( "ВидМаркетплейсаOzon", Перечисления.ВидыМаркетплейсов.МаркетплейсOzon );
	
	Результат = Запрос.Выполнить();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НачатьТранзакцию();
		
		Попытка
		
			ПредставлениеОбъекта = Строка(Выборка.Ссылка);
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			Объект.ВыгружатьОписаниеТовара = Истина;
			Объект.ВыгружатьЦены = Истина;
			Объект.ВыгружатьОстатки = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные( Объект );
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = НСтр("ru='Не удалось обработать объект ""%1"" по причине:
			|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ПредставлениеОбъекта, ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.НастройкиИнтеграцииСИнтернетМагазином, Выборка.Ссылка, ТекстСообщения);
				
		КонецПопытки;
	КонецЦикла;

	// РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon
	ЗапросРС = Новый Запрос;
	ЗапросРС.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2000
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса КАК УчетнаяЗаписьМаркетплейса,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса КАК ВидОбъектаМаркетплейса,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура КАК Номенклатура,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика КАК Характеристика,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка КАК Упаковка,
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации КАК ОбъектПубликации
	|ИЗ
	|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
	|ГДЕ
	|	СтатусыПубликацииОбъектовМаркетплейсаOzon.ВыгружатьПоНастройкамУчетнойЗаписи = ЛОЖЬ";
	
	Результат = ЗапросРС.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НачатьТранзакцию();
		
		Попытка

			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
			ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса",Выборка.УчетнаяЗаписьМаркетплейса);
			ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", Выборка.ВидОбъектаМаркетплейса);
			ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", Выборка.Номенклатура);
			ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", Выборка.Характеристика);
			ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка", Выборка.Упаковка);
			ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", Выборка.ОбъектПубликации);
			
			БлокировкаДанных.Заблокировать();
		
			Объект = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
			
			Объект.Отбор.УчетнаяЗаписьМаркетплейса.Установить(Выборка.УчетнаяЗаписьМаркетплейса);
			Объект.Отбор.ВидОбъектаМаркетплейса.Установить(Выборка.ВидОбъектаМаркетплейса);
			Объект.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			Объект.Отбор.Характеристика.Установить(Выборка.Характеристика);
			Объект.Отбор.Упаковка.Установить(Выборка.Упаковка);
			Объект.Отбор.ОбъектПубликации.Установить(Выборка.ОбъектПубликации);
			
			Объект.Прочитать();
			
			Если Объект.Количество() > 0 Тогда
			    ОбъектСтрока = Объект[0];
			    ПредставлениеОбъекта = Строка(ОбъектСтрока.УчетнаяЗаписьМаркетплейса) + ";" + Строка(ОбъектСтрока.ВидОбъектаМаркетплейса) + ";"
			    + Строка(ОбъектСтрока.Номенклатура) + ";" + Строка(ОбъектСтрока.Характеристика) + ";" + Строка(ОбъектСтрока.Упаковка) + ";"
			    + Строка(ОбъектСтрока.ОбъектПубликации) + ";";
			    
				ОбъектСтрока.ВыгружатьПоНастройкамУчетнойЗаписи = Истина;
				ОбъектСтрока.ВыгружатьОписаниеТовара = Истина;
				ОбъектСтрока.ВыгружатьЦены = Истина;
				ОбъектСтрока.ВыгружатьОстатки = Истина;
			
				ОбновлениеИнформационнойБазы.ЗаписатьДанные( Объект );
			
				ОбъектовОбработано = ОбъектовОбработано + 1;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = НСтр("ru='Не удалось обработать объект ""%1"" по причине:
			|%2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ПредставлениеОбъекта, ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.НастройкиИнтеграцииСИнтернетМагазином, Выборка.Ссылка, ТекстСообщения);
				
		КонецПопытки;
	КонецЦикла;
	
	Если ОбъектовОбработано > 0 Тогда
	
		ТекстСообщения = НСтр("ru='Процедура ОбновлениеИнформационнойБазыУстановитьРеквизитыВыгрузкиПоВидамДанных обработала очередную порцию объектов.'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.НастройкиИнтеграцииСИнтернетМагазином,, ТекстСообщения);
			
	КонецЕсли;
	    
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов = 0 Тогда

		ТекстСообщения = НСтр("ru='Процедура ОбновлениеИнформационнойБазыУстановитьРеквизитыВыгрузкиПоВидамДанных завершила обработку.'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.НастройкиИнтеграцииСИнтернетМагазином,, ТекстСообщения);
			
		Параметры.ОбработкаЗавершена = Истина;
		
	КонецЕсли;
КонецПроцедуры

Функция УчетнаяЗаписьНастройкиВидовДанныхДляВыгрузкиПолучить( УчетнаяЗапись ) Экспорт
	НастройкиВыгрузки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта( УчетнаяЗапись, 
	"ВыгружатьОписаниеТовара, ВыгружатьЦены, ВыгружатьОстатки" );
	Возврат НастройкиВыгрузки;
КонецФункции

Процедура ЗаполнитьНастройкиВидовДанныхДляВыгрузкиПоНастройкеУчетнойЗаписи( Запись ) Экспорт
    
   	#Область ПроверкаВходящихПараметров
	
	// Запись
	ПроверкаФункцияИмя = "ИнтеграцияСМаркетплейсомOzonСервер.ЗаполнитьНастройкиВидовДанныхДляВыгрузкиПоНастройкеУчетнойЗаписи";
	ПроверкаПараметрИмя = "Запись";
	ПроверкаЗначение = Запись;
	ПроверкаИмяПоля = "";
	ПроверкаТекстОшибкиПрефикс = СтрШаблон( "Процедура <%1>: <%2>: ", ПроверкаФункцияИмя, ПроверкаПараметрИмя );
   	
   	ПроверкаОжидаемыеТипы = Новый Массив;
   	ПроверкаОжидаемыеТипы.Добавить( Тип( "РегистрСведенийМенеджерЗаписи.СтатусыПубликацииОбъектовМаркетплейсаOzon" ) );
   	ПроверкаОжидаемыеТипы.Добавить( Тип( "ДанныеФормыСтруктура" ) );
   	ПроверкаОжидаемыеТипы.Добавить( Тип( "РегистрСведенийЗапись.СтатусыПубликацииОбъектовМаркетплейсаOzon" ) );
   	
	ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( ПроверкаЗначение, ПроверкаИмяПоля, ПроверкаОжидаемыеТипы, 
	Ложь, Истина, ПроверкаТекстОшибкиПрефикс );
	
	// Запись.УчетнаяЗаписьМаркетплейса
	ПроверкаФункцияИмя = "ИнтеграцияСМаркетплейсомOzonСервер.ЗаполнитьНастройкиВидовДанныхДляВыгрузкиПоНастройкеУчетнойЗаписи";
	ПроверкаПараметрИмя = "Запись";
	ПроверкаЗначение = Запись;
	ПроверкаИмяПоля = "УчетнаяЗаписьМаркетплейса";
	ПроверкаТекстОшибкиПрефикс = СтрШаблон( "Функция <%1>: <%2>: ", ПроверкаФункцияИмя, ПроверкаПараметрИмя );
   	
   	ПроверкаОжидаемыеТипы = Новый Массив;
   	ПроверкаОжидаемыеТипы.Добавить( Тип( "СправочникСсылка.УчетныеЗаписиМаркетплейсов" ) );
   	
	ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( ПроверкаЗначение, ПроверкаИмяПоля, ПроверкаОжидаемыеТипы, 
	Истина, Истина, ПроверкаТекстОшибкиПрефикс );

	#КонецОбласти

	УчетнаяЗаписьМаркетплейсаНастройкиВыгрузки = УчетнаяЗаписьНастройкиВидовДанныхДляВыгрузкиПолучить( Запись.УчетнаяЗаписьМаркетплейса );
	Запись.ВыгружатьПоНастройкамУчетнойЗаписи = Истина;
	Запись.ВыгружатьОписаниеТовара = УчетнаяЗаписьМаркетплейсаНастройкиВыгрузки.ВыгружатьОписаниеТовара;
	Запись.ВыгружатьЦены = УчетнаяЗаписьМаркетплейсаНастройкиВыгрузки.ВыгружатьЦены;
	Запись.ВыгружатьОстатки = УчетнаяЗаписьМаркетплейсаНастройкиВыгрузки.ВыгружатьОстатки;
	
КонецПроцедуры

Функция ПолучитьОписаниеOzonAPI() Экспорт
	Описание = Обработки.МаркетплейсOzon.ПолучитьМакет( "МетодыAPIOzon" );
	Описание.ТолькоПросмотр = Истина;
	Описание.ОтображатьСетку = Ложь;
	Описание.ОтображатьЗаголовки = Ложь;
	Возврат Описание;
КонецФункции
