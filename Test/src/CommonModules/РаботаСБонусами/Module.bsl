#Область АвтоматическоеНачислениеИСписание

Процедура АвтоматическоеНачислениеИСписаниеБонусныхБаллов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УстановкаПериодаРассчитанныхИтогов);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Попытка
		ВыполнитьАвтоматическоеНачислениеИСписание();
	Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Автоматическое начисление и списание бонусных баллов.'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьАвтоматическоеНачислениеИСписание()
	
	ТЧСписаний = Новый ТаблицаЗначений;
	ТЧСписаний.Колонки.Добавить("БонуснаяКарта");
	ТЧСписаний.Колонки.Добавить("Количество");
	ТЧСписаний.Колонки.Добавить("КорректировкаКСписанию");
	
	ТЧНачислений = Новый ТаблицаЗначений;
	ТЧНачислений.Колонки.Добавить("БонуснаяКарта");
	ТЧНачислений.Колонки.Добавить("Количество");
	ТЧНачислений.Колонки.Добавить("ДатаНачисления");
	ТЧНачислений.Колонки.Добавить("ДатаСгорания");
	ТЧНачислений.Колонки.Добавить("АналитикаНачисленияБонусов");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	БонусныеПрограммы.Ссылка КАК Ссылка,
	|	БонусныеПрограммы.НачислятьБонусыНаДеньРождения КАК НачислятьБонусыНаДеньРождения,
	|	БонусныеПрограммы.НачислятьПередДнемРождения КАК НачислятьПередДнемРождения,
	|	БонусныеПрограммы.ДнейПередДнемРождения КАК ДнейПередДнемРождения,
	|	БонусныеПрограммы.СписыватьПослеДняРождения КАК СписыватьПослеДняРождения,
	|	БонусныеПрограммы.ДнейПослеДняРождения КАК ДнейПослеДняРождения,
	|	БонусныеПрограммы.КоличествоБонусовНаДеньРождения КАК КоличествоБонусовНаДеньРождения
	|ПОМЕСТИТЬ ВТ_БонусныеПрограммы
	|ИЗ
	|	Справочник.БонусныеПрограммы КАК БонусныеПрограммы
	|ГДЕ
	|	НЕ БонусныеПрограммы.ПометкаУдаления
	|	И (БонусныеПрограммы.СписаниеНеиспользованных
	|			ИЛИ БонусныеПрограммы.НачислятьПередДнемРождения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_БонусныеПрограммы.Ссылка КАК Программа,
	|	ВидыДисконтныхКарт.Ссылка КАК ВидКарты,
	|	ВТ_БонусныеПрограммы.НачислятьБонусыНаДеньРождения КАК НачислятьБонусыНаДеньРождения,
	|	ВТ_БонусныеПрограммы.НачислятьПередДнемРождения КАК НачислятьПередДнемРождения,
	|	ВТ_БонусныеПрограммы.ДнейПередДнемРождения КАК ДнейПередДнемРождения,
	|	ВТ_БонусныеПрограммы.СписыватьПослеДняРождения КАК СписыватьПослеДняРождения,
	|	ВТ_БонусныеПрограммы.ДнейПослеДняРождения КАК ДнейПослеДняРождения,
	|	ВТ_БонусныеПрограммы.КоличествоБонусовНаДеньРождения КАК КоличествоБонусовНаДеньРождения
	|ПОМЕСТИТЬ ВТ_ВидыИПрограммы
	|ИЗ
	|	ВТ_БонусныеПрограммы КАК ВТ_БонусныеПрограммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	|		ПО ВТ_БонусныеПрограммы.Ссылка = ВидыДисконтныхКарт.БонуснаяПрограмма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВидыИПрограммы.Программа КАК Программа,
	|	ДисконтныеКарты.Ссылка КАК Карта,
	|	ВТ_ВидыИПрограммы.НачислятьБонусыНаДеньРождения КАК НачислятьБонусыНаДеньРождения,
	|	ВТ_ВидыИПрограммы.НачислятьПередДнемРождения КАК НачислятьПередДнемРождения,
	|	ВТ_ВидыИПрограммы.ДнейПередДнемРождения КАК ДнейПередДнемРождения,
	|	ВТ_ВидыИПрограммы.СписыватьПослеДняРождения КАК СписыватьПослеДняРождения,
	|	ВТ_ВидыИПрограммы.ДнейПослеДняРождения КАК ДнейПослеДняРождения,
	|	ВТ_ВидыИПрограммы.КоличествоБонусовНаДеньРождения КАК КоличествоБонусовНаДеньРождения,
	|	ДисконтныеКарты.ВладелецКарты КАК ВладелецКарты
	|ПОМЕСТИТЬ ВТ_КартыИПрограммы
	|ИЗ
	|	ВТ_ВидыИПрограммы КАК ВТ_ВидыИПрограммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|		ПО ВТ_ВидыИПрограммы.ВидКарты = ДисконтныеКарты.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КартыИПрограммы.Карта КАК Карта,
	|	ДОБАВИТЬКДАТЕ(Контрагенты.ДатаРождения, ГОД, РАЗНОСТЬДАТ(Контрагенты.ДатаРождения, НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ГОД)) КАК ДеньРождения_ЭтотГод,
	|	ДОБАВИТЬКДАТЕ(Контрагенты.ДатаРождения, ГОД, РАЗНОСТЬДАТ(Контрагенты.ДатаРождения, НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ГОД) + 1) КАК ДеньРождения_СледующийГод
	|ПОМЕСТИТЬ ВТ_ДниРождения
	|ИЗ
	|	ВТ_КартыИПрограммы КАК ВТ_КартыИПрограммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТ_КартыИПрограммы.ВладелецКарты = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияБонусныхБаллов КАК НачисленияБонусныхБаллов
	|		ПО ВТ_КартыИПрограммы.Карта = НачисленияБонусныхБаллов.БонуснаяКарта
	|			И (НачисленияБонусныхБаллов.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ДЕНЬ, -ВТ_КартыИПрограммы.ДнейПередДнемРождения) И НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ))
	|			И (НачисленияБонусныхБаллов.АналитикаНачисленияБонусов = ЗНАЧЕНИЕ(Справочник.АналитикаНачисленияБонусов.НачислениеНаДеньРождения))
	|ГДЕ
	|	ВТ_КартыИПрограммы.НачислятьБонусыНаДеньРождения
	|	И Контрагенты.ДатаРождения <> ДАТАВРЕМЯ(1, 1, 1)
	|	И НачисленияБонусныхБаллов.БонуснаяКарта ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_БонусныеПрограммы.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_БонусныеПрограммы КАК ВТ_БонусныеПрограммы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КартыИПрограммы.Программа КАК БонуснаяПрограмма,
	|	БонусныеБаллыОстатки.БонуснаяКарта КАК БонуснаяКарта,
	|	БонусныеБаллыОстатки.НачисленоОстаток КАК Начислено,
	|	БонусныеБаллыОстатки.КСписаниюОстаток КАК КСписанию
	|ИЗ
	|	ВТ_КартыИПрограммы КАК ВТ_КартыИПрограммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы.Остатки(&ТекущийПериод, ) КАК БонусныеБаллыОстатки
	|		ПО ВТ_КартыИПрограммы.Карта = БонусныеБаллыОстатки.БонуснаяКарта
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КартыИПрограммы.Программа,
	|	БонусныеБаллыОстатки.БонуснаяКарта,
	|	БонусныеБаллыОстатки.НачисленоОстаток,
	|	БонусныеБаллыОстатки.КСписаниюОстаток
	|
	|ИМЕЮЩИЕ
	|	СУММА(БонусныеБаллыОстатки.КСписаниюОстаток) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КартыИПрограммы.Программа КАК БонуснаяПрограмма,
	|	ВТ_КартыИПрограммы.Карта КАК БонуснаяКарта,
	|	ВТ_КартыИПрограммы.КоличествоБонусовНаДеньРождения КАК Количество,
	|	НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ) КАК ДатаНачисления,
	|	ВЫБОР
	|		КОГДА ВТ_КартыИПрограммы.СписыватьПослеДняРождения
	|			ТОГДА ВЫБОР
	|					КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ВТ_ДниРождения.ДеньРождения_ЭтотГод, ДЕНЬ) <= ВТ_КартыИПрограммы.ДнейПередДнемРождения
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВТ_ДниРождения.ДеньРождения_ЭтотГод, ДЕНЬ, ВТ_КартыИПрограммы.ДнейПослеДняРождения), ДЕНЬ)
	|					КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ВТ_ДниРождения.ДеньРождения_СледующийГод, ДЕНЬ) <= ВТ_КартыИПрограммы.ДнейПередДнемРождения
	|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВТ_ДниРождения.ДеньРождения_СледующийГод, ДЕНЬ, ВТ_КартыИПрограммы.ДнейПослеДняРождения), ДЕНЬ)
	|				КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаСгорания,
	|	ЗНАЧЕНИЕ(Справочник.АналитикаНачисленияБонусов.НачислениеНаДеньРождения) КАК АналитикаНачисленияБонусов
	|ИЗ
	|	ВТ_КартыИПрограммы КАК ВТ_КартыИПрограммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДниРождения КАК ВТ_ДниРождения
	|		ПО ВТ_КартыИПрограммы.Карта = ВТ_ДниРождения.Карта
	|			И (ВТ_КартыИПрограммы.НачислятьБонусыНаДеньРождения)
	|			И (ВЫБОР
	|				КОГДА ВТ_КартыИПрограммы.НачислятьПередДнемРождения
	|					ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ВТ_ДниРождения.ДеньРождения_ЭтотГод, ДЕНЬ) <= ВТ_КартыИПрограммы.ДнейПередДнемРождения
	|								И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ВТ_ДниРождения.ДеньРождения_ЭтотГод, ДЕНЬ) >= 0
	|							ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ), ВТ_ДниРождения.ДеньРождения_СледующийГод, ДЕНЬ) <= ВТ_КартыИПрограммы.ДнейПередДнемРождения
	|				ИНАЧЕ ВТ_ДниРождения.ДеньРождения_ЭтотГод = НАЧАЛОПЕРИОДА(&ТекущийПериод, ДЕНЬ)
	|			КОНЕЦ)
	|ГДЕ
	|	ВТ_КартыИПрограммы.НачислятьБонусыНаДеньРождения");
	Запрос.УстановитьПараметр("ТекущийПериод", КонецДня(ТекущаяДатаСеанса()));
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаПрограмм		= Результат[4].Выбрать();
	ТаблицаСписаний		= Результат[5].Выгрузить();
	ТаблицаНачислений	= Результат[6].Выгрузить();

	Пока ВыборкаПрограмм.Следующий() Цикл
		
		ТЧСписаний.Очистить();
		НайденныеСтроки = ТаблицаСписаний.НайтиСтроки(Новый Структура("БонуснаяПрограмма", ВыборкаПрограмм.Ссылка));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТЧСписаний.Добавить();
			НоваяСтрока.БонуснаяКарта = НайденнаяСтрока.БонуснаяКарта;
			НоваяСтрока.КорректировкаКСписанию = НайденнаяСтрока.КСписанию;
			Если НайденнаяСтрока.Начислено <= 0 Тогда
				НоваяСтрока.Количество = 0;
			Иначе
				НоваяСтрока.Количество = Мин(НайденнаяСтрока.Начислено, НайденнаяСтрока.КСписанию);
			КонецЕсли;
		КонецЦикла;
		
		ТЧНачислений.Очистить();
		НайденныеСтроки = ТаблицаНачислений.НайтиСтроки(Новый Структура("БонуснаяПрограмма", ВыборкаПрограмм.Ссылка));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТЧНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
		КонецЦикла;
		
		
		Если ТЧСписаний.Количество() > 0 Или ТЧНачислений.Количество() <> 0 Тогда
			
			Документ = СоздатьДокументНачислениеИСписания(ВыборкаПрограмм.Ссылка);
			Документ.СписанияБонусов.Загрузить(ТЧСписаний);
			Документ.НачисленияБонусов.Загрузить(ТЧНачислений);
			Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьДокументНачислениеИСписания(БонуснаяПрограмма)
	
	Документ = Документы.НачислениеСписаниеБонусныхБаллов.СоздатьДокумент();
	
	Документ.Заполнить(Неопределено);
	Документ.СлужебныйДокумент = Истина;
	Документ.БонуснаяПрограмма = БонуснаяПрограмма;
	Документ.Дата = НачалоДня(ТекущаяДатаСеанса());
	Документ.Комментарий = НСтр("ru = '#Автоматическое начисление и списание бонусных баллов'");
	
	Возврат Документ;
	
КонецФункции

#КонецОбласти

#Область Уведомления

Процедура СоздатьШаблоныСообщенийПоУмолчанию() Экспорт
	
	Если Не ЕстьШаблон() Тогда
		
		Наименование = НаименованиеШаблонаСообщенияНачислениеБонусов();
		ТекстШаблона = НСтр(
			"ru = 'Начислено: [НачислениеСписаниеБонусов.НачисленоБаллов].
			|Остаток на [ОбщиеРеквизиты.ТекущаяДата]: [НачислениеСписаниеБонусов.ОстатокБаллов].'");
		СоздатьШаблон(Наименование, ТекстШаблона);
		
		Наименование = НаименованиеШаблонаСообщенияСписаниеБонусов();
		ТекстШаблона = НСтр(
			"ru = 'Списано: [НачислениеСписаниеБонусов.СписаноБаллов].
			|Остаток на [ОбщиеРеквизиты.ТекущаяДата]: [НачислениеСписаниеБонусов.ОстатокБаллов].'");
		СоздатьШаблон(Наименование, ТекстШаблона);
		
		Наименование = НаименованиеШаблонаСообщенияСписаниеНачислениеБонусов();
		ТекстШаблона = НСтр(
			"ru = 'Начислено: [НачислениеСписаниеБонусов.НачисленоБаллов].
			|Списано: [НачислениеСписаниеБонусов.СписаноБаллов].
			|Остаток на [ОбщиеРеквизиты.ТекущаяДата]: [НачислениеСписаниеБонусов.ОстатокБаллов].'");
		СоздатьШаблон(Наименование, ТекстШаблона);
		
		Наименование = НаименованиеШаблонаСообщенияНачислениеБонусовНаДеньРождения();
		ТекстШаблона = НСтр(
			"ru = 'В честь дня рождения вам начислены бонусы!
			|Начислено: [НачислениеСписаниеБонусов.НачисленоБаллов].
			|Остаток на [ОбщиеРеквизиты.ТекущаяДата]: [НачислениеСписаниеБонусов.ОстатокБаллов].'");
		СоздатьШаблон(Наименование, ТекстШаблона);
		
		Наименование = НаименованиеШаблонаСообщенияСгораниеБонусов();
		ТекстШаблона = НСтр(
			"ru = 'Списаны неиспользованные бонусы в размере: [НачислениеСписаниеБонусов.СписаноБаллов].
			|Остаток на [ОбщиеРеквизиты.ТекущаяДата]: [НачислениеСписаниеБонусов.ОстатокБаллов].'");
		СоздатьШаблон(Наименование, ТекстШаблона);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьШаблон()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныСообщений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	|ГДЕ
	|	ШаблоныСообщений.Назначение = ""Начисление/списание бонусов""");
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура СоздатьШаблон(Наименование, ТекстШаблона)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйШаблон = Справочники.ШаблоныСообщений.СоздатьЭлемент();
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Наименование",							Наименование);
	ДанныеЗаполнения.Вставить("Текст",									ТекстШаблона);
	ДанныеЗаполнения.Вставить("ПредназначенДляSMS",						Истина);
	ДанныеЗаполнения.Вставить("ПредназначенДляВводаНаОсновании",		Истина);
	ДанныеЗаполнения.Вставить("Назначение",								"Начисление/списание бонусов");
	ДанныеЗаполнения.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании",	"НачислениеСписаниеБонусов");
	
	НовыйШаблон.Заполнить(ДанныеЗаполнения);
	
	НовыйШаблон.Записать();
	
КонецПроцедуры

Функция НаименованиеШаблонаСообщенияСписаниеБонусов() Экспорт
	
	Возврат НСтр("ru='Уведомление о списании бонусов'");
	
КонецФункции

Функция НаименованиеШаблонаСообщенияНачислениеБонусов() Экспорт
	
	Возврат НСтр("ru='Уведомление о начислении бонусов'");
	
КонецФункции

Функция НаименованиеШаблонаСообщенияСписаниеНачислениеБонусов() Экспорт
	
	Возврат НСтр("ru='Уведомление о начислении/списании бонусов'");
	
КонецФункции

Функция НаименованиеШаблонаСообщенияСгораниеБонусов() Экспорт
	
	Возврат НСтр("ru='Уведомление о сгорании бонусов'");
	
КонецФункции

Функция НаименованиеШаблонаСообщенияНачислениеБонусовНаДеньРождения() Экспорт
	
	Возврат НСтр("ru='Уведомление о начислении бонусов на день рождения'");
	
КонецФункции

Процедура ПриФормированииСообщения(Сообщение, НазначениеШаблона, ПредметСообщения, ПараметрыШаблона) Экспорт
	
	Если НазначениеШаблона = "НачислениеСписаниеБонусов" Тогда
		
		ШаблоныСообщений.ЗаполнитьРеквизитыПоСКД(Сообщение.ЗначенияРеквизитов, ПредметСообщения, ПараметрыШаблона);
		ОстатокБаллов = Сообщение.ЗначенияРеквизитов.Получить("ОстатокБаллов");
		НачисленоБаллов = Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Начислено;
		СписаноБаллов = Сообщение.ДополнительныеПараметры.ПараметрыСообщения.Списано;
		
		ТекущаяДата = Сообщение.ЗначенияОбщихРеквизитов.Получить("ТекущаяДата");
		Шаблон = ПолучитьШаблонСтрокиБаллов();
		
		Если ОстатокБаллов <> Неопределено Тогда
			Сообщение.ЗначенияРеквизитов.Вставить("ОстатокБаллов", СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, ОстатокБаллов));
		КонецЕсли;
		
		Если НачисленоБаллов <> Неопределено Тогда
			Сообщение.ЗначенияРеквизитов.Вставить("НачисленоБаллов", СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, НачисленоБаллов));
		КонецЕсли;
		
		Если СписаноБаллов <> Неопределено Тогда
			Сообщение.ЗначенияРеквизитов.Вставить("СписаноБаллов", СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, СписаноБаллов));
		КонецЕсли;
		
		Если ТекущаяДата <> Неопределено Тогда
			Сообщение.ЗначенияОбщихРеквизитов.Вставить("ТекущаяДата", Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьШаблонСтрокиБаллов()
	
	Возврат НСтр("ru = ';%1 балл;;%1 балла;%1 баллов;%1 баллов'");
	
КонецФункции

Процедура УведомлениеОбАвтоматическомНачисленииСписанииБонусов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УстановкаПериодаРассчитанныхИтогов);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Попытка
		УведомитьОбАвтоматическомНачисленииИСписанииБонусныхБаллов();
	Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Уведомление об автоматическом начислении и списании бонусных баллов.'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

Процедура УведомитьОбАвтоматическомНачисленииИСписанииБонусныхБаллов()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеСписаниеБонусныхБаллов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СписокДокументов
	|ИЗ
	|	Документ.НачислениеСписаниеБонусныхБаллов КАК НачислениеСписаниеБонусныхБаллов
	|ГДЕ
	|	НЕ НачислениеСписаниеБонусныхБаллов.УведомлениеОтправлено
	|	И НачислениеСписаниеБонусныхБаллов.Проведен
	|	И НачислениеСписаниеБонусныхБаллов.СлужебныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокДокументов.Ссылка КАК Ссылка,
	|	НачислениеСписаниеБонусныхБалловНачисленияБонусов.БонуснаяКарта КАК БонуснаяКарта,
	|	НачислениеСписаниеБонусныхБалловНачисленияБонусов.БонуснаяКарта.ВладелецКарты КАК Владелец,
	|	НачислениеСписаниеБонусныхБалловНачисленияБонусов.АналитикаНачисленияБонусов КАК АналитикаНачисленияБонусов,
	|	СУММА(НачислениеСписаниеБонусныхБалловНачисленияБонусов.Количество) КАК Начислено,
	|	NULL КАК Списано
	|ИЗ
	|	СписокДокументов КАК СписокДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеБонусныхБаллов.НачисленияБонусов КАК НачислениеСписаниеБонусныхБалловНачисленияБонусов
	|		ПО СписокДокументов.Ссылка = НачислениеСписаниеБонусныхБалловНачисленияБонусов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокДокументов.Ссылка,
	|	НачислениеСписаниеБонусныхБалловНачисленияБонусов.БонуснаяКарта,
	|	НачислениеСписаниеБонусныхБалловНачисленияБонусов.АналитикаНачисленияБонусов,
	|	НачислениеСписаниеБонусныхБалловНачисленияБонусов.БонуснаяКарта.ВладелецКарты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокДокументов.Ссылка,
	|	НачислениеСписаниеБонусныхБалловСписанияБонусов.БонуснаяКарта,
	|	НачислениеСписаниеБонусныхБалловСписанияБонусов.БонуснаяКарта.ВладелецКарты,
	|	ЗНАЧЕНИЕ(Справочник.АналитикаНачисленияБонусов.ПустаяСсылка),
	|	NULL,
	|	СУММА(НачислениеСписаниеБонусныхБалловСписанияБонусов.Количество)
	|ИЗ
	|	СписокДокументов КАК СписокДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеБонусныхБаллов.СписанияБонусов КАК НачислениеСписаниеБонусныхБалловСписанияБонусов
	|		ПО СписокДокументов.Ссылка = НачислениеСписаниеБонусныхБалловСписанияБонусов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокДокументов.Ссылка,
	|	НачислениеСписаниеБонусныхБалловСписанияБонусов.БонуснаяКарта,
	|	НачислениеСписаниеБонусныхБалловСписанияБонусов.БонуснаяКарта.ВладелецКарты
	|ИТОГИ ПО
	|	Ссылка");
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Выборка = ВыборкаДокументов.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Начислено) Тогда
				Если Выборка.АналитикаНачисленияБонусов = Справочники.АналитикаНачисленияБонусов.НачислениеНаДеньРождения Тогда
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ПараметрыСообщения", Новый Структура);
					ДополнительныеПараметры.ПараметрыСообщения.Вставить("Начислено", Выборка.Начислено);
					ДополнительныеПараметры.ПараметрыСообщения.Вставить("Списано", 0);
					Событие = "НачислениеБонусовНаДеньРождения";
					АссистентУправления.ПриСрабатыванииСобытия(Выборка.БонуснаяКарта, Событие, Выборка.Ссылка, ДополнительныеПараметры);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Списано) Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПараметрыСообщения", Новый Структура);
				ДополнительныеПараметры.ПараметрыСообщения.Вставить("Начислено", 0);
				ДополнительныеПараметры.ПараметрыСообщения.Вставить("Списано", Выборка.Списано);
				Событие = "СписаниеБонусовПриСгорании";
				АссистентУправления.ПриСрабатыванииСобытия(Выборка.БонуснаяКарта, Событие, Выборка.Ссылка, ДополнительныеПараметры);
			КонецЕсли;
		КонецЦикла;
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.УведомлениеОтправлено = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриИзмененииУведомленияОбАвтоматическомНачисленииСписанииБонусов(Расписание) Экспорт
	
	
	
КонецПроцедуры

Процедура ИзменитьПараметрыУведомленияОбАвтоматическомНачисленииСписанииБонусов(ВРаботе, ВремяОтправкиПисьма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовоеРасписание = СоздатьРасписание(ВремяОтправкиПисьма);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", "УведомлениеОбАвтоматическомНачисленииСписанииБонусов");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если Задания.Количество() <> 1 Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", ВРаботе);
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.УведомлениеОбАвтоматическомНачисленииСписанииБонусов);
		ПараметрыЗадания.Вставить("Расписание", НовоеРасписание);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		Задание = Задания[0];
		Если (Задание.Использование <> ВРаботе) ИЛИ (Задание.Расписание <> НовоеРасписание) Тогда
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Использование", ВРаботе);
			ПараметрыЗадания.Вставить("Расписание", НовоеРасписание);
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.УникальныйИдентификатор, ПараметрыЗадания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьРасписание(ВремяОтправкиПисьма)
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ВремяНачала = ВремяОтправкиПисьма;
	Расписание.ВремяКонца = ВремяОтправкиПисьма + 3*3600;
	
	Возврат Расписание;
	
КонецФункции

Функция ПолучитьВремяОтправкиУведомлений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", "УведомлениеОбАвтоматическомНачисленииСписанииБонусов");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Если Задания.Количество() <> 1 Тогда
		Возврат Неопределено;
	Иначе
		Задание = Задания[0];
		Возврат Задание.Расписание.ВремяНачала;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьБонуснуюПрограмму(ДисконтнаяКарта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДисконтныеКарты.Владелец.БонуснаяПрограмма КАК БонуснаяПрограмма
		|ИЗ
		|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
		|ГДЕ
		|	ДисконтныеКарты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДисконтнаяКарта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.БонуснаяПрограмма;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьМаксимальныйПроцентОплаты(ДисконтнаяКарта) Экспорт
	
	БонуснаяПрограмма = ПолучитьБонуснуюПрограмму(ДисконтнаяКарта);
	
	Если ЗначениеЗаполнено(БонуснаяПрограмма) Тогда
		
		Возврат БонуснаяПрограмма.МаксимальныйПроцентОплаты;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

Функция ОпределитьОграничениеОплаты(ДисконтнаяКарта, СуммаДокумента) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Возврат 0;
	КонецЕсли;
	РеквизитыБП = РеквизитыБонуснойПрограммы(ДисконтнаяКарта);
	МаксимальныйПроцент = РеквизитыБП.МаксимальныйПроцентОплаты;
	Если ЗначениеЗаполнено(МаксимальныйПроцент) Тогда
		ОграничениеОплаты = Окр(СуммаДокумента * МаксимальныйПроцент/100, 2);
	Иначе
		ОграничениеОплаты = СуммаДокумента;
	КонецЕсли;
	
	Возврат ОграничениеОплаты;
	
КонецФункции

Функция ПрибавитьКДатеПериод(ТекущаяДата, КоличествоПериодов, Периодичность) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, &КоличествоПериодов)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, &КоличествоПериодов)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕКАДА, &КоличествоПериодов)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, &КоличествоПериодов)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, КВАРТАЛ, &КоличествоПериодов)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ПОЛУГОДИЕ, &КоличествоПериодов)
	|		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, &КоличествоПериодов)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Результат";
	Запрос.УстановитьПараметр("КоличествоПериодов", КоличествоПериодов);
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеБонуснойКарты(БонуснаяКарта, Период, Документ = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Остаток");
	СтруктураВозврата.Вставить("ТаблицаДвижений");
	СтруктураВозврата.Вставить("Владелец");
	СтруктураВозврата.Вставить("ДвиженияДокумента", Новый Структура("Начислено, Оплачено", 0, 0));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БонусныеБаллы.Период КАК Период,
	|	ВЫБОР
	|		КОГДА БонусныеБаллы.Начислено <> 0
	|			ТОГДА БонусныеБаллы.Начислено
	|		КОГДА БонусныеБаллы.КСписанию <> 0
	|			ТОГДА -БонусныеБаллы.КСписанию
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Изменение
	|ПОМЕСТИТЬ ТаблицаИзменений
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|ГДЕ
	|	БонусныеБаллы.Период > &Период
	|	И БонусныеБаллы.БонуснаяКарта = &БонуснаяКарта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзменений.Период КАК Период,
	|	ТаблицаИзменений.Изменение КАК Изменение,
	|	СУММА(ТаблицаИзменений2.Изменение) КАК ИзменениеИтог
	|ПОМЕСТИТЬ ТаблицаИзмененияСИтогами
	|ИЗ
	|	ТаблицаИзменений КАК ТаблицаИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИзменений КАК ТаблицаИзменений2
	|		ПО ТаблицаИзменений.Период >= ТаблицаИзменений2.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.Период,
	|	ТаблицаИзменений.Изменение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА БонусныеБаллыОстатки.НачисленоОстаток - БонусныеБаллыОстатки.КСписаниюОстаток < 0
	|			ТОГДА 0
	|		ИНАЧЕ БонусныеБаллыОстатки.НачисленоОстаток - БонусныеБаллыОстатки.КСписаниюОстаток
	|	КОНЕЦ КАК Остаток
	|ПОМЕСТИТЬ ТаблицаОстатка
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы.Остатки(&Период, БонуснаяКарта = &БонуснаяКарта) КАК БонусныеБаллыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатка.Остаток КАК Остаток
	|ИЗ
	|	ТаблицаОстатка КАК ТаблицаОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзмененияСИтогами.Период КАК Период,
	|	ТаблицаИзмененияСИтогами.Изменение КАК Изменение,
	|	ТаблицаОстатка.Остаток + ТаблицаИзмененияСИтогами.ИзменениеИтог КАК Остаток
	|ИЗ
	|	ТаблицаИзмененияСИтогами КАК ТаблицаИзмененияСИтогами,
	|	ТаблицаОстатка КАК ТаблицаОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА БонусныеБаллыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА БонусныеБаллыДвижения.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК Начислено,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА БонусныеБаллыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА БонусныеБаллыДвижения.Начислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК Оплачено
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллыДвижения
	|ГДЕ
	|	БонусныеБаллыДвижения.БонуснаяКарта = &БонуснаяКарта
	|	И БонусныеБаллыДвижения.Период <= &Период
	|	И БонусныеБаллыДвижения.Регистратор = &Документ";
	Запрос.УстановитьПараметр("Период", КонецДня(Период));
	Запрос.УстановитьПараметр("БонуснаяКарта", БонуснаяКарта);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[3].Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.Остаток = Выборка.Остаток;
	КонецЕсли;
	
	СтруктураВозврата.ТаблицаДвижений = Результат[4].Выгрузить();
	ВыборкаДвиженийДокумента = Результат[5].Выбрать();
	Если ВыборкаДвиженийДокумента.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата.ДвиженияДокумента, ВыборкаДвиженийДокумента);
	КонецЕсли;
	
	СтруктураВозврата.Владелец = ?(ЗначениеЗаполнено(БонуснаяКарта.ВладелецКарты), БонуснаяКарта.ВладелецКарты, "");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура РаспределитьОплатуБонусамиКакСкидку(Объект, ТаблицаОплат = Неопределено, ОтменаОплатыБонусами = Ложь) Экспорт
	
	Если ТаблицаОплат = Неопределено Тогда
		ТаблицаДляЗапроса = Объект.БезналичнаяОплата.Выгрузить(, "ВидОплаты, СуммаБонусов");
	ИначеЕсли ТипЗнч(ТаблицаОплат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаДляЗапроса = ТаблицаОплат;
	Иначе
		ТаблицаДляЗапроса = ТаблицаОплат.Выгрузить(, "ВидОплаты, СуммаБонусов");
	КонецЕсли;
	
	// Получим общую сумму оплаты бонусами
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Оплата", ТаблицаДляЗапроса);
	Запрос.УстановитьПараметр("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Оплата.ВидОплаты КАК ВидОплаты,
	|	Оплата.СуммаБонусов КАК Сумма,
	|	ВЫРАЗИТЬ(&ДисконтнаяКарта КАК Справочник.ДисконтныеКарты) КАК БонуснаяКарта
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	&Оплата КАК Оплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ПараметрыБонуснойПрограммы.КурсБонусов = 0
	|				ТОГДА ТЧ.Сумма
	|			ИНАЧЕ ТЧ.Сумма * ПараметрыБонуснойПрограммы.КурсБонусов
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	ТЧ КАК ТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДисконтныеКарты КАК ПараметрыБонуснойКарты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДисконтныхКарт КАК ПараметрыВидаКарты
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммы КАК ПараметрыБонуснойПрограммы
	|				ПО ПараметрыВидаКарты.БонуснаяПрограмма = ПараметрыБонуснойПрограммы.Ссылка
	|			ПО ПараметрыБонуснойКарты.Владелец = ПараметрыВидаКарты.Ссылка
	|		ПО ТЧ.БонуснаяКарта = ПараметрыБонуснойКарты.Ссылка
	|ГДЕ
	|	ТЧ.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыБезналичныхОплат.Бонусы)
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ВЫБОР
	|				КОГДА ПараметрыБонуснойПрограммы.КурсБонусов = 0
	|					ТОГДА ТЧ.Сумма
	|				ИНАЧЕ ТЧ.Сумма * ПараметрыБонуснойПрограммы.КурсБонусов
	|			КОНЕЦ) ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	СуммаОплатыВВалютеДокумента = 0;
	Если РезультатЗапроса.Следующий() Тогда		
		СуммаОплатыВВалютеДокумента = РезультатЗапроса.Сумма;		
	Иначе		
		Возврат;		
	КонецЕсли;
	
	// Очистим суммы бонусов в ТЧ "Запасы"
	СуммаДокумента = 0;
	СтрокиТоваров = Неопределено;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		Товары = Объект.РаботыИУслуги;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") 
		И Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		Товары = Новый Массив();
		Для Каждого СтрокаТЧ Из Объект.Работы Цикл
			Товары.Добавить(СтрокаТЧ);
		КонецЦикла;
		Для Каждого СтрокаТЧ Из Объект.Запасы Цикл
			Товары.Добавить(СтрокаТЧ);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ОтборТекущегоКП = Новый Структура("НомерВариантаКП", Объект.ОсновнойВариантКП);	
		Товары = Объект.Запасы.НайтиСтроки(ОтборТекущегоКП);
	Иначе	
		Товары = Объект.Запасы;
	КонецЕсли;
	Для Каждого СтрокаЗапаса Из Товары Цикл
		СтрокаЗапаса.Сумма = СтрокаЗапаса.Цена * СтрокаЗапаса.Количество;
		СтрокаЗапаса.СуммаСкидкиОплатыБонусом = 0;
		СуммаДокумента = СуммаДокумента + СтрокаЗапаса.Сумма;		
	КонецЦикла;
	Если СуммаДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыБонуснойПрограммы = РаботаСБонусами.РеквизитыБонуснойПрограммы(Объект.ДисконтнаяКарта);
	
	// Сперва проверим, не оказалось ли у нас в предоплате излишнего количества зачтенных бонусов
	// Что возможно, например, если удалить строку табличной части.
	МаксимальнаяСуммаКРаспределению = ПолучитьМаксимальнуюСуммуОплатыДокумента(Товары,Объект.ДисконтнаяКарта);
	СуммаКРаспределению = Мин(СуммаОплатыВВалютеДокумента, МаксимальнаяСуммаКРаспределению);
	ИзлишнеЗачтеннаяПредоплата = СуммаОплатыВВалютеДокумента - СуммаКРаспределению;
	ОчищенныеСтрокиОплатыБонусами = Новый Массив; 
	Если ИзлишнеЗачтеннаяПредоплата > 0 Тогда
		СтрокиОплатыБонусами = Новый Массив;
		ИмяКолонкиСумма = "СуммаРасчетов";
		ТЧ = Неопределено;
		Отбор = Новый Структура;
		СтрокиОчищеннымиБонусами = Новый Массив;
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "БезналичнаяОплата") Тогда
				ТЧ = Объект.БезналичнаяОплата;
				Отбор = Новый Структура("БонуснаяКарта", Объект.ДисконтнаяКарта);
			КонецЕсли;
			ИмяКолонкиСумма = "СуммаБонусов";
		Иначе
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Предоплата") Тогда
				ТЧ = Объект.Предоплата;
				Отбор = Новый Структура("ОплатаБонусами", Истина);
			КонецЕсли;
		КонецЕсли;
		Если Не ТЧ = Неопределено Тогда
			СтрокиОплатыБонусами = ТЧ.НайтиСтроки(Отбор);
		КонецЕсли;
		Для Каждого СтрокаПредоплаты Из СтрокиОплатыБонусами Цикл			
			СтрокиОчищеннымиБонусами.Добавить(СтрокаПредоплаты);
		КонецЦикла;
		Для Каждого СтрокаУдалить Из СтрокиОчищеннымиБонусами Цикл
			ТЧ.Удалить(СтрокаУдалить);
			ОтменаОплатыБонусами = Истина;
		КонецЦикла;
	КонецЕсли;
	Если ОтменаОплатыБонусами Тогда
		СуммаКРаспределению = 0;
	КонецЕсли;
	// Распределим сумму бонусов по запасам
	Если НЕ СтрокиТоваров = Неопределено Тогда
		// Потребуется заполнить колонку в ТЧ документа, поэтому обходить будем строки исходной ТЧ, а не отфильтрованной ТЗ
		Товары = СтрокиТоваров;
	КонецЕсли;
	ОсталосьСуммаДокумента = СуммаДокумента;
	ОбщийПроцент = 0;
	Если ЗначениеЗаполнено(ОсталосьСуммаДокумента) Тогда
		ОбщийПроцент = 100 * СуммаКРаспределению / ОсталосьСуммаДокумента;
	КонецЕсли;
	
	ОграниченияОплатыБонусами = ПолучитьМаксимальныеПроцентыОплатыСтрок(Товары, Объект.ДисконтнаяКарта);
	СтруктураСтрокДокумента = Новый Структура();
	СтруктураСтрокДокумента.Вставить("СтрокиСОграничениями", Новый Массив());
	СтруктураСтрокДокумента.Вставить("СтрокиБезОграничений", Новый Массив());
	// Сначала нужно обработать строки, где срабатывает ограничение по оплате бонусами для конкретного товара
	Для Каждого ОписаниеОганичения Из ОграниченияОплатыБонусами Цикл
		Если ОбщийПроцент > ОписаниеОганичения.Значение Тогда
			СтруктураСтрокДокумента.СтрокиСОграничениями.Добавить(ОписаниеОганичения.Ключ);
		Иначе
			СтруктураСтрокДокумента.СтрокиБезОграничений.Добавить(ОписаниеОганичения.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыБП = РеквизитыБонуснойПрограммы(Объект.ДисконтнаяКарта);
	СтрокаСМаксимальнойСуммбойБонусов = Неопределено;
	МаксимальнаяСуммаБонусовСтроки = 0;
	// Обработаем по очереди строки, сначала те, что уперлись в ограничение оплаты бонусами, а затем оставшиеся
	Для Каждого КоллекцияСтрок Из СтруктураСтрокДокумента Цикл
		Для Каждого СтрокаЗапаса Из КоллекцияСтрок.Значение Цикл
			ОбщийПроцент = 0;
			Если ЗначениеЗаполнено(ОсталосьСуммаДокумента) Тогда
				ОбщийПроцент = 100 * СуммаКРаспределению / ОсталосьСуммаДокумента;
			КонецЕсли;

			ПроцентОграниченияСтроки = Мин(ОбщийПроцент, ОграниченияОплатыБонусами[СтрокаЗапаса]);
			ОграничениеОплатыБонусами = Окр(СтрокаЗапаса.Сумма * ПроцентОграниченияСтроки / 100, 2);
			КоэффициентСтроки = СтрокаЗапаса.Сумма / ОсталосьСуммаДокумента;
			ОсталосьСуммаДокумента = ОсталосьСуммаДокумента - СтрокаЗапаса.Сумма;
			
			СуммаОплатыСкидкиСтроки = Окр(СуммаОплатыВВалютеДокумента * КоэффициентСтроки, 2);
			СуммаОплатыСкидкиСтроки = Мин(СуммаОплатыСкидкиСтроки, ОграничениеОплатыБонусами);
			СуммаОплатыСкидкиСтроки = Мин(СуммаОплатыСкидкиСтроки, СуммаКРаспределению);
			СтрокаЗапаса.СуммаСкидкиОплатыБонусом = СуммаОплатыСкидкиСтроки;
			СуммаАвтоматическойСкидки = 0;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЗапаса, "СуммаАвтоматическойСкидки") Тогда
				СуммаАвтоматическойСкидки = СтрокаЗапаса.СуммаАвтоматическойСкидки;
			КонецЕсли;
			СуммаРучнойСкидки = 0;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЗапаса, "СуммаСкидкиНаценки") Тогда
				СуммаРучнойСкидки = СтрокаЗапаса.СуммаСкидкиНаценки;
			КонецЕсли;
			СтрокаЗапаса.Сумма = СтрокаЗапаса.Количество * СтрокаЗапаса.Цена - СуммаРучнойСкидки - СуммаАвтоматическойСкидки - СтрокаЗапаса.СуммаСкидкиОплатыБонусом;
			
			// НДС
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаЗапаса.СтавкаНДС);
			СтрокаЗапаса.СуммаНДС = ?(Объект.СуммаВключаетНДС,
									  СтрокаЗапаса.Сумма - (СтрокаЗапаса.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаЗапаса.Сумма * СтавкаНДС / 100);

			// Всего.
			СтрокаЗапаса.Всего = СтрокаЗапаса.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаЗапаса.СуммаНДС);
			
			СуммаКРаспределению = СуммаКРаспределению - СуммаОплатыСкидкиСтроки;
			Если СуммаКРаспределению < 0 Тогда
				СуммаКРаспределению = 0;
			КонецЕсли;
			
			Если СуммаОплатыСкидкиСтроки > МаксимальнаяСуммаБонусовСтроки Тогда 
				МаксимальнаяСуммаБонусовСтроки = СуммаОплатыСкидкиСтроки;
				СтрокаСМаксимальнойСуммбойБонусов = СтрокаЗапаса;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	Если Не СуммаКРаспределению = 0 Тогда
		СуммаСкидкиОплатыБонусомДо =  СтрокаСМаксимальнойСуммбойБонусов.СуммаСкидкиОплатыБонусом;
		СтрокаСМаксимальнойСуммбойБонусов.Сумма = СтрокаСМаксимальнойСуммбойБонусов.Сумма + СтрокаСМаксимальнойСуммбойБонусов.СуммаСкидкиОплатыБонусом;
		СтрокаЗапаса.СуммаСкидкиОплатыБонусом = 0;
		СуммаСкидкиОплатыБонусом = СуммаСкидкиОплатыБонусомДо + СуммаКРаспределению;
		СтрокаСМаксимальнойСуммбойБонусов.СуммаСкидкиОплатыБонусом = СуммаСкидкиОплатыБонусом;
		СтрокаСМаксимальнойСуммбойБонусов.Сумма = СтрокаСМаксимальнойСуммбойБонусов.Сумма - СтрокаСМаксимальнойСуммбойБонусов.СуммаСкидкиОплатыБонусом;
		
		// НДС
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаСМаксимальнойСуммбойБонусов.СтавкаНДС);
		СтрокаСМаксимальнойСуммбойБонусов.СуммаНДС = ?(Объект.СуммаВключаетНДС,
								  СтрокаСМаксимальнойСуммбойБонусов.Сумма - (СтрокаСМаксимальнойСуммбойБонусов.Сумма) / ((СтавкаНДС + 100) / 100),
								  СтрокаСМаксимальнойСуммбойБонусов.Сумма * СтавкаНДС / 100);

		// Всего.
		СтрокаСМаксимальнойСуммбойБонусов.Всего = СтрокаСМаксимальнойСуммбойБонусов.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаСМаксимальнойСуммбойБонусов.СуммаНДС);
	КонецЕсли;	
КонецПроцедуры

Процедура ПрименитьРезультатРасчетаБонусовКОбъекту(Объект, ТаблицаБонусов) Экспорт
	
	Объект.БонусныеБаллыКНачислению.Загрузить(ТаблицаБонусов);
	
КонецПроцедуры

// Возвращает массив ссылок на дисконтные карты
// принадлежащие переданной бонусной программе
Функция ПолучитьКартыБонуснойПрограммы(БонуснаяПрограмма) Экспорт
	
	МассивКарт = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДисконтныеКарты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.Владелец.БонуснаяПрограмма = &БонуснаяПрограмма");
	Запрос.УстановитьПараметр("БонуснаяПрограмма", БонуснаяПрограмма);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивКарт.Добавить(Результат.Ссылка);
	КонецЦикла;
	
	Возврат МассивКарт;
	
КонецФункции

Функция ЕстьДействующиеПравилаНачисления(БонуснаяПрограмма) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АвтоматическиеСкидки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	АвтоматическиеСкидки.Действует
	|	И АвтоматическиеСкидки.БонуснаяПрограмма = &БонуснаяПрограмма
	|	И АвтоматическиеСкидки.ЭтоПравилоНачисленияБонусов
	|	И Не АвтоматическиеСкидки.СпособПредоставления = Значение(Перечисление.СпособыПредоставленияСкидокНаценок.Округление)");
	Запрос.УстановитьПараметр("БонуснаяПрограмма", БонуснаяПрограмма);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

Функция ЕстьДействующиеПравилаОкругления(БонуснаяПрограмма) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АвтоматическиеСкидки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АвтоматическиеСкидки КАК АвтоматическиеСкидки
	|ГДЕ
	|	АвтоматическиеСкидки.Действует
	|	И АвтоматическиеСкидки.БонуснаяПрограмма = &БонуснаяПрограмма
	|	И АвтоматическиеСкидки.ЭтоПравилоНачисленияБонусов
	|	И АвтоматическиеСкидки.СпособПредоставления = Значение(Перечисление.СпособыПредоставленияСкидокНаценок.Округление)");
	Запрос.УстановитьПараметр("БонуснаяПрограмма", БонуснаяПрограмма);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

Функция РеквизитыБонуснойПрограммы(ДисконтнаяКарта) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДисконтныеКарты.Владелец КАК Владелец
	|ПОМЕСТИТЬ Карта
	|ИЗ
	|	Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДисконтныхКарт.БонуснаяПрограмма КАК БонуснаяПрограмма
	|ПОМЕСТИТЬ ВидКарт
	|ИЗ
	|	Карта КАК Карта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	|		ПО Карта.Владелец = ВидыДисконтныхКарт.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеПрограммы.МаксимальныйПроцентОплаты КАК МаксимальныйПроцентОплаты,
	|	БонусныеПрограммы.ПериодичностьСписания КАК ПериодичностьСписания,
	|	БонусныеПрограммы.КоличествоПериодовСписания КАК КоличествоПериодовСписания,
	|	БонусныеПрограммы.ПериодичностьОтсрочки КАК ПериодичностьОтсрочки,
	|	БонусныеПрограммы.КоличествоПериодовОтсрочки КАК КоличествоПериодовОтсрочки,
	|	БонусныеПрограммы.НачислятьБонусыНаДеньРождения КАК НачислятьБонусыНаДеньРождения,
	|	БонусныеПрограммы.ДнейПередДнемРождения КАК ДнейПередДнемРождения,
	|	БонусныеПрограммы.ДнейПослеДняРождения КАК ДнейПослеДняРождения,
	|	БонусныеПрограммы.КоличествоБонусовНаДеньРождения КАК КоличествоБонусовНаДеньРождения,
	|	БонусныеПрограммы.ОтсрочкаНачисления КАК ОтсрочкаНачисления,
	|	БонусныеПрограммы.СписаниеНеиспользованных КАК СписаниеНеиспользованных,
	|	БонусныеПрограммы.НачислятьПередДнемРождения КАК НачислятьПередДнемРождения,
	|	БонусныеПрограммы.СписыватьПослеДняРождения КАК СписыватьПослеДняРождения,
	|	БонусныеПрограммы.НеНачислятьПриОплатеБонусами КАК НеНачислятьПриОплатеБонусами,
	|	БонусныеПрограммы.НачислятьБонусыПриВозврате КАК НачислятьБонусыПриВозврате,
	|	БонусныеПрограммы.НачислятьДатойЗаказа КАК НачислятьДатойЗаказа,
	|	ВидКарт.БонуснаяПрограмма КАК БонуснаяПрограмма,
	|	БонусныеПрограммы.ЕстьУточненияОграниченийОплаты КАК ЕстьУточненияОграниченийОплаты,
	|	БонусныеПрограммы.ЕстьУточненияПоКатегориям КАК ЕстьУточненияПоКатегориям,
	|	БонусныеПрограммы.ЕстьУточненияПоНоменклатуре КАК ЕстьУточненияПоНоменклатуре,
	|	БонусныеПрограммы.ЕстьУточненияПоСегментамНоменклатуры КАК ЕстьУточненияПоСегментамНоменклатуры,
	|	БонусныеПрограммы.ЕстьУточненияПоЦеновымГруппам КАК ЕстьУточненияПоЦеновымГруппам,
	|	БонусныеПрограммы.НачислятьБонусыДоСкидок КАК НачислятьБонусыДоСкидок,
	|	БонусныеПрограммы.Назначение КАК Назначение,
	|	ВЫБОР
	|		КОГДА БонусныеПрограммы.КурсБонусов = 0
	|			ТОГДА 1
	|		ИНАЧЕ БонусныеПрограммы.КурсБонусов
	|	КОНЕЦ КАК КурсБонусов
	|ИЗ
	|	ВидКарт КАК ВидКарт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммы КАК БонусныеПрограммы
	|		ПО ВидКарт.БонуснаяПрограмма = БонусныеПрограммы.Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДисконтнаяКарта);
	
	Результат = Запрос.Выполнить().Выгрузить(); 
	Если Результат.Количество() Тогда
		СтруктураВозврата = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);
	КонецЕсли;
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ЕстьОплатаБонусами(Знач БезналичнаяОплата) Экспорт
	
	НайденныеСтроки = Новый Массив;
	Если БезналичнаяОплата.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	СтрокаОплаты = БезналичнаяОплата[0];
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаОплаты, "ВидОплаты") Тогда
		ОплатаБонусами = Перечисления.ВидыБезналичныхОплат.Бонусы;
		НайденныеСтроки = БезналичнаяОплата.НайтиСтроки(Новый Структура("ВидОплаты", ОплатаБонусами));		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаОплаты, "ОплатаБонусами") Тогда			
		НайденныеСтроки = БезналичнаяОплата.НайтиСтроки(Новый Структура("ОплатаБонусами", Истина));		
	КонецЕсли;
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМаксимальныеПроцентыОплатыСтрок(ТабличнаяЧасть, ДисконтнаяКарта)
	
	Результат = Новый Соответствие;
	
	РеквизитыБП = РаботаСБонусами.РеквизитыБонуснойПрограммы(ДисконтнаяКарта); 
	Если Не ЗначениеЗаполнено(РеквизитыБП) Тогда
		Возврат Результат;
	КонецЕсли;
	ЗначениеМаксимальнойОплатыБП = РеквизитыБП.МаксимальныйПроцентОплаты;
	Если Не ЗначениеЗаполнено(ЗначениеМаксимальнойОплатыБП) Тогда
		ЗначениеМаксимальнойОплатыБП = 100;
	КонецЕсли;
	Если Не РеквизитыБП.ЕстьУточненияОграниченийОплаты Тогда
		Для Каждого Товар Из ТабличнаяЧасть Цикл
		    Результат.Вставить(Товар, ЗначениеМаксимальнойОплатыБП);			
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
		
	УточненияМаксимальнойОплаты = ПолучитьТаблицуУточнений(РеквизитыБП.БонуснаяПрограмма);
	Для Каждого Товар Из ТабличнаяЧасть Цикл
        ЗначениеМаксимальнойОплаты = ЗначениеМаксимальнойОплатыБП;
		
		ПараметрыТовара = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Товар.Номенклатура, "ЦеноваяГруппа, КатегорияНоменклатуры");
		
		// Поиск значения скидки (наценки) для ценовой группы
		Если РеквизитыБП.ЕстьУточненияПоЦеновымГруппам Тогда
			Для Каждого СтрокаТЧ Из УточненияМаксимальнойОплаты Цикл
				Если СтрокаТЧ.ЗначениеУточнения = ПараметрыТовара.ЦеноваяГруппа Тогда
					ЗначениеМаксимальнойОплаты = СтрокаТЧ.ПроцентМаксимальнойОплаты;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		// Поиск значения скидки (наценки) для категории номенклатуры
		ИначеЕсли РеквизитыБП.ЕстьУточненияПоКатегориям Тогда
			// Поиск с учетом иерархии.
			ТекЗначениеУточнения = ПолучитьЗначениеУточненияСУчетомИерархииКатегорий(УточненияМаксимальнойОплаты, Товар.Номенклатура, ПараметрыТовара.КатегорияНоменклатуры);
			Для Каждого СтрокаТЧ Из УточненияМаксимальнойОплаты Цикл
				Если СтрокаТЧ.ЗначениеУточнения = ПараметрыТовара.КатегорияНоменклатуры Тогда
					ЗначениеМаксимальнойОплаты = СтрокаТЧ.ПроцентМаксимальнойОплаты;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ТекЗначениеУточнения <> Неопределено Тогда
				ЗначениеМаксимальнойОплаты = ТекЗначениеУточнения;
			КонецЕсли;			
		ИначеЕсли РеквизитыБП.ЕстьУточненияПоСегментамНоменклатуры Тогда
			Для Каждого СтрокаТЧ Из УточненияМаксимальнойОплаты Цикл
				Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика = Товар.Характеристика Тогда
					ЗначениеМаксимальнойОплаты = СтрокаТЧ.ПроцентМаксимальнойОплаты;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		// Поиск значения скидки (наценки) для номенклатуры
		ИначеЕсли РеквизитыБП.ЕстьУточненияПоНоменклатуре Тогда
			ТекЗначениеУточнения = ПолучитьЗначениеУточненияСУчетомИерархии(РеквизитыБП.БонуснаяПрограмма, УточненияМаксимальнойОплаты, Товар.Номенклатура, Товар.Характеристика);
			Для Каждого СтрокаТЧ Из УточненияМаксимальнойОплаты Цикл				
				Если СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика = Товар.Характеристика Тогда
					ТекЗначениеУточнения = СтрокаТЧ.ПроцентМаксимальнойОплаты;
					Прервать;
				ИначеЕсли СтрокаТЧ.ЗначениеУточнения = Товар.Номенклатура И СтрокаТЧ.Характеристика.Пустая() Тогда
					ТекЗначениеУточнения = СтрокаТЧ.ПроцентМаксимальнойОплаты;
				КонецЕсли;
			КонецЦикла;
			Если ТекЗначениеУточнения <> Неопределено Тогда
				ЗначениеМаксимальнойОплаты = ТекЗначениеУточнения;
			КонецЕсли;			
		КонецЕсли;
	    Результат.Вставить(Товар, ЗначениеМаксимальнойОплаты);			
	КонецЦикла;
	Возврат Результат;
КонецФункции 

Функция ПолучитьТаблицуУточнений(БонуснаяПрограмма)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатурныеГруппы.Ссылка КАК СкидкаНаценка,
	|	НоменклатурныеГруппы.ЗначениеУточнения КАК ЗначениеУточнения,
	|	НоменклатурныеГруппы.Характеристика КАК Характеристика,
	|	НоменклатурныеГруппы.ПроцентМаксимальнойОплаты КАК ПроцентМаксимальнойОплаты,
	|	ВЫРАЗИТЬ(НоменклатурныеГруппы.ЗначениеУточнения КАК Справочник.КатегорииНоменклатуры).ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	Справочник.БонусныеПрограммы КАК БонусныеПрограммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммы.УточненияМаксимальнойОплаты КАК НоменклатурныеГруппы
	|		ПО БонусныеПрограммы.Ссылка = НоменклатурныеГруппы.Ссылка
	|			И (НоменклатурныеГруппы.Ссылка.ЕстьУточненияПоНоменклатуре)
	|ГДЕ
	|	БонусныеПрограммы.ВариантОграниченияПоНоменклатуре = ЗНАЧЕНИЕ(Перечисление.ВариантыОграниченийСкидокПоНоменклатуре.ПоНоменклатуре)
	|	И БонусныеПрограммы.Ссылка В(&БонуснаяПрограмма)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатурныеГруппы.Ссылка,
	|	НоменклатурныеГруппы.ЗначениеУточнения,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	НоменклатурныеГруппы.ПроцентМаксимальнойОплаты,
	|	ВЫРАЗИТЬ(НоменклатурныеГруппы.ЗначениеУточнения КАК Справочник.КатегорииНоменклатуры).ЭтоГруппа
	|ИЗ
	|	Справочник.БонусныеПрограммы КАК БонусныеПрограммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммы.УточненияМаксимальнойОплаты КАК НоменклатурныеГруппы
	|		ПО БонусныеПрограммы.Ссылка = НоменклатурныеГруппы.Ссылка
	|			И (НоменклатурныеГруппы.Ссылка.ЕстьУточненияПоКатегориям)
	|ГДЕ
	|	БонусныеПрограммы.ВариантОграниченияПоНоменклатуре = ЗНАЧЕНИЕ(Перечисление.ВариантыОграниченийСкидокПоНоменклатуре.ПоКатегориям)
	|	И БонусныеПрограммы.Ссылка В(&БонуснаяПрограмма)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураГруппыЦеновыеГруппы.Ссылка,
	|	СоставСегментаНоменклатуры.Номенклатура,
	|	СоставСегментаНоменклатуры.Характеристика,
	|	НоменклатураГруппыЦеновыеГруппы.ПроцентМаксимальнойОплаты,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.БонусныеПрограммы КАК БонусныеПрограммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммы.УточненияМаксимальнойОплаты КАК НоменклатураГруппыЦеновыеГруппы
	|		ПО БонусныеПрограммы.Ссылка = НоменклатураГруппыЦеновыеГруппы.Ссылка
	|			И (БонусныеПрограммы.ЕстьУточненияПоСегментамНоменклатуры)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСегментаНоменклатуры КАК СоставСегментаНоменклатуры
	|		ПО (СоставСегментаНоменклатуры.Сегмент = НоменклатураГруппыЦеновыеГруппы.ЗначениеУточнения)
	|ГДЕ
	|	НоменклатураГруппыЦеновыеГруппы.Ссылка.ВариантОграниченияПоНоменклатуре = ЗНАЧЕНИЕ(Перечисление.ВариантыОграниченийСкидокПоНоменклатуре.ПоСегменту)
	|	И БонусныеПрограммы.Ссылка В(&БонуснаяПрограмма)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦеновыеГруппы.Ссылка,
	|	ЦеновыеГруппы.ЗначениеУточнения,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЦеновыеГруппы.ПроцентМаксимальнойОплаты,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.БонусныеПрограммы КАК БонусныеПрограммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммы.УточненияМаксимальнойОплаты КАК ЦеновыеГруппы
	|		ПО БонусныеПрограммы.Ссылка = ЦеновыеГруппы.Ссылка
	|			И (БонусныеПрограммы.ЕстьУточненияПоЦеновымГруппам)
	|ГДЕ
	|	БонусныеПрограммы.ВариантОграниченияПоНоменклатуре = ЗНАЧЕНИЕ(Перечисление.ВариантыОграниченийСкидокПоНоменклатуре.ПоЦеновымГруппам)
	|	И БонусныеПрограммы.Ссылка В(&БонуснаяПрограмма)
	|";
	Запрос.УстановитьПараметр("БонуснаяПрограмма", БонуснаяПрограмма);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
	
КонецФункции
// Функция возвращает значение (уточнение) автоматической скидки (наценки) для указанной позиции номенклатуры с учетом характеристики и иерархии
//
Функция ПолучитьЗначениеУточненияСУчетомИерархии(СкидкаНаценка, УточненияМаксимальнойОплаты, Номенклатура, Характеристика)
	
	// Пример. В ТЧ выбран Товар0, в уточнении выбраны Товар1 (10%), Товар2 (20%) и Группа1 (15%).
	// Товар0 может быть равен Товар1 или Товар2 или быть в иерархии Группы1.
	
	ТекРодитель = Номенклатура.Родитель;
	МассивРодителей = Новый Массив;
	МассивРодителей.Добавить(Номенклатура);
	Пока ЗначениеЗаполнено(ТекРодитель) Цикл
		МассивРодителей.Добавить(ТекРодитель);
		ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УточненияМаксимальнойОплаты.Характеристика КАК Характеристика,
	|	УточненияМаксимальнойОплаты.ЗначениеУточнения КАК ЗначениеУточнения,
	|	УточненияМаксимальнойОплаты.ПроцентМаксимальнойОплаты КАК ПроцентМаксимальнойОплаты
	|ПОМЕСТИТЬ втГруппы
	|ИЗ
	|	&УточненияМаксимальнойОплаты КАК УточненияМаксимальнойОплаты
	|ГДЕ
	|	УточненияМаксимальнойОплаты.ЗначениеУточнения В(&МассивРодителей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппы.ЗначениеУточнения КАК ЗначениеУточнения,
	|	втГруппы.ПроцентМаксимальнойОплаты КАК ПроцентМаксимальнойОплаты
	|ИЗ
	|	втГруппы КАК втГруппы
	|ГДЕ
	|	(втГруппы.Характеристика = &Характеристика
	|			ИЛИ втГруппы.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ИЛИ ВЫРАЗИТЬ(втГруппы.ЗначениеУточнения КАК Справочник.Номенклатура).ЭтоГруппа)";
	
	Запрос.УстановитьПараметр("МассивРодителей", МассивРодителей);
	Запрос.УстановитьПараметр("УточненияМаксимальнойОплаты", УточненияМаксимальнойОплаты);
	Запрос.УстановитьПараметр("СкидкаНаценка", СкидкаНаценка);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Возврат Выборка.ПроцентМаксимальнойОплаты;
	
	КонецЦикла;
	
КонецФункции

// Функция возвращает значение (уточнение) автоматической скидки (наценки) для указанной позиции номенклатуры с учетом характеристики и иерархии
//
Функция ПолучитьЗначениеУточненияСУчетомИерархииКатегорий(СкидкиНаценкиПоКатегориямНоменклатуры, Номенклатура, Категория)
	
	// Пример. В ТЧ выбран Товар0, в уточнении выбраны Категория1 (10%), Категория2 (20%) и ГруппаКатегорий1 (15%).
	// Товар0 может быть в Категории1 или Категории2 или Категории3, которая находится в иерархии категорий ГруппыКатегорий1.
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	&ПроцентМаксимальнойОплаты КАК ПроцентМаксимальнойОплаты
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка
	|	И Номенклатура.КатегорияНоменклатуры В ИЕРАРХИИ(&ЗначениеУточнения)";

	СчЗапросов = 0;
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	ЗначениеБезХарактеристики = 0;
	Для Каждого ТекУточнение Из СкидкиНаценкиПоКатегориямНоменклатуры Цикл
		Если Не ТекУточнение.ЭтоГруппа Тогда
			Если ТекУточнение.ЗначениеУточнения = Категория Тогда
				Возврат ТекУточнение.ЗначениеСкидкиНаценки;
			КонецЕсли;
		Иначе
			СчЗапросов = СчЗапросов + 1;
			
			ОбработанныйТекстШаблона = СтрЗаменить(ШаблонТекстаЗапроса, "&ЗначениеУточнения", "&ЗначениеУточнения"+СчЗапросов);
			ОбработанныйТекстШаблона = СтрЗаменить(ОбработанныйТекстШаблона, "&ПроцентМаксимальнойОплаты", "&ПроцентМаксимальнойОплаты"+СчЗапросов);
			
			Запрос.УстановитьПараметр("ЗначениеУточнения"+СчЗапросов, ТекУточнение.ЗначениеУточнения);
			Запрос.УстановитьПараметр("ПроцентМаксимальнойОплаты"+СчЗапросов, ТекУточнение.ПроцентМаксимальнойОплаты);
			
			Запрос.Текст = Запрос.Текст + ОбработанныйТекстШаблона+Символы.ПС+"
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|";
		КонецЕсли;
	КонецЦикла;
	
	Если СчЗапросов > 0 Тогда
	
		МРезультатовУточнений = Запрос.ВыполнитьПакет();
		
		СчЗапросов = 0;
		Пока СчЗапросов < МРезультатовУточнений.Количество() Цикл
			Если НЕ МРезультатовУточнений[СчЗапросов].Пустой() Тогда
				Возврат МРезультатовУточнений[СчЗапросов].Выгрузить()[0].ПроцентМаксимальнойОплаты;
			КонецЕсли;
			СчЗапросов = СчЗапросов + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьМаксимальнуюСуммуОплатыДокумента(ТабличнаяЧасть, ДисконтнаяКарта) Экспорт
	
	МаксимальнаяСумма = 0;
	МаксимальныеСуммыОплаты = ПолучитьМаксимальныеПроцентыОплатыСтрок(ТабличнаяЧасть, ДисконтнаяКарта);
	Для Каждого СуммаОплаты Из МаксимальныеСуммыОплаты Цикл
		СтрокаТЧ = СуммаОплаты.Ключ;
		СуммаТовара = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаСкидкиОплатыБонусом;
		ДоступноОплатить = Окр(СуммаОплаты.Значение * СуммаТовара / 100, 2);
		ТекущаяМаксимальнаяОплата = Макс(ДоступноОплатить, 0);
		МаксимальнаяСумма = МаксимальнаяСумма + ТекущаяМаксимальнаяОплата;
	КонецЦикла;
	Возврат МаксимальнаяСумма;
	
КонецФункции
#КонецОбласти

#Область ДвиженияПоРегистрам

Функция СформироватьТекстЗапросаПоБонуснымБаллам(ОтгрузкаПоЗаказу = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	// Датой заказа без отсрочки
	|		КОГДА БонусныеПрограммы.НачислятьДатойЗаказа
	|			И НЕ БонусныеПрограммы.ОтсрочкаНачисления
	|			ТОГДА ВременнаяТаблицаНачисленияБонусов.ДатаНачисления
	// Датой отгрузки без отсрочки
	|		КОГДА НЕ БонусныеПрограммы.НачислятьДатойЗаказа
	|			И НЕ БонусныеПрограммы.ОтсрочкаНачисления
	|			ТОГДА ВременнаяТаблицаНачисленияБонусов.Период
	// Датой Заказа с отсрочкой
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ДЕНЬ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, НЕДЕЛЯ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ДЕКАДА, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, МЕСЯЦ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, КВАРТАЛ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ПОЛУГОДИЕ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ГОД, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	// Датой отгрузки с отсрочкой
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ДЕНЬ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, НЕДЕЛЯ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ДЕКАДА, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, МЕСЯЦ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, КВАРТАЛ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ПОЛУГОДИЕ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ГОД, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		ИНАЧЕ ВременнаяТаблицаНачисленияБонусов.Период
	|	КОНЕЦ КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта КАК БонуснаяКарта,
	|	СУММА(ВременнаяТаблицаНачисленияБонусов.Количество) КАК Начислено,
	|	NULL КАК КСписанию,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПервоначальногоНачисления
	|ИЗ
	|	ВременнаяТаблицаНачисленияБонусов КАК ВременнаяТаблицаНачисленияБонусов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммы КАК БонусныеПрограммы
	|				ПО ВидыДисконтныхКарт.БонуснаяПрограмма = БонусныеПрограммы.Ссылка
	|			ПО ДисконтныеКарты.Владелец = ВидыДисконтныхКарт.Ссылка
	|		ПО ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта = ДисконтныеКарты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	// Датой заказа без отсрочки
	|		КОГДА БонусныеПрограммы.НачислятьДатойЗаказа
	|			И НЕ БонусныеПрограммы.ОтсрочкаНачисления
	|			ТОГДА ВременнаяТаблицаНачисленияБонусов.ДатаНачисления
	// Датой отгрузки без отсрочки
	|		КОГДА НЕ БонусныеПрограммы.НачислятьДатойЗаказа
	|			И НЕ БонусныеПрограммы.ОтсрочкаНачисления
	|			ТОГДА ВременнаяТаблицаНачисленияБонусов.Период
	// Датой Заказа с отсрочкой
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ДЕНЬ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, НЕДЕЛЯ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ДЕКАДА, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, МЕСЯЦ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, КВАРТАЛ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ПОЛУГОДИЕ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			И БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ГОД, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	// Датой отгрузки с отсрочкой
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ДЕНЬ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, НЕДЕЛЯ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ДЕКАДА, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, МЕСЯЦ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, КВАРТАЛ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ПОЛУГОДИЕ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ГОД, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		ИНАЧЕ ВременнаяТаблицаНачисленияБонусов.Период
	|	КОНЕЦ,
	|	ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНачисленияБонусов.ДатаСгорания,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта,
	|	NULL,
	|	СУММА(ВременнаяТаблицаНачисленияБонусов.Количество),
	|	ВременнаяТаблицаНачисленияБонусов.ДатаНачисления
	|ИЗ
	|	ВременнаяТаблицаНачисленияБонусов КАК ВременнаяТаблицаНачисленияБонусов
	|ГДЕ
	|	НЕ ВременнаяТаблицаНачисленияБонусов.ДатаСгорания = ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаНачисленияБонусов.ДатаНачисления,
	|	ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта,
	|	ВременнаяТаблицаНачисленияБонусов.ДатаСгорания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСписанияБонусов.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВременнаяТаблицаСписанияБонусов.БонуснаяКарта КАК БонуснаяКарта,
	|	ВременнаяТаблицаСписанияБонусов.Количество КАК Начислено,
	|	ВременнаяТаблицаСписанияБонусов.КСписанию КАК КСписанию,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПервоначальногоНачисления
	|ИЗ
	|	ВременнаяТаблицаСписанияБонусов КАК ВременнаяТаблицаСписанияБонусов";
	
	Если Не ОтгрузкаПоЗаказу Тогда
		// Во всех случаях, кроме отгруки по заказу, даты должны браться из табличной части
		// Дата из шапки документа берется только в случае отгрузки по заказу, и если в настройке бонусной программы отключена отгрузка по заказу
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "БонусныеПрограммы.НачислятьДатойЗаказа", "Истина")
	КонецЕсли;
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОбъединитьТаблицыБонусов(ТаблицаБонусныеБаллы, ТаблицаОплатаБонусами, Ссылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОплатаБонусами.БонуснаяКарта КАК БонуснаяКарта,
	|	ТаблицаОплатаБонусами.Период КАК Период
	|ПОМЕСТИТЬ ТаблицаСписания
	|ИЗ
	|	&ТаблицаОплатаБонусами КАК ТаблицаОплатаБонусами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.Период КАК Период,
	|	БонусныеБаллы.БонуснаяКарта КАК БонуснаяКарта,
	|	СУММА(ВЫБОР
	|			КОГДА БонусныеБаллы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -БонусныеБаллы.КСписанию
	|			ИНАЧЕ БонусныеБаллы.КСписанию
	|		КОНЕЦ) КАК КСписанию,
	|	БонусныеБаллы.ДатаПервоначальногоНачисления КАК ДатаПервоначальногоНачисления
	|ИЗ
	|	ТаблицаСписания КАК ТаблицаСписания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|		ПО ТаблицаСписания.Период >= БонусныеБаллы.ДатаПервоначальногоНачисления
	|			И (НЕ БонусныеБаллы.ДатаПервоначальногоНачисления = ДАТАВРЕМЯ(1, 1, 1))
	|			И ТаблицаСписания.Период < БонусныеБаллы.Период
	|			И (БонусныеБаллы.КСписанию <> 0)
	|			И (БонусныеБаллы.Регистратор <> &Ссылка)
	|			И ТаблицаСписания.БонуснаяКарта = БонусныеБаллы.БонуснаяКарта
	|
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.Период,
	|	БонусныеБаллы.ДатаПервоначальногоНачисления,
	|	БонусныеБаллы.БонуснаяКарта
	|
	|ИМЕЮЩИЕ
	|	СУММА(БонусныеБаллы.КСписанию) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	
	Запрос.УстановитьПараметр("ТаблицаОплатаБонусами", ТаблицаОплатаБонусами);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТаблицаКСписанию = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаОплаты Из ТаблицаОплатаБонусами Цикл
		
		НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплаты);
		
		СуммаОплаты = СтрокаОплаты.Начислено;
		
		СтруктураПоиска = Новый Структура("БонуснаяКарта", СтрокаОплаты.БонуснаяКарта);
			
		МассивСтрокКСписанию = ТаблицаКСписанию.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаКСписанию Из МассивСтрокКСписанию Цикл
			
			Если СтрокаКСписанию.КСписанию <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СуммаОплаты > СтрокаКСписанию.КСписанию Тогда
				СуммаКСписанию = СтрокаКСписанию.КСписанию;
				СтрокаКСписанию.КСписанию = 0;
				СуммаОплаты = СуммаОплаты - СуммаКСписанию;
			Иначе
				СуммаКСписанию = СуммаОплаты;
				СтрокаКСписанию.КСписанию = СтрокаКСписанию.КСписанию - СуммаКСписанию;
				СуммаОплаты = 0;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
			НоваяСтрока.Период = СтрокаКСписанию.Период;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.БонуснаяКарта = СтрокаКСписанию.БонуснаяКарта;
			НоваяСтрока.Начислено = 0;
			НоваяСтрока.КСписанию = СуммаКСписанию;
			НоваяСтрока.ДатаПервоначальногоНачисления = СтрокаКСписанию.ДатаПервоначальногоНачисления;
			
			Если СуммаОплаты <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыделитьВозвратыИзТаблицыБонусов(ТаблицаБонусныеБаллы, ТаблицаОплатыБонусами) Экспорт
	
	СписокКУдалению = Новый СписокЗначений;
	
	Для Каждого СтрокаБонусов Из ТаблицаОплатыБонусами Цикл
		Если СтрокаБонусов.Начислено < 0 Тогда
			
			СписокКУдалению.Добавить(СтрокаБонусов);
			НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБонусов);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.Начислено = -СтрокаБонусов.Начислено;
			
			НоваяСтрока = ТаблицаБонусныеБаллы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБонусов);
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.Начислено = 0;
			НоваяСтрока.КСписанию = -СтрокаБонусов.Начислено;
			НоваяСтрока.ДатаПервоначальногоНачисления = СтрокаБонусов.Период;
			РеквизитыПрограммы = РеквизитыБонуснойПрограммы(СтрокаБонусов.БонуснаяКарта);
			НоваяСтрока.Период = ПрибавитьКДатеПериод(СтрокаБонусов.Период,
				РеквизитыПрограммы.КоличествоПериодовСписания,
				РеквизитыПрограммы.ПериодичностьСписания);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СписокКУдалению Цикл
		
		ТаблицаОплатыБонусами.Удалить(СтрокаКУдалению.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТекстЗапросаПоНачислениямБонусныхБаллов(ЭтоВозврат = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ВременнаяТаблицаНачисленияБонусов.ДатаНачисления
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ДЕНЬ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, НЕДЕЛЯ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ДЕКАДА, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, МЕСЯЦ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, КВАРТАЛ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ПОЛУГОДИЕ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ГОД, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		ИНАЧЕ ВременнаяТаблицаНачисленияБонусов.Период
	|	КОНЕЦ КАК Период,
	|	ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта КАК БонуснаяКарта,
	|	ВременнаяТаблицаНачисленияБонусов.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаНачисленияБонусов.Характеристика КАК Характеристика,
	|	БонусныеПрограммы.Ссылка КАК БонуснаяПрограмма,
	|	ДисконтныеКарты.ВладелецКарты КАК ВладелецКарты,
	|	ВременнаяТаблицаНачисленияБонусов.АналитикаНачисленияБонусов КАК АналитикаНачисленияБонусов,
	|	СУММА(ВременнаяТаблицаНачисленияБонусов.Количество) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаНачисленияБонусов КАК ВременнаяТаблицаНачисленияБонусов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДисконтныеКарты КАК ДисконтныеКарты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДисконтныхКарт КАК ВидыДисконтныхКарт
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммы КАК БонусныеПрограммы
	|				ПО ВидыДисконтныхКарт.БонуснаяПрограмма = БонусныеПрограммы.Ссылка
	|			ПО ДисконтныеКарты.Владелец = ВидыДисконтныхКарт.Ссылка
	|		ПО ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта = ДисконтныеКарты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА БонусныеПрограммы.НачислятьДатойЗаказа
	|			ТОГДА ВременнаяТаблицаНачисленияБонусов.ДатаНачисления
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ДЕНЬ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, НЕДЕЛЯ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ДЕКАДА, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, МЕСЯЦ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, КВАРТАЛ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ПОЛУГОДИЕ, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		КОГДА БонусныеПрограммы.ПериодичностьОтсрочки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ВременнаяТаблицаНачисленияБонусов.Период, ГОД, БонусныеПрограммы.КоличествоПериодовОтсрочки)
	|		ИНАЧЕ ВременнаяТаблицаНачисленияБонусов.Период
	|	КОНЕЦ,
	|	ВременнаяТаблицаНачисленияБонусов.БонуснаяКарта,
	|	ВременнаяТаблицаНачисленияБонусов.Номенклатура,
	|	ВременнаяТаблицаНачисленияБонусов.Характеристика,
	|	БонусныеПрограммы.Ссылка,
	|	ДисконтныеКарты.ВладелецКарты,
	|	ВременнаяТаблицаНачисленияБонусов.АналитикаНачисленияБонусов";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область АссистентУправления

#Область ПрограммныйИнтерфейс

Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	Настройки.ПроверкаДокументаПередЗаписью = Истина;
	Настройки.ПроверкаДокументаПриЗаписи = Истина;
	
КонецПроцедуры

Процедура ПроверкаДокументаПередЗаписью(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ АссистентУправления.Используется() Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДополнительныеСвойства(Источник);
	
	ПроверитьИзменениеБонусовПередЗаписью(Источник);
	
КонецПроцедуры

Процедура ПроверкаДокументаПриЗаписи(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ АссистентУправления.Используется() Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьИзменениеБонусовПриЗаписи(Источник);
	
КонецПроцедуры

Процедура ВыполнитьДействие(Действие, Контекст, ПараметрыЗадачи, ДополнительныеПараметры, Результат) Экспорт
	
	Если Действие = "ОповеститьСотрудникаОбИзмененииБонусовВОбсуждении" Тогда
		ОповеститьСотрудникаОбИзмененииБонусовВОбсуждении(Контекст, ПараметрыЗадачи, ДополнительныеПараметры, Результат);
	ИначеЕсли Действие = "ОповеститьСотрудникаОбИзмененииБонусовПоEmail" Тогда
		ОповеститьСотрудникаОбИзмененииБонусовПоEmail(Контекст, ПараметрыЗадачи, ДополнительныеПараметры, Результат);
	ИначеЕсли Действие = "ОповеститьСотрудникаОбИзмененииБонусовПоSMS" Тогда
		ОповеститьСотрудникаОбИзмененииБонусовПоSMS(Контекст, ПараметрыЗадачи, ДополнительныеПараметры, Результат);
	Иначе
		ТекстОшибки = СтрШаблон(НСтр("ru='Неизвестное действие: %1.'"), Действие);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСобытий

Процедура ПроверитьИзменениеБонусовПередЗаписью(Источник)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "ДисконтнаяКарта")
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ДисконтнаяКарта)
		ИЛИ НЕ ЗначениеЗаполнено(РаботаСБонусами.ПолучитьБонуснуюПрограмму(Источник.ДисконтнаяКарта))
		ИЛИ НЕ РаботаСБонусами.ЗадачаОповещенияПокупателяОБонусахНайдена(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	СостояниеДо = ПолучитьДвиженияПоБонусам(Источник);
	ПараметрыБонусов = Новый Структура("БонусыДокументаДо, ЭтоНовый", СостояниеДо, Источник.ЭтоНовый());
	Источник.ДополнительныеСвойства.АссистентУправления.Вставить("БонусыДокумента", ПараметрыБонусов);
	
КонецПроцедуры

Процедура ПроверитьИзменениеБонусовПриЗаписи(Источник)
	
	ДопСвойстваАссистентУправления = Неопределено;
	БонусыДокумента = Неопределено;
	Если Не Источник.ДополнительныеСвойства.Свойство("АссистентУправления", ДопСвойстваАссистентУправления) 
		ИЛИ НЕ ДопСвойстваАссистентУправления.Свойство("БонусыДокумента", БонусыДокумента)
		ИЛИ НЕ БонусыДокумента.Свойство("БонусыДокументаДо") Тогда
		Возврат;
	КонецЕсли;
	СостояниеБонусовДо = БонусыДокумента.БонусыДокументаДо;
	СостояниеБонусовТекущее = ПолучитьДвиженияПоБонусам(Источник, Ложь);
	ЭтоНовый = Источник.ДополнительныеСвойства.АссистентУправления.БонусыДокумента.ЭтоНовый;
	Если ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	НачисленоИзменилось = Не СостояниеБонусовТекущее.Начислено = СостояниеБонусовДо.Начислено;
	СписаноИзменилось = Не СостояниеБонусовТекущее.Списано = СостояниеБонусовДо.Списано;
	ЗадачаОповещенияПокупателяНайдена = ЗадачаОповещенияПокупателяОБонусахНайдена(Источник.Ссылка);
	
	Если НЕ НачисленоИзменилось	И НЕ СписаноИзменилось Тогда
		Возврат;
	ИначеЕсли НЕ ЗадачаОповещенияПокупателяНайдена Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПокупателя") 
		И НЕ Источник.ЭтоЗаказНаряд() Тогда
		Если НачисленоИзменилось И СписаноИзменилось Тогда
			ПриИзмененииНачисленияСписанияБонусовЗаказПокупателя(Источник.Ссылка, СостояниеБонусовДо, СостояниеБонусовТекущее);
		ИначеЕсли НачисленоИзменилось Тогда
			ПриИзмененииНачисленияБонусовЗаказПокупателя(Источник.Ссылка, СостояниеБонусовДо, СостояниеБонусовТекущее);
		ИначеЕсли СписаноИзменилось Тогда
			ПриИзмененииСписанияБонусовЗаказПокупателя(Источник.Ссылка, СостояниеБонусовДо, СостояниеБонусовТекущее);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЧекККМ") Тогда 
		Если НачисленоИзменилось И СписаноИзменилось Тогда
			ПриИзмененииНачисленияСписанияБонусовЧекККМ(Источник.Ссылка, СостояниеБонусовДо, СостояниеБонусовТекущее);
		ИначеЕсли НачисленоИзменилось Тогда
			ПриИзмененииНачисленияБонусовЧекККМ(Источник.Ссылка, СостояниеБонусовДо, СостояниеБонусовТекущее);
		ИначеЕсли СписаноИзменилось Тогда
			ПриИзмененииСписанияБонусовЧекККМ(Источник.Ссылка, СостояниеБонусовДо, СостояниеБонусовТекущее);
		КонецЕсли;			
	Иначе
		Если НачисленоИзменилось И СписаноИзменилось Тогда
			ПриИзмененииНачисленияСписанияБонусовОтгрузка(Источник.Ссылка, СостояниеБонусовДо, СостояниеБонусовТекущее);
		ИначеЕсли НачисленоИзменилось Тогда
			ПриИзмененииНачисленияБонусовОтгрузка(Источник.Ссылка, СостояниеБонусовДо, СостояниеБонусовТекущее);
		ИначеЕсли СписаноИзменилось Тогда
			ПриИзмененииСписанияБонусовОтгрузка(Источник.Ссылка, СостояниеБонусовДо, СостояниеБонусовТекущее);
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

Процедура ПриОпределенииТиповПредметовСобытий(Предметы) Экспорт
	
	Предметы.Вставить("БонусныеПрограммы", НСтр("ru='Бонусные программы'"));
	
КонецПроцедуры

Процедура ПриОпределенииСобытий(События, Предмет) Экспорт
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Идентификатор = "СписаниеБонусовПриПродаже";
	НовоеСобытие.Представление = НСтр("ru='Списание бонусов при продаже'");
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Идентификатор = "НачислениеБонусовПриПродаже";
	НовоеСобытие.Представление = НСтр("ru='Начисление бонусов при продаже'");
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Идентификатор = "СписаниеНачислениеБонусовПриПродаже";
	НовоеСобытие.Представление = НСтр("ru='Списание и начисление бонусов при продаже'");
	//
	//НовоеСобытие = События.Добавить();
	//НовоеСобытие.Идентификатор = "СписаниеБонусовПриСгорании";
	//НовоеСобытие.Представление = НСтр("ru='Сгорание неиспользованных бонусов'");
	//
	//НовоеСобытие = События.Добавить();
	//НовоеСобытие.Идентификатор = "НачислениеБонусовНаДеньРождения";
	//НовоеСобытие.Представление = НСтр("ru='Начисление бонусов на день рождения'");

	НовоеСобытие = События.Добавить();
	НовоеСобытие.Идентификатор = "ИзменилосьСписаниеБонусов";
	НовоеСобытие.Представление = НСтр("ru='Произошло изменение списания бонусов при продаже'");
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Идентификатор = "ИзменилосьНачислениеБонусов";
	НовоеСобытие.Представление = НСтр("ru='Произошло изменение начисления бонусов при продаже'");
	
	НовоеСобытие = События.Добавить();
	НовоеСобытие.Идентификатор = "ИзменилосьСписаниеНачислениеБонусов";
	НовоеСобытие.Представление = НСтр("ru='Произошло изменение списания и начисления бонусов при продаже'");

КонецПроцедуры

Процедура ПриОпределенииДействий(Действия) Экспорт
	
КонецПроцедуры

Процедура ПриОпределенииПолучателейСообщения(Получатели) Экспорт
	
	Получатель = Получатели.Добавить();
	Получатель.Путь          = "ВладелецКарты";
	Получатель.Представление = НСтр("ru='Покупатель'");
	Получатель.Тип           = Тип("СправочникСсылка.Контрагенты");
	
	Получатель = Получатели.Добавить();
	Получатель.Путь          = "ВладелецКарты.КонтактноеЛицо";
	Получатель.Представление = НСтр("ru='Основной контакт покупателя'");
	Получатель.Тип = Тип("СправочникСсылка.КонтактныеЛица");

	//Получатель = Получатели.Добавить();
	//Получатель.Путь          = "Ответственный";
	//Получатель.Представление = НСтр("ru='Сотрудник'");
	//Получатель.Тип = Тип("СправочникСсылка.Сотрудники");

КонецПроцедуры

Функция ВыполненыУсловия(Предмет, Условия) Экспорт
	
КонецФункции

Процедура ПередОбработкойСобытия(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
КонецПроцедуры

Процедура ПослеОбработкиСобытия(Предмет, Событие, Действие, ЗначенияЗаполнения, ДополнительныеПараметры, Результат) Экспорт
	
	Если Действие = "СоздатьОтправитьЭлектронноеПисьмо" ИЛИ Действие = "СоздатьОтправитьSMS" Тогда
		
		Если НЕ (Результат.Успешно И Результат.Свойство("Документ")) Тогда
			Возврат;
		КонецЕсли;
		
		ТекстПричины = "";
		Если Событие = "СписаниеБонусовПриПродаже"
			ИЛИ Событие = "СписаниеНачислениеБонусовПриПродаже"
			ИЛИ Событие = "СписаниеБонусовПриСгорании" Тогда
			ТекстПричины = НСтр("ru='списании'");
		ИначеЕсли Событие = "НачислениеБонусовПриПродаже"
			ИЛИ Событие = "НачислениеБонусовНаДеньРождения" Тогда
			ТекстПричины = НСтр("ru='начислении'");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекстПричины) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеСообщения = ОбсужденияУНФ.НовыйДанныеСообщения();
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДисконтныеКарты") Тогда
			ДанныеСообщения.Объект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ВладелецКарты");
		КонецЕсли;
		ДанныеСообщения.Текст = СтрШаблон(НСтр("ru='Отправила %1 о %2 бонусов'"), ПолучитьНавигационнуюСсылку(Результат.Документ), ТекстПричины);
		
		Результат.ДанныеСообщений.Добавить(ДанныеСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДвиженияПоБонусам(Документ, ПоДвижениям = Истина) Экспорт
	Результат = Новый Структура("Начислено, Списано", 0, 0);
	Если ПоДвижениям Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА БонусныеБаллы.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
		|					ТОГДА БонусныеБаллы.Начислено
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК Начислено,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА БонусныеБаллы.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
		|					ТОГДА БонусныеБаллы.Начислено
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК Списано
		|ИЗ
		|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
		|ГДЕ
		|	БонусныеБаллы.Регистратор = &Документ"; 
		Запрос.УстановитьПараметр("Документ", Документ.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.Начислено = Выборка.Начислено;
			Результат.Списано = Выборка.Списано; 
		КонецЕсли;
	Иначе
		Результат.Начислено = Документ.БонусныеБаллыКНачислению.Итог("КоличествоБонусныхБаллов");
		Если ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя")
			И НЕ Документ.ЭтоЗаказНаряд() Тогда
			Результат.Начислено = 0;
		КонецЕсли;
		Если ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			Результат.Списано   = Документ.БезналичнаяОплата.Итог("СуммаБонусов");
		Иначе                  
			СтрокиОплатБонусами = Документ.Предоплата.НайтиСтроки(Новый Структура("ОплатаБонусами", Истина));
			Результат.Списано   = Документ.Предоплата.Выгрузить(СтрокиОплатБонусами, "СуммаРасчетов").Итог("СуммаРасчетов");
		КонецЕсли;
	КонецЕсли;
	Возврат Результат ;
КонецФункции

Функция ТекущийМенеджер()
	
	Возврат "РаботаСБонусами";
	
КонецФункции

Процедура ДобавитьДополнительныеСвойства(Объект)
	
	Если НЕ Объект.ДополнительныеСвойства.АссистентУправления.Свойство(ТекущийМенеджер()) Тогда
		Объект.ДополнительныеСвойства.АссистентУправления.Вставить(ТекущийМенеджер(), Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

#Область СобытияИзмененияБонусов

Процедура ПриИзмененииНачисленияБонусовЗаказПокупателя(Заказ, ПредыдущееСостояние, НовоеСостояние)
	ТекущееСобытие = "ПриИзмененииНачисленияБонусовЗаказПокупателя";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
	ДополнительныеПараметры.Вставить("НовоеСостояние", НовоеСостояние);
	//ДополнительныеПараметры.Вставить("ЭтоНовый", ЭтоНовыйЗаказ);
	
	АссистентУправления.ПриСрабатыванииСобытия2(ТекущийМенеджер(), ТекущееСобытие, Заказ,, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПриИзмененииНачисленияБонусовОтгрузка(ДокументОтгрузки, ПредыдущееСостояние, НовоеСостояние)
	ТекущееСобытие = "ПриИзмененииНачисленияБонусовОтгрузка";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
	ДополнительныеПараметры.Вставить("НовоеСостояние", НовоеСостояние);
	//ДополнительныеПараметры.Вставить("ЭтоНовый", ЭтоНовыйЗаказ);
	
	АссистентУправления.ПриСрабатыванииСобытия2(ТекущийМенеджер(), ТекущееСобытие, ДокументОтгрузки,, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПриИзмененииНачисленияБонусовЧекККМ(ЧекККМ, ПредыдущееСостояние, НовоеСостояние)
	ТекущееСобытие = "ПриИзмененииНачисленияБонусовЧекККМ";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
	ДополнительныеПараметры.Вставить("НовоеСостояние", НовоеСостояние);
	//ДополнительныеПараметры.Вставить("ЭтоНовый", ЭтоНовыйЗаказ);
	АссистентУправления.ПриСрабатыванииСобытия2(ТекущийМенеджер(), ТекущееСобытие, ЧекККМ);
	
КонецПроцедуры

Процедура ПриИзмененииСписанияБонусовЗаказПокупателя(Заказ, ПредыдущееСостояние, НовоеСостояние)
	ТекущееСобытие = "ПриИзмененииСписанияБонусовЗаказПокупателя";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
	ДополнительныеПараметры.Вставить("НовоеСостояние", НовоеСостояние);
	//ДополнительныеПараметры.Вставить("ЭтоНовый", ЭтоНовыйЗаказ);
	
	АссистентУправления.ПриСрабатыванииСобытия2(ТекущийМенеджер(), ТекущееСобытие, Заказ,, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПриИзмененииСписанияБонусовОтгрузка(ДокументОтгрузки, ПредыдущееСостояние, НовоеСостояние)
	ТекущееСобытие = "ПриИзмененииСписанияБонусовОтгрузка";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
	ДополнительныеПараметры.Вставить("НовоеСостояние", НовоеСостояние);
	//ДополнительныеПараметры.Вставить("ЭтоНовый", ЭтоНовыйЗаказ);
	
	АссистентУправления.ПриСрабатыванииСобытия2(ТекущийМенеджер(), ТекущееСобытие, ДокументОтгрузки,, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПриИзмененииСписанияБонусовЧекККМ(ЧекККМ, ПредыдущееСостояние, НовоеСостояние)
	ТекущееСобытие = "ПриИзмененииСписанияБонусовЧекККМ";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
	ДополнительныеПараметры.Вставить("НовоеСостояние", НовоеСостояние);
	//ДополнительныеПараметры.Вставить("ЭтоНовый", ЭтоНовыйЗаказ);
	АссистентУправления.ПриСрабатыванииСобытия2(ТекущийМенеджер(), ТекущееСобытие, ЧекККМ);
	
КонецПроцедуры

Процедура ПриИзмененииНачисленияСписанияБонусовЗаказПокупателя(Заказ, ПредыдущееСостояние, НовоеСостояние)
	ТекущееСобытие = "ПриИзмененииСписанияНачисленияБонусовЗаказПокупателя";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
	ДополнительныеПараметры.Вставить("НовоеСостояние", НовоеСостояние);
	//ДополнительныеПараметры.Вставить("ЭтоНовый", ЭтоНовыйЗаказ);
	
	АссистентУправления.ПриСрабатыванииСобытия2(ТекущийМенеджер(), ТекущееСобытие, Заказ,, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПриИзмененииНачисленияСписанияБонусовОтгрузка(ДокументОтгрузки, ПредыдущееСостояние, НовоеСостояние)
	ТекущееСобытие = "ПриИзмененииСписанияНачисленияБонусовОтгрузка";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
	ДополнительныеПараметры.Вставить("НовоеСостояние", НовоеСостояние);
	//ДополнительныеПараметры.Вставить("ЭтоНовый", ЭтоНовыйЗаказ);
	
	АссистентУправления.ПриСрабатыванииСобытия2(ТекущийМенеджер(), ТекущееСобытие, ДокументОтгрузки,, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПриИзмененииНачисленияСписанияБонусовЧекККМ(ЧекККМ, ПредыдущееСостояние, НовоеСостояние)
	ТекущееСобытие = "ПриИзмененииСписанияНачисленияБонусовЧекККМ";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
	ДополнительныеПараметры.Вставить("НовоеСостояние", НовоеСостояние);
	//ДополнительныеПараметры.Вставить("ЭтоНовый", ЭтоНовыйЗаказ);
	АссистентУправления.ПриСрабатыванииСобытия2(ТекущийМенеджер(), ТекущееСобытие, ЧекККМ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДействияАссистента

#Область ДействияПриИзмененииБонусныхБалловДокумента

Процедура ОповеститьСотрудникаОбИзмененииБонусовВОбсуждении(Контекст, ПараметрыЗадачи, ДополнительныеПараметры, Результат) Экспорт
	
	ЭтоНовый = Неопределено;
	ДополнительныеПараметры.Свойство("ЭтоНовый", ЭтоНовый);
	
	Документ = Контекст.Предмет;
	
	ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Ответственный");
	
	ПользовательОтветственный = РегистрыСведений.СотрудникиПользователя.ПолучитьПользователяПоСотруднику(ДанныеЗаказа.Ответственный);
	
	Если Не ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		ИЛИ НЕ ДополнительныеПараметры.Свойство("ПредыдущееСостояние")
		ИЛИ НЕ ДополнительныеПараметры.Свойство("НовоеСостояние") Тогда
		Возврат;
	КонецЕсли;

	БылоСписано = ДополнительныеПараметры.ПредыдущееСостояние.Списано;
	СталоСписано = ДополнительныеПараметры.НовоеСостояние.Списано;
	БылоНачислено = ДополнительныеПараметры.ПредыдущееСостояние.Начислено;
	СталоНачислено = ДополнительныеПараметры.НовоеСостояние.Начислено;
	
	ТекстСообщения = "";
	Если СтрНайти(Контекст.Событие, "ПриИзмененииСписанияНачисленияБонусов") Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Списание и начисление бонусов по документу %1 изменилось. 
			|Ранее было списано %2, а теперь %3. 
			|Ранее было начислено %4, а теперь %5.
			|Обратите внимание, покупателю ранее уже отправлялось сообщение о списанных бонусах. 
			|Новое сообщение автоматически не отправлялось.'"),
			ПолучитьНавигационнуюСсылку(Документ),
			Формат(БылоСписано,"ЧДЦ=2; ЧН=0.00"),
			Формат(СталоСписано,"ЧДЦ=2; ЧН=0.00"),
			Формат(БылоНачислено,"ЧДЦ=2; ЧН=0.00"),
			Формат(СталоНачислено,"ЧДЦ=2; ЧН=0.00"));
	ИначеЕсли СтрНайти(Контекст.Событие, "ПриИзмененииСписанияБонусов") Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Списание бонусов по документу %1 изменилось. 
			|Ранее было списано %2, а теперь %3. 
			|Обратите внимание, покупателю ранее уже отправлялось сообщение о списанных бонусах. 
			|Новое сообщение автоматически не отправлялось.'"),
			ПолучитьНавигационнуюСсылку(Документ),
			Формат(БылоСписано,"ЧДЦ=2; ЧН=0.00"),
			Формат(СталоСписано,"ЧДЦ=2; ЧН=0.00"));
		
	ИначеЕсли СтрНайти(Контекст.Событие, "ПриИзмененииНачисленияБонусов") Тогда		
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Начисление бонусов по документу %1 изменилось. 
			|Ранее было начислено %2, а теперь %3. 
			|Обратите внимание, покупателю ранее уже отправлялось сообщение о списанных бонусах. 
			|Новое сообщение автоматически не отправлялось.'"),
			ПолучитьНавигационнуюСсылку(Документ),
			Формат(БылоНачислено,"ЧДЦ=2; ЧН=0.00"),
			Формат(СталоНачислено,"ЧДЦ=2; ЧН=0.00"));
	Иначе
		Возврат;
	КонецЕсли;
	
	ДанныеСообщения = ОбсужденияУНФ.НовыйДанныеСообщения();
	СпособыОповещений = Перечисления.СпособОповещенияАссистентаУправления;
	
	Если ПараметрыЗадачи.СпособОповещения = СпособыОповещений.СообщениеОбщегоОбсуждения Тогда
		ДанныеСообщения.Объект = ПараметрыЗадачи.ИдентификаторОбщегоОбсуждения;
	ИначеЕсли ПараметрыЗадачи.СпособОповещения = СпособыОповещений.СообщениеКонтекстногоОбсужденияБезОповещения Тогда
		ДанныеСообщения.Объект = Документ;
	ИначеЕсли ПараметрыЗадачи.СпособОповещения = СпособыОповещений.СообщениеКонтекстногоОбсужденияПользователю Тогда
		ДанныеСообщения.Объект = Документ;
		ДанныеСообщения.Получатель = ПараметрыЗадачи.ПользовательДляОповещения;
	ИначеЕсли ПараметрыЗадачи.СпособОповещения = СпособыОповещений.СообщениеКонтекстногоОбсужденияОтветственному Тогда
		ДанныеСообщения.Объект = Документ;
		ДанныеСообщения.Получатель = ДанныеЗаказа.Ответственный;
	ИначеЕсли ПараметрыЗадачи.СпособОповещения = СпособыОповещений.СообщениеЛичногоОбсужденияОтветственному Тогда
		ДанныеСообщения.Объект = ПользовательОтветственный;
	ИначеЕсли ПараметрыЗадачи.СпособОповещения = СпособыОповещений.СообщениеЛичногоОбсужденияПользователю Тогда
		ДанныеСообщения.Объект = ПараметрыЗадачи.ПользовательДляОповещения;
	КонецЕсли;
	
	ДанныеСообщения.Текст = ТекстСообщения;
	Результат.ДанныеСообщений.Добавить(ДанныеСообщения);
	
КонецПроцедуры

Процедура ОповеститьСотрудникаОбИзмененииБонусовПоEmail(Контекст, ПараметрыЗадачи, ДополнительныеПараметры, Результат) Экспорт
		
	Событие = СоздатьEmail(Контекст.Предмет, ПараметрыЗадачи.УчетнаяЗапись);
	
	Событие.ЗаполнитьПоШаблону(ПараметрыЗадачи.ШаблонСообщения, Контекст.Предмет);
	Событие.Участники.Очистить();
	ЗаполнитьУчастниковСобытия(Событие, ПараметрыЗадачи.ПользовательДляОповещения);
	
	Событие.Записать();
	
	ОтправитьСобытие(Событие);
	
КонецПроцедуры

Процедура ОповеститьСотрудникаОбИзмененииБонусовПоSMS(Контекст, ПараметрыЗадачи, ДополнительныеПараметры, Результат) Экспорт
		
	Событие = СоздатьSMS(Контекст.Предмет);
	Событие.ЗадачаАссистентаУправления = 

	Событие.ЗаполнитьПоШаблону(ПараметрыЗадачи.ШаблонСообщения, Контекст.Предмет);
	Событие.Участники.Очистить();
	ЗаполнитьУчастниковСобытия(Событие, ПараметрыЗадачи.ПользовательДляОповещения);
	
	Событие.Записать();
	
	ОтправитьСобытие(Событие);
	
КонецПроцедуры

Функция СоздатьEmail(ДокументОснование, УчетнаяЗапись)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ТипСобытия", Перечисления.ТипыСобытий.ЭлектронноеПисьмо);
	ЗначенияЗаполнения.Вставить("ДокументОснование", ДокументОснование);
	
	НовоеСобытие = Документы.Событие.СоздатьДокумент();
	НовоеСобытие.ДополнительныеСвойства.Вставить("ЭтоЗаписьАссистентом", Истина);
	НовоеСобытие.Заполнить(ЗначенияЗаполнения);
	НовоеСобытие.Дата = ТекущаяДатаСеанса();
	НовоеСобытие.УчетнаяЗапись = УчетнаяЗапись;
	
	Возврат НовоеСобытие;
	
КонецФункции

Функция СоздатьSMS(ДокументОснование)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ТипСобытия", Перечисления.ТипыСобытий.СообщениеSMS);
	ЗначенияЗаполнения.Вставить("ДокументОснование", ДокументОснование);
	
	НовоеСобытие = Документы.Событие.СоздатьДокумент();
	НовоеСобытие.ДополнительныеСвойства.Вставить("ЭтоЗаписьАссистентом", Истина); 
	НовоеСобытие.Заполнить(ЗначенияЗаполнения);
	НовоеСобытие.Дата = ТекущаяДатаСеанса();
	
	Возврат НовоеСобытие;
	
КонецФункции

Процедура ЗаполнитьУчастниковСобытия(Событие, Получатель)
	
	Если Событие.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
	ИначеЕсли Событие.ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
		ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Иначе
		Возврат;
	КонецЕсли;
	
	КонтактнаяИнформацияПолучателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Получатель), ТипКонтактнойИнформации, , ТекущаяДатаСеанса());
	Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформацияПолучателя Цикл
		НоваяСтрока = Событие.Участники.Добавить();
		НоваяСтрока.Контакт = Получатель;
		НоваяСтрока.КакСвязаться = СтрокаКонтактнойИнформации.Представление;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполненоКакСвязатьсяВСобытии(Событие)
	
	Для каждого Участник Из Событие.Участники Цикл
		Если ЗначениеЗаполнено(Участник.КакСвязаться) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОтправитьСобытие(Событие)
	
	Если Событие.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо
		И Событие.ТипСобытия <> Перечисления.ТипыСобытий.СообщениеSMS Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполненоКакСвязаться = ЗаполненоКакСвязатьсяВСобытии(Событие);
	ПолучательСообщения = АссистентУправления.ПолучитьОтветственного(Событие.Ссылка);
	
	Если НЕ ЗаполненоКакСвязаться Тогда
		ДанныеСообщения = ОбсужденияУНФ.НовыйДанныеСообщения();
		ДанныеСообщения.Объект = Событие.Ссылка;
		ДанныеСообщения.Текст = НСтр("ru='Не удалось отправить сообщение, т.к. отсутствуют получатели'");
		ДанныеСообщения.Автор = АссистентУправления.ПользовательАссистент();
		ДанныеСообщения.Получатель = ПолучательСообщения;
		ОбсужденияУНФ.СоздатьСообщениеОтложенно(ДанныеСообщения);
		Возврат;
	КонецЕсли;
	
	Попытка
		Если Событие.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
			Событие.ОтправитьЭлектронноеПисьмо();
		ИначеЕсли Событие.ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
			Событие.ОтправитьSMS();
		КонецЕсли;
		СообщениеОтправлено = Истина;
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОтправлено = Ложь;
	КонецПопытки;
	
	Если СообщениеОтправлено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСообщения = ОбсужденияУНФ.НовыйДанныеСообщения();
	ДанныеСообщения.Объект = Событие.Ссылка;
	ДанныеСообщения.Текст = ТекстОшибки;
	ДанныеСообщения.Автор = АссистентУправления.ПользовательАссистент();
	ДанныеСообщения.Получатель = ПолучательСообщения;
	ОбсужденияУНФ.СоздатьСообщениеОтложенно(ДанныеСообщения);
	
КонецПроцедуры

Функция ЗадачаОповещенияПокупателяОБонусахНайдена(Документ)Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Событие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Событие КАК Событие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиАссистентаУправления.События КАК СобытияРегистрации
	|		ПО Событие.ЗадачаАссистентаУправления = СобытияРегистрации.Ссылка
	|ГДЕ
	|	Событие.ТипСобытия В (ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.СообщениеSMS), ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо))
	|	И СобытияРегистрации.СобытиеИдентификатор В (""СписаниеНачислениеБонусовПриПродаже"", ""СписаниеБонусовПриПродаже"", ""НачислениеБонусовПриПродаже"")
	|	И Событие.ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Событие.Ссылка
	|ИЗ
	|	Документ.Событие КАК Событие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Событие.ДокументыОснования КАК ОснованияСобытий
	|		ПО Событие.Ссылка = ОснованияСобытий.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиАссистентаУправления.События КАК СобытияРегистрации
	|		ПО Событие.ЗадачаАссистентаУправления = СобытияРегистрации.Ссылка
	|ГДЕ
	|	Событие.ТипСобытия В (ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.СообщениеSMS), ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо))
	|	И СобытияРегистрации.СобытиеИдентификатор В (""СписаниеНачислениеБонусовПриПродаже"", ""СписаниеБонусовПриПродаже"", ""НачислениеБонусовПриПродаже"")
	|	И ОснованияСобытий.ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОчередьЗадачАссистентаУправления.Задача
	|ИЗ
	|	РегистрСведений.ОчередьЗадачАссистентаУправления КАК ОчередьЗадачАссистентаУправления
	|ГДЕ
	|	ОчередьЗадачАссистентаУправления.Событие В (""СписаниеНачислениеБонусовПриПродаже"", ""СписаниеБонусовПриПродаже"", ""НачислениеБонусовПриПродаже"")
	|	И ОчередьЗадачАссистентаУправления.Предмет = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование",Документ); 
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
КонецФункции

Процедура АссистентУправленияПриСрабатыванииСобытия(ДокументОбъект) Экспорт
	
	Если РаботаСБонусами.ЗадачаОповещенияПокупателяОБонусахНайдена(ДокументОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ДокументОбъект.ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	Начислено = ДокументОбъект.БонусныеБаллыКНачислению.Итог("КоличествоБонусныхБаллов");
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗаказПокупателя")
		И НЕ ДокументОбъект.ЭтоЗаказНаряд() Тогда
		// В заказе покупателя начисление баллов - предварительное, рассылку нужно выполнять по фактической отгрузке.
		Начислено = 0;
	КонецЕсли;
	ОплатаБонусами = ДокументОбъект.Предоплата.НайтиСтроки(Новый Структура("ОплатаБонусами", Истина));
	Списано   = ДокументОбъект.Предоплата.Выгрузить(ОплатаБонусами, "СуммаРасчетов").Итог("СуммаРасчетов");
	
	ЕстьНачисление = Начислено <> 0;
	ЕстьСписание = Списано <> 0;
	
	Событие = Неопределено;
	Если ЕстьНачисление И ЕстьСписание Тогда
		Событие = "СписаниеНачислениеБонусовПриПродаже";
	ИначеЕсли ЕстьНачисление Тогда
		Событие = "НачислениеБонусовПриПродаже";
	ИначеЕсли ЕстьСписание Тогда
		Событие = "СписаниеБонусовПриПродаже";
	КонецЕсли;
	
	Если Событие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Начислено", Начислено);
	ПараметрыСообщения.Вставить("Списано", Списано);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыСообщения", ПараметрыСообщения);
	
	АссистентУправления.ПриСрабатыванииСобытия(ДокументОбъект.ДисконтнаяКарта, Событие, ДокументОбъект.Ссылка, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
