#Область ПрограммныйИнтерфейс

// Процедура запускает регламент загрузки статусов заказов СБП из формы списка документов
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма-владелец, откуда вызывается обработчик;
//
Процедура ЗагрузитьСтатусыОплатыИзФормыСписка(Форма) Экспорт

	ОснованиеПлатежа = Новый Массив;
	ОснованиеПлатежа.Добавить(Форма.Элементы.Список.ТекущаяСтрока);
	
	ПараметрыВыполненияКоманды = ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды();
    ПараметрыВыполненияКоманды.Вставить("Форма", Форма);
	
	Подключаемый_ЗагрузитьСтатусыОплаты(ОснованиеПлатежа, ПараметрыВыполненияКоманды);
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиКлиентПереопределяемый.ПриОткрытииФормыQRКода.
//
Процедура ПриОткрытииФормыQRКода(Форма, ДанныеПлатежнойСсылки, ОповещениеПослеЗавершенияНастройкиФормы) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		ОповещениеПослеЗавершенияНастройкиФормы.ДополнительныеПараметры, 
		ДанныеПлатежнойСсылки);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещениеПослеЗавершенияНастройкиФормы, Форма, "ДисплейПокупателя");
	// Конец ПодключаемоеОборудование

КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиКлиентПереопределяемый.ПриОтображенииQRКода.
//
Процедура ПриОтображенииQRКода(ДанныеПлатежнойСсылки, Параметры) Экспорт
	
	ВывестиQRКодНаДисплей(
		ДанныеПлатежнойСсылки.ПлатежнаяСсылка, 
		Base64Строка(ДанныеПлатежнойСсылки.QRКод), 
		Новый ОписаниеОповещения("ПечатьПречекаЗавершение", ЭтотОбъект));
																				
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиКлиентПереопределяемый.ПриОбработкеНажатияКоманды.
//
Процедура ПриОбработкеНажатияКоманды(Форма, Команда, ДанныеПлатежнойСсылки) Экспорт
	
	Если Команда.Имя = "ПечатьПречека" Тогда

        ПечатьПречека(
			ДанныеПлатежнойСсылки.ПлатежнаяСсылка, 
			0, 
			Новый ОписаниеОповещения("ПечатьПречекаЗавершение", ЭтотОбъект));
			
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиКлиентПереопределяемый.ПриЗакрытииФормыQRКода
//
Процедура ПриЗакрытииФормыQRКода(Форма) Экспорт

	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, Форма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

// См. ПереводыСБПc2bКлиентПереопределяемый.ПриЗаполненииПараметровСообщенияБезШаблонаСБП
//
Процедура ПриЗаполненииПараметровСообщенияБезШаблонаСБП(ПараметрыСообщения, ПараметрыОперации) Экспорт
	
	ПараметрыОплаты = Новый Структура("СуммаСсылкиСБП, ПлатежнаяСсылка", 0);
	ЗаполнитьЗначенияСвойств(ПараметрыОплаты, ПараметрыОперации);
	
	Шаблон = ИнтеграцияСПлатежнымиСистемамиУНФВызовСервера.ШаблонСообщенияОплатаСБП(
		ПараметрыСообщения.Предмет, 
		ПараметрыОплаты.ПлатежнаяСсылка,
		ПараметрыОплаты.СуммаСсылкиСБП);

	ПараметрыСообщения.Тема  	= Шаблон.Тема;
	ПараметрыСообщения.Текст 	= Шаблон.Тело;
	
    ПараметрыСообщения.Вставить("Вложения", Новый Массив);

КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиКлиентПереопределяемый.ПриОткрытииФормыПодключенияСсылки
Процедура ПриОткрытииФормыПодключенияСсылки(Форма, Отказ) Экспорт
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, Форма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование

КонецПроцедуры

// См. ИнтеграцияСПлатежнымиСистемамиКлиентПереопределяемый.ПриЗакрытииФормыПодключенияСсылки
//
Процедура ПриЗакрытииФормыПодключенияСсылки(Форма, ЗавершениеРаботы) Экспорт

	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, Форма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

// Определяет алгоритм, выполняющийся при открытии подключения кассовой ссылки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма подключения кассовой ссылки.
//  ИмяСобытия - Строка - может быть использовано для идентификации сообщений
//    принимающими их формами.
//  Параметр - Произвольный - могут быть переданы любые необходимые данные для обработки.
//  Источник - Произвольный - источник события, например, в качестве источника может быть
//   указана другая форма.//
Процедура ОбработкаОповещенияФормыПодключенияСсылки(
		Форма,
		ИмяСобытия,
		Параметр,
		Источник) Экспорт
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И Форма.ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Штрихкод = Параметр[0];
			Иначе
				Штрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Штрихкод) Тогда
				Форма.КассоваяСсылка = Штрихкод;     
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

// Выполняет открытие формы настройка кассового qr-кода СБП
//
// Параметры:
//  КассаККМ 		- ОпределяемыйТип.КассаККМРМК - касса qr-кода;
//  Организация 	- ОпределяемыйТип.ОрганизацияРМК - организация кассового qr-кода;
//  ТорговыйОбъект 	- ОпределяемыйТип.ТорговыйОбъектРМК - торговый объект кассового qr-кода;
//  ОповещениеОЗакрытииФормы - ОписаниеОповещения - оповещение при закрытии формы
//	ДополнительныеПараметры - Структура - дополнительные параметры открытия формы настройки
//		*РазрешитьВыборКассыККМ - Булево - признак активности поля кассы ккм для выбора
//
Процедура ОткрытьФормуНастройкиКассовогоQRКода(КассаККМ, Организация, ТорговыйОбъект, ОповещениеОЗакрытииФормы = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КассаККМ", 				КассаККМ);
	ПараметрыФормы.Вставить("Организация", 				Организация);
	ПараметрыФормы.Вставить("ТорговыйОбъект", 			ТорговыйОбъект);     
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ДополнительныеПараметры, Истина);
	КонецЕсли;
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаПодключенияКассовогоQRКодаСБП", 
		ПараметрыФормы, 
		, 
		, 
		, 
		, 
		ОповещениеОЗакрытииФормы,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// См. СистемаБыстрыхПлатежейКлиентПереопределяемый.ПриОбработкеНавигационнойСсылкиДополнительнойИнформации
//
Процедура ПриОбработкеНавигационнойСсылкиДополнительнойИнформации(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ДанныеФормы) Экспорт
		
	СтандартнаяОбработка 	= Ложь;
	ПараметрыФормы		 	= Новый Структура();

	ПараметрыФормы.Вставить("РазрешитьВыборКассыККМ", Истина);
	ПараметрыФормы.Вставить("Организация", 			  "ПоУмолчанию");
	ПараметрыФормы.Вставить("СпособОплаты", 		  "ПоУмолчанию");
	
	Для Каждого НастройкаОплаты Из ДанныеФормы.ПараметрыОплатыСБПc2b Цикл
		ПараметрыФормы.Вставить(НастройкаОплаты.Ключ, НастройкаОплаты.Значение);
	КонецЦикла;
	
	ПараметрыПересчета	 	= Новый Структура;
	ПараметрыПересчета.Вставить("НастройкиФормы", 					 ПараметрыФормы);
	ПараметрыПересчета.Вставить("ДекорацияДополнительнаяИнформация", Элемент);
	
	ПересчитатьНастройкиСБП = Новый ОписаниеОповещения("ПересчитатьНастройкиСБП", ЭтотОбъект, ПараметрыПересчета);
	
	ОткрытьФормуНастройкиКассовогоQRКода(
		, 
		ПараметрыФормы.Организация, 
		ПараметрыФормы.ТорговыйОбъект, 
		ПересчитатьНастройкиСБП, 
		ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПересчитатьНастройкиСБП(РезультатВопроса, ДополнительныеПараметры) Экспорт

	НастройкиФормы		= ДополнительныеПараметры.НастройкиФормы;
	НастройкиЭлемента   = Новый Структура("Видимость", Ложь);
	
	ИнтеграцияСПлатежнымиСистемамиУНФВызовСервера.НастройкаДекорацииПодключенияКассовыхСсылок(
		НастройкиЭлемента, 
		НастройкиФормы.Интеграция, 
		НастройкиФормы.Организация, 
		НастройкиФормы.ТорговыйОбъект,
		НастройкиФормы.СпособОплаты);

	Для Каждого СвойствоЭлемента Из НастройкиЭлемента Цикл	
		ДополнительныеПараметры.ДекорацияДополнительнаяИнформация[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиQRКодНаДисплей(ИдентификаторQRКода, КартинкаQRКода, ОписаниеОповещениеПриЗавершении) Экспорт
	
	Если ОборудованиеДисплеиПокупателяКлиент.ПодключенныеДисплеиПокупателяВыводятQRКод() Тогда
		
		ПараметрыОперации = ОборудованиеДисплеиПокупателяКлиент.ПараметрыОперацииДисплейПокупателя();
		ПараметрыОперации.ЗначениеQRКода = ИдентификаторQRКода;
		ПараметрыОперации.КартинкаQRКода = КартинкаQRКода;
		
		ОборудованиеДисплеиПокупателяКлиент.НачатьВыводQRКодаНаДисплейПокупателя(
			ОписаниеОповещениеПриЗавершении, 
			Новый УникальныйИдентификатор, 
			Неопределено, 
			ПараметрыОперации);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьПречека(ИдентификаторQRКода, СуммаОперации, ОписаниеОповещениеПриЗавершении) Экспорт
	
	СБП				  = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей");
	ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатиQRКодаНаФискальномУстройстве();
		
	ПараметрыОперации.СуммаОперации		  		= СуммаОперации;
	ПараметрыОперации.ТипПлатежнойСистемы 		= СБП;
	ПараметрыОперации.QRКод.ЗначениеКода  		= ИдентификаторQRКода;
	ПараметрыОперации.QRКод.ТекстПользователя 	= НСтр("ru='Для совершения платежа отсканируйте QR-код'");
	
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьQRКодаНаФискальномУстройстве(
		ОписаниеОповещениеПриЗавершении, 
		Новый УникальныйИдентификатор, 
		Неопределено, 
		ПараметрыОперации); 
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
Процедура Подключаемый_ЗагрузитьСтатусыОплаты(ОснованиеПлатежа, ПараметрыВыполненияКоманды = Неопределено) Экспорт

	Форма = ПараметрыВыполненияКоманды.Форма;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Загрузка статусов операций.'");
	
	РезультатВыполнения = ИнтеграцияСПлатежнымиСистемамиУНФВызовСервера.ЗагрузитьСтатусыОплатыЗапускЗадания(
		Форма.УникальныйИдентификатор);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ЗагрузитьСтатусыОплатыЗавершение",
		ЭтотОбъект);
		
	Если РезультатВыполнения.Статус = "Выполнено" Или РезультатВыполнения.Статус = "Ошибка" Тогда
		ЗагрузитьСтатусыОплатыЗавершение(РезультатВыполнения, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		РезультатВыполнения,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

Процедура ЗагрузитьСтатусыОплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Загрузка статусов операций успешно завершена.'"),
			,
			,
			БиблиотекаКартинок.Успешно32);
			
		Оповестить("ОнлайнОплата_ЗагруженыДокументы");
			
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьОповещениеПользователя(
			Результат.КраткоеПредставлениеОшибки,
			,
			,
			БиблиотекаКартинок.Ошибка32);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьПречекаЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда  
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции         

Процедура ОткрытьФормуПлатежнойСсылкиПродолжение(Знач ПроверкаПройдена, Знач Параметры) Экспорт
	
	Если Не ПроверкаПройдена Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОснованиеПлатежа", Параметры.ОснованиеПлатежа);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодготовкиПлатежнойСсылкиСБП", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти
