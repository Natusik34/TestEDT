
#Область ПрограммныйИнтерфейс

// См. ЭлектроннаяПочтаУНФ.ПодготовленныеЭлектронныеАдресаПолучателей
Функция ПодготовленныеЭлектронныеАдресаПолучателей(МассивОбъектов) Экспорт
	
	Возврат ЭлектроннаяПочтаУНФ.ПодготовленныеЭлектронныеАдресаПолучателей(МассивОбъектов);
	
КонецФункции

// См. ЭлектроннаяПочтаУНФ.ИспользуетсяРаботаССобытиями
Функция ИспользуетсяРаботаССобытиями() Экспорт
	
	Возврат ЭлектроннаяПочтаУНФ.ИспользуетсяРаботаССобытиями();
	
КонецФункции

// Вызывает Справочники.КонтактныеФормыGoogle.ПодготовитьКонтактнуюИнформациюПоДаннымКФ
//
// Параметры:
//  Событие - ДокументСсылка.Событие - письмо
//  КакСвязаться - Строка - электронная почта, телефон
// 
// Возвращаемое значение:
//  Соответствие - см Справочники.КонтактныеФормыGoogle.ПодготовитьКонтактнуюИнформациюПоДаннымКФ
//  Неопределено - см Справочники.КонтактныеФормыGoogle.ПодготовитьКонтактнуюИнформациюПоДаннымКФ
//
Функция ПодготовитьКонтактнуюИнформациюПоДаннымКФ(Событие, КакСвязаться) Экспорт
	Возврат Справочники.КонтактныеФормыGoogle.ПодготовитьКонтактнуюИнформациюПоДаннымКФ(Событие, КакСвязаться);
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗначениеРеквизитовСобытияДляОтвета(Знач Письмо, Знач УникальныйИдентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументСобытие.Ссылка КАК Ссылка,
		|	ДокументСобытие.ТипСобытия КАК ТипСобытия,
		|	ДокументСобытие.НачалоСобытия КАК НачалоСобытия,
		|	ДокументСобытие.СписокУчастников КАК СписокУчастников,
		|	ДокументСобытие.Тема КАК Тема,
		|	ДокументСобытие.Содержание КАК Содержание,
		|	ДокументСобытие.СодержаниеHTML КАК СодержаниеHTML,
		|	ДокументСобытие.КартинкиHTML КАК КартинкиHTML,
		|	ДокументСобытие.ИсточникПривлечения КАК ИсточникПривлечения,
		|	ДокументСобытие.ЗагрузитьПриОткрытии КАК ЗагрузитьПриОткрытии,
		|	ДокументСобытие.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ДокументСобытие.ВходящееИсходящееСобытие КАК ВходящееИсходящееСобытие,
		|	СобытиеУчастники.ТипПолучателяЭлектронногоПисьма КАК ТипПолучателяЭлектронногоПисьма,
		|	СобытиеУчастники.КакСвязаться КАК КакСвязаться,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(СвязиАдресатКонтактCRM.КонтактCRM), ПРЕДСТАВЛЕНИЕ(СобытиеУчастники.Контакт)) КАК КонтактПредставление,
		|	ЕСТЬNULL(СвязиАдресатКонтактCRM.КонтактCRM, СобытиеУчастники.Контакт) КАК КонтактCRM,
		|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК УчетнаяЗаписьАдресЭлектроннойПочты,
		|	УчетныеЗаписиЭлектроннойПочты.Представление КАК УчетнаяЗаписьПредставление
		|ИЗ
		|	Документ.Событие КАК ДокументСобытие
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Событие.Участники КАК СобытиеУчастники
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиАдресатКонтактCRM КАК СвязиАдресатКонтактCRM
		|			ПО СобытиеУчастники.Контакт = СвязиАдресатКонтактCRM.Адресат
		|		ПО ДокументСобытие.Ссылка = СобытиеУчастники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|		ПО ДокументСобытие.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ГДЕ
		|	ДокументСобытие.Ссылка = &Ссылка
		|ИТОГИ
		|	МАКСИМУМ(УчетнаяЗаписьАдресЭлектроннойПочты),
		|	МАКСИМУМ(УчетнаяЗаписьПредставление)
		|ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Письмо);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка.Следующий();
	
	Результат = Новый Структура;
	
	Результат.Вставить("Ссылка", Письмо);
	Результат.Вставить("ТипСобытия", Выборка.ТипСобытия);
	Результат.Вставить("НачалоСобытия", Выборка.НачалоСобытия);
	Результат.Вставить("СписокУчастников", Выборка.СписокУчастников);
	Результат.Вставить("Тема", Выборка.Тема);
	Результат.Вставить("Содержание", Выборка.Содержание);
	Результат.Вставить("СодержаниеHTML", Выборка.СодержаниеHTML);
	Результат.Вставить("КартинкиHTML", Выборка.КартинкиHTML);
	Результат.Вставить("ИсточникПривлечения", Выборка.ИсточникПривлечения);
	Результат.Вставить("ЗагрузитьПриОткрытии", Выборка.ЗагрузитьПриОткрытии);
	Результат.Вставить("УчетнаяЗапись", Выборка.УчетнаяЗапись);
	Результат.Вставить("ВходящееИсходящееСобытие", Выборка.ВходящееИсходящееСобытие);
	
	Участники = Новый Массив;
	
	ОтКого = Неопределено;
	
	ВыборкаУчастников = Выборка.Выбрать();
	Пока ВыборкаУчастников.Следующий() Цикл
		
		Если ВыборкаУчастников.ТипПолучателяЭлектронногоПисьма = Перечисления.ТипыПолучателейЭлектронногоПисьма.ОтКого Тогда
			
			Если ОтКого = Неопределено Тогда
				
				ОтКого = Новый Структура;
				ОтКого.Вставить("Ссылка", ВыборкаУчастников.КонтактCRM);
				ОтКого.Вставить("Представление", ВыборкаУчастников.КонтактПредставление);
				ОтКого.Вставить("КакСвязаться", ВыборкаУчастников.КакСвязаться);
				
				Продолжить;
				
			КонецЕсли;
			
			ВажностьОтКого = ЭлектроннаяПочтаУНФ.ВажностьОтображенияКонтакта(ОтКого.Ссылка);
			ВажностьДубляОтправителя = ЭлектроннаяПочтаУНФ.ВажностьОтображенияКонтакта(ВыборкаУчастников.Ссылка);
			Если ВажностьДубляОтправителя > ВажностьОтКого Тогда
				
				ОтКого.Вставить("Ссылка", ВыборкаУчастников.КонтактCRM);
				ОтКого.Вставить("Представление", ВыборкаУчастников.КонтактПредставление);
				ОтКого.Вставить("КакСвязаться", ВыборкаУчастников.КакСвязаться);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтКого = Неопределено Тогда
		ОтКого = СтрШаблон("%1 <%2>", Выборка.УчетнаяЗаписьПредставление, Выборка.УчетнаяЗаписьАдресЭлектроннойПочты);
	Иначе
		ОтКого = СтрШаблон("%1 <%2>", ОтКого.Представление, ОтКого.КакСвязаться);
	КонецЕсли;
	Результат.Вставить("ОтКого", ОтКого);
	
	Вложения = Документы.Событие.ВложенияСобытия(Письмо, УникальныйИдентификатор);
	Результат.Вставить("Вложения", Вложения);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьСобытиеССодержаниемИзПредпросмотра(Ссылка, ТекстПисьма) Экспорт
	
	УдалитьШапкуСМетаданными(ТекстПисьма);
	
	Объект = Ссылка.ПолучитьОбъект();
	Объект.Заблокировать();
	Объект.СодержаниеHTML = ТекстПисьма;
	Объект.Записать();
	
КонецПроцедуры

Функция СсылкаИзНавигационной(Знач НС) Экспорт
	
	ПерваяТочка = СтрНайти(НС, "e1cib/data/");
	Если ПерваяТочка = 0 Тогда
		Возврат НС;
	КонецЕсли;
	
	ВтораяТочка = СтрНайти(НС, "?ref=");
	
	ПредставлениеТипа   = Сред(НС, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
	ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
	ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НС, ВтораяТочка + 5));
	Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьШапкуСМетаданными(ТекстHTML)
	
	НачалоШапки = СтрНайти(ТекстHTML, "<!-- Начало шапки -->");
	Если НачалоШапки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КонецШапки = СтрНайти(ТекстHTML, "<!-- Конец шапки -->");
	Если НачалоШапки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КонецШапки = КонецШапки + СтрДлина("<!-- Конец шапки -->");
	
	КонтентДоШапки = Сред(ТекстHTML, 1, НачалоШапки - 1);
	КонтентПослеШапки = Сред(ТекстHTML, КонецШапки);
	
	ТекстHTML = СтрШаблон("%1%2", КонтентДоШапки, КонтентПослеШапки);
	
КонецПроцедуры

#КонецОбласти