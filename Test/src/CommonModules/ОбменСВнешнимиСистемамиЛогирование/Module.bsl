#Область ПрограммныйИнтерфейс

// Возвращает признак логирования.
// 
// Возвращаемое значение:
//  Булево - Логирование включено.
//
Функция ЛогированиеВключено( УчетнаяЗапись = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	Настройки = ЛогированиеНастройкиПолучить( УчетнаяЗапись );
	
	Возврат Настройки.ЛогированиеВключено = Истина;
	
КонецФункции

Функция ЛогированиеНастройкиПолучить( Знач УчетнаяЗапись = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );

   	#Область ПроверкаВходящихПараметров
	// УчетнаяЗапись
	ПроверкаЗначение = УчетнаяЗапись;
	ПроверкаОжидаемыеТипы = Метаданные.ОпределяемыеТипы.ОбменСВнешнимиСистемамиЛогированиеУчетнаяЗапись.Тип.Типы();
	ПроверкаОжидаемыеТипы.Добавить( Тип( "Неопределено" ) );
	ПроверитьЗначениеРезультат = ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( ПроверкаЗначение, , ПроверкаОжидаемыеТипы, 
	Ложь, Ложь );
	
	Если ПроверитьЗначениеРезультат = Ложь Тогда
		УчетнаяЗапись = Неопределено;
	КонецЕсли;
	#КонецОбласти
	
	Результат = Новый Структура( "УчетнаяЗапись, ЛогированиеВключено, ДлительностьХраненияЗаписейДней", 
	УчетнаяЗапись, Ложь, ЛогированиеДлительностьХраненияЗаписейДнейПоУмолчанию() );
	
	ЗапросТекст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменСВнешнимиСистемамиЛогированиеНастройки.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ОбменСВнешнимиСистемамиЛогированиеНастройки.ЛогированиеВключено КАК ЛогированиеВключено,
	|	ОбменСВнешнимиСистемамиЛогированиеНастройки.ДлительностьХраненияЗаписейДней КАК ДлительностьХраненияЗаписейДней
	|ИЗ
	|	РегистрСведений.ОбменСВнешнимиСистемамиЛогированиеНастройки КАК ОбменСВнешнимиСистемамиЛогированиеНастройки
	|ГДЕ
	|	ОбменСВнешнимиСистемамиЛогированиеНастройки.УчетнаяЗапись = &УчетнаяЗапись";
	
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	ЗапросРезультат = Запрос.Выполнить();
	
	Если ЗапросРезультат.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗапросВыборка = ЗапросРезультат.Выбрать();
	ЗапросВыборка.Следующий();
	ЗаполнитьЗначенияСвойств( Результат, ЗапросВыборка );
	
	Возврат Результат;
	
КонецФункции

// Включить/выключить логирование
//
// Параметры:
//  УчетнаяЗапись   - ОпределяемыйТип.ОбменСВнешнимиСистемамиЛогированиеУчетнаяЗапись - не обязательный
//  Значение   - Булево - Истина - включить логирование
//  Параметры   - Структура - Дополнительные значения, не обязательный
// 
// Возвращаемое значение:
//  Булево - Установка значения выполнена.
//
Функция ЛогированиеВключеноЗначениеУстановить( УчетнаяЗапись = Неопределено, Значение = Ложь, Параметры = Неопределено ) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	Менеджер = РегистрыСведений.ОбменСВнешнимиСистемамиЛогированиеНастройки.СоздатьМенеджерЗаписи();
	Менеджер.УчетнаяЗапись = УчетнаяЗапись;
	Менеджер.ЛогированиеВключено = Значение;
	Менеджер.ДлительностьХраненияЗаписейДней = ЛогированиеДлительностьХраненияЗаписейДнейПоУмолчанию();
	Менеджер.Записать( Истина );
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Истина;
КонецФункции

// Записать комментарий в лог
//
// Параметры:
//  Комментарий   - Строка - Комментарий
//  УчетнаяЗапись   - СправочникСсылка.УчетныеЗаписиМаркетплейсов - не обязательный
//  ЭтоОшибка   - Булево - Признак ошибки, не обязательный
//  Параметры   - Структура - Дополнительные значения для записи в лог, не обязательный
// 
// Возвращаемое значение:
//  Булево - Установка значения выполнена.
//
Функция ЗаписатьВЛог( Комментарий, УчетнаяЗапись = Неопределено, ЭтоОшибка = Ложь, Параметры = Неопределено ) Экспорт

	Если ЭтоОшибка <> Истина
	И ОбменСВнешнимиСистемамиЛогированиеПовтИсп.ЛогированиеВключено( УчетнаяЗапись ) <> Истина 
	Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим( Истина );
	
	Если ТранзакцияАктивна() Тогда
		// При отмене транзакции запись регистра сведений отменится, 
		// продублируем сообщение в журнал регистрации

		ЗаписьЖурналаРегистрации( "ОбменСВнешнимиСистемамиЛогирование",
		?( ЭтоОшибка = Истина, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация ),
		,
		ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Параметры, "ДанныеСсылка", Неопределено ),
		Комментарий );

	КонецЕсли;
	
	
	РС = РегистрыСведений.ОбменСВнешнимиСистемамиЛогирование.СоздатьМенеджерЗаписи();
	
	Если ТипЗнч( Параметры ) = Тип( "Структура" ) Тогда
		ЗаполнитьЗначенияСвойств( РС, Параметры );
	КонецЕсли;
	
	РС.УчетнаяЗапись = УчетнаяЗапись;
	РС.Комментарий = Комментарий;
	РС.КомментарийДлина = СтрДлина( Комментарий );
	РС.ЭтоОшибка = ЭтоОшибка;
	РС.Пользователь = Пользователи.ТекущийПользователь();

	Если Не ЗначениеЗаполнено( РС.ИдентификаторЗаписи ) Тогда
		РС.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено( РС.Дата ) Тогда
		РС.Дата = ТекущаяДатаСеанса();
	КонецЕсли;

	Если Не ЗначениеЗаполнено( РС.Действие ) Тогда
		РС.Действие = Перечисления.ОбменСВнешнимиСистемамиЛогированиеДействия.Прочее;
	КонецЕсли;

	Если Не ЗначениеЗаполнено( РС.Порядок ) Тогда
		РС.Порядок = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
	
	РС.Записать( Ложь );

	УстановитьПривилегированныйРежим( Ложь );
	
	Возврат Истина;
КонецФункции

// Возвращает символ замены недопустимых символов XML для записи в лог
//
// Возвращаемое значение:
//  Строка - символ замены.
//
Функция СимволЗаменыНедопустимыхСимволовXMLПолучить() Экспорт
	Возврат "☼";
КонецФункции

Функция ЗаменитьНедопустимыеСимволыXML( Значение, СимволЗаменыНедопустимыхСимволовXML = Неопределено ) Экспорт
	
	ЗначениеСтрока = Строка( Значение );
	
	Если ПустаяСтрока( ЗначениеСтрока ) Тогда
		Возврат ЗначениеСтрока;
	КонецЕсли;
	
	Если СимволЗаменыНедопустимыхСимволовXML = Неопределено Тогда
		СимволЗаменыНедопустимыхСимволовXML = СимволЗаменыНедопустимыхСимволовXMLПолучить();
	КонецЕсли;
	
	Результат = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML( ЗначениеСтрока, СимволЗаменыНедопустимыхСимволовXML );
	
	Возврат Результат;
КонецФункции

// не вызывает ошибку если поле не существует
// ПараметрПуть - Строка: путь к полю у ПараметрЗначение. Может быть составной через ., например, Поле1.Реквизит2.Атрибут3 
Функция ПолучитьЗначениеПоля( ПараметрЗначение, ПараметрПуть, ЗначениеПоУмолчанию = Неопределено, ТекстОшибки = "" ) Экспорт
	
	Результат = ЗначениеПоУмолчанию;
	
	ЗначениеПолучаемое = ПараметрЗначение;
	ЧастиПути = СтрРазделить( ПараметрПуть, ".", Ложь );
	Попытка
		
		Для Каждого ЧастьПути Из ЧастиПути Цикл
			ЗначениеПолучаемое = ЗначениеПолучаемое[ ЧастьПути ];
		КонецЦикла;
		
		Результат = ЗначениеПолучаемое;
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки( ИнформацияОбОшибке );
		
		ТекстОшибки = "" + ПараметрПуть + ": <" + ЧастьПути + ">: " + КраткоеПредставлениеОшибки;
		
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ПроверитьЗначение( ПараметрЗначениеПроверяемое, ПараметрИмяПоляПроверяемое = "", ПараметрТипОжидаемый = Неопределено, 
ПараметрОбязательноеЗаполнение = Истина, ПараметрВызватьИсключение = Истина, ПараметрТекстОшибкиПрефикс = "" ) Экспорт
	
	// ПараметрИмяПоляПроверяемое - путь к полю, может быть составной через ., например, Поле1.Реквизит2.Атрибут3 
	// ПараметрТипОжидаемый: Тип, описание типов или массив. Если Неопределено, то не проверяем тип.
	             

	// проверка корректности переданных параметров в данную функцию
	
	ПроверитьТип = Истина;
	Если ПараметрТипОжидаемый = Неопределено Тогда
		// проверка типа не требуется
		ПроверитьТип = Ложь;
	КонецЕсли;
	
	Если ПроверитьТип = Истина Тогда
	
		ПараметрТипОжидаемыйТип = ТипЗнч( ПараметрТипОжидаемый );
		Если ПараметрТипОжидаемыйТип = Тип( "Тип" ) 
			Или ПараметрТипОжидаемыйТип = Тип( "ОписаниеТипов" ) 
			Или ПараметрТипОжидаемыйТип = Тип( "Массив" ) 
			Тогда
			// тип входящего параметра корректный
		Иначе	
			
			ТекстОшибки = "Функция <ПроверитьЗначение>: Параметр <ПараметрТипОжидаемый>: "
			+ "Ошибка: Передан некорректный тип значения <" + ПараметрТипОжидаемыйТип
			+ ">. Ожидается тип <Тип>, <ОписаниеТипов>, <Массив>.";
			Если Не ПустаяСтрока( ПараметрТекстОшибкиПрефикс ) Тогда
				ТекстОшибки = ПараметрТекстОшибкиПрефикс + ТекстОшибки;
			КонецЕсли;
			
			ЗаписатьВЛог( ТекстОшибки, , Истина );
			
			ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;

	ПараметрИмяПоляПроверяемоеТип = ТипЗнч( ПараметрИмяПоляПроверяемое );
	Если ПараметрИмяПоляПроверяемоеТип = Тип( "Строка" ) 
	Или ПараметрИмяПоляПроверяемоеТип = Тип( "Неопределено" ) 
	Тогда
		// тип входящего параметра корректный
	Иначе	
	
		ТекстОшибки = "Функция <ПроверитьЗначение>: Параметр <ПараметрИмяПоляПроверяемое>: Ошибка: Передан некорректный тип значения <" + ПараметрИмяПоляПроверяемоеТип
		+ ">. Ожидается тип <Строка>.";
		Если Не ПустаяСтрока( ПараметрТекстОшибкиПрефикс ) Тогда
			ТекстОшибки = ПараметрТекстОшибкиПрефикс + ТекстОшибки;
		КонецЕсли;
		
		ЗаписатьВЛог( ТекстОшибки, , Истина );
		
		ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	// проверка значений входящих параметров
	
	// рассичтаем ЗначениеПроверяемое
	Если ПустаяСтрока( ПараметрИмяПоляПроверяемое ) Тогда
		ЗначениеПроверяемое = ПараметрЗначениеПроверяемое;
	Иначе
	
		// получим значения поля
		ТестОшибкиДополнение = "";
		ЗначениеПроверяемое = ПолучитьЗначениеПоля( ПараметрЗначениеПроверяемое, ПараметрИмяПоляПроверяемое, , ТестОшибкиДополнение );
		Если СтрДлина( ТестОшибкиДополнение ) > 0 Тогда
			ЕстьОшибка = Истина;
		КонецЕсли;
		
		Если ЕстьОшибка = Истина Тогда
		
			ТекстОшибки = "Ошибка: Некорректное имя поля <" + ПараметрИмяПоляПроверяемое + ">.";
			Если Не ПустаяСтрока( ПараметрТекстОшибкиПрефикс ) Тогда
				ТекстОшибки = ПараметрТекстОшибкиПрефикс + ТекстОшибки;
			КонецЕсли;
			
			Если Не ПустаяСтрока( ТестОшибкиДополнение ) Тогда
				ТекстОшибки = ТекстОшибки + " " + ТестОшибкиДополнение;
			КонецЕсли;

			ЗаписатьВЛог( ТекстОшибки, , Истина );
			
			Если ПараметрВызватьИсключение = Истина Тогда
				ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если ПроверитьТип = Истина Тогда
		
		ТипыОжидаемые = Новый Массив;
		Если ТипЗнч( ПараметрТипОжидаемый ) = Тип( "Тип" ) Тогда
			ТипыОжидаемые.Добавить( ПараметрТипОжидаемый );
		ИначеЕсли ТипЗнч( ПараметрТипОжидаемый ) = Тип( "ОписаниеТипов" ) Тогда
			ТипыОжидаемые = ПараметрТипОжидаемый.Типы();
		ИначеЕсли ТипЗнч( ПараметрТипОжидаемый ) = Тип( "Массив" ) Тогда
			ТипыОжидаемые = ПараметрТипОжидаемый;
		КонецЕсли;
		
		ТипыОжидаемыеСтрокой = СтрСоединить(ТипыОжидаемые, "," );
		
		ТипПроверяемый = ТипЗнч( ЗначениеПроверяемое );
		Если ТипыОжидаемые.Найти( ТипПроверяемый ) = Неопределено Тогда
			
			ТекстОшибки = "Ошибка: Некорректный тип значения <" + ТипПроверяемый + ">. Ожидаются типы: <" + ТипыОжидаемыеСтрокой + ">.";
			Если Не ПустаяСтрока( ПараметрТекстОшибкиПрефикс ) Тогда
				ТекстОшибки = ПараметрТекстОшибкиПрефикс + ТекстОшибки;
			КонецЕсли;
			
			ЗаписатьВЛог( ТекстОшибки, , Истина );
			
			Если ПараметрВызватьИсключение = Истина Тогда
				ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрОбязательноеЗаполнение = Истина Тогда
	
		ТестОшибкиДополнение = "";
		Попытка
        	ЗначениеЗаполнено = ЗначениеЗаполнено( ЗначениеПроверяемое );
        Исключение
        	// Проверка мутабельных значений на заполненность не поддерживается
        	ИнформацияОбОшибке = ИнформацияОбОшибке();
        	КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки( ИнформацияОбОшибке );
        	ТестОшибкиДополнение = КраткоеПредставлениеОшибки;
        	ЗначениеЗаполнено = Ложь;
        КонецПопытки;
        
		Если Не ЗначениеЗаполнено Тогда
			
			ТекстОшибки = "Ошибка: Передано пустое значение. Ожидается заполненное.";
			Если Не ПустаяСтрока( ПараметрТекстОшибкиПрефикс ) Тогда
				ТекстОшибки = ПараметрТекстОшибкиПрефикс + ТекстОшибки;
			КонецЕсли;
			
			Если Не ПустаяСтрока( ТестОшибкиДополнение ) Тогда
				ТекстОшибки = ТекстОшибки + " " + ТестОшибкиДополнение;
			КонецЕсли;

			ЗаписатьВЛог( ТекстОшибки, , Истина );
			
			Если ПараметрВызватьИсключение = Истина Тогда
				ОбщегоНазначения.СообщитьПользователю( ТекстОшибки );
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Возвращает строковое представление объекта для записи в лог
//
// Параметры:
//  Объект   - Произвольный - Ссылка или значение
//  Реквизиты - Строка - Имена колонок через "," для добавления в представление объекта, не обязательный
//  Параметры - Структура - Дополнительные параметры, не обязательный
//  ГлубинаРекурсии - Число - Необязательный
// 
// Возвращаемое значение:
//  Строка - Строковое представление объекта.
//
Функция ОбъектПредставление( Объект, Реквизиты = Неопределено, Параметры = Неопределено, ГлубинаРекурсии = 0 ) Экспорт
    
    МаксимальнаяГлубинаРекурсии = 100;
	Если ГлубинаРекурсии >= МаксимальнаяГлубинаРекурсии Тогда
		Возврат НСтр( "ru = '<Ошибка: При получении представления значения превышена глубина рекурсии. Проверьте значение на циклические ссылки.>'" );
	КонецЕсли;
	
	ОбъектТип = ТипЗнч( Объект );
	МассивСтрок = Новый Массив;

	Попытка

		Если ГлубинаРекурсии > 0 Тогда
			КоэффициентОтступа = 2;
			СтрокаДополнениеПоРекурсии = СтрокаСимволамиЗаполнить( " ", ГлубинаРекурсии*КоэффициентОтступа );
		Иначе
			СтрокаДополнениеПоРекурсии = "";
		КонецЕсли;
		
		Если ОбъектТип = Тип( "Неопределено" ) Тогда
			
			Возврат "<Неопределено>";
			
		ИначеЕсли ОбъектТип = Тип( "Null" ) Тогда
			
			Возврат "<NULL>";
			
		ИначеЕсли ОбъектТип = Тип( "Булево" ) Тогда
			
			Возврат ?( Объект = Истина, "<True>", "<False>" );

		ИначеЕсли ОбъектТип = Тип( "HTTPЗапрос" ) Или ОбъектТип = Тип( "HTTPОтвет" ) Тогда
			
			Если ОбъектТип = Тип( "HTTPЗапрос" ) Тогда
				МассивСтрок.Добавить( "Адрес ресурса:" );
				
				ОбъектАдресРесурса = Объект.АдресРесурса;
				// +исключения
				ОбъектАдресРесурса = ЗаменитьИсключенияВСтроке( Объект.АдресРесурса );
				// -исключения
				
				МассивСтрок.Добавить( ОбъектАдресРесурса );
				МассивСтрок.Добавить( "" );
			КонецЕсли;
			
			Если ОбъектТип = Тип( "HTTPОтвет" ) Тогда
				МассивСтрок.Добавить( "Код состояния:" );
				МассивСтрок.Добавить( Объект.КодСостояния );
				МассивСтрок.Добавить( "" );
			КонецЕсли;
			
			ТелоСтроковоеПредставление = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Параметры, "ТелоСтроковоеПредставление", "" );
		
			Если ПустаяСтрока( ТелоСтроковоеПредставление ) Тогда
				ТелоСтроковоеПредставление = Объект.ПолучитьТелоКакСтроку();
				Если ТелоСтроковоеПредставление <> Неопределено Тогда
					СимволЗаменыНедопустимыхСимволовXML = СимволЗаменыНедопустимыхСимволовXMLПолучить();
					ТелоСтроковоеПредставление = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТелоСтроковоеПредставление, СимволЗаменыНедопустимыхСимволовXML);
				КонецЕсли;
			КонецЕсли;
			
			МассивСтрок.Добавить( "Тело: Строка:" );
			МассивСтрок.Добавить( ТелоСтроковоеПредставление );
			МассивСтрок.Добавить( "" );
			
			МассивСтрок.Добавить( "Заголовки:" );
			Для Каждого Заголовок Из Объект.Заголовки Цикл
				ЗаголовокЗначение = Заголовок.Значение;
				
				// +исключения
				Если Заголовок.Ключ = "Api-Key"
				Или Заголовок.Ключ = "Authorization"
				 Тогда
					ЗаголовокЗначение = "***" + Прав( ЗаголовокЗначение, 2 );// скроем ключ доступа
				КонецЕсли;
				// -исключения
				
				МассивСтрок.Добавить( "" + Заголовок.Ключ + ": " + ЗаголовокЗначение );
			КонецЦикла;
			
		ИначеЕсли ОбъектТип = Тип( "HTTPСоединение" ) Тогда
			
			МассивСтрок.Добавить( "Сервер:" );
			МассивСтрок.Добавить( Объект.Сервер );
			
			МассивСтрок.Добавить( "Защищенное соединение:" );
			МассивСтрок.Добавить( Объект.ЗащищенноеСоединение );
			МассивСтрок.Добавить( "Использовать аутентификацию ОС:" );
			МассивСтрок.Добавить( Объект.ИспользоватьАутентификациюОС );
			МассивСтрок.Добавить( "Пользователь:" );
			МассивСтрок.Добавить( Объект.Пользователь );
			МассивСтрок.Добавить( "Пароль:" );
			МассивСтрок.Добавить( ?(ЗначениеЗаполнено( Объект.Пароль ), "***" + Прав( Объект.Пароль, 2 ), "" ) );
			МассивСтрок.Добавить( "Порт:" );
			МассивСтрок.Добавить( Объект.Порт );
			МассивСтрок.Добавить( "Таймаут:" );
			МассивСтрок.Добавить( Объект.Таймаут );
			
		ИначеЕсли ОбъектТип = Тип( "ТаблицаЗначений" ) Тогда
			ТаблицаЗначений = Объект;

			МассивСтрок.Добавить( "Количество строк: " + ТаблицаЗначений.Количество() );
			
			Если Реквизиты = Неопределено Тогда
				РеквизитыМассив = Новый Массив;
			    Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			    	РеквизитыМассив.Добавить( Колонка.Имя );
			    КонецЦикла;
			Иначе
				РеквизитыМассив = СтрРазделить( Реквизиты, ", ;", Ложь );
			КонецЕсли;
			
			РеквизитыСтр = "";
			Для Каждого РеквизитИмя Из РеквизитыМассив Цикл
				РеквизитыСтр = РеквизитыСтр + "<" + РеквизитИмя + ">;";
			КонецЦикла;
			МассивСтрок.Добавить( РеквизитыСтр );
			
			НомерПП = 0;
			Для Каждого ТаблицаЗначенийСтрока Из ТаблицаЗначений Цикл
				НомерПП = НомерПП + 1;
				Стр = "";
				Для Каждого РеквизитИмя Из РеквизитыМассив Цикл
					Значение = ТаблицаЗначенийСтрока[ РеквизитИмя ];
					Если Не ЗначениеЗаполнено( Значение ) Тогда
						ЗначениеСтр = НСтр("ru = '<Не заполнено>'");
					Иначе
						ЗначениеСтр = Строка( Значение );
					КонецЕсли;
					Стр = Стр + ЗначениеСтр + ";"
				КонецЦикла;
				МассивСтрок.Добавить( "" + Формат( НомерПП, "ЧГ=0" ) + ". " + Стр );
			КонецЦикла;
			
		ИначеЕсли ОбъектТип = Тип( "Массив" ) Тогда

			Если ГлубинаРекурсии > 0 Тогда
				МассивСтрок.Добавить( "" );
			КонецЕсли;
			
			НомерПП = 0;
			Для Каждого Элемент Из Объект Цикл
				НомерПП = НомерПП + 1;
				
				МассивСтрок.Добавить( СтрокаДополнениеПоРекурсии + Формат( НомерПП, "ЧГ=0" ) + ". "
				+  ОбъектПредставление( Элемент, , , ГлубинаРекурсии + 1 ) + ";" );
			КонецЦикла;
			
		ИначеЕсли ОбъектТип = Тип( "СписокЗначений" ) Тогда

			Если ГлубинаРекурсии > 0 Тогда
				МассивСтрок.Добавить( "" );
			КонецЕсли;
			
			НомерПП = 0;
			Для Каждого Элемент Из Объект Цикл
				НомерПП = НомерПП + 1;
				
				МассивСтрок.Добавить( СтрокаДополнениеПоРекурсии + Формат( НомерПП, "ЧГ=0" ) + ". "
				+ Элемент.Пометка + ": " + Элемент.Представление + ": " + ОбъектПредставление( Элемент.Значение, , , ГлубинаРекурсии + 1 ) + ";" );
			КонецЦикла;

		ИначеЕсли ОбъектТип = Тип( "Структура" )
			Или ОбъектТип = Тип( "Соответствие" )
			Тогда

			Если ГлубинаРекурсии > 0 Тогда
				МассивСтрок.Добавить( "" );
			КонецЕсли;
			
			НомерПП = 0;
			Для Каждого Элемент Из Объект Цикл
				НомерПП = НомерПП + 1;

				МассивСтрок.Добавить( СтрокаДополнениеПоРекурсии + Формат( НомерПП, "ЧГ=0" ) + ". " + Элемент.Ключ + ": "
				+ ОбъектПредставление( Элемент.Значение, , , ГлубинаРекурсии + 1 ) + ";" );
			КонецЦикла;
		ИначеЕсли ОбъектТип = Тип( "КоллекцияЭлементовОтбораКомпоновкиДанных" ) Тогда
			ОтборыКомпоновкиДанныхТолькоАктивные = ИнтеграцияСМаркетплейсамиСервер.СтруктураСвойствоЗначениеПолучить( Параметры, "ОтборыКомпоновкиДанныхТолькоАктивные", Истина );
			ОтборЭлементы = Объект;
			ОтборЭлементыПредставление = ОтборыКомпоновкиДанныхПредставлениеПолучить( ОтборЭлементы, ОтборыКомпоновкиДанныхТолькоАктивные );
			МассивСтрок.Добавить( ОтборЭлементыПредставление );
		Иначе
			
			Попытка
				ОбъектУникальныйИдентификатор = Объект.УникальныйИдентификатор();
			Исключение
				ОбъектУникальныйИдентификатор = "";
			КонецПопытки;
			Дополнение = ?( ЗначениеЗаполнено( ОбъектУникальныйИдентификатор ), ": " + ОбъектУникальныйИдентификатор, "" );
			МассивСтрок.Добавить( Строка( Объект ) + Дополнение );
			
		КонецЕсли;
		
		Стр = СтрСоединить( МассивСтрок, Символы.ПС );
	Исключение
		Стр = НСтр("ru = '<ОбъектПредставление: Ошибка получения представления объекта:'") + " " + ОбъектТип + ">";
	КонецПопытки;
	
	Возврат Стр;
КонецФункции

// Заменяет токен доступа в строки на *** если найден.
//
// Параметры:
//  ПараметрСтрока   - Строка для поиска и замены
//  СтрокаЗамена   - Строка символов для замены в ПараметрСтрока
// 
// Возвращаемое значение:
//  Строка - результат замены.
//
Функция ЗаменитьИсключенияВСтроке( ПараметрСтрока, СтрокаЗамена = "***" ) Экспорт
	СтрокаРезультат = ПараметрСтрока;
	
	КлючПоиска = "&access_token=";
	Позиция = СтрНайти( ПараметрСтрока, КлючПоиска );
	Если Позиция > 0 Тогда
		
		Позиция = Позиция + СтрДлина( КлючПоиска ) - 1;
		СтрокаРезультат = Лев( ПараметрСтрока, Позиция );
		
		Позиция = СтрНайти( ПараметрСтрока, "&", , Позиция );
		СтрокаРезультат = СтрокаРезультат + СтрокаЗамена;
		Если Позиция > 0 Тогда
			СтрокаРезультат = СтрокаРезультат + Сред( ПараметрСтрока, Позиция );
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаРезультат;
КонецФункции

// Возвращает строку для визуального разделения комментария на блоки.
// 
// Возвращаемое значение:
//  Строка - разделитель блоков.
//
Функция КомментарийРазделительБлоков() Экспорт
	Возврат Символы.ПС + Символы.ПС;
КонецФункции

// Возвращает строку с описанием стека вызовов
// 
// Возвращаемое значение:
//  Строка - стек вызовов.
//
Функция СтекВызоваПолучить() Экспорт
	Попытка
		ИскусственноеСозданиеОшибки = 1/0;
	Исключение
		СтекВызоваСтр = ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
	КонецПопытки;
	
	ТехническаяПодстрока = "{(1)}:";
	СтекВызоваСтр = СтрЗаменить( СтекВызоваСтр, ТехническаяПодстрока, "" );
	ТехническаяПодстрока = "[ОшибкаВоВремяВыполненияВстроенногоЯзыка, ОшибкаИспользованияВстроенногоЯзыка]";
	СтекВызоваСтр = СтрЗаменить( СтекВызоваСтр, ТехническаяПодстрока, "" );
	
	МассивСтрок = СтрРазделить( СтекВызоваСтр, Символы.ПС, Ложь );

	// удаление первых 3х технических строк
	МассивСтрок.Удалить( 0 );
	МассивСтрок.Удалить( 0 );
	МассивСтрок.Удалить( 0 );
	
	СтекРезультат = СтрСоединить( МассивСтрок, Символы.ПС );
	
 	Возврат СтекРезультат;
КонецФункции

Функция ИнформацияОбОшибкеПричина( ИнформацияОбОшибке ) Экспорт
    
    Причина = "";
	Если ТипЗнч( ИнформацияОбОшибке ) <> Тип("ИнформацияОбОшибке" ) Тогда
		Возврат Причина;
	КонецЕсли;
	
	Причина = ИнформацияОбОшибке.Описание;
	Если ТипЗнч( ИнформацияОбОшибке.Причина ) = Тип( "ИнформацияОбОшибке" ) Тогда
		Причина = Причина + ": " + ИнформацияОбОшибке.Причина.Описание;
	КонецЕсли;
	
	Возврат Причина;
	
КонецФункции

// Удаляет все записи лога. Возвращает Истина в случае успеха.
// 
// Возвращаемое значение:
//  Булево - Истина успешное выполнение.
//
Функция ЛогОчистить( УчетнаяЗапись = Неопределено ) Экспорт

   	#Область ПроверкаВходящихПараметров
	// УчетнаяЗапись
	ПроверкаЗначение = УчетнаяЗапись;
	ПроверкаОжидаемыеТипы = Метаданные.ОпределяемыеТипы.ОбменСВнешнимиСистемамиЛогированиеУчетнаяЗапись.Тип.Типы();
	ПроверкаОжидаемыеТипы.Добавить( Тип( "Неопределено" ) );
	ПроверитьЗначениеРезультат = ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( ПроверкаЗначение, , ПроверкаОжидаемыеТипы, 
	Ложь, Истина );
	#КонецОбласти

	Время001 = ТекущаяУниверсальнаяДатаВМиллисекундах();

	НаборЗаписей = РегистрыСведений.ОбменСВнешнимиСистемамиЛогирование.СоздатьНаборЗаписей();
	Если ЗначениеЗаполнено( УчетнаяЗапись ) Тогда
		НаборЗаписей.Отбор.УчетнаяЗапись.Установить( УчетнаяЗапись, Истина );
	КонецЕсли;
	НаборЗаписей.Записать();
	
	Время002 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДлительностьСекунд = (Время002 - Время001)/1000;

	ЛогКомментарий = "Удалены все записи лога учетной записи. Длительность " + ДлительностьСекунд + " с.";
	ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись );
	
	Возврат Истина;
КонецФункции

Функция ЛогЗаписиСтарыеОчистить( УчетнаяЗапись = Неопределено ) Экспорт

   	#Область ПроверкаВходящихПараметров
	// УчетнаяЗапись
	ПроверкаЗначение = УчетнаяЗапись;
	ПроверкаОжидаемыеТипы = Метаданные.ОпределяемыеТипы.ОбменСВнешнимиСистемамиЛогированиеУчетнаяЗапись.Тип.Типы();
	ПроверкаОжидаемыеТипы.Добавить( Тип( "Неопределено" ) );
	ПроверитьЗначениеРезультат = ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( ПроверкаЗначение, , ПроверкаОжидаемыеТипы, 
	Ложь, Истина );
	#КонецОбласти

	Время001 = ТекущаяУниверсальнаяДатаВМиллисекундах();

	Настройки = ЛогированиеНастройкиПолучить( УчетнаяЗапись );
	
    КоличествоЗаписейВОднойПорции = 1000;
	
	ЗапросТекст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменСВнешнимиСистемамиЛогирование.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	|ИЗ
	|	РегистрСведений.ОбменСВнешнимиСистемамиЛогирование КАК ОбменСВнешнимиСистемамиЛогирование
	|ГДЕ
	|	ОбменСВнешнимиСистемамиЛогирование.УчетнаяЗапись = &УчетнаяЗапись
	|	И ОбменСВнешнимиСистемамиЛогирование.Дата < &ДатаСтарыхСообщений";
	
	ЗапросТекст = СтрЗаменить( ЗапросТекст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + Формат( КоличествоЗаписейВОднойПорции, "ЧГ=0" ) );
	
	КоличествоСекундВСутках = 24*60*60;
	ДатаСтарыхСообщений = ТекущаяДатаСеанса() - Настройки.ДлительностьХраненияЗаписейДней*КоличествоСекундВСутках;
	
	Запрос = Новый Запрос( ЗапросТекст );
	Запрос.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	Запрос.УстановитьПараметр( "КоличествоЗаписейВОднойПорции", КоличествоЗаписейВОднойПорции );
	Запрос.УстановитьПараметр( "ДатаСтарыхСообщений", ДатаСтарыхСообщений );
	ЗапросРезультат = Запрос.Выполнить();
	Если ЗапросРезультат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗапросВыборка = ЗапросРезультат.Выбрать();
	Менеджер = РегистрыСведений.ОбменСВнешнимиСистемамиЛогирование.СоздатьМенеджерЗаписи();
	Пока ЗапросВыборка.Следующий() Цикл
		Менеджер.ИдентификаторЗаписи = ЗапросВыборка.ИдентификаторЗаписи;
		Менеджер.УчетнаяЗапись = УчетнаяЗапись;
		Менеджер.Удалить();
	КонецЦикла;
	
	УдаленоКоличество = ЗапросВыборка.Количество();
	
	Время002 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДлительностьСекунд = (Время002 - Время001)/1000;
	
	ЛогКомментарий = "Удалены записи лога с датой ранее " + ДатаСтарыхСообщений + ". Количество: " + УдаленоКоличество + ". Длительность " + ДлительностьСекунд + " с.";
	ОбменСВнешнимиСистемамиЛогирование.ЗаписатьВЛог( ЛогКомментарий, УчетнаяЗапись );
	
	Возврат Истина;
КонецФункции

// Возвращает фразы и пояснения из макета.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - содержит колонки "КлючевыеФразы", "Расшифровка", Рекомендация.
//
Функция БазаЗнанийПолучить() Экспорт
	Макет = ПолучитьОбщийМакет( "ИнтеграцияССайтамиИМаркетплейсамиОшибкиРасшифровка" );
	Макет.Макет = Ложь;

	БазаЗнаний = Новый ТаблицаЗначений;
	БазаЗнаний.Колонки.Добавить( "КлючевыеФразы" );
	БазаЗнаний.Колонки.Добавить( "Расшифровка" );
	БазаЗнаний.Колонки.Добавить( "Рекомендация" );

	СтрокиКоличество = Макет.ВысотаТаблицы;
	Для СтрокаНомер = 2 По СтрокиКоличество Цикл
		
		КлючевыеФразы = СокрЛП( Макет.Область( СтрокаНомер, 1 ).Текст );
		Если ПустаяСтрока( КлючевыеФразы ) Тогда
			Прервать;
		КонецЕсли;
		
		БазаЗнанийСтрока = БазаЗнаний.Добавить();
		
		КлючевыеФразы = ВРег( КлючевыеФразы );
		БазаЗнанийСтрока.КлючевыеФразы = СтрРазделить( КлючевыеФразы, "#", Ложь );
		БазаЗнанийСтрока.Расшифровка = СокрЛП( Макет.Область( СтрокаНомер, 2 ).Текст );
		Если СтрДлина( БазаЗнанийСтрока.Расшифровка ) > 0 И Прав( БазаЗнанийСтрока.Расшифровка, 1 ) <> "." Тогда
			БазаЗнанийСтрока.Расшифровка = БазаЗнанийСтрока.Расшифровка + ".";
		КонецЕсли;

		БазаЗнанийСтрока.Рекомендация = СокрЛП( Макет.Область( СтрокаНомер, 3 ).Текст );
		Если СтрДлина( БазаЗнанийСтрока.Рекомендация ) > 0 И Прав( БазаЗнанийСтрока.Рекомендация, 1 ) <> "." Тогда
			БазаЗнанийСтрока.Рекомендация = БазаЗнанийСтрока.Рекомендация + ".";
		КонецЕсли;
	КонецЦикла;
	
	Возврат БазаЗнаний;
КонецФункции

Функция БазаЗнанийСовпаденияНайти( Текст, ПараметрыКонтекст = Неопределено ) Экспорт

	Результат = Новый Массив;

	Если ПустаяСтрока( Текст ) Тогда
		Возврат Результат;
	КонецЕсли;

	ТекстМаксимальнаяДлина = 2000;
	ТекстДляПоиска = Врег( Лев( СокрЛ( Текст ), ТекстМаксимальнаяДлина ));
	
	БазаЗнаний = ОбменСВнешнимиСистемамиЛогированиеПовтИсп.БазаЗнанийПолучить();

	Для Каждого БазаЗнанийСтрока Из БазаЗнаний Цикл
		
		СовпадениеНайдено = Истина;
		Для Каждого КлючеваяФраза Из БазаЗнанийСтрока.КлючевыеФразы Цикл
			Если СтрНайти( ТекстДляПоиска, КлючеваяФраза ) = 0 Тогда
				СовпадениеНайдено = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СовпадениеНайдено = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатЭлемент = Новый Структура( "КлючевыеФразы, Расшифровка, Рекомендация" );
		ЗаполнитьЗначенияСвойств( РезультатЭлемент, БазаЗнанийСтрока );
		Результат.Добавить( РезультатЭлемент );
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция БазаЗнанийСовпаденияНайтиСтрокойПолучить( Текст, ПараметрыКонтекст = Неопределено ) Экспорт

	РезультатСтрокой = "";
	
	БазаЗнанийСовпадения = БазаЗнанийСовпаденияНайти( Текст, ПараметрыКонтекст);
	БазаЗнанийСовпаденияКоличество = БазаЗнанийСовпадения.Количество();
	Если БазаЗнанийСовпаденияКоличество = 0 Тогда
		Возврат РезультатСтрокой;
	КонецЕсли;
	
	Дополнение = "";
	НомерПП = 0;
	Для Каждого БазаЗнанийСовпаденияЭлемент Из БазаЗнанийСовпадения Цикл
		НомерПП = НомерПП + 1;
		Если БазаЗнанийСовпаденияКоличество > 1 Тогда
			Дополнение = ?(НомерПП > 1, Символы.ПС, "" ) + НомерПП + " -> " + БазаЗнанийСовпаденияКоличество + ") ";
		КонецЕсли;
		РезультатСтрокой = РезультатСтрокой + Дополнение + БазаЗнанийСовпаденияЭлемент.Расшифровка;
		Если Не ПустаяСтрока( БазаЗнанийСовпаденияЭлемент.Рекомендация ) Тогда
			РезультатСтрокой = РезультатСтрокой + " " + БазаЗнанийСовпаденияЭлемент.Рекомендация;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатСтрокой;
КонецФункции

Функция СтрокаСимволамиЗаполнить( Символ, Количество ) Экспорт
	
	Строка = "";
	Для СимволНомер = 1 По Количество Цикл
		Строка = Строка + Символ;
	КонецЦикла;
	
	Возврат Строка;
КонецФункции

Функция ОтборыКомпоновкиДанныхПредставлениеПолучить( ОтборЭлементы, ТолькоАктивные = Истина ) Экспорт

	Если ТипЗнч( ОтборЭлементы ) <> Тип( "КоллекцияЭлементовОтбораКомпоновкиДанных" ) Тогда
		ВызватьИсключение "ОтборыПредставлениеПолучить: Параметр функции передан некорректно. Ожидается тип ""КоллекцияЭлементовОтбораКомпоновкиДанных"".";
	КонецЕсли;
	
	ОтборыПредставление = "";
	Глубина = 1;
	ОтборыКомпоновкиДанныхПредставлениеРекурсивноПолучить( ОтборЭлементы, Глубина, ТолькоАктивные, ОтборыПредставление );
	
	Возврат ОтборыПредставление;
КонецФункции

Функция ЛогВыгрузить( УчетнаяЗапись ) Экспорт
	
   	#Область ПроверкаВходящихПараметров
	// УчетнаяЗапись
	ПроверкаЗначение = УчетнаяЗапись;
	ПроверкаОжидаемыеТипы = Метаданные.ОпределяемыеТипы.ОбменСВнешнимиСистемамиЛогированиеУчетнаяЗапись.Тип.Типы();
	ПроверкаОжидаемыеТипы.Добавить( Тип( "Неопределено" ) );
	ПроверитьЗначениеРезультат = ОбменСВнешнимиСистемамиЛогирование.ПроверитьЗначение( ПроверкаЗначение, , ПроверкаОжидаемыеТипы, 
	Ложь, Истина );
	#КонецОбласти
	
	ЗапросТекст =
	"ВЫБРАТЬ
	|	ОбменСВнешнимиСистемамиЛогирование.Дата КАК Дата,
	|	ОбменСВнешнимиСистемамиЛогирование.УчетнаяЗапись КАК УчетнаяЗапись,
	|	ОбменСВнешнимиСистемамиЛогирование.Сервер КАК Сервер,
	|	ОбменСВнешнимиСистемамиЛогирование.АдресРесурса КАК АдресРесурса,
	|	ОбменСВнешнимиСистемамиЛогирование.Действие КАК Действие,
	|	ОбменСВнешнимиСистемамиЛогирование.ДанныеСсылка КАК ДанныеСсылка,
	|	ОбменСВнешнимиСистемамиЛогирование.Комментарий КАК Комментарий,
	|	ОбменСВнешнимиСистемамиЛогирование.Пользователь КАК Пользователь,
	|	ОбменСВнешнимиСистемамиЛогирование.ЭтоОшибка КАК ЭтоОшибка,
	|	ОбменСВнешнимиСистемамиЛогирование.Порядок КАК Порядок,
	|	ОбменСВнешнимиСистемамиЛогирование.КомментарийДлина КАК КомментарийДлина,
	|	ОбменСВнешнимиСистемамиЛогирование.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	|ИЗ
	|	РегистрСведений.ОбменСВнешнимиСистемамиЛогирование КАК ОбменСВнешнимиСистемамиЛогирование
	|ГДЕ
	|	ОбменСВнешнимиСистемамиЛогирование.УчетнаяЗапись = &УчетнаяЗапись
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ";
	ЗапросОбъект = Новый Запрос( ЗапросТекст );
	ЗапросОбъект.УстановитьПараметр( "УчетнаяЗапись", УчетнаяЗапись );
	Данные = ЗапросОбъект.Выполнить().Выгрузить();
	
	Лог = ИнтеграцияСИнтернетМагазиномСервер.ТаблицаЗначенийВТабличныйДокумент( Данные );
	
	Возврат Лог;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЛогированиеДлительностьХраненияЗаписейДнейПоУмолчанию()
	Возврат 14;
КонецФункции

Функция ОтборыКомпоновкиДанныхПредставлениеРекурсивноПолучить( ОтборЭлементы, Глубина, ТолькоАктивные = Истина, ОтборыПредставление = "" )
    
    МаксимальнаяГлубинаРекурсии = 100;
	Если Глубина > МаксимальнаяГлубинаРекурсии Тогда
		ВызватьИсключение "ОтборыКомпоновкиДанныхПредставлениеРекурсивноПолучить: Превышена максимальная глубина рекурсии " + МаксимальнаяГлубинаРекурсии + ".";
	КонецЕсли;
	
	Отступ = СтрокаСимволамиЗаполнить( " ", (Глубина - 1)*4 );
	
	ТипЭлементОтбораКомпоновкиДанных = Тип( "ЭлементОтбораКомпоновкиДанных" );
	ТипГруппаЭлементовОтбораКомпоновкиДанных = Тип( "ГруппаЭлементовОтбораКомпоновкиДанных" );
	Для Каждого ОтборЭлемент Из ОтборЭлементы Цикл
		
		Если ТолькоАктивные = Истина 
		И ОтборЭлемент.Использование <> Истина Тогда
			Продолжить;
		КонецЕсли;
 		
 		ОтборЭлементТип = ТипЗнч( ОтборЭлемент );
 		ОтборЭлементИспользованиеСтрокой = ?(ОтборЭлемент.Использование = Истина, "+", "-" );
 		
		Если ОтборЭлементТип = ТипЭлементОтбораКомпоновкиДанных Тогда
			ПравоеЗначениеПредставление = ОбменСВнешнимиСистемамиЛогирование.ОбъектПредставление( ОтборЭлемент.ПравоеЗначение );
			ОтборПредставление = "" + ОтборЭлементИспользованиеСтрокой + " <" + ОтборЭлемент.ЛевоеЗначение + "> "
			+ ОтборЭлемент.ВидСравнения + " <" + ПравоеЗначениеПредставление + ">;";
		ИначеЕсли ОтборЭлементТип = ТипГруппаЭлементовОтбораКомпоновкиДанных Тогда
			ОтборПредставление = "" + ОтборЭлементИспользованиеСтрокой + " " + ОтборЭлемент.ТипГруппы;
		Иначе
			ОтборПредставление = "<Ошибка: ОтборыКомпоновкиДанныхПредставлениеРекурсивноПолучить: Тип не обрабатывается: " + ОтборЭлементТип + ">";
			Продолжить;
		КонецЕсли;
		
 		ПереводСтрокиЕслиНужен = ?( ПустаяСтрока( ОтборыПредставление ), "", Символы.ПС );
        ОтборыПредставление = ОтборыПредставление + ПереводСтрокиЕслиНужен + Отступ + ОтборПредставление;
        
        Если ОтборЭлементТип = ТипГруппаЭлементовОтбораКомпоновкиДанных Тогда
			ОтборыКомпоновкиДанныхПредставлениеРекурсивноПолучить( ОтборЭлемент.Элементы, Глубина + 1, ТолькоАктивные, ОтборыПредставление );
		КонецЕсли;
		
	КонецЦикла;
    
    Возврат Истина;
КонецФункции

Функция УчетнаяЗаписьЗначениеПоТипуПривести( Знач УчетнаяЗапись )
    
    Если УчетнаяЗапись =  Неопределено Тогда
      Возврат УчетнаяЗапись;
    КонецЕсли;
    
  УчетнаяЗаписьТип = ТипЗнч( УчетнаяЗапись );
  УчетнаяЗаписьТипКорректный = Метаданные.ОпределяемыеТипы.ОбменСВнешнимиСистемамиЛогированиеУчетнаяЗапись.Тип.СодержитТип( УчетнаяЗаписьТип );
  Если УчетнаяЗаписьТипКорректный = Ложь Тогда
    УчетнаяЗапись = Неопределено;
  КонецЕсли;
  
  Возврат УчетнаяЗапись;
КонецФункции

#КонецОбласти