
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
	ВидПериода = Перечисления.ДоступныеПериодыОтчета.Квартал;
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.НалоговыйПериод) Тогда
			Объект.НалоговыйПериод = ДобавитьМесяц(НачалоКвартала(ТекущаяДатаСеанса()), -3);
		КонецЕсли;
		ЗаполнитьРеквизитыШапки();
	КонецЕсли;
	
	ОбновитьИнформациюПрослеживаемости();
	ОбновитьВозможностьОтправки();
	
	УстановитьУсловноеОформлениеФормы();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеНалоговогоПериода();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Документ.ЖурналУчетаСчетовФактур.Форма.ЗаполнениеПрослеживаемости" Тогда
		ОбработкаВыбораРНПТННаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ОбновитьИнформациюПрослеживаемости();

	СохранитьСтатусОтправки();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ЗаполнитьРеквизитыШапки();
	
	Если Объект.ВыставленныеСчетаФактуры.Количество() > 0 
		ИЛИ Объект.ПолученныеСчетаФактуры.Количество() > 0 Тогда 
		Объект.ВыставленныеСчетаФактуры.Очистить();
		Объект.ПолученныеСчетаФактуры.Очистить();
		Объект.СведенияПрослеживаемости.Очистить();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	ОбновитьВозможностьОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");

КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЭтапаНажатие(Элемент)
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru='Вы уверены, что журнал уже сдан?'"));
	
	ИнтерфейсыВзаимодействияБРОКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ПриИзменении");

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодПриИзменении(Элемент)
	
	ОбработатьИзменениеНалоговогоПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("НалоговыйПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Значение", Объект.НалоговыйПериод);
	ПараметрыОткрытия.Вставить("РежимВыбораПериода", "КВАРТАЛ");
	ПараметрыОткрытия.Вставить("ЗапрашиватьРежимВыбораПериодаУВладельца", Ложь);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", 
		ПараметрыОткрытия,
		ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		Объект.НалоговыйПериод = ВыбранноеЗначение;
		ОбработатьИзменениеНалоговогоПериода();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Объект.НалоговыйПериод <= '19000101' Тогда
		НовоеЗначение = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
	Иначе
		НовоеЗначение = ДобавитьМесяц(Объект.НалоговыйПериод, 3 * Направление);
	КонецЕсли; 
	
	Если НовоеЗначение >= '00010101' Тогда
		
		Объект.НалоговыйПериод = НовоеЗначение;
		Модифицированность = Истина;
	 	
	КонецЕсли;
	
	ОбновитьПредставлениеНалоговогоПериода();
	ПодключитьОбработчикОжидания("ОбработчикОжиданияНалоговыйПериодПриИзменении", 0.3, Истина);
		
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыставленныеСчетаФактуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.ВыставленныеСчетаФактурыРНПТ Тогда
		ДанныеСтроки = Элементы.ВыставленныеСчетаФактуры.ТекущиеДанные;
		Если ДанныеСтроки <> Неопределено Тогда
			РедактироватьСведенияПрослеживаемости(ДанныеСтроки.СчетФактура, ДанныеСтроки.СчетФактураКомитента);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыставленныеСчетаФактурыСчетФактураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыставленныеСчетаФактуры.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СчетФактура) Тогда
		ДанныеДокумента = ОсновныеРеквизитыВыставленногоСчетаФактуры(ТекущиеДанные.СчетФактура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолученныеСчетаФактуры

&НаКлиенте
Процедура ПолученныеСчетаФактурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.ПолученныеСчетаФактурыРНПТ Тогда
		ДанныеСтроки = Элементы.ПолученныеСчетаФактуры.ТекущиеДанные;
		Если ДанныеСтроки <> Неопределено Тогда
			РедактироватьСведенияПрослеживаемости(ДанныеСтроки.СчетФактура, ДанныеСтроки.СчетФактура);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеСчетаФактурыСчетФактураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПолученныеСчетаФактуры.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СчетФактура) Тогда
		ДанныеДокумента = ОсновныеРеквизитыПолученногоСчетаФактуры(ТекущиеДанные.СчетФактура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеДокумента);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьДаннымиСчетовФактур();
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	Если НЕ ПроверитьЗаполнениеНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	ВыгружаемыеДанные = ВыгрузитьНаСервере(УникальныйИдентификатор);
	
	Если ВыгружаемыеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьУСНКлиент.СохранитьФайлВыгрузкиНаКлиенте(ВыгружаемыеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)

	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если НЕ ПроверитьВозможностьОтправки() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	Если НЕ ПроверитьВозможностьОтправки() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)

	Если НЕ ПроверитьВозможностьОтправки() Тогда
		Возврат;
	КонецЕсли;

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленныйЖурнал(Команда)
	
	Если НЕ ПроверитьВозможностьОтправки() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьРеквизитыШапки()
	
	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "РегистрацияВНалоговомОргане, ПодписьРуководителя");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(&Период, СтруктурнаяЕдиница = &Организация) КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период", КонецКвартала(Объект.НалоговыйПериод));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.РегистрацияВНалоговомОргане) Тогда
		Объект.ИФНС = Выборка.РегистрацияВНалоговомОргане;
	Иначе
		Объект.ИФНС = СвойстваОрганизации.РегистрацияВНалоговомОргане;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойстваОрганизации.ПодписьРуководителя) Тогда
		Объект.ПодписьРуководителя = СвойстваОрганизации.ПодписьРуководителя;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОсновныеРеквизитыВыставленногоСчетаФактуры(СчетФактура)
	
	ОсновныеРеквизиты = Новый Структура;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура, "Организация, Номер, Дата, ВалютаДокумента, СуммаДокумента, СуммаНДСДокумента");
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗначенияРеквизитов.Организация, "ГоловнаяОрганизация, Префикс, ЦифровойИндексОбособленногоПодразделения");
	
	Префикс = РеквизитыОрганизации.Префикс;
	ЦифровойИндексОбособленногоПодразделения = "";
	Если ЗначениеЗаполнено(РеквизитыОрганизации.ГоловнаяОрганизация) И РеквизитыОрганизации.ГоловнаяОрганизация <> ЗначенияРеквизитов.Организация Тогда
		ЦифровойИндексОбособленногоПодразделения = РеквизитыОрганизации.ЦифровойИндексОбособленногоПодразделения;
	КонецЕсли;
	
	НомерНаПечать = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ЗначенияРеквизитов.Дата, ЗначенияРеквизитов.Номер, Префикс);
	Если ЗначениеЗаполнено(ЦифровойИндексОбособленногоПодразделения) Тогда
        НомерНаПечать = НомерНаПечать + "/" + СокрЛП(ЦифровойИндексОбособленногоПодразделения);
	КонецЕсли;
	ОсновныеРеквизиты.Вставить("НомерСчетаФактуры", НомерНаПечать);
	ОсновныеРеквизиты.Вставить("ДатаСчетаФактуры", НачалоДня(ЗначенияРеквизитов.Дата));
	ОсновныеРеквизиты.Вставить("Валюта", ЗначенияРеквизитов.ВалютаДокумента);
	ОсновныеРеквизиты.Вставить("СуммаДокумента", ЗначенияРеквизитов.СуммаДокумента + ЗначенияРеквизитов.СуммаНДСДокумента);
	ОсновныеРеквизиты.Вставить("СуммаНДС", ЗначенияРеквизитов.СуммаНДСДокумента);
	
	Возврат ОсновныеРеквизиты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОсновныеРеквизитыПолученногоСчетаФактуры(СчетФактура)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СУММА(ОтчетКомитентуЗапасы.Сумма) КАК СуммаДокумента,
	               |	СУММА(ОтчетКомитентуЗапасы.СуммаНДС) КАК СуммаНДС,
	               |	СчетФактураПолученный.ВалютаДокумента КАК Валюта,
	               |	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаСчетаФактуры,
	               |	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСчетаФактуры,
	               |	ВЫБОР
	               |		КОГДА ОтчетКомитентуЗапасы.СуммаНДС = 0
	               |				И ОтчетКомитентуЗапасы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.БезНДС)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК СчетФактураБезНДС,
	               |	СчетФактураПолученный.КодСпособаВыставления КАК КодСпособаВыставления,
	               |	ВЫБОР
	               |		КОГДА СчетФактураПолученный.ДатаПолучения > ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА СчетФактураПолученный.ДатаПолучения
	               |		ИНАЧЕ СчетФактураПолученный.Дата
	               |	КОНЕЦ КАК ДатаПередачиПолучения,
	               |	""01"" КАК КодВидаОперации,
	               |	2 КАК КодВидаСделки
	               |ИЗ
	               |	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомитенту КАК ОтчетКомитенту
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомитенту.Запасы КАК ОтчетКомитентуЗапасы
	               |			ПО (ОтчетКомитентуЗапасы.Ссылка = ОтчетКомитенту.Ссылка)
	               |				И (ОтчетКомитенту.Проведен)
	               |		ПО СчетФактураПолученныйДокументыОснования.ДокументОснование = ОтчетКомитенту.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	               |		ПО СчетФактураПолученныйДокументыОснования.Ссылка = СчетФактураПолученный.Ссылка
	               |			И (СчетФактураПолученный.Ссылка = &СчетФактура)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ОтчетКомитентуЗапасы.СуммаНДС = 0
	               |				И ОтчетКомитентуЗапасы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.БезНДС)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ,
	               |	СчетФактураПолученный.ДатаВходящегоДокумента,
	               |	ВЫБОР
	               |		КОГДА СчетФактураПолученный.ДатаПолучения > ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА СчетФактураПолученный.ДатаПолучения
	               |		ИНАЧЕ СчетФактураПолученный.Дата
	               |	КОНЕЦ,
	               |	СчетФактураПолученный.ВалютаДокумента,
	               |	СчетФактураПолученный.Дата,
	               |	СчетФактураПолученный.НомерВходящегоДокумента,
	               |	СчетФактураПолученный.КодСпособаВыставления";
	
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОсновныеРеквизиты = Новый Структура;
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка Из Результат.Колонки Цикл
			ОсновныеРеквизиты.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОсновныеРеквизиты;
КонецФункции

&НаСервере
Процедура ОбновитьИнформациюПрослеживаемости()
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	
	КэшЗначений.Вставить("ВестиУчетПрослеживаемыхТоваров",
		ПрослеживаемостьУНФ.ВедетсяУчетПрослеживаемыхТоваров(КонецКвартала(Объект.НалоговыйПериод)));

	Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
			
		Элементы.ВыставленныеСчетаФактурыРНПТ.Видимость = Истина;	
		ЗаполнитьТекстРНПТВыставленные();
		
		Элементы.ПолученныеСчетаФактурыРНПТ.Видимость = Истина;	
		ЗаполнитьТекстРНПТПолученные();
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВозможностьОтправки()
	
	Если КэшЗначений = Неопределено Тогда
		КэшЗначений = Новый Структура;
	КонецЕсли;
	
	КэшЗначений.Вставить("ВозможностьОтправкиВКО", Ложь);
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "УчетнаяЗаписьОбмена");
		ДоступенОбменФНС = (ДокументооборотСКОВызовСервера.УчетнаяЗаписьПредназначенаДляДокументооборотаСФНС(
			СвойстваОрганизации.УчетнаяЗаписьОбмена) = Истина);
		КэшЗначений.ВозможностьОтправкиВКО = НЕ ЗначениеЗаполнено(СвойстваОрганизации.УчетнаяЗаписьОбмена) ИЛИ ДоступенОбменФНС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()

	Если КэшЗначений.ВестиУчетПрослеживаемыхТоваров Тогда
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВыставленныеСчетаФактурыРНПТ");
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ВыставленныеСчетаФактуры.РНПТ", "", ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<...>'"));
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НезаполненныйРеквизитЦветБЭД);
		
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ПолученныеСчетаФактурыРНПТ");
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ПолученныеСчетаФактуры.РНПТ", "", ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = '<...>'"));
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НезаполненныйРеквизитЦветБЭД);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСведенияПрослеживаемости(СчетФактура, СчетФактураПолученный)
	ПараметрыРедактирования = Новый Структура;
	ПараметрыРедактирования.Вставить("СчетФактура", СчетФактура);
	ПараметрыРедактирования.Вставить("СчетФактураПолученный", СчетФактураПолученный);
	
	ТекущиеДанные = Объект.СведенияПрослеживаемости.НайтиСтроки(ПараметрыРедактирования);
	ПараметрыРедактирования.Вставить("ТекущиеДанные", Новый Массив);
	Для Каждого Строка Из ТекущиеДанные Цикл
		ДанныеСтроки = Новый Структура("РНПТ, Количество, КоличествоПрослеживаемости, Номенклатура, СтранаПроисхождения, Сумма");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Строка);
		ПараметрыРедактирования.ТекущиеДанные.Добавить(ДанныеСтроки);
	КонецЦикла;
	ОткрытьФорму("Документ.ЖурналУчетаСчетовФактур.Форма.ЗаполнениеПрослеживаемости",
		ПараметрыРедактирования, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиСчетовФактур()
	Объект.ВыставленныеСчетаФактуры.Очистить();
	Объект.ПолученныеСчетаФактуры.Очистить();
	Объект.СведенияПрослеживаемости.Очистить();
	
	ДанныеДокументов = Документы.ЖурналУчетаСчетовФактур.ДанныеЖурналаСчетовФактурЗаКвартал(Объект.Организация, Объект.НалоговыйПериод);
	Для Каждого Строка Из ДанныеДокументов.Выставленные Цикл
		НоваяСтрока = Объект.ВыставленныеСчетаФактуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Для Каждого Строка Из ДанныеДокументов.Полученные Цикл
		НоваяСтрока = Объект.ПолученныеСчетаФактуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	Для Каждого Строка Из ДанныеДокументов.СведенияРНПТ Цикл
		НоваяСтрока = Объект.СведенияПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	ЗаполнитьТекстРНПТВыставленные();
	ЗаполнитьТекстРНПТПолученные();
КонецПроцедуры

&НаСервере
Функция ВыгрузитьНаСервере(УникальныйИдентификатор)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	ОбъектДокумента = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектДокумента.ВыгрузитьДокумент(УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеНаСервере()
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТекстРНПТВыставленные(ВыбранныеСтроки = Неопределено)
	Если ВыбранныеСтроки = Неопределено Тогда
		КоллекцияСтрок = Объект.ВыставленныеСчетаФактуры;
	Иначе
		КоллекцияСтрок = ВыбранныеСтроки;
	КонецЕсли;
	
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ОтборСчетФактура = Новый Структура;
		ОтборСчетФактура.Вставить("СчетФактура", Строка.СчетФактура);
		ОтборСчетФактура.Вставить("СчетФактураПолученный", Строка.СчетФактураКомитента);
		ЗаполнитьТекстРНПТ(Строка, ОтборСчетФактура);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстРНПТПолученные(ВыбранныеСтроки = Неопределено)
	Если ВыбранныеСтроки = Неопределено Тогда
		КоллекцияСтрок = Объект.ПолученныеСчетаФактуры;
	Иначе
		КоллекцияСтрок = ВыбранныеСтроки;
	КонецЕсли;
	
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ОтборСчетФактура = Новый Структура;
		ОтборСчетФактура.Вставить("СчетФактура", Строка.СчетФактура);
		ОтборСчетФактура.Вставить("СчетФактураПолученный", Строка.СчетФактура);
		ЗаполнитьТекстРНПТ(Строка, ОтборСчетФактура);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстРНПТ(ТекущаяСтрока, ОтборСчетФактура)
	СведенияПрослеживаемости = Объект.СведенияПрослеживаемости.НайтиСтроки(ОтборСчетФактура);
	МассивРНПТ = Новый Массив;
	Текст = "";
	Для Каждого Строка Из СведенияПрослеживаемости Цикл
		Если ЗначениеЗаполнено(Строка.РНПТ) И МассивРНПТ.Найти(Строка.РНПТ) = Неопределено Тогда
			Текст = Текст + ?(ПустаяСтрока(Текст), "", ", ") + Строка.РНПТ;
			МассивРНПТ.Добавить(Строка.РНПТ);
		КонецЕсли;
	КонецЦикла;
	
	ТекущаяСтрока.РНПТ = Текст;
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРНПТННаКлиенте(ДанныеВыбора)
	ТаблицаРНПТ = ПолучитьИзВременногоХранилища(ДанныеВыбора.АдресТаблицыРНПТ);	
	
	ОтборСчетФактура = Новый Структура("СчетФактура", ДанныеВыбора.СчетФактура);
	ТекущиеДанные = Объект.СведенияПрослеживаемости.НайтиСтроки(ОтборСчетФактура);
	Для Каждого Строка Из ТекущиеДанные Цикл
		Объект.СведенияПрослеживаемости.Удалить(Строка);
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаРНПТ Цикл
		НоваяСтрока = Объект.СведенияПрослеживаемости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.СчетФактура = ДанныеВыбора.СчетФактура;
		НоваяСтрока.СчетФактураПолученный = ДанныеВыбора.СчетФактураПолученный;
	КонецЦикла;
	
	СтрокиВыставленные = Объект.ВыставленныеСчетаФактуры.НайтиСтроки(ОтборСчетФактура);
	ЗаполнитьТекстРНПТВыставленные(СтрокиВыставленные);

	СтрокиПолученные = Объект.ПолученныеСчетаФактуры.НайтиСтроки(ОтборСчетФактура);
	ЗаполнитьТекстРНПТПолученные(СтрокиПолученные);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеНалоговогоПериода()
	ПредставлениеНалоговогоПериода = ПредставлениеПериода(
		Объект.НалоговыйПериод,
		КонецКвартала(Объект.НалоговыйПериод),
		"ФП = Истина");
КонецПроцедуры

&НаСервере
Процедура СохранитьСтатусОтправки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СсылкаНаОбъект", Объект.Ссылка);
	СтруктураПараметров.Вставить("Форма", ЭтаФорма);
	
	ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияНалоговыйПериодПриИзменении()

	ОбработатьИзменениеНалоговогоПериода();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНалоговогоПериода()
	
	Если Объект.НалоговыйПериод < Дата(2021, 07, 01) Тогда
		Объект.НалоговыйПериод = Дата(2021, 07, 01);
		ТекстСообщения	= НСтр("ru = 'Документ может быть составлен только в соответствии с постановлением Правительства Российской Федерации от 2 апреля 2021 г. № 534'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПредставлениеНалоговогоПериода");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВыставленныеСчетаФактуры.Количество() > 0 
		ИЛИ Объект.ПолученныеСчетаФактуры.Количество() > 0 Тогда 
		Объект.ВыставленныеСчетаФактуры.Очистить();
		Объект.ПолученныеСчетаФактуры.Очистить();
	КонецЕсли;
	
	ОбновитьПредставлениеНалоговогоПериода();
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьОтправки()
	
	Если КэшЗначений <> Неопределено И КэшЗначений.ВозможностьОтправкиВКО = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Отправка документа в ФНС недоступна!'");
	ПоказатьПредупреждение(, ТекстПредупреждения);
		
	Возврат Ложь;
	
КонецФункции


#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
