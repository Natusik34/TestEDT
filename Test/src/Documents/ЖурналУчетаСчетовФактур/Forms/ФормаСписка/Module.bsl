
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	Иначе
		Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = Справочники.Организации.ПредопределеннаяОрганизация();
		КонецЕсли;
	КонецЕсли;
	
	ПечатьДокументовУНФ.УстановитьОтображениеПодменюПечати(Элементы.ПодменюПечать);
	ЭлектроннаяПочтаУНФ.УстановитьОтображениеКомандОтправкиСообщений(Элементы);

	ДинамическиеСпискиУНФ.ОтображатьТолькоВремяДляТекущейДаты(Список);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация, , ,
		ЗначениеЗаполнено(Организация));
	НастроитьВидимостьИДоступность(); 
	
	УстановитьУсловноеОформление();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация, , ,
		ЗначениеЗаполнено(Организация));
	НастроитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУстановитьСдаватьОтчетностьНажатие(Элемент)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Организация);
	ПараметрыОткрытия.Вставить("УстановитьТекущийЭлемент", "ИспользуетсяОтчетность");
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодЗначениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)

	Оповещение = Новый ОписаниеОповещения("ОтборПериодНачалоВыбора_Завершение", ЭтотОбъект);
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Значение", НачалоПериода);
	ПараметрыОткрытия.Вставить("ЗапрашиватьРежимВыбораПериодаУВладельца", Ложь);
	ПараметрыОткрытия.Вставить("ВыбиратьВидПериода", Истина);
	ПараметрыОткрытия.Вставить("ВидыВыбираемыхПериодов", Новый Массив);
	ПараметрыОткрытия.ВидыВыбираемыхПериодов.Добавить("КВАРТАЛ");
	ПараметрыОткрытия.ВидыВыбираемыхПериодов.Добавить("ГОД");
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", 
		ПараметрыОткрытия,
		ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодОтчетаОчистка(Элемент, СтандартнаяОбработка)
	
	НачалоПериода = Дата(1, 1, 1);
	КонецПериода  = Дата(1, 1, 1);
	
	УстановитьОтборПоПериоду(ЭтотОбъект, НачалоПериода, КонецПериода, Ложь);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьВидимостьИДоступность()
	
	ВидимостьГруппыИспользуетсяОтчетность = Ложь;
	ВидимостьЭтоЮридическоеЛицо = Ложь;
	
	Если Не Организация.Пустая() Тогда
		ЗначенияРеквизитовСтруктура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИспользуетсяОтчетность, ЮридическоеФизическоеЛицо");
		Если ЗначенияРеквизитовСтруктура.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
			ВидимостьЭтоЮридическоеЛицо = Истина;
		ИначеЕсли Не ЗначенияРеквизитовСтруктура.ИспользуетсяОтчетность Тогда
			ВидимостьГруппыИспользуетсяОтчетность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияЭтоЮридическоеЛицо.Видимость = ВидимостьЭтоЮридическоеЛицо;
	Элементы.ГруппаИспользуетсяОтчетность.Видимость = ВидимостьГруппыИспользуетсяОтчетность;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента 		= ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле 	= Новый ПолеКомпоновкиДанных("СписокОрганизация");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Организация", ВидСравненияКомпоновкиДанных.НеРавно, Справочники.Организации.ПустаяСсылка());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодНачалоВыбора_Завершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = РезультатВыбора.Период;
	КонецПериода = ?(РезультатВыбора.Горизонт = "ГОД", КонецГода(НачалоПериода), КонецКвартала(НачалоПериода));
	
	ПредставлениеНалоговогоПериода = ПредставлениеПериода(
		НачалоПериода,
		КонецДня(КонецПериода),
		"ФП = Истина");

	УстановитьОтборПоПериоду(ЭтотОбъект, НачалоПериода, КонецПериода, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПериоду(Форма, НачалоПериода, КонецПериода, Использование)
	
	ОтборКомпоновкиДанных = Форма.Список.КомпоновщикНастроек.Настройки.Отбор;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		ОтборКомпоновкиДанных, , "ПериодДокумента");

	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
		ОтборКомпоновкиДанных, "НалоговыйПериод");

	Если ДобавитьМесяц(НачалоПериода, 3) - 1 = КонецДня(КонецПериода) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборКомпоновкиДанных, "НалоговыйПериод", ВидСравненияКомпоновкиДанных.Равно, НачалоКвартала(НачалоПериода), , Использование);
	Иначе
		ГруппаОтбораПериод = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ОтборКомпоновкиДанных, "ПериодДокумента", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбораПериод, "НалоговыйПериод", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, НачалоПериода, , Использование);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбораПериод, "НалоговыйПериод", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, КонецПериода, , Использование);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
// 

#КонецОбласти