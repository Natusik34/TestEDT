#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выгружает документ и возвращает свойства файла выгрузки.
//
// Параметры:
//  УникальныйИдентификатор - адрес во временном хранилище.
//
// Возвращаемое значение:
//  Массив - массив структур. Пустой если не удалось сформировать файл выгрузки. Ключи структуры:
//    * АдресФайлаВыгрузки - адрес двоичных данных файла выгрузки во временном хранилище;
//    * ИмяФайлаВыгрузки - короткое имя файла выгрузки (с расширением).
//
Функция ВыгрузитьДокумент(УникальныйИдентификатор = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = ЭлектронноеПредставлениеЖурналаСчетовФактур_505(ЭтотОбъект);
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	СтруктураЗаполнения = Неопределено;
	Если ДанныеЗаполнения = Неопределено Тогда
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("ТолькоДополнитьЗначениямиИзНастроек", Истина);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		СтруктураЗаполнения = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеЗаполнения);
	КонецЕсли;
	
	Если СтруктураЗаполнения <> Неопределено Тогда

		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЗначенияРеквизитовСтруктура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИспользуетсяОтчетность, ЮридическоеФизическоеЛицо, СвидетельствоДатаВыдачи, СвидетельствоСерияНомер");
		Если ЗначенияРеквизитовСтруктура.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для юр. лица заполнение журнала учета счетов-фактур не предусмотрено'"),,,,Отказ);
		КонецЕсли;
		
		Если НЕ ЗначенияРеквизитовСтруктура.ИспользуетсяОтчетность Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Сдача отчетности для выбранной организации отключена'"),,,,Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗначенияРеквизитовСтруктура.СвидетельствоДатаВыдачи) ИЛИ НЕ ЗначениеЗаполнено(ЗначенияРеквизитовСтруктура.СвидетельствоСерияНомер) Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Заполните свидетельство о постановке на учет организации'"),,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Ответственный = Неопределено;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбменДаннымиСобытияУНФ.ПропуститьДозаполнениеДокумента(ЭтотОбъект, РежимЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполненныеДанные = ДанныеТаблицДокумента();
	ДанныеОтчета = Новый ХранилищеЗначения(ЗаполненныеДанные);
	ПредставлениеОтчета = Новый ХранилищеЗначения(ЗаполненныеДанные.СформированныйЖурнал);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеТаблицДокумента()
	
	СтрокиСчФ = Новый Соответствие;
	СтруктураПараметров = РегламентированнаяОтчетностьПереопределяемый.ПараметрыЗаполненияСтрокиЖурналаСчетовФактур(Организация, НалоговыйПериод);
	СтруктураПараметров.Вставить("СведенияОРНПТ", СведенияОРНПТДляЗаполненияСтрокиЖурнала());
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЖурналУчетаСчетовФактур";
	
	Макет = ПолучитьМакет("ЖурналУчетаСчетовФактур534");
	Отступ = Макет.ПолучитьОбласть("Отступ");
	
	Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
	ТабличныйДокумент.Вывести(Секция);

	СведенияОрганизации = ПечатьДокументовУНФ.СведенияОЮрФизЛице(Организация, Дата);
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Организация = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОрганизации, "ПолноеНаименование");
	Шапка.Параметры.ИННКПП = "" + СведенияОрганизации.ИНН + ?(НЕ ЗначениеЗаполнено(СведенияОрганизации.КПП), "", ("/" + СведенияОрганизации.КПП));
	Шапка.Параметры.Квартал = Формат(НалоговыйПериод, "ДФ = к");
	Шапка.Параметры.Год = Формат(НалоговыйПериод, "ДФ = гггг");
	ТабличныйДокумент.Вывести(Шапка);

#Область Часть1	
	ДанныеВыставленных = ВыставленныеСчетаФактуры.Выгрузить();
	ДополнитьСчФВыставленныеДляЗаполненияСтрокиЖурнала(ДанныеВыставленных);

	Часть1Заголовок = Макет.ПолучитьОбласть("Часть1Заголовок");
	Если Часть1Заголовок.Области.Найти("НомераГрафКДекларацияР10") <> Неопределено Тогда
		Часть1Заголовок.Область("НомераГрафКДекларацияР10").Видимость = Ложь;
	КонецЕсли;
	ТабличныйДокумент.Вывести(Часть1Заголовок);
	
	Часть1Строка_Обычная = Макет.ПолучитьОбласть("Часть1Строка");
	Часть1Строка_Многострочная1 = Макет.ПолучитьОбласть("Часть1Строка_Многострочная1");
	Часть1Строка_Многострочная2 = Макет.ПолучитьОбласть("Часть1Строка_Многострочная2");
	Часть1Строка_Многострочная3 = Макет.ПолучитьОбласть("Часть1Строка_Многострочная3");
	
	Часть1СтрокаРНПТ = Макет.ПолучитьОбласть("Часть1СтрокаРНПТ");
	ПараметрыСтрокиРНПТЧасть1 = Часть1СтрокаРНПТ.Параметры;
	
	ПорядковыеНомера = Новый Соответствие;
	НомПП = 1; НомерСтрокиВГруппировке = 1;
	Для Каждого Строка Из ДанныеВыставленных Цикл
		
		ПараметрыВывода = РегламентированнаяОтчетностьПереопределяемый.ПараметрыВыводаЖурналаУчетаСчетовФактур();
		ПараметрыВывода.ТабличныйДокумент = ТабличныйДокумент;
		
		ИдентификаторСчФ = СтрШаблон("%1%2_%3%4_%5%6_%7%8_%9",
									Строка.НомерСчетаФактуры,
									Формат(Строка.ДатаСчетаФактуры, "ДФ=dd.MM.yyyy"),
									Строка.НомерКорректировочногоСчетаФактуры,
									Формат(Строка.ДатаКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"),
									Строка.НомерИсправления,
									Формат(Строка.ДатаИсправления, "ДФ=dd.MM.yyyy"),
									Строка.НомерИсправленияКорректировочногоСчетаФактуры,
									Формат(Строка.ДатаИсправленияКорректировочногоСчетаФактуры, "ДФ=dd.MM.yyyy"),
									?(Строка.СуммаДокумента < 0, "1", "0")); 
		
		НомерПП = ПорядковыеНомера.Получить(ИдентификаторСчФ);
		Если НомерПП = Неопределено Тогда
			НомерПП = НомПП;
			ПорядковыеНомера.Вставить(ИдентификаторСчФ, НомерПП);
			НомПП = НомПП + 1;
			НомерСтрокиВГруппировке = 1;
		Иначе
			НомерСтрокиВГруппировке = НомерСтрокиВГруппировке + 1;
		КонецЕсли;
		ПараметрыВывода.НомерПодпункта = НомерПП;
		
		
		Если Строка.КоличествоВыставленных > 1 Тогда
			Если НомерСтрокиВГруппировке = 1 Тогда
				Часть1Строка = Часть1Строка_Многострочная1;
				ПараметрыВывода.ИмяОбласти = "ОбластьЗаписьОсновнаяЧасть1Многострочная1";
				Часть1Строка.Параметры.Ном = НомерПП;
			Иначе
				Часть1Строка = Часть1Строка_Многострочная3;
				ПараметрыВывода.ИмяОбласти = "ОбластьЗаписьОсновнаяЧасть1Многострочная3";
			КонецЕсли;
			ПараметрыВывода.ЕстьПодстроки = Истина;
		Иначе
			Часть1Строка = Часть1Строка_Многострочная1;
			ПараметрыВывода.ИмяОбласти = "ОбластьЗаписьОсновнаяЧасть1Многострочная1";
			Часть1Строка.Параметры.Ном = НомерПП;
		КонецЕсли;
		ПараметрыВывода.ОбластьДокумента = Часть1Строка;
		ПараметрыВывода.ПоследняяСтрокаГруппировки = (НомерСтрокиВГруппировке = Строка.КоличествоВыставленных);
		
		Если ЗначениеЗаполнено(Строка.НомерКорректировочногоСчетаФактуры)
			ИЛИ ЗначениеЗаполнено(Строка.НомерИсправленияКорректировочногоСчетаФактуры) Тогда
			Строка.КорректировочныйСчетФактура = Истина;
		КонецЕсли;
		
		РегламентированнаяОтчетностьПереопределяемый.ВывестиСтрокуЖурналаУчетаСчетовФактур(Строка, СтруктураПараметров, ПараметрыВывода);
		
		ПараметрыВывода.ОбластьДокумента = Часть1СтрокаРНПТ;
		ПараметрыВывода.ИмяОбласти = "ОбластьЗаписьЧасть1";
		РегламентированнаяОтчетностьПереопределяемый.ВывестиПодстрокуРНПТЖурналаУчетаСчетовФактур(Строка, СтруктураПараметров, ПараметрыВывода);
		
	КонецЦикла;
#КонецОбласти

#Область Часть2
	ДанныеПолученных = ПолученныеСчетаФактуры.Выгрузить();
	ДополнитьСчФПолученныеДляЗаполненияСтрокиЖурнала(ДанныеПолученных);
	
	ТабличныйДокумент.Вывести(Отступ);
	Часть2Заголовок = Макет.ПолучитьОбласть("Часть2Заголовок");
	Если Часть2Заголовок.Области.Найти("НомераГрафКДекларацияР11") <> Неопределено Тогда
		Часть2Заголовок.Область("НомераГрафКДекларацияР11").Видимость = Ложь;
	КонецЕсли;
	ТабличныйДокумент.Вывести(Часть2Заголовок);
	
	Часть2Строка = Макет.ПолучитьОбласть("Часть2Строка");
	Часть2СтрокаРНПТ = Макет.ПолучитьОбласть("Часть2СтрокаРНПТ");
	ПараметрыСтрокиРНПТЧасть2 = Часть2СтрокаРНПТ.Параметры;
	
	ПорядковыеНомера = Новый Соответствие;
	НомПП = 1;
	Для Каждого Строка Из ДанныеПолученных Цикл
		
		ПараметрыВывода = РегламентированнаяОтчетностьПереопределяемый.ПараметрыВыводаЖурналаУчетаСчетовФактур();
		ПараметрыВывода.ТабличныйДокумент = ТабличныйДокумент;
		ПараметрыВывода.ОбластьДокумента = Часть2Строка;
		ПараметрыВывода.ИмяОбласти = "ОбластьЗаписьОсновнаяЧасть2";
		
		НомерПП = ПорядковыеНомера.Получить(Строка.СчетФактура);
		Если НомерПП = Неопределено Тогда
			НомерПП = НомПП;
			ПорядковыеНомера.Вставить(Строка.СчетФактура, НомерПП);
			НомПП = НомПП + 1;
		КонецЕсли;
		
		ПараметрыВывода.НомерПодпункта = НомерПП;
		Часть2Строка.Параметры.Ном = НомерПП;

		РегламентированнаяОтчетностьПереопределяемый.ВывестиСтрокуЖурналаУчетаСчетовФактур(Строка, СтруктураПараметров, ПараметрыВывода);
		
		ПараметрыВывода.ОбластьДокумента = Часть2СтрокаРНПТ;
		ПараметрыВывода.ИмяОбласти = "ОбластьЗаписьЧасть2";
		РегламентированнаяОтчетностьПереопределяемый.ВывестиПодстрокуРНПТЖурналаУчетаСчетовФактур(Строка, СтруктураПараметров, ПараметрыВывода);
		
	КонецЦикла;
	
#КонецОбласти

	СтруктураПараметров.Вставить("СформированныйЖурнал", ТабличныйДокумент);
	Возврат СтруктураПараметров;	
КонецФункции

Процедура ДополнитьСчФВыставленныеДляЗаполненияСтрокиЖурнала(ТаблицаВыставленныхСчФ)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВыставленныеСчФ.СчетФактура КАК СчетФактура,
	               |	ВыставленныеСчФ.Контрагент КАК Контрагент,
	               |	ВыставленныеСчФ.Валюта КАК Валюта,
	               |	ВыставленныеСчФ.СчетФактураКомитента КАК СчетФактураКомитента,
	               |	ВыставленныеСчФ.СуммаДокумента КАК СуммаДокумента,
	               |	ВыставленныеСчФ.СуммаНДС КАК СуммаНДС
	               |ПОМЕСТИТЬ ВТДанныеВыставленных
	               |ИЗ
	               |	&ВыставленныеСчФ КАК ВыставленныеСчФ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДанныеВыставленных.СчетФактура КАК СчетФактура,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТДанныеВыставленных.СчетФактураКомитента) КАК КоличествоВыставленных
	               |ПОМЕСТИТЬ ВТПоказателиСчетаФактуры
	               |ИЗ
	               |	ВТДанныеВыставленных КАК ВТДанныеВыставленных
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТДанныеВыставленных.СчетФактура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДанныеВыставленных.СчетФактура КАК СчетФактура,
	               |	ВТДанныеВыставленных.Контрагент КАК Контрагент,
	               |	ВТДанныеВыставленных.СчетФактураКомитента КАК СчетФактураКомитента,
	               |	Контрагенты.ИНН КАК КонтрагентИНН,
	               |	Контрагенты.КПП КАК КонтрагентКПП,
	               |	Контрагенты.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	               |	Контрагенты.Наименование КАК КонтрагентНаименование,
	               |	СчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаСчетаФактурыКомитента,
	               |	СчетФактураПолученный.НомерВходящегоДокумента КАК НомерСчетаФактурыКомитента,
	               |	СчетФактураПолученный.Контрагент КАК Комитент,
	               |	Комитенты.Наименование КАК КомитентНаименование,
	               |	Комитенты.НаименованиеПолное КАК КомитентНаименованиеПолное,
	               |	Комитенты.ИНН КАК КомитентИНН,
	               |	Комитенты.КПП КАК КомитентКПП,
	               |	ЕСТЬNULL(Валюты.Код, """") КАК КодВалюты,
	               |	ЕСТЬNULL(Валюты.Наименование, """") КАК НаименованиеВалюта,
	               |	ЕСТЬNULL(Валюты.НаименованиеПолное, """") КАК НаименованиеПолноеВалюты,
	               |	ЕСТЬNULL(СчетФактураВыставленный.СуммаДокумента + СчетФактураВыставленный.СуммаНДСДокумента, ВТДанныеВыставленных.СуммаДокумента) КАК СуммаДокумента,
	               |	ВТПоказателиСчетаФактуры.КоличествоВыставленных КАК КоличествоВыставленных,
	               |	СчетФактураВыставленный.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Корректировка) КАК КорректировочныйСчетФактура
	               |ИЗ
	               |	ВТДанныеВыставленных КАК ВТДанныеВыставленных
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО ВТДанныеВыставленных.Контрагент = Контрагенты.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Комитенты
	               |			ПО СчетФактураПолученный.Контрагент = Комитенты.Ссылка
	               |		ПО ВТДанныеВыставленных.СчетФактураКомитента = СчетФактураПолученный.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	               |		ПО ВТДанныеВыставленных.Валюта = Валюты.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактура КАК СчетФактураВыставленный
	               |		ПО ВТДанныеВыставленных.СчетФактура = СчетФактураВыставленный.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиСчетаФактуры КАК ВТПоказателиСчетаФактуры
	               |		ПО ВТДанныеВыставленных.СчетФактура = ВТПоказателиСчетаФактуры.СчетФактура";
	
	Запрос.УстановитьПараметр("ВыставленныеСчФ", ТаблицаВыставленныхСчФ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОтборСтрокЖурнала = Новый Структура("СчетФактура, Контрагент, СчетФактураКомитента");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("СчетФактураДокумент");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("СчетФактураКомитентаПродавца");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("ЭтоСчетФактураВыданная", Новый ОписаниеТипов("Булево"));
	ТаблицаВыставленныхСчФ.Колонки.Добавить("Организация");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("КонтрагентНаименование");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("КонтрагентИНН");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("КонтрагентКПП");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("КоличествоВыставленных", Новый ОписаниеТипов("Число"));
	ТаблицаВыставленныхСчФ.Колонки.Добавить("Комитент");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("КомитентНаименование");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("КомитентИНН");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("КомитентКПП");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("КодВалюты");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("НаименованиеВалюты");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("КодВидаСделки", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4)));
	ТаблицаВыставленныхСчФ.Колонки.Добавить("НомерСчетаФактурыКомитента");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("ДатаСчетаФактурыКомитента");
	ТаблицаВыставленныхСчФ.Колонки.Добавить("КорректировочныйСчетФактура", Новый ОписаниеТипов("Булево"));
	ТаблицаВыставленныхСчФ.Колонки.Добавить("СуммаДокументаКомиссия", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ТаблицаВыставленныхСчФ.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаВыставленныхСчФ.ЗаполнитьЗначения(Истина, "ЭтоСчетФактураВыданная");
	ТаблицаВыставленныхСчФ.ЗагрузитьКолонку(ТаблицаВыставленныхСчФ.ВыгрузитьКолонку("СуммаДокумента"), "СуммаДокументаКомиссия");
	ТаблицаВыставленныхСчФ.ЗагрузитьКолонку(ТаблицаВыставленныхСчФ.ВыгрузитьКолонку("СчетФактура"), "СчетФактураДокумент");
	ТаблицаВыставленныхСчФ.ЗагрузитьКолонку(ТаблицаВыставленныхСчФ.ВыгрузитьКолонку("СчетФактураКомитента"), "СчетФактураКомитентаПродавца");
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрокЖурнала, Выборка);
		СтрокиЖурнала = ТаблицаВыставленныхСчФ.НайтиСтроки(ОтборСтрокЖурнала);
		Для Каждого Строка Из СтрокиЖурнала Цикл
			ЗаполнитьЗначенияСвойств(Строка, Выборка, , "СуммаДокумента");
			Если ЗначениеЗаполнено(Выборка.КонтрагентНаименованиеПолное) Тогда
				Строка.КонтрагентНаименование = Выборка.КонтрагентНаименованиеПолное;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.КомитентНаименованиеПолное) Тогда
				Строка.КомитентНаименование = Выборка.КомитентНаименованиеПолное;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.НаименованиеПолноеВалюты) Тогда
				Строка.НаименованиеВалюты = Выборка.НаименованиеПолноеВалюты;
			КонецЕсли;
			
			Если Выборка.КоличествоВыставленных > 1 Тогда
				Строка.СуммаДокумента = ?(Строка.СуммаДокумента < 0, -1, 1) * Выборка.СуммаДокумента;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ДополнитьСчФПолученныеДляЗаполненияСтрокиЖурнала(ТаблицаПолученныхСчФ)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПолученныеСчФ.СчетФактура КАК СчетФактура,
	               |	ПолученныеСчФ.Контрагент КАК Контрагент,
	               |	ПолученныеСчФ.Валюта КАК Валюта
	               |ПОМЕСТИТЬ ВТДанныеПолученных
	               |ИЗ
	               |	&ПолученныеСчФ КАК ПолученныеСчФ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДанныеПолученных.СчетФактура КАК СчетФактура,
	               |	ВТДанныеПолученных.Контрагент КАК Контрагент,
	               |	Контрагенты.ИНН КАК КонтрагентИНН,
	               |	Контрагенты.КПП КАК КонтрагентКПП,
	               |	Контрагенты.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	               |	Контрагенты.Наименование КАК КонтрагентНаименование,
	               |	ЕСТЬNULL(Валюты.Код, """") КАК КодВалюты,
	               |	ЕСТЬNULL(Валюты.Наименование, """") КАК НаименованиеВалюта,
	               |	ЕСТЬNULL(Валюты.НаименованиеПолное, """") КАК НаименованиеПолноеВалюты
	               |ИЗ
	               |	ВТДанныеПолученных КАК ВТДанныеПолученных
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО ВТДанныеПолученных.Контрагент = Контрагенты.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	               |		ПО ВТДанныеПолученных.Валюта = Валюты.Ссылка";
	
	Запрос.УстановитьПараметр("ПолученныеСчФ", ТаблицаПолученныхСчФ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОтборСтрокЖурнала = Новый Структура("СчетФактура, Контрагент");
	ТаблицаПолученныхСчФ.Колонки.Добавить("СчетФактураДокумент");
	ТаблицаПолученныхСчФ.Колонки.Добавить("ЭтоСчетФактураВыданная", Новый ОписаниеТипов("Булево"));
	ТаблицаПолученныхСчФ.Колонки.Добавить("Организация");
	ТаблицаПолученныхСчФ.Колонки.Добавить("КонтрагентНаименование");
	ТаблицаПолученныхСчФ.Колонки.Добавить("КонтрагентИНН");
	ТаблицаПолученныхСчФ.Колонки.Добавить("КонтрагентКПП");
	ТаблицаПолученныхСчФ.Колонки.Добавить("КомитентИНН");
	ТаблицаПолученныхСчФ.Колонки.Добавить("КомитентКПП");
	ТаблицаПолученныхСчФ.Колонки.Добавить("НомерСчетаФактурыКомитента");
	ТаблицаПолученныхСчФ.Колонки.Добавить("ДатаСчетаФактурыКомитента");
	ТаблицаПолученныхСчФ.Колонки.Добавить("КодВалюты");
	ТаблицаПолученныхСчФ.Колонки.Добавить("НаименованиеВалюты");
	ТаблицаПолученныхСчФ.Колонки.Добавить("КорректировочныйСчетФактура", Новый ОписаниеТипов("Булево"));
	
	ТаблицаПолученныхСчФ.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаПолученныхСчФ.ЗаполнитьЗначения(Ложь, "ЭтоСчетФактураВыданная");
	ТаблицаПолученныхСчФ.ЗагрузитьКолонку(ТаблицаПолученныхСчФ.ВыгрузитьКолонку("СчетФактура"), "СчетФактураДокумент");
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрокЖурнала, Выборка);
		СтрокиЖурнала = ТаблицаПолученныхСчФ.НайтиСтроки(ОтборСтрокЖурнала);
		Для Каждого Строка Из СтрокиЖурнала Цикл
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
			Если ЗначениеЗаполнено(Выборка.КонтрагентНаименованиеПолное) Тогда
				Строка.КонтрагентНаименование = Выборка.КонтрагентНаименованиеПолное;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.НаименованиеПолноеВалюты) Тогда
				Строка.НаименованиеВалюты = Выборка.НаименованиеПолноеВалюты;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция СведенияОРНПТДляЗаполненияСтрокиЖурнала()
	СведенияОРНПТ = Новый ТаблицаЗначений;
	СведенияОРНПТ.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
	СведенияОРНПТ.Колонки.Добавить("СчетФактураКомитентаПродавца", Документы.ТипВсеСсылки());
	СведенияОРНПТ.Индексы.Добавить("Ссылка,СчетФактураКомитентаПродавца");
	// С 1 июля 2021 года указывается свойство СвРегНом
	СведенияОРНПТ.Колонки.Добавить("СвРегНом", Новый ОписаниеТипов("Массив"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияПрослеживаемости.РНПТ КАК РНПТ,
	               |	СведенияПрослеживаемости.СчетФактура КАК СчетФактура,
	               |	СведенияПрослеживаемости.СчетФактураПолученный КАК СчетФактураКомитента,
	               |	СведенияПрослеживаемости.Количество КАК Количество,
	               |	СведенияПрослеживаемости.КоличествоПрослеживаемости КАК КоличествоПрослеживаемости,
	               |	СведенияПрослеживаемости.Номенклатура КАК Номенклатура,
	               |	СведенияПрослеживаемости.СтранаПроисхождения КАК СтранаПроисхождения,
	               |	СведенияПрослеживаемости.Сумма КАК Сумма
	               |ПОМЕСТИТЬ ВТСведенияПрослеживаемости
	               |ИЗ
	               |	&СведенияПрослеживаемости КАК СведенияПрослеживаемости
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТСведенияПрослеживаемости.СчетФактура КАК СчетФактура,
	               |	ВТСведенияПрослеживаемости.СчетФактураКомитента КАК СчетФактураКомитента,
	               |	НомераГТД.Код КАК РегНомПросл,
	               |	ВТСведенияПрослеживаемости.Количество КАК Количество,
	               |	ВТСведенияПрослеживаемости.КоличествоПрослеживаемости КАК КолТовПросл,
	               |	ВТСведенияПрослеживаемости.Номенклатура КАК Номенклатура,
	               |	ВТСведенияПрослеживаемости.СтранаПроисхождения КАК СтранаПроисхождения,
	               |	ВТСведенияПрослеживаемости.Сумма КАК СтоимТовПросл,
	               |	ЕСТЬNULL(КлассификаторТНВЭД.ЕдиницаИзмерения.Код, """") КАК ОКЕИ
	               |ИЗ
	               |	ВТСведенияПрослеживаемости КАК ВТСведенияПрослеживаемости
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
	               |		ПО ВТСведенияПрослеживаемости.РНПТ = НомераГТД.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	               |			ПО СправочникНоменклатура.ТоварнаяНоменклатураВЭД = КлассификаторТНВЭД.Ссылка
	               |		ПО ВТСведенияПрослеживаемости.Номенклатура = СправочникНоменклатура.Ссылка
	               |ИТОГИ ПО
	               |	СчетФактура,
	               |	СчетФактураКомитента";
	
	Запрос.УстановитьПараметр("СведенияПрослеживаемости", СведенияПрослеживаемости.Выгрузить());
	
	ВыборкаПоСчетФактурам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаПоСчетФактурам.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСчетФактурам.СчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоДокументам = ВыборкаПоСчетФактурам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоДокументам.Следующий() Цикл
		
			МассивСвРегНом = Новый Массив();
			ВыборкаПоРНПТ = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.Прямой);
			
			Пока ВыборкаПоРНПТ.Следующий() Цикл 
				
				Если ЗначениеЗаполнено(ВыборкаПоРНПТ.РегНомПросл) Тогда
					
					СтруктураСвРегНом = Новый Структура("РегНомПросл,КолТовПросл,СтоимТовПросл,ОКЕИ");
					ЗаполнитьЗначенияСвойств(СтруктураСвРегНом, ВыборкаПоРНПТ);
					МассивСвРегНом.Добавить(СтруктураСвРегНом);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОтборСчетаФактуры = Новый Структура;
			ОтборСчетаФактуры.Вставить("Ссылка", ВыборкаПоДокументам.СчетФактура);
			ОтборСчетаФактуры.Вставить("СчетФактураКомитентаПродавца", ВыборкаПоДокументам.СчетФактураКомитента);
			
			СтрокиСведений = СведенияОРНПТ.НайтиСтроки(ОтборСчетаФактуры);
			Если СтрокиСведений.Количество() = 0 Тогда
				СтрокаСведений        = СведенияОРНПТ.Добавить();
				СтрокаСведений.Ссылка = ВыборкаПоДокументам.СчетФактура;
				СтрокаСведений.СчетФактураКомитентаПродавца = ВыборкаПоДокументам.СчетФактураКомитента;
			Иначе
				СтрокаСведений = СтрокиСведений[0];
			КонецЕсли;
			СтрокаСведений.СвРегНом = МассивСвРегНом;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат СведенияОРНПТ;
КонецФункции

#Область ЭлектронноеПредставлениеЖурнала

Функция ЭлектронноеПредставлениеЖурналаСчетовФактур_505(ВыгружаемыйДокумент)
	
	РезультатВыгрузки = Неопределено;
	
	ПараметрыВыгрузки = ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, "1115104");
	
	СведенияДокумента = ВыгружаемыйДокумент.ДанныеОтчета.Получить();
	
	Если СведенияДокумента <> Неопределено Тогда
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		
		КомпоновщикXML = Новый ЗаписьXML();
		КомпоновщикXML.ОткрытьФайл(ИмяВременногоФайла, "windows-1251");
		КомпоновщикXML.ЗаписатьОбъявлениеXML();
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("Файл");
		
		ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ПараметрыВыгрузки.ИдФайл, "Т,255");
		ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.05");
		ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог, "Т,40");
		ВывестиАтрибут(КомпоновщикXML, "ИдФайлИсх", ПараметрыВыгрузки.ИдФайл, "Т,200");
		ВывестиАтрибут(КомпоновщикXML, "ИдФайлПерв", ПараметрыВыгрузки.ИдФайл, "Т,200");
		ВывестиАтрибут(КомпоновщикXML, "КолФайл", 1, "Ч,5");
		ВывестиАтрибут(КомпоновщикXML, "НомФайл", 1, "Ч,5");
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("Документ");
		
		ВывестиАтрибут(КомпоновщикXML, "КНД", ПараметрыВыгрузки.КНД);
		ВывестиАтрибут(КомпоновщикXML, "Период", ПараметрыВыгрузки.Период);
		ВывестиАтрибут(КомпоновщикXML, "ОтчетГод", ПараметрыВыгрузки.ОтчетГод);
		
		ВывестиУзел_С503_СвНП(КомпоновщикXML, ПараметрыВыгрузки);
		
		Для Каждого СтрокаСведений Из СведенияДокумента.ЗаписиВыставленных Цикл
			ВывестиСвЧ1ЖурналаСчетовФактур_505(КомпоновщикXML, СтрокаСведений);
		КонецЦикла;
		
		Для Каждого СтрокаСведений Из СведенияДокумента.ЗаписиПолученных Цикл
			ВывестиСвЧ2ЖурналаСчетовФактур_505(КомпоновщикXML, СтрокаСведений);
		КонецЦикла;
		
		ВывестиУзел_С503_Подписант(КомпоновщикXML, ПараметрыВыгрузки);
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // Документ
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // Файл
		
		КомпоновщикXML.Закрыть();
		КомпоновщикXML = Неопределено;
	
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
		ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
		РезультатВыгрузки = Новый Массив;
		
		СтруктураВыгрузки = Новый Структура;
		СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВХранилище);
		СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
		
		РезультатВыгрузки.Добавить(СтруктураВыгрузки);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления(ВыгружаемыйДокумент, КНД)
	
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("КНД", КНД);
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ОсновныеСведения.Вставить("ДатаФормированияФайла", ТекущаяДатаСеанса());
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(ВыгружаемыйДокумент.Организация);
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ОсновныеСведения.Вставить("ЭтоЮЛ", НЕ ЭтоПБОЮЛ);
	ОсновныеСведения.Вставить("ЭтоИП", ЭтоПБОЮЛ);
	
	НалоговыйПериод = КонецКвартала(ВыгружаемыйДокумент.НалоговыйПериод);
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации, ФИО, ОКВЭД, ОКАТО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		ВыгружаемыйДокумент.Организация,
		НалоговыйПериод,
		СтрокаСведений);
	
	Если ЭтоПБОЮЛ Тогда
		ОсновныеСведения.Вставить("ИННФЛ", СведенияОбОрганизации.ИННЮЛ);
		СведенияОЮрФизЛице  = ПечатьДокументовУНФ.СведенияОЮрФизЛице(
			ВыгружаемыйДокумент.Организация,
			НалоговыйПериод);
		СвидетельствоОРегистрации = ПечатьДокументовУНФ.ОписаниеОрганизации(СведенияОЮрФизЛице, "Свидетельство");
		ОсновныеСведения.Вставить("СвГосРегИП", СвидетельствоОРегистрации);
		
		ФИО = ФИОФизЛица(ВыгружаемыйДокумент.Организация.ФизическоеЛицо, ВыгружаемыйДокумент.Дата);
		ОсновныеСведения.Вставить("ФамилияИП",  ФИО.Фамилия);
		ОсновныеСведения.Вставить("ИмяИП",      ФИО.Имя);
		ОсновныеСведения.Вставить("ОтчествоИП", ФИО.Отчество);
	Иначе
		ОсновныеСведения.Вставить("НаимОрг", СведенияОбОрганизации.НаимЮЛПол);
		ОсновныеСведения.Вставить("ИННЮЛ", СведенияОбОрганизации.ИННЮЛ);
		ОсновныеСведения.Вставить("КПП", СведенияОбОрганизации.КППЮЛ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыгружаемыйДокумент.ИФНС) Тогда
		ОсновныеСведения.Вставить("КодНО", ВыгружаемыйДокумент.ИФНС.Код);
	Иначе
		ОсновныеСведения.Вставить("КодНО", СведенияОбОрганизации.КодНО);
	КонецЕсли;
	
	ДобавитьСведенияОПодписанте(ОсновныеСведения, ВыгружаемыйДокумент);
	
	ОсновныеСведения.Вставить("Период", ПолучитьКодПоСКНП(ВыгружаемыйДокумент.НалоговыйПериод));
	
	ОтчетныйГод = Формат(ВыгружаемыйДокумент.НалоговыйПериод, "ДФ=yyyy");
	ОсновныеСведения.Вставить("ОтчетГод", ОтчетныйГод);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
	
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления(СведенияОтправки)
	
	Префикс = СведенияОтправки.КНД;
	Если СведенияОтправки.ЭтоПБОЮЛ Тогда
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННФЛ);
	Иначе
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННЮЛ) + СокрЛП(СведенияОтправки.КПП);
	КонецЕсли;
	ИдентификаторПолучателя = СведенияОтправки.КодНО;
	ИдентификационныйНомер1 = Строка(Новый УникальныйИдентификатор);
	ДатаФормированияФайла = Формат(СведенияОтправки.ДатаФормированияФайла, "ДФ=yyyyMMdd");
	ИдентификационныйНомер2 = Строка(Новый УникальныйИдентификатор);
	
	ИдентификаторФайла = Префикс
	                   + "_" + ИдентификаторОтправителя
	                   + "_" + ИдентификаторПолучателя
	                   + "_" + ИдентификационныйНомер1
	                   + "_" + ДатаФормированияФайла
	                   + "_" + ИдентификационныйНомер2;
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Процедура ВывестиСвЧ1ЖурналаСчетовФактур_505(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвЧ1");
	
	ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаВыстСчФ", СтрокаСведений.ДатаВыстСчФ, "Т,10");
	
	ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрСчФ", СтрокаСведений.НомерИспрСчФ, "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ",  СтрокаСведений.ДатаИспрСчФ,  "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрКСчФ", СтрокаСведений.НомерИспрКСчФ, "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ",  СтрокаСведений.ДатаИспрКСчФ,  "Т,10");
	
	ВывестиАтрибут(КомпоновщикXML, "НаимПок", СтрокаСведений.НаимПок, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("КодВидОпер");
		КомпоновщикXML.ЗаписатьТекст(КодВидаОперации);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // КодВидОпер
	КонецЦикла;
	
	ВывестиСвЧ1ЖурналаСчетовФактур_505_СвГр10_23(КомпоновщикXML, СтрокаСведений);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвЧ1
	
КонецПроцедуры

Процедура ВывестиСвЧ1ЖурналаСчетовФактур_505_СвГр10_23(КомпоновщикXML, СтрокаСведенийСФ)
	
	Для Каждого СтрокаСведений Из СтрокаСведенийСФ.СвГр10_23 Цикл
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СвГр10_23");
		
		ВывестиАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
		ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего, "Ч,19,2");
		
		Если СтрокаСведений.СвПосредн <> Неопределено Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПосредн");
			
			ВывестиАтрибут(КомпоновщикXML, "НомерСчФпрод", СтрокаСведений.СвПосредн.НомерСчФпрод, "Т,256");
			ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаСчФпрод", СтрокаСведений.СвПосредн.ДатаСчФпрод, "Т,10");
			
			Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛ") Тогда
				КомпоновщикXML.ЗаписатьНачалоЭлемента("СведЮЛ");
				
				ВывестиАтрибут(КомпоновщикXML, "НаимОрг", СтрокаСведений.СвПосредн.НаимОрг, "Т,1000");
				ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.СвПосредн.ИННЮЛ, "Т,10");
				ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП", СтрокаСведений.СвПосредн.КПП, "Т,9");
				
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведЮЛ
				
			Иначе
				КомпоновщикXML.ЗаписатьНачалоЭлемента("СведИП");
				
				ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.СвПосредн.ИННФЛ, "Т,12");
				
				КомпоновщикXML.ЗаписатьНачалоЭлемента("ФИОИП");
				
				ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
				ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
				ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
				
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // ФИОИП
				
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведИП
				
			КонецЕсли;
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПосредн
			
		КонецЕсли;
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("ВтчСумНДС");
		
		Если ТипЗнч(СтрокаСведений.ВтчСумНДС) = Тип("Число") Тогда
			ЗначениеУзла = Формат(СтрокаСведений.ВтчСумНДС, "ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
			КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
		Иначе
			ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.ВтчСумНДС), 7);
			КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
			КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
		КонецЕсли;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // ВтчСумНДС
		
		Если СтрокаСведений.РазнСтоимКСчФ <> Неопределено Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("РазнСтоимКСчФ");
			
			Если СтрокаСведений.РазнСтоимКСчФ.Свойство("УмСт")
			   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.УмСт) Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.УмСт, "ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML.ЗаписатьНачалоЭлемента("УмСт");
				КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // УмСт
			КонецЕсли;
			
			Если СтрокаСведений.РазнСтоимКСчФ.Свойство("УвелСт")
			   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.УвелСт) Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.УвелСт, "ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML.ЗаписатьНачалоЭлемента("УвелСт");
				КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // УвелСт
			КонецЕсли;
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // РазнСтоимКСчФ
			
		КонецЕсли;
		
		Если СтрокаСведений.РазнНДСКСчФ <> Неопределено Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("РазнНДСКСчФ");
			
			Если СтрокаСведений.РазнНДСКСчФ.Свойство("УмНДС")
			   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.УмНДС) Тогда
				КомпоновщикXML.ЗаписатьНачалоЭлемента("УмНДС");
				
				Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.УмНДС) = Тип("Число") Тогда
					ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.УмНДС, "ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
					КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
					КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
					КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
				Иначе
					ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.УмНДС), 7);
					КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
					КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
					КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
				КонецЕсли;
				
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // УмНДС
			КонецЕсли;
			
			Если СтрокаСведений.РазнНДСКСчФ.Свойство("УвелНДС")
			   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.УвелНДС) Тогда
				КомпоновщикXML.ЗаписатьНачалоЭлемента("УвелНДС");
				
				Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.УвелНДС) = Тип("Число") Тогда
					ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.УвелНДС, "ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
					КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
					КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
					КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
				Иначе
					ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.УвелНДС), 7);
					КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
					КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
					КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
				КонецЕсли;
				
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // УвелНДС
			КонецЕсли;
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // РазнНДСКСчФ
			
		КонецЕсли;
		
		ВывестиУзлы_СвРегНом(КомпоновщикXML, СтрокаСведений);
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвГр10_23
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСвЧ2ЖурналаСчетовФактур_505(КомпоновщикXML, СтрокаСведений)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвЧ2");
	
	ВывестиАтрибут(КомпоновщикXML, "НомПП", СтрокаСведений.НомПП, "Ч,12");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаПолСчФ", СтрокаСведений.ДатаПолСчФ, "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрСчФ", СтрокаСведений.НомерИспрСчФ, "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ",  СтрокаСведений.ДатаИспрСчФ,  "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерКСчФ", СтрокаСведений.НомерКСчФ, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФ",  СтрокаСведений.ДатаКСчФ,  "Т,10");
	
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомерИспрКСчФ", СтрокаСведений.НомерИспрКСчФ, "Ч,3");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ",  СтрокаСведений.ДатаИспрКСчФ,  "Т,10");
	
	ВывестиАтрибут(КомпоновщикXML, "НаимПрод", СтрокаСведений.НаимПрод, "Т,1000");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаСведений.ИННЮЛ, "Т,10");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КПП",   СтрокаСведений.КПП,   "Т,9");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаСведений.ИННФЛ, "Т,12");
	
	ВывестиАтрибут(КомпоновщикXML, "КодОКВ", СтрокаСведений.КодОКВ, "Ч,3");
	
	ВывестиАтрибут(КомпоновщикXML, "СтТовУчНалВсего", СтрокаСведений.СтТовУчНалВсего, "Ч,19,2");
	
	Для Каждого КодВидаОперации Из СтрокаСведений.КодВидОпер Цикл
		КомпоновщикXML.ЗаписатьНачалоЭлемента("КодВидОпер");
		КомпоновщикXML.ЗаписатьТекст(КодВидаОперации);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // КодВидОпер
	КонецЦикла;
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("НомДатаСчФ");
	
	ВывестиАтрибут(КомпоновщикXML, "НомерСчФ", СтрокаСведений.НомерСчФ, "Т,1000");
	ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаСведений.ДатаСчФ, "Т,10");
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // НомДатаСчФ
	
	Если СтрокаСведений.СвПосредн <> Неопределено Тогда
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПосредн");
		
		ВывестиАтрибут(КомпоновщикXML, "КодВидСдел", СтрокаСведений.СвПосредн.КодВидСдел, "Т,1");
		
		Если СтрокаСведений.СвПосредн.Свойство("ИННЮЛСубКом") Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("СведЮЛ");
			
			ВывестиАтрибут(КомпоновщикXML, "НаимСубКом", СтрокаСведений.СвПосредн.НаимСубКом, "Т,1000");
			ВывестиАтрибут(КомпоновщикXML, "ИННЮЛСубКом", СтрокаСведений.СвПосредн.ИННЮЛСубКом, "Т,10");
			ВывестиАтрибут(КомпоновщикXML, "КППСубКом", СтрокаСведений.СвПосредн.КППСубКом, "Т,9");
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведЮЛ
			
		ИначеЕсли СтрокаСведений.СвПосредн.Свойство("ИННФЛСубКом") Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("СведИП");
			
			ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИННФЛСубКом", СтрокаСведений.СвПосредн.ИННФЛСубКом, "Т,12");
			
			КомпоновщикXML.ЗаписатьНачалоЭлемента("ФИОИП");
			
			ВывестиАтрибут(КомпоновщикXML, "Фамилия", СтрокаСведений.СвПосредн.Фамилия, "Т,60");
			ВывестиАтрибут(КомпоновщикXML, "Имя", СтрокаСведений.СвПосредн.Имя, "Т,60");
			ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", СтрокаСведений.СвПосредн.Отчество, "Т,60");
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // ФИОИП
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведИП
			
		КонецЕсли;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПосредн
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("ВтчСумНДС");
	
	Если ТипЗнч(СтрокаСведений.ВтчСумНДС) = Тип("Число") Тогда
		ЗначениеУзла = Формат(СтрокаСведений.ВтчСумНДС,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
		КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
	Иначе
		ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.ВтчСумНДС), 7);
		КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
		КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // ВтчСумНДС
	
	Если СтрокаСведений.РазнСтоимКСчФ <> Неопределено Тогда
		КомпоновщикXML.ЗаписатьНачалоЭлемента("РазнСтоимКСчФ");
		
		Если СтрокаСведений.РазнСтоимКСчФ.Свойство("УмСт")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.УмСт) Тогда
			ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.УмСт,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			КомпоновщикXML.ЗаписатьНачалоЭлемента("УмСт");
			КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // УмСт
		КонецЕсли;
		
		Если СтрокаСведений.РазнСтоимКСчФ.Свойство("УвелСт")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнСтоимКСчФ.УвелСт) Тогда
			ЗначениеУзла = Формат(СтрокаСведений.РазнСтоимКСчФ.УвелСт,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
			КомпоновщикXML.ЗаписатьНачалоЭлемента("УвелСт");
			КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // УвелСт
		КонецЕсли;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // РазнСтоимКСчФ
		
	КонецЕсли;
	
	Если СтрокаСведений.РазнНДСКСчФ <> Неопределено Тогда
		КомпоновщикXML.ЗаписатьНачалоЭлемента("РазнНДСКСчФ");
		
		Если СтрокаСведений.РазнНДСКСчФ.Свойство("УмНДС")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.УмНДС) Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("УмНДС");
			
			Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.УмНДС) = Тип("Число") Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.УмНДС,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
				КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
			Иначе
				ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.УмНДС), 7);
				КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
				КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
			КонецЕсли;
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // УмНДС
			
		КонецЕсли;
		
		Если СтрокаСведений.РазнНДСКСчФ.Свойство("УвелНДС")
		   И ЗначениеЗаполнено(СтрокаСведений.РазнНДСКСчФ.УвелНДС) Тогда
			КомпоновщикXML.ЗаписатьНачалоЭлемента("УвелНДС");
			
			Если ТипЗнч(СтрокаСведений.РазнНДСКСчФ.УвелНДС) = Тип("Число") Тогда
				ЗначениеУзла = Формат(СтрокаСведений.РазнНДСКСчФ.УвелНДС,"ЧЦ=19; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
				КомпоновщикXML.ЗаписатьНачалоЭлемента("СумНДС");
				КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // СумНДС
			Иначе
				ЗначениеУзла = Лев(СокрЛП(СтрокаСведений.РазнНДСКСчФ.УвелНДС), 7);
				КомпоновщикXML.ЗаписатьНачалоЭлемента("БезНДС");
				КомпоновщикXML.ЗаписатьТекст(ЗначениеУзла);
				КомпоновщикXML.ЗаписатьКонецЭлемента(); // БезНДС
			КонецЕсли;
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // УвелНДС
			
		КонецЕсли;
		
		КомпоновщикXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ВывестиУзлы_СвРегНом(КомпоновщикXML, СтрокаСведений);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвЧ2
	
КонецПроцедуры

Процедура ДобавитьСведенияОПодписанте(ОсновныеСведения, ВыгружаемыйДокумент)
	
	Если ЗначениеЗаполнено(ВыгружаемыйДокумент.ПодписьРуководителя) Тогда
		ПодписьРуководителя = ВыгружаемыйДокумент.ПодписьРуководителя;
	Иначе
		ПодписьРуководителя = ВыгружаемыйДокумент.Организация.ПодписьРуководителя;
	КонецЕсли;
	
	Подписант = Неопределено;
	Если ЗначениеЗаполнено(ПодписьРуководителя) И ЗначениеЗаполнено(ПодписьРуководителя.ФизическоеЛицо) Тогда
		Подписант = ПодписьРуководителя.ФизическоеЛицо;
	ИначеЕсли ВыгружаемыйДокумент.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Подписант = ВыгружаемыйДокумент.Организация.ФизическоеЛицо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подписант) Тогда
		ФИОПодписанта = ФИОФизЛица(Подписант, ВыгружаемыйДокумент.Дата);
		ОсновныеСведения.Вставить("ПрПодп", "1");
		ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
		ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
		ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
	Иначе
		ОсновныеСведения.Вставить("ПрПодп", "1");
		ОсновныеСведения.Вставить("ПодпФамилия",  "");
		ОсновныеСведения.Вставить("ПодпИмя",      "");
		ОсновныеСведения.Вставить("ПодпОтчество", "");
	КонецЕсли;
КонецПроцедуры

Функция ФИОФизЛица(ФизЛицо, ДатаЗначения)
	
	ТаблицаРегистра = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо", ФизЛицо));
	Если ТаблицаРегистра.Количество() = 0 Тогда
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизЛицо, "Фамилия, Имя, Отчество", Истина);
	Иначе
		Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
		ЗаполнитьЗначенияСвойств(Результат, ТаблицаРегистра[0]);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


Функция ПолучитьКодПоСКНП(Период)
	
	Мес = Цел((Месяц(Период) - 1)/3);
	
	Если Мес = 0 Тогда
		Возврат "21";
	ИначеЕсли Мес = 1 Тогда 
		Возврат "22";
	ИначеЕсли Мес = 2 Тогда 
		Возврат "23";
	ИначеЕсли Мес = 3 Тогда 
		Возврат "24";
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

Процедура ВывестиУзел_С503_СвНП(КомпоновщикXML, ПараметрыВыгрузки)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("СвНП");
	
	ВывестиЭлементыУзловНалогоплательщика_С503(КомпоновщикXML, ПараметрыВыгрузки);
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвНП
	
КонецПроцедуры

Процедура ВывестиЭлементыУзловНалогоплательщика_С503(КомпоновщикXML, ПараметрыВыгрузки)
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СведИП");
		
		ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ПараметрыВыгрузки.ИННФЛ, "Т,12");
		ВывестиАтрибут(КомпоновщикXML, "СвГосРегИП", ПараметрыВыгрузки.СвГосРегИП, "Т,100");
		
		КомпоновщикXML.ЗаписатьНачалоЭлемента("ФИОИП");
		
		ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ФамилияИП, "Т,60");
		ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ИмяИП, "Т,60");
		ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ОтчествоИП, "Т,60");
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // ФИОИП
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведИП
		
	Иначе
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СведЮЛ");
		
		ВывестиАтрибут(КомпоновщикXML, "НаимОрг", ПараметрыВыгрузки.НаимОрг, "Т,1000");
		ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ПараметрыВыгрузки.ИННЮЛ, "Т,10");
		ВывестиАтрибут(КомпоновщикXML, "КПП", ПараметрыВыгрузки.КПП, "Т,9");
		
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СведЮЛ
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиУзел_С503_Подписант(КомпоновщикXML, ПараметрыВыгрузки)
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("Подписант");
	
	ВывестиАтрибут(КомпоновщикXML, "ПрПодп", ПараметрыВыгрузки.ПрПодп);
	
	КомпоновщикXML.ЗаписатьНачалоЭлемента("ФИО");
	
	ВывестиАтрибут(КомпоновщикXML, "Фамилия", ПараметрыВыгрузки.ПодпФамилия, "Т,60");
	ВывестиАтрибут(КомпоновщикXML, "Имя", ПараметрыВыгрузки.ПодпИмя, "Т,60");
	ВывестиНеобязательныйАтрибут(КомпоновщикXML, "Отчество", ПараметрыВыгрузки.ПодпОтчество, "Т,60");
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // ФИО
	
	Если ПараметрыВыгрузки.Свойство("НаимДокПодп") И ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПодп) Тогда
		КомпоновщикXML.ЗаписатьНачалоЭлемента("СвПред");
		ВывестиАтрибут(КомпоновщикXML, "НаимДок", ПараметрыВыгрузки.НаимДокПодп, "Т,120");
		КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвПред
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьКонецЭлемента(); // Подписант
	
КонецПроцедуры

Процедура ВывестиУзлы_СвРегНом(КомпоновщикXML, СтрокаСведений)
	
	Если СтрокаСведений.СвРегНом <> Неопределено Тогда
		Для Каждого СтрокаСведенийСвРегНом Из СтрокаСведений.СвРегНом Цикл
			КомпоновщикXML.ЗаписатьНачалоЭлемента("СвРегНом");
			
			ВывестиАтрибут(КомпоновщикXML, "РегНомПросл", СтрокаСведенийСвРегНом.РегНомПросл, "Т,29");
			ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКЕИ", СтрокаСведенийСвРегНом.ОКЕИ, "Т,4");
			
			Если ЗначениеЗаполнено(СтрокаСведенийСвРегНом.ОКЕИ) Тогда
				ВывестиАтрибут(КомпоновщикXML, "КолТовПросл", СтрокаСведенийСвРегНом.КолТовПросл, "Ч,10");
				ВывестиАтрибут(КомпоновщикXML, "СтоимТовПросл", СтрокаСведенийСвРегНом.СтоимТовПросл, "Ч,17");
			Иначе
				ВывестиНеобязательныйАтрибут(КомпоновщикXML, "КолТовПросл", СтрокаСведенийСвРегНом.КолТовПросл, "Ч,10");
				ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимТовПросл", СтрокаСведенийСвРегНом.СтоимТовПросл, "Ч,17");
			КонецЕсли;
			
			КомпоновщикXML.ЗаписатьКонецЭлемента(); // СвРегНом
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область КомпоновщикXML_Версия2

Процедура ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ОписаниеТипаАтрибута = СтрРазделить(ТипАтрибута, ",");
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьАтрибут(ИмяАтрибута, ПредставлениеЗначения);
	
КонецПроцедуры

Процедура ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
