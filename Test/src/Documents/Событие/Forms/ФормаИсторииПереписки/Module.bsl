
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДокументСсылка = Параметры.ДокументСсылка;
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.Событие") Тогда
		Отказ = Истина;
	КонецЕсли;
	
	УстановитьИзначальныйОтборПоТипуСобытия();
	
	ПредпросмотрПриСозданииНаСервере();
	
	ВывестиДеревоДокументовНаСервере();
	УстановитьУсловноеОформление();
	
	ИзменитьФормуПоНастройкамПользователя();
	НастроитьФормуМобильныйКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ЭтоИзменениеСобытияИлиКонтакта =
		ИмяСобытия = "Запись_Контрагент"
		Или ИмяСобытия = "Запись_КонтактноеЛицо"
		Или ИмяСобытия = "Запись_Лид"
		Или ИмяСобытия = "Запись_ЭлектронноеПисьмо";
	Если ЭтоИзменениеСобытияИлиКонтакта Тогда
		ОбработатьИзмененияСобытияИлиКонтакта();
		ПоказатьСодержаниеПисьма(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ПриОткрытииВебКлиент", 0, Истина);
	#ИначеЕсли МобильныйКлиент Тогда
		РазвернутьСтандартныеВетки();
	#Иначе
		РазвернутьСтандартныеВетки();
		ТекущийЭлемент = Элементы.ДеревоДокументов.ТекущийЭлемент;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПовторитьЗагрузкуСообщения(Команда)
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСообщениеСПочтовогоСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	СвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветить());
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаПереслать());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветитьВсем());
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидФормы(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзменениеНастроекФормы", ЭтотОбъект);
	
	ПараметрыВФорму = Новый Структура;
	ПараметрыВФорму.Вставить("НастройкаСпискаИстории", Истина);
	ОткрытьФорму("Документ.Событие.Форма.ФормаНастройкаСписка", ПараметрыВФорму, , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоДокументовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СодержаниеПисьма.Видимость Тогда
		ПодключитьОбработчикОжидания("ПоказатьСодержаниеПисьмаОбработчик", 0.1, Истина);
	КонецЕсли;
	
	КомандыДоступны =
		(ТекущиеДанные.ТипСобытия = ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо"));
	УстановитьДоступностьКоманд(КомандыДоступны);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаДокументСформирован(Элемент)
	
	ГипертекстКлиент.ПрименитьНастройкиОтображения(Элемент.Документ);
	ГипертекстКлиент.СтилизоватьПерепискуСЦитированием(Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ЭлектроннаяПочтаУНФКлиент.ПредпросмотрПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтотОбъект);
	
	ОбработкаНажатияДляЗагрузкиСообщения(ДанныеСобытия.Element);
	
КонецПроцедуры

&НаКлиенте
Процедура НебезопасноеСодержимоеСообщениеНажатие(Элемент)
	
	ЭлектроннаяПочтаУНФКлиент.НебезопасноеСодержимоеНажатие(
		ЭтотОбъект.Предпросмотр_СсылкаНаСобытие,
		Элементы.ТекстПисьма,
		Элементы.НебезопасноеСодержимое);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоОтбор Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ПолучитьНавигационнуюСсылку(ТекущиеДанные.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТипуСобытияПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("ВывестиДеревоДокументов", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДеревоДокументов

#Область СозданиеИстории

&НаСервере
Процедура СоздатьИсторию(Дерево, Ссылки)
	
	ДанныеДокументов = ДанныеДокументовСтруктурыПодчиненности(Ссылки);
	Если ДанныеДокументов = Неопределено Тогда
		Дерево.Строки.Очистить();
		Возврат;
	КонецЕсли;
	
	ОтборВДереве(Дерево, ДанныеДокументов);
	
	Если Дерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьИсториюПереписки(Дерево);
	
КонецПроцедуры

&НаСервере
Функция ДанныеДокументовСтруктурыПодчиненности(Ссылки)
	
	ДанныеСобытийТЗ = ДанныеСобытийЗапросом(Ссылки);
	Если ДанныеСобытийТЗ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Соответствие;
	Для Каждого Данные Из ДанныеСобытийТЗ Цикл
		Результат.Вставить(Данные.Ссылка, Данные);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДанныеСобытийЗапросом(Ссылки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументСобытие.Ссылка КАК Ссылка,
		|	ДокументСобытие.ПометкаУдаления КАК ПометкаУдаления,
		|	ДокументСобытие.ВходящееИсходящееСобытие КАК ВходящееИсходящееСобытие,
		|	ДокументСобытие.ЗагрузитьПриОткрытии КАК ЗагрузитьПриОткрытии,
		|	ДокументСобытие.Важность КАК Важность,
		|	ДокументСобытие.НачалоСобытия КАК НачалоСобытия,
		|	ДокументСобытие.Тема КАК Тема,
		|	ДокументСобытие.СписокУчастников КАК СписокУчастников,
		|	ДокументСобытие.ТипСобытия КАК ТипСобытия,
		|	ЕСТЬNULL(НаличиеФайлов.ЕстьФайлы, ЛОЖЬ) КАК ЕстьВложения,
		|	ЕСТЬNULL(ФлагиПисем.Непрочитанное, ЛОЖЬ) КАК Непрочитанное
		|ИЗ
		|	Документ.Событие КАК ДокументСобытие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО ДокументСобытие.Ссылка = НаличиеФайлов.ОбъектСФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиПисем КАК ФлагиПисем
		|		ПО ДокументСобытие.Ссылка = ФлагиПисем.Событие
		|ГДЕ
		|	ДокументСобытие.Ссылка В (&Ссылки)";
	
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаСервере
Процедура ОтборВДереве(Дерево, ДанныеДокументов)
	
	//  СтруктураОтбора - Структура:
	//  * <НаименованиеПоляРезультата> - Значение (или Тип) или Массив из Значений (или Типов)
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Ссылка", Тип("ДокументСсылка.Событие"));
	
	ТипыСобытий = Новый Массив;
	
	Если ОтборПисьма Тогда
		ТипыСобытий.Добавить(Перечисления.ТипыСобытий.ЭлектронноеПисьмо);
	КонецЕсли;
	Если ОтборЗвонки Тогда
		ТипыСобытий.Добавить(Перечисления.ТипыСобытий.ТелефонныйЗвонок);
	КонецЕсли;
	Если ОтборSMS Тогда
		ТипыСобытий.Добавить(Перечисления.ТипыСобытий.СообщениеSMS);
	КонецЕсли;
	Если ОтборВстречи Тогда
		ТипыСобытий.Добавить(Перечисления.ТипыСобытий.ЛичнаяВстреча);
	КонецЕсли;
	Если ОтборПрочее Тогда
		ТипыСобытий.Добавить(Перечисления.ТипыСобытий.Прочее);
	КонецЕсли;
	
	Если ТипыСобытий.Количество() <> 0 Тогда
		СтруктураОтбора.Вставить("ТипСобытия", ТипыСобытий);
	КонецЕсли;
	
	Колонка1 = Дерево.Колонки.Добавить("ДокументПеремещен", Новый ОписаниеТипов("Булево"));
	
	ПереместитьНеобходимыеДокументы(Дерево, Дерево, СтруктураОтбора, ДанныеДокументов);
	
	Дерево.Колонки.Удалить(Колонка1);
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьНеобходимыеДокументы(Дерево, СтрокаДерева, СтруктураОтбора, ДанныеДокументов)
	
	Индекс = 0;
	Пока Индекс < СтрокаДерева.Строки.Количество() Цикл
		
		Узел = СтрокаДерева.Строки[Индекс];
		
		Если Узел.ДокументПеремещен Тогда
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Узел.ТипСобытия) И ДанныеДокументов[Узел.Ссылка] <> Неопределено Тогда
			ЗаполнитьДанныеЭлементаДерева(Узел, ДанныеДокументов[Узел.Ссылка]);
		КонецЕсли;
		
		Если Не УзелДереваСоответствуетОтбору(Узел, СтруктураОтбора) Тогда
			ПереместитьНеобходимыеДокументы(Дерево, Узел, СтруктураОтбора, ДанныеДокументов);
			Продолжить;
		КонецЕсли;
		
		Родитель = Узел.Родитель;
		Если Родитель = Неопределено Или УзелДереваСоответствуетОтбору(Родитель, СтруктураОтбора) Тогда
			ПереместитьНеобходимыеДокументы(Дерево, Узел, СтруктураОтбора, ДанныеДокументов);
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		
		ПереместитьТекущийДокумент(Узел, Родитель, СтруктураОтбора, Дерево);
		
		ПереместитьНеобходимыеДокументы(Дерево, Узел, СтруктураОтбора, ДанныеДокументов);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	УдалитьНенужныйУзелДерева(СтрокаДерева, Дерево, СтруктураОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьТекущийДокумент(Узел, Родитель, СтруктураОтбора, Дерево)
	
	ПредыдущийРодитель = Неопределено;
	Пока Истина Цикл
		
		Если Родитель = Неопределено Или УзелДереваСоответствуетОтбору(Родитель, СтруктураОтбора) Тогда
			
			Если Родитель = Неопределено Тогда
				НоваяСтрока = Дерево.Строки.Добавить();
			Иначе
				НоваяСтрока = Родитель.Строки.Добавить();
			КонецЕсли;
			
			ЗаполнитьСтрокуДереваПоОснованию(НоваяСтрока, Узел);
			НоваяСтрока.ДокументПеремещен = Истина;
			Узел = НоваяСтрока;
			
			Прервать;
			
		КонецЕсли;
		
		ПредыдущийРодитель = Родитель;
		Родитель = Родитель.Родитель;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНенужныйУзелДерева(Узел, Дерево, СтруктураОтбора)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений")
		И Не УзелДереваСоответствуетОтбору(Узел, СтруктураОтбора) Тогда
		
		Если Узел.Родитель = Неопределено Тогда
			Дерево.Строки.Удалить(Узел);
		Иначе
			Узел.Родитель.Строки.Удалить(Узел);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелДереваСоответствуетОтбору(Узел, СтруктураОтбора)
	
	Для Каждого ПравилоОтбора Из СтруктураОтбора Цикл
		
		Если Не ЗначениеУзлаСоответствуетОтбору(Узел, ПравилоОтбора) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗначениеУзлаСоответствуетОтбору(Узел, ПравилоОтбора)
	
	ЗначениеОтбора = ПравилоОтбора.Значение;
	ЗначениеУзла = Узел[ПравилоОтбора.Ключ];
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
		
		Если ЗначениеОтбора.Количество() И ТипЗнч(ЗначениеОтбора[0]) = Тип("Тип") Тогда
			ЗначениеУзла = ТипЗнч(ЗначениеУзла);
		КонецЕсли;
		
		Если ЗначениеВМассиве(ЗначениеУзла, ЗначениеОтбора) Тогда
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("Тип") Тогда
		
		ЗначениеУзла = ТипЗнч(ЗначениеУзла);
		
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
		
		Если ТипЗнч(ЗначениеОтбора) = Тип("Строка")
			И СтрНайти(ЗначениеУзла, ЗначениеОтбора) Тогда
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗначениеУзла = ЗначениеОтбора Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПоместитьИсториюПереписки(Дерево)
	
	Результат = КопияТиповДереваВерхнегоУровня(Дерево);
	
	СтрокаЗаголовка = Результат.Строки.Добавить();
	УстановитьДанныеДляУзлаЗаголовка(СтрокаЗаголовка, ЗаголовокИсторииПереписки());
	
	Для Каждого Строка Из Дерево.Строки Цикл
		НоваяСтрока = СтрокаЗаголовка.Строки.Добавить();
		ЗаполнитьСтрокуДереваПоОснованию(НоваяСтрока, Строка);
	КонецЦикла;
	
	Дерево = Результат;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокИсторииПереписки()
	Возврат НСтр("ru = 'История переписки'");
КонецФункции

#КонецОбласти

#Область СозданиеДополнительныхГрупп

&НаСервере
Процедура СоздатьДополнительныеГруппы(Дерево, Ссылки)
	
	ЗначенияДляГрупп = ЗначенияДляСозданияДополнительныхГрупп(Дерево);
	ДобавитьГруппуНаТему(Дерево, ЗначенияДляГрупп.Тема, Ссылки);
	ДобавитьГруппуСУчастниками(Дерево, ЗначенияДляГрупп.СписокУчастников, Ссылки);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппуНаТему(Дерево, Тема, СобытияВИстории)
	
	Если ПустаяСтрока(Тема) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСобытий = ДанныеСобытийНаТемуЗапросом(Тема, СобытияВИстории);
	Если ДанныеСобытий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗаголовка = Дерево.Строки.Добавить();
	ПрефиксЗаголовка = ПрефиксЗаголовкаДополнительнойГруппы(ДанныеСобытий.Количество());
	ЧастьЗаголовкаНаТему = ЧастьЗаголовкаНаТему();
	ЗаголовокТекстом = СтрШаблон(НСтр("ru = '%1 %2 ""%3""'"), ПрефиксЗаголовка, ЧастьЗаголовкаНаТему, Тема);
	УстановитьДанныеДляУзлаЗаголовка(СтрокаЗаголовка, ЗаголовокТекстом);
	
	ДобавитьСтрокиИзМассива(СтрокаЗаголовка, ДанныеСобытий);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЧастьЗаголовкаНаТему()
	Возврат НСтр("ru = 'на тему'");
КонецФункции

&НаСервере
Функция ДанныеСобытийНаТемуЗапросом(Тема, ИсключенныеСобытия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 50
		|	ДокументСобытие.Тема КАК Тема,
		|	ДокументСобытие.Ссылка КАК Ссылка,
		|	ДокументСобытие.ПометкаУдаления КАК ПометкаУдаления,
		|	ДокументСобытие.ВходящееИсходящееСобытие КАК ВходящееИсходящееСобытие,
		|	ДокументСобытие.ЗагрузитьПриОткрытии КАК ЗагрузитьПриОткрытии,
		|	ДокументСобытие.Важность КАК Важность,
		|	ДокументСобытие.НачалоСобытия КАК НачалоСобытия,
		|	ДокументСобытие.СписокУчастников КАК СписокУчастников,
		|	ДокументСобытие.ТипСобытия КАК ТипСобытия,
		|	ЕСТЬNULL(НаличиеФайлов.ЕстьФайлы, ЛОЖЬ) КАК ЕстьВложения,
		|	ЕСТЬNULL(ФлагиПисем.Непрочитанное, ЛОЖЬ) КАК Непрочитанное
		|ИЗ
		|	Документ.Событие КАК ДокументСобытие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО ДокументСобытие.Ссылка = НаличиеФайлов.ОбъектСФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиПисем КАК ФлагиПисем
		|		ПО ДокументСобытие.Ссылка = ФлагиПисем.Событие
		|ГДЕ
		|	НЕ ДокументСобытие.Ссылка В (&ИсключенныеСобытия)
		|	И ДокументСобытие.ТипСобытия В (&ОтобранныеТипыСобытий)
		|	И ВЫБОР
		|			КОГДА ДокументСобытие.Тема = &Тема
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(ДокументСобытие.Тема КАК СТРОКА(300)) ПОДОБНО &ТемаПодобно
		|							И (НРЕГ(ВЫРАЗИТЬ(ДокументСобытие.Тема КАК СТРОКА(2))) = ""re""
		|								ИЛИ НРЕГ(ВЫРАЗИТЬ(ДокументСобытие.Тема КАК СТРОКА(2))) = ""fw"")
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументСобытие.МоментВремени УБЫВ";
	
	ФлагПервыеСКоличеством = СтрШаблон("ПЕРВЫЕ %1", КоличествоДокументовДляПоиска());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 50", ФлагПервыеСКоличеством);
	
	Запрос.УстановитьПараметр("Тема", Тема);
	ТемаПодобно = СтрШаблон("%%%1%%", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(Тема));
	Запрос.УстановитьПараметр("ТемаПодобно", ТемаПодобно);
	Запрос.УстановитьПараметр("ИсключенныеСобытия", ИсключенныеСобытия);
	Запрос.УстановитьПараметр("ОтобранныеТипыСобытий", ТипыСобытийДляПроверкиВЗапросеСогласноОтборам());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаСервере
Процедура ДобавитьГруппуСУчастниками(Дерево, СписокУчастников, СобытияВИстории)
	
	Если ПустаяСтрока(СписокУчастников) Тогда
		Возврат;
	КонецЕсли;
	
	Участники = ЭлектроннаяПочтаУНФ.ЭлектронныеПочтыИзСпискаУчастников(СписокУчастников);
	ДанныеСобытий = ДанныеСобытийСУчастникамиЗапросом(Участники, СобытияВИстории);
	Если ДанныеСобытий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗаголовка = Дерево.Строки.Добавить();
	ПрефиксЗаголовка = ПрефиксЗаголовкаДополнительнойГруппы(ДанныеСобытий.Количество());
	
	КоличествоКонтактов = Участники.Количество();
	Если КоличествоКонтактов = 1 Тогда
		ЗаголовокТекстом = СтрШаблон(НСтр("ru = '%1 с ""%2""'"), ПрефиксЗаголовка, СписокУчастников);
	Иначе
		ЗаголовокТекстом = СтрШаблон(
			НСтр("ru = '%1 с %3 участниками: ""%2""'"), ПрефиксЗаголовка, СписокУчастников, КоличествоКонтактов);
	КонецЕсли;
	
	УстановитьДанныеДляУзлаЗаголовка(СтрокаЗаголовка, ЗаголовокТекстом);
	
	ДобавитьСтрокиИзМассива(СтрокаЗаголовка, ДанныеСобытий);
	
КонецПроцедуры

&НаСервере
Функция ДанныеСобытийСУчастникамиЗапросом(Участники, ИсключенныеСобытия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 50
		|	ДокументСобытие.Ссылка КАК Ссылка,
		|	ДокументСобытие.ПометкаУдаления КАК ПометкаУдаления,
		|	ДокументСобытие.ВходящееИсходящееСобытие КАК ВходящееИсходящееСобытие,
		|	ДокументСобытие.ЗагрузитьПриОткрытии КАК ЗагрузитьПриОткрытии,
		|	ДокументСобытие.Важность КАК Важность,
		|	ДокументСобытие.НачалоСобытия КАК НачалоСобытия,
		|	ДокументСобытие.ТипСобытия КАК ТипСобытия,
		|	ВЫРАЗИТЬ(ДокументСобытие.Тема КАК СТРОКА(1024)) КАК Тема,
		|	ВЫРАЗИТЬ(ДокументСобытие.СписокУчастников КАК СТРОКА(1024)) КАК СписокУчастников,
		|	ЕСТЬNULL(НаличиеФайлов.ЕстьФайлы, ЛОЖЬ) КАК ЕстьВложения,
		|	ЕСТЬNULL(ФлагиПисем.Непрочитанное, ЛОЖЬ) КАК Непрочитанное
		|ИЗ
		|	Документ.Событие КАК ДокументСобытие
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Событие.Участники КАК СобытиеУчастники
		|		ПО ДокументСобытие.Ссылка = СобытиеУчастники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО ДокументСобытие.Ссылка = НаличиеФайлов.ОбъектСФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиПисем КАК ФлагиПисем
		|		ПО ДокументСобытие.Ссылка = ФлагиПисем.Событие
		|ГДЕ
		|	НЕ ДокументСобытие.Ссылка В (&ИсключенныеСобытия)
		|	И ДокументСобытие.ТипСобытия В(&ОтобранныеТипыСобытий)
		|	И СобытиеУчастники.КакСвязаться В(&Участники)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументСобытие.Ссылка,
		|	ДокументСобытие.ПометкаУдаления,
		|	ДокументСобытие.ВходящееИсходящееСобытие,
		|	ДокументСобытие.ЗагрузитьПриОткрытии,
		|	ДокументСобытие.Важность,
		|	ДокументСобытие.НачалоСобытия,
		|	ДокументСобытие.ТипСобытия,
		|	ВЫРАЗИТЬ(ДокументСобытие.Тема КАК СТРОКА(1024)),
		|	ВЫРАЗИТЬ(ДокументСобытие.СписокУчастников КАК СТРОКА(1024)),
		|	ЕСТЬNULL(НаличиеФайлов.ЕстьФайлы, ЛОЖЬ),
		|	ЕСТЬNULL(ФлагиПисем.Непрочитанное, ЛОЖЬ)
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(СобытиеУчастники.КакСвязаться) = &КоличествоУчастников
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументСобытие.МоментВремени УБЫВ";
	
	ФлагПервыеСКоличеством = СтрШаблон("ПЕРВЫЕ %1", КоличествоДокументовДляПоиска());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 50", ФлагПервыеСКоличеством);
	
	Запрос.УстановитьПараметр("Участники", Участники);
	Запрос.УстановитьПараметр("КоличествоУчастников", Участники.Количество());
	Запрос.УстановитьПараметр("ИсключенныеСобытия", ИсключенныеСобытия);
	Запрос.УстановитьПараметр("ОтобранныеТипыСобытий", ТипыСобытийДляПроверкиВЗапросеСогласноОтборам());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаСервере
Функция ТипыСобытийДляПроверкиВЗапросеСогласноОтборам()
	
	Результат = Новый Массив;
	
	Если ОтборПисьма Тогда
		Результат.Добавить(Перечисления.ТипыСобытий.ЭлектронноеПисьмо);
	КонецЕсли;
	Если ОтборЗвонки Тогда
		Результат.Добавить(Перечисления.ТипыСобытий.ТелефонныйЗвонок);
	КонецЕсли;
	Если ОтборSMS Тогда
		Результат.Добавить(Перечисления.ТипыСобытий.СообщениеSMS);
	КонецЕсли;
	Если ОтборВстречи Тогда
		Результат.Добавить(Перечисления.ТипыСобытий.ЛичнаяВстреча);
	КонецЕсли;
	Если ОтборПрочее Тогда
		Результат.Добавить(Перечисления.ТипыСобытий.Прочее);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПрефиксЗаголовкаДополнительнойГруппы(КоличествоСтрокВДереве)
	
	КоличествоДокументовДляПоиска = КоличествоДокументовДляПоиска();
	Если КоличествоСтрокВДереве >= КоличествоДокументовДляПоиска Тогда
		НачалоПредставления = НСтр("ru = 'Последние 50'");
	Иначе
		НачалоПредставления = НСтр("ru = 'Другие'");
	КонецЕсли;
	
	Если КоличествоСтрокВДереве >= КоличествоДокументовДляПоиска Тогда
		
		ПредставлениеТипаСобытия = ПредставлениеТипаСобытия(
			НСтр("ru = 'событий'"),
			НСтр("ru = 'писем'"),
			НСтр("ru = 'звонков'"),
			НСтр("ru = 'sms'"),
			НСтр("ru = 'встреч'"),
			НСтр("ru = 'прочих событий'"));
		
	Иначе
		
		ПредставлениеТипаСобытия = ПредставлениеТипаСобытия(
			НСтр("ru = 'события'"),
			НСтр("ru = 'письма'"),
			НСтр("ru = 'звонки'"),
			НСтр("ru = 'sms'"),
			НСтр("ru = 'встречи'"),
			НСтр("ru = 'прочие события'"));
		
	КонецЕсли;
	
	Возврат СтрШаблон("%1 %2", НачалоПредставления, ПредставлениеТипаСобытия);
	
КонецФункции

&НаСервере
Функция КоличествоДокументовДляПоиска()
	Возврат 50;
КонецФункции

&НаСервере
Функция ПредставлениеТипаСобытия(ВсеСобытия, Письма, Звонки, SMS, Встречи, Прочее)
	
	ПредставлениеСобытия = "";
	
	Если ОтборПисьма Тогда
		ПредставлениеСобытия = Письма;
	КонецЕсли;
	
	Если ОтборЗвонки Тогда
		Если Не ПустаяСтрока(ПредставлениеСобытия) Тогда
			Возврат ВсеСобытия;
		Иначе
			ПредставлениеСобытия = Звонки;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборSMS Тогда
		Если Не ПустаяСтрока(ПредставлениеСобытия) Тогда
			Возврат ВсеСобытия;
		Иначе
			ПредставлениеСобытия = SMS;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборВстречи Тогда
		Если Не ПустаяСтрока(ПредставлениеСобытия) Тогда
			Возврат ВсеСобытия;
		Иначе
			ПредставлениеСобытия = Встречи;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборПрочее Тогда
		Если Не ПустаяСтрока(ПредставлениеСобытия) Тогда
			Возврат ВсеСобытия;
		Иначе
			ПредставлениеСобытия = Прочее;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПредставлениеСобытия) Тогда
		ПредставлениеСобытия = ВсеСобытия;
	КонецЕсли;
	
	Возврат ПредставлениеСобытия;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокиИзМассива(УзелДерева, МассивСДаннымиСтрок)
	
	Для Каждого Данные Из МассивСДаннымиСтрок Цикл
		
		Строка = УзелДерева.Строки.Добавить();
		ЗаполнитьДанныеЭлементаДерева(Строка, Данные);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КопияТиповДереваВерхнегоУровня(Дерево)
	
	Результат = Новый ДеревоЗначений;
	
	Для Каждого Колонка Из Дерево.Колонки Цикл
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуДереваПоОснованию(Приемник, Источник)
	
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	
	Для Каждого Строка Из Источник.Строки Цикл
		НоваяСтрока = Приемник.Строки.Добавить();
		ЗаполнитьСтрокуДереваПоОснованию(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначенияДляСозданияДополнительныхГрупп(Дерево)
	
	Результат = Новый Структура;
	
	Данные = Неопределено;
	ПоляДокументаВДереве(ДокументСсылка, Дерево, "Тема, СписокУчастников", Данные);
	
	Если Не Данные.Количество() Тогда
		Данные = ПоляДляОтбораЗапросом(ДокументСсылка);
	КонецЕсли;
	
	Результат.Вставить("Тема", ОчищеннаяТемаОтПрефиксов(Данные.Тема));
	Результат.Вставить("СписокУчастников", СокрЛП(Данные.СписокУчастников));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоляДляОтбораЗапросом(Событие)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Событие, "Тема, СписокУчастников");
КонецФункции

&НаСервере
Функция ОчищеннаяТемаОтПрефиксов(Тема)
	
	Результат = Тема;
	Пока Истина Цикл
		
		НачалоСтроки = НРег(Сред(Результат, 1, 4));
		Если НачалоСтроки = "re: " Или НачалоСтроки = "fw: " Тогда
			Результат = Сред(Результат, 5);
			Продолжить;
		КонецЕсли;
		
		Если Сред(Результат, 1, 5) = "fwd: " Тогда
			Результат = Сред(Результат, 6);
			Продолжить;
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьДанныеДляУзлаЗаголовка(УзелЗаголовок, ЗаголовокТекстом)
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		УзелЗаголовок.ДатаСтрокой = ЗаголовокТекстом;
	Иначе
		УзелЗаголовок.ЗаголовокОтбора = ЗаголовокТекстом;
	КонецЕсли;
	
	УзелЗаголовок.Картинка = -1;
	УзелЗаголовок.ВажностьЧислом = 1;
	УзелЗаголовок.ЭтоОтбор = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДереваДокументов

&НаСервере
Процедура ЗаполнитьДанныеЭлементаДерева(Узел, Данные)
	
	ЗаполнитьЗначенияСвойств(Узел, Данные, , "ЕстьВложения");
	
	Узел.ЕстьВложения = ?(Данные.ЕстьВложения, 1, 0);
	
	Тема = Узел.Тема;
	Если ПустаяСтрока(Тема) Тогда
		Тема = НСтр("ru = '<Без темы>'");
	КонецЕсли;
	Узел.Тема = Тема;
	
	Если Данные.НачалоСобытия = '00010101' Тогда
		Узел.ДатаСтрокой = НСтр("ru = 'Черновик'");
	Иначе
		Узел.ДатаСтрокой = Строка(Данные.НачалоСобытия);
	КонецЕсли;
	
	УстановитьКартинку(Узел, Данные);
	УстановитьВажностьЧислом(Узел);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинку(Узел, Данные)
	
	НомерКартинки = 0;
	
	Если Не Данные.ПометкаУдаления Тогда
		
		Если Данные.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
			
			Если Данные.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
				НомерКартинки = 0;
			Иначе
				НомерКартинки = 1;
			КонецЕсли;
			
		ИначеЕсли Данные.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
			
			Если Данные.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
				НомерКартинки = 2;
			Иначе
				НомерКартинки = 3;
			КонецЕсли;
			
		ИначеЕсли Данные.ТипСобытия = Перечисления.ТипыСобытий.ЛичнаяВстреча Тогда
			НомерКартинки = 5;
		ИначеЕсли Данные.ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
			НомерКартинки = 6;
		ИначеЕсли Данные.ТипСобытия = Перечисления.ТипыСобытий.Прочее Тогда
			НомерКартинки = 7;
		ИначеЕсли Данные.ТипСобытия = Перечисления.ТипыСобытий.Запись Тогда
			НомерКартинки = 8;
		Иначе
			НомерКартинки = -1;
		КонецЕсли;
		
		Узел.Картинка = НомерКартинки;
		Возврат;
		
	КонецЕсли;
	
	Если Данные.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		
		Если Данные.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			НомерКартинки = 9;
		Иначе
			НомерКартинки = 10;
		КонецЕсли;
		
	ИначеЕсли Данные.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
		
		Если Данные.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			НомерКартинки = 11;
		Иначе
			НомерКартинки = 12;
		КонецЕсли;
		
	ИначеЕсли Данные.ТипСобытия = Перечисления.ТипыСобытий.ЛичнаяВстреча Тогда
		НомерКартинки = 14;
	ИначеЕсли Данные.ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
		НомерКартинки = 15;
	ИначеЕсли Данные.ТипСобытия = Перечисления.ТипыСобытий.Прочее Тогда
		НомерКартинки = 16;
	ИначеЕсли Данные.ТипСобытия = Перечисления.ТипыСобытий.Запись Тогда
		НомерКартинки = 17;
	Иначе
		НомерКартинки = -1;
	КонецЕсли;
	
	Узел.Картинка = НомерКартинки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВажностьЧислом(Узел)
	
	Если Узел.Важность = Перечисления.ВариантыВажности.Обычная Тогда
		Узел.ВажностьЧислом = 1;
	ИначеЕсли Узел.Важность = Перечисления.ВариантыВажности.Высокая Тогда
		Узел.ВажностьЧислом = 2;
	Иначе
		Узел.ВажностьЧислом = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПоляДокументаВДереве(Ссылка, Дерево, СписокПолей, Результат = Неопределено, РезультатПолучен = Ложь)
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Строки = Дерево.Строки;
	Для Каждого Строка Из Строки Цикл
		
		Если Строка.Ссылка = Ссылка Тогда
			
			СписокПолей = СтрРазделить(СписокПолей, ", ", Ложь);
			Для Каждого Поле Из СписокПолей Цикл
				Результат.Вставить(Поле, Строка[Поле]);
			КонецЦикла;
			РезультатПолучен = Истина;
			Возврат Результат;
			
		КонецЕсли;
		
		ПоляДокументаВДереве(Ссылка, Строка, СписокПолей, Результат, РезультатПолучен);
		
		Если РезультатПолучен Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура УстановитьИзначальныйОтборПоТипуСобытия()
	
	ТипСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ТипСобытия");
	
	Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		ОтборПисьма = Истина;
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
		ОтборЗвонки = Истина;
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
		ОтборSMS = Истина;
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытий.ЛичнаяВстреча Тогда
		ОтборВстречи = Истина;
	Иначе
		ОтборПрочее = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДеревоДокументов()
	
	ВывестиДеревоДокументовНаСервере();
	
	Если ДеревоДокументов.ПолучитьЭлементы().Количество() Тогда
		
		РазвернутьСтандартныеВетки();
		
		#Если Не МобильныйКлиент Тогда
			Элементы.ДеревоДокументовЗаголовокОтбора.Видимость = Истина;
			ТекущийЭлемент = Элементы.ДеревоДокументов.ТекущийЭлемент;
		#КонецЕсли
		
	Иначе
		
		Элементы.ДеревоДокументовЗаголовокОтбора.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДеревоДокументовНаСервере()
	
	ДеревоДокументов.ПолучитьЭлементы().Очистить();
	
	УжеВСписке = Новый Соответствие;
	Дерево = ДеревоДокументов;
	ДокументыУНФ.ЗаполнитьДеревоСтруктуройПодчинения(ДокументСсылка, Дерево, УжеВСписке, Истина);
	
	Дерево = РеквизитФормыВЗначение("ДеревоДокументов");
	
	Ссылки = СсылкиПоРезультатуИзСтруктурыПодчиненности(УжеВСписке);
	СоздатьИсторию(Дерево, Ссылки);
	СоздатьДополнительныеГруппы(Дерево, Ссылки);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДокументов");
	
	УстановитьТекущееСобытие(ДокументСсылка);
	
КонецПроцедуры

&НаСервере
Функция СсылкиПоРезультатуИзСтруктурыПодчиненности(УжеВСписке)
	
	Результат = Новый Массив;
	
	Для Каждого КлючИЗначение Из УжеВСписке Цикл
		Результат.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьТекущееСобытие(Событие)
	
	Индекс = 0;
	НайтиИндексУзлаПоСсылке(Событие, ДеревоДокументов, Индекс);
	
	ЭлементыДерева = ДеревоДокументов.ПолучитьЭлементы();
	Если Индекс = 0 И Не ЭлементыДерева.Количество() = 0 Тогда
		ПервыйДокумент = ЭлементыДерева[0].ПолучитьЭлементы()[0].Ссылка;
		НайтиИндексУзлаПоСсылке(ПервыйДокумент, ДеревоДокументов, Индекс);
	КонецЕсли;
	
	Элементы.ДеревоДокументов.ТекущаяСтрока = Индекс;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево()
	
	ЭлементыДереваДокументов = ДеревоДокументов.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДереваДокументов Цикл
		СвернутьВеткуДерева(ЭлементДерева);
		Элементы.ДеревоДокументов.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВеткуДерева(Дерево)
	
	Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
		Элементы.ДеревоДокументов.Свернуть(ИдентификаторСтроки);
		СвернутьВеткуДерева(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтандартныеВетки()
	
	ЭлементыДерева = ДеревоДокументов.ПолучитьЭлементы();
	
	#Если МобильныйКлиент Тогда
		ПолеДляПоиска = "ДатаСтрокой";
	#Иначе
		ПолеДляПоиска = "ЗаголовокОтбора";
	#КонецЕсли
	
	ЗаголовокИсторииПереписки = ЗаголовокИсторииПереписки();
	ЧастьЗаголовкаНаТему = ЧастьЗаголовкаНаТему();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.ЭтоОтбор
			И (СтрНайти(ЭлементДерева[ПолеДляПоиска], ЗаголовокИсторииПереписки)
			Или СтрНайти(ЭлементДерева[ПолеДляПоиска], ЧастьЗаголовкаНаТему)) Тогда
			
			ИдентификаторСтроки = ЭлементДерева.ПолучитьИдентификатор();
			Элементы.ДеревоДокументов.Развернуть(ИдентификаторСтроки, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	
	УзлыДерева = ДеревоДокументов.ПолучитьЭлементы();
	Для каждого Узел Из УзлыДерева Цикл
		ИдентификаторСтроки = Узел.ПолучитьИдентификатор();
		Элементы.ДеревоДокументов.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СсылкиВДереве(Знач ДеревоЗначенийДокументов, Ссылки = Неопределено)
	
	Если Ссылки = Неопределено Тогда
		Ссылки = Новый Массив;
	КонецЕсли;
	
	Для Каждого Узел Из ДеревоЗначенийДокументов.Строки Цикл
		
		Ссылки.Добавить(Узел.Ссылка);
		СсылкиВДереве(Узел, Ссылки);
		
	КонецЦикла;
	
	Возврат Ссылки;
	
КонецФункции

&НаСервере
Процедура НайтиИндексУзлаПоСсылке(Ссылка, Дерево, Индекс = 0, ИндексНайден = Ложь)
	
	Строки = Дерево.ПолучитьЭлементы();
	Для Каждого Строка Из Строки Цикл
		
		Если Строка.Ссылка = Ссылка Тогда
			Индекс = Строка.ПолучитьИдентификатор();
			ИндексНайден = Истина;
			Прервать;
		КонецЕсли;
		
		НайтиИндексУзлаПоСсылке(Ссылка, Строка, Индекс, ИндексНайден);
		
		Если ИндексНайден Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция УзелПоСобытию(Событие, Знач Дерево, Результат = Неопределено, РезультатНайден = Ложь)
	
	Для Каждого Узел Из Дерево.ПолучитьЭлементы() Цикл
		
		Если Узел.Ссылка = Событие Тогда
			РезультатНайден = Истина;
			Результат = Узел;
			Прервать;
		КонецЕсли;
		
		УзелПоСобытию(Событие, Узел, Результат, РезультатНайден);
		
		Если РезультатНайден Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция УзелПоСобытиюНаСервере(Событие, Знач Дерево, Результат = Неопределено, РезультатНайден = Ложь)
	
	Для Каждого Узел Из Дерево.ПолучитьЭлементы() Цикл
		
		Если Узел.Ссылка = Событие Тогда
			РезультатНайден = Истина;
			Результат = Узел;
			Прервать;
		КонецЕсли;
		
		УзелПоСобытиюНаСервере(Событие, Узел, Результат, РезультатНайден);
		
		Если РезультатНайден Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ОформляемыеПоля = Новый Массив;
	
	// Установка недоступности на документы с пометкой удаления
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовДатаСтрокой.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовСписокУчастников.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовТема.Имя);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ОформляемыеПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(
		НовоеУсловноеОформление.Отбор, "ДеревоДокументов.ПометкаУдаления", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(
		НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
	
	// Непрочитанные
	ОформляемыеПоля.Очистить();
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовДатаСтрокой.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовСписокУчастников.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовТема.Имя);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ОформляемыеПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(
		НовоеУсловноеОформление.Отбор, "ДеревоДокументов.Непрочитанное", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(
		НовоеУсловноеОформление, "Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	// Установка оформления для заголовков отборов
	ОформляемыеПоля.Очистить();
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовДатаСтрокой.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовТема.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовСписокУчастников.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовВажностьЧислом.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовЕстьВложения.Имя);
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовНепрочитанное.Имя);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ОформляемыеПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(
		НовоеУсловноеОформление.Отбор, "ДеревоДокументов.ЭтоОтбор", Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(
		НовоеУсловноеОформление, "Видимость", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(
		НовоеУсловноеОформление, "Отображать", Ложь);
	
	// Установка оформления для обычных колонок
	ОформляемыеПоля.Очистить();
	ОформляемыеПоля.Добавить(Элементы.ДеревоДокументовЗаголовокОтбора.Имя);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, ОформляемыеПоля);
	
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(
		НовоеУсловноеОформление.Отбор, "ДеревоДокументов.ЭтоОтбор", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(
		НовоеУсловноеОформление, "Видимость", Ложь);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(
		НовоеУсловноеОформление, "Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Функция КоличествоСтрокВДереве(Дерево, Результат = 0)
	
	Результат = Результат + Дерево.Строки.Количество();
	
	Для Каждого Строка Из Дерево.Строки Цикл
		КоличествоСтрокВДереве(Строка, Результат);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Предпросмотр

&НаСервере
Процедура ПредпросмотрПриСозданииНаСервере()
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПочтаУНФ.ПредпросмотрПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСодержаниеПисьмаОбработчик()
	ПоказатьСодержаниеПисьма(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСодержаниеПисьма(ПринудительноОбновитьСодержание = Ложь)
	
	Если Не НужноПоказатьСодержаниеПисьма(ПринудительноОбновитьСодержание) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные.ЗагрузитьПриОткрытии Тогда
		ЭлектроннаяПочтаУНФКлиент.ДобавитьКомандуЗагрузкиПисьма(ТекстПисьма);
	Иначе
		ПоказатьСодержаниеПисьмаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НужноПоказатьСодержаниеПисьма(ПринудительноОбновитьСодержание = Ложь)
	
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#Если МобильныйКлиент Тогда
		Возврат Ложь;
	#КонецЕсли
	
	Ссылка = ТекущиеДанные.Ссылка;
	Если Ссылка = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПринудительноОбновитьСодержание И Ссылка = ЭтотОбъект.Предпросмотр_СсылкаНаСобытие Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтотОбъект.Предпросмотр_СсылкаНаСобытие = Ссылка;
	Элементы.НебезопасноеСодержимое.Видимость = Ложь;
	
	Если ТекущиеДанные.ПисьмоЗагружается Тогда
		Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.Загрузка;
		Возврат Ложь;
	КонецЕсли;
	
	Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.ТекстHTML;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПоказатьСодержаниеПисьмаНаСервере()
	
	ТекущиеДанные = ДеревоДокументов.НайтиПоИдентификатору(Элементы.ДеревоДокументов.ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗаполнения = ЭлектроннаяПочтаУНФ.ЗаполнитьПредпросмотр(
		ЭтотОбъект.Предпросмотр_СсылкаНаСобытие,
		УникальныйИдентификатор,
		ТекстПисьма,
		ЭтотОбъект.Предпросмотр_СсылкаНаСобытие <> ДокументСсылка);
	
	ЭтотОбъект.Предпросмотр_ИсточникПривлечения = РезультатЗаполнения.ИсточникПривлечения;
	
	Элементы.НебезопасноеСодержимое.Видимость = РезультатЗаполнения.НежелательныеHTTPОчищены;
	Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.ТекстHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСообщениеСПочтовогоСервера()
	
	Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.Загрузка;
	
	УстановитьДоступностьКоманд(Ложь);
	
	Задание = ЗаданиеЗагрузитьСообщениеСПочтовогоСервера(
		ЭтотОбъект.Предпросмотр_СсылкаНаСобытие,
		УникальныйИдентификатор,
		ЭтотОбъект.Предпросмотр_ИдентификаторЗаданияЗагрузки);
	
	ЭтотОбъект.Предпросмотр_ИдентификаторЗаданияЗагрузки = Задание.ИдентификаторЗадания;
	
	Узел = УзелПоСобытию(ЭтотОбъект.Предпросмотр_СсылкаНаСобытие, ДеревоДокументов);
	Узел.ПисьмоЗагружается = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗагружаемоеСобытие", ЭтотОбъект.Предпросмотр_СсылкаНаСобытие);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработчикЗагрузкиСообщения", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеЗагрузитьСообщениеСПочтовогоСервера(
	Знач СсылкаНаСобытие,
	Знач УникальныйИдентификатор,
	Знач ИдентификаторПредыдущегоЗадания)
	
	Возврат ЭлектроннаяПочтаУНФ.ЗагрузитьСообщениеСПочтовогоСервера(
		СсылкаНаСобытие, УникальныйИдентификатор, , , ИдентификаторПредыдущегоЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОбработчикЗагрузкиСообщения(Результат, Параметры) Экспорт
	
	УстановитьДоступностьКоманд(Истина);
	
	ЗагружаемоеСобытие = Неопределено;
	Параметры.Свойство("ЗагружаемоеСобытие", ЗагружаемоеСобытие);
	Если ЗагружаемоеСобытие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Узел = УзелПоСобытию(ЗагружаемоеСобытие, ДеревоДокументов);
	Узел.ПисьмоЗагружается = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Статус = Неопределено;
	Если Не Результат.Свойство("Статус", Статус) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменятьТекстПисьма = (ЗагружаемоеСобытие = ЭтотОбъект.Предпросмотр_СсылкаНаСобытие);
	
	Если Статус = "Ошибка" Тогда
		
		Если ИзменятьТекстПисьма Тогда
			
			Элементы.СодержаниеПисьма.ТекущаяСтраница = Элементы.ПроизошлаОшибкаПриЗагрузкеПисьма;
			ОписаниеОшибкиЗагрузкиПисьма = Результат.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	Если Статус = "Выполнено" Тогда
		
		ОбработатьЗагруженноеСПочтовогоСервераСообщение(
			ЗагружаемоеСобытие, Результат.АдресРезультата, ИзменятьТекстПисьма);
		
		ОповеститьОбИзменении(ЗагружаемоеСобытие);
		
		Если ИзменятьТекстПисьма Тогда
			
			ДокументHTML = Элементы.ТекстПисьма.Документ;
			Если ДокументHTML <> Неопределено Тогда
				ДокументHTML.documentElement.innerHTML = ТекстПисьма;
				ГипертекстКлиент.ПрименитьНастройкиОтображения(ДокументHTML);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗагруженноеСПочтовогоСервераСообщение(
	Знач ЗагружаемоеСобытие,
	Знач АдресРезультата,
	Знач ИзменятьТекстПисьма)
	
	ЭлектроннаяПочтаУНФ.ОбработатьЗагруженноеЧерезПредпросмотрСообщение(
		АдресРезультата,
		ЗагружаемоеСобытие,
		УникальныйИдентификатор,
		ТекстПисьма,
		ИзменятьТекстПисьма);
	
	ОбработатьИзменениеСобытияНаСервере(ЗагружаемоеСобытие);
	Если ИзменятьТекстПисьма Тогда
		ПоказатьСодержаниеПисьмаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(Доступны)
	
	Элементы.Ответить.Доступность = Доступны;
	Элементы.ОтветитьВсем.Доступность = Доступны;
	Элементы.Переслать.Доступность = Доступны;
	Элементы.ДеревоДокументовКонтекстноеМенюОтветитьВсем.Доступность = Доступны;
	Элементы.ДеревоДокументовКонтекстноеМенюПереслать.Доступность = Доступны;
	Элементы.ДеревоДокументовКонтекстноеМенюОтветить.Доступность = Доступны;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНажатияДляЗагрузкиСообщения(Элемент)
	
	Если Элемент.nodeName = "#document" Или Элемент.nodeName = Неопределено
		Или Не Элемент.classList.contains("preview-download") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ЗагрузитьСообщениеСПочтовогоСервера", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриОткрытииВебКлиент()
	
	РазвернутьСтандартныеВетки();
	ТекущийЭлемент = Элементы.ДеревоДокументов.ТекущийЭлемент;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуМобильныйКлиент()
	
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СодержаниеПисьма.Видимость = Ложь;
	Элементы.ДеревоДокументовЗаголовокОтбора.Видимость = Ложь;
	Элементы.НастроитьВидФормы.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеВМассиве(Значение, Массив)
	
	Для Каждого Элемент Из Массив Цикл
		Если Элемент = Значение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеНастроекФормы(Результат, ДополнительныеПараметры) Экспорт
	
	ИзменитьФормуПоНастройкамПользователя();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФормуПоНастройкамПользователя()
	
	НастройкиСпискаИсторииПереписки = ХранилищеСистемныхНастроек.Загрузить(
		"НастройкиСпискаИсторииПереписки", "ГруппаОтбораСписокПисем_НастройкиСпискаИсторииПереписки");
	
	// Пока нет настроек, которые были бы важны для мобильного клиента
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(НастройкиСпискаИсторииПереписки) = Тип("Структура") Тогда
		ОтображениеЭлементовДляПредросмотраСправа();
		Возврат;
	КонецЕсли;
	
	ВидПредпросмотраПисьма = Неопределено;
	НастройкиСпискаИсторииПереписки.Свойство("ВидПредпросмотраПисьма", ВидПредпросмотраПисьма);
	Если ВидПредпросмотраПисьма = Неопределено Тогда
		ВидПредпросмотраПисьма = "Снизу";
	КонецЕсли;
	
	Если ВидПредпросмотраПисьма = "Снизу" Тогда
		
		Элементы.СодержаниеПисьма.Видимость = Истина;
		Элементы.ОтображениеДокументов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.НебезопасноеСодержимоеСообщение.АвтоМаксимальнаяШирина = Ложь;
		
		Элементы.Переместить(Элементы.СодержаниеПисьма, Элементы.ГруппаСворачиваемаяСодержаниеПисьма);
		Элементы.ГруппаСворачиваемаяСодержаниеПисьма.Показать();
		
	ИначеЕсли ВидПредпросмотраПисьма = "Справа" Тогда
		
		ОтображениеЭлементовДляПредросмотраСправа();
		
	Иначе
		
		Элементы.СодержаниеПисьма.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтображениеЭлементовДляПредросмотраСправа()
	
	Элементы.СодержаниеПисьма.Видимость = Истина;
	Элементы.ОтображениеДокументов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.Переместить(Элементы.СодержаниеПисьма, Элементы.ОтображениеДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьПереслать(ПараметрКоманды)
	
	Если Элементы.ДеревоДокументов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПочтаУНФКлиент.ОтветитьПереслать(
		ПараметрКоманды, Элементы.ДеревоДокументов.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияСобытияИлиКонтакта()
	
	Если НужноПоказатьСодержаниеПисьма() Тогда
		ОбработатьИзмененияСобытияИлиКонтактаНаСервере();
	Иначе
		ОбработатьИзменениеСобытияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзмененияСобытияИлиКонтактаНаСервере()
	
	ПоказатьСодержаниеПисьмаНаСервере();
	ОбработатьИзменениеСобытияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСобытияНаСервере(Знач Событие = Неопределено)
	
	Если Событие = Неопределено Тогда
		
		ТекущиеДанные = ДеревоДокументов.НайтиПоИдентификатору(Элементы.ДеревоДокументов.ТекущаяСтрока);
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Событие = ТекущиеДанные.Ссылка;
		
	КонецЕсли;
	
	Данные = ДанныеСобытияЗапросом(Событие);
	Если Данные <> Неопределено Тогда
		Узел = УзелПоСобытиюНаСервере(Событие, ДеревоДокументов);
		ЗаполнитьДанныеЭлементаДерева(Узел, Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеСобытияЗапросом(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументСобытие.Ссылка КАК Ссылка,
		|	ДокументСобытие.ПометкаУдаления КАК ПометкаУдаления,
		|	ДокументСобытие.ВходящееИсходящееСобытие КАК ВходящееИсходящееСобытие,
		|	ДокументСобытие.ЗагрузитьПриОткрытии КАК ЗагрузитьПриОткрытии,
		|	ДокументСобытие.Важность КАК Важность,
		|	ДокументСобытие.НачалоСобытия КАК НачалоСобытия,
		|	ДокументСобытие.Тема КАК Тема,
		|	ДокументСобытие.СписокУчастников КАК СписокУчастников,
		|	ДокументСобытие.ТипСобытия КАК ТипСобытия,
		|	ЕСТЬNULL(НаличиеФайлов.ЕстьФайлы, ЛОЖЬ) КАК ЕстьВложения,
		|	ЕСТЬNULL(ФлагиПисем.Непрочитанное, ЛОЖЬ) КАК Непрочитанное
		|ИЗ
		|	Документ.Событие КАК ДокументСобытие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
		|		ПО ДокументСобытие.Ссылка = НаличиеФайлов.ОбъектСФайлами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиПисем КАК ФлагиПисем
		|		ПО ДокументСобытие.Ссылка = ФлагиПисем.Событие
		|ГДЕ
		|	ДокументСобытие.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти
